
smart-cows-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800ce10  0800ce10  0001ce10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d47c  0800d47c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d47c  0800d47c  0001d47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d484  0800d484  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d484  0800d484  0001d484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d488  0800d488  0001d488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  200001e0  0800d66c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0800d66c  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174c4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033f5  00000000  00000000  000376d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0003bd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae2a  00000000  00000000  0003ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d91  00000000  00000000  00067c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105149  00000000  00000000  0007e9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183b3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e8  00000000  00000000  00183b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cdf4 	.word	0x0800cdf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cdf4 	.word	0x0800cdf4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <MX_ADC1_Init+0xfc>)
 800103c:	4a36      	ldr	r2, [pc, #216]	; (8001118 <MX_ADC1_Init+0x100>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_ADC1_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <MX_ADC1_Init+0xfc>)
 800105a:	2204      	movs	r2, #4
 800105c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001060:	2200      	movs	r2, #0
 8001062:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001066:	2200      	movs	r2, #0
 8001068:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_ADC1_Init+0xfc>)
 800106c:	2201      	movs	r2, #1
 800106e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_ADC1_Init+0xfc>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_ADC1_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ADC1_Init+0xfc>)
 800109c:	221c      	movs	r2, #28
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010b6:	f001 f91d 	bl	80022f4 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010c0:	f000 fb2c 	bl	800171c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010d0:	f002 f98e 	bl	80033f0 <HAL_ADCEx_MultiModeConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010da:	f000 fb1f 	bl	800171c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC1_Init+0x104>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010e6:	2307      	movs	r3, #7
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	237f      	movs	r3, #127	; 0x7f
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010fc:	f001 fbf0 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8001106:	f000 fb09 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001fc 	.word	0x200001fc
 8001118:	50040000 	.word	0x50040000
 800111c:	04300002 	.word	0x04300002

08001120 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ac      	sub	sp, #176	; 0xb0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2288      	movs	r2, #136	; 0x88
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f006 fd23 	bl	8007b8c <memset>
  if(adcHandle->Instance==ADC1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_ADC_MspInit+0xc8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d146      	bne.n	80011de <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001154:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800115a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 32;
 8001166:	2320      	movs	r3, #32
 8001168:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fc29 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800118c:	f000 fac6 	bl	800171c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 8001196:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800119a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c6:	230b      	movs	r3, #11
 80011c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_ADC_MspInit+0xd0>)
 80011da:	f002 fb49 	bl	8003870 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011de:	bf00      	nop
 80011e0:	37b0      	adds	r7, #176	; 0xb0
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	50040000 	.word	0x50040000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000800 	.word	0x48000800

080011f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_GPIO_Init+0x44>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <MX_GPIO_Init+0x44>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_GPIO_Init+0x44>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_GPIO_Init+0x44>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <MX_GPIO_Init+0x44>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_GPIO_Init+0x44>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	2201      	movs	r2, #1
 800124a:	4935      	ldr	r1, [pc, #212]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 800124c:	4835      	ldr	r0, [pc, #212]	; (8001324 <HAL_UART_RxCpltCallback+0xe8>)
 800124e:	f004 fb11 	bl	8005874 <HAL_UART_Transmit>

	if (rxData == '\r' || rxData == '\n') {
 8001252:	4b33      	ldr	r3, [pc, #204]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b0d      	cmp	r3, #13
 8001258:	d003      	beq.n	8001262 <HAL_UART_RxCpltCallback+0x26>
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d13e      	bne.n	80012e0 <HAL_UART_RxCpltCallback+0xa4>
		if(line_length > 0) {
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <HAL_UART_RxCpltCallback+0xec>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d04a      	beq.n	8001300 <HAL_UART_RxCpltCallback+0xc4>
			line_buffer[line_length] = '\0';
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <HAL_UART_RxCpltCallback+0xec>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2f      	ldr	r2, [pc, #188]	; (800132c <HAL_UART_RxCpltCallback+0xf0>)
 8001270:	2100      	movs	r1, #0
 8001272:	54d1      	strb	r1, [r2, r3]
			if(strcmp(line_buffer, JOIN_ALREADY) == 0) {
 8001274:	492e      	ldr	r1, [pc, #184]	; (8001330 <HAL_UART_RxCpltCallback+0xf4>)
 8001276:	482d      	ldr	r0, [pc, #180]	; (800132c <HAL_UART_RxCpltCallback+0xf0>)
 8001278:	f7fe ffaa 	bl	80001d0 <strcmp>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d106      	bne.n	8001290 <HAL_UART_RxCpltCallback+0x54>
				connectedToNetwork = true;
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <HAL_UART_RxCpltCallback+0xf8>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
				networkStatusReceived = true;
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <HAL_UART_RxCpltCallback+0xfc>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e023      	b.n	80012d8 <HAL_UART_RxCpltCallback+0x9c>
			} else if(strcmp(line_buffer, NETWORK_JOINED) == 0) {
 8001290:	492a      	ldr	r1, [pc, #168]	; (800133c <HAL_UART_RxCpltCallback+0x100>)
 8001292:	4826      	ldr	r0, [pc, #152]	; (800132c <HAL_UART_RxCpltCallback+0xf0>)
 8001294:	f7fe ff9c 	bl	80001d0 <strcmp>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d103      	bne.n	80012a6 <HAL_UART_RxCpltCallback+0x6a>
				connectedToNetwork = true;
 800129e:	4b25      	ldr	r3, [pc, #148]	; (8001334 <HAL_UART_RxCpltCallback+0xf8>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e018      	b.n	80012d8 <HAL_UART_RxCpltCallback+0x9c>
			} else if (strcmp(line_buffer, JOIN_DONE) == 0) {
 80012a6:	4926      	ldr	r1, [pc, #152]	; (8001340 <HAL_UART_RxCpltCallback+0x104>)
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <HAL_UART_RxCpltCallback+0xf0>)
 80012aa:	f7fe ff91 	bl	80001d0 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <HAL_UART_RxCpltCallback+0x80>
				networkStatusReceived = true;
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_UART_RxCpltCallback+0xfc>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e00d      	b.n	80012d8 <HAL_UART_RxCpltCallback+0x9c>
			} else if (strcmp(line_buffer, MSG_DONE) == 0) {
 80012bc:	4921      	ldr	r1, [pc, #132]	; (8001344 <HAL_UART_RxCpltCallback+0x108>)
 80012be:	481b      	ldr	r0, [pc, #108]	; (800132c <HAL_UART_RxCpltCallback+0xf0>)
 80012c0:	f7fe ff86 	bl	80001d0 <strcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <HAL_UART_RxCpltCallback+0x96>
				messageDoneStatusReceived = true;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_UART_RxCpltCallback+0x10c>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e002      	b.n	80012d8 <HAL_UART_RxCpltCallback+0x9c>
			} else {
				configStatusReceived = true;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_UART_RxCpltCallback+0x110>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
			}
			line_length = 0;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_UART_RxCpltCallback+0xec>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
		if(line_length > 0) {
 80012de:	e00f      	b.n	8001300 <HAL_UART_RxCpltCallback+0xc4>
		}
	}
	else {
		if(line_length >= LINE_MAX_LENGTH) {
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_UART_RxCpltCallback+0xec>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b3b      	cmp	r3, #59	; 0x3b
 80012e6:	d902      	bls.n	80012ee <HAL_UART_RxCpltCallback+0xb2>
			line_length = 0;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_UART_RxCpltCallback+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++] = rxData;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_UART_RxCpltCallback+0xec>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <HAL_UART_RxCpltCallback+0xec>)
 80012f6:	600a      	str	r2, [r1, #0]
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 80012fa:	7811      	ldrb	r1, [r2, #0]
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_UART_RxCpltCallback+0xf0>)
 80012fe:	54d1      	strb	r1, [r2, r3]
	}

	if (huart == &huart3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <HAL_UART_RxCpltCallback+0x114>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d102      	bne.n	800130e <HAL_UART_RxCpltCallback+0xd2>
	{
		GPS_UART_Callback(&rxData);
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 800130a:	f006 fb89 	bl	8007a20 <GPS_UART_Callback>
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800130e:	2201      	movs	r2, #1
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <HAL_UART_RxCpltCallback+0xe4>)
 8001312:	4810      	ldr	r0, [pc, #64]	; (8001354 <HAL_UART_RxCpltCallback+0x118>)
 8001314:	f004 fb42 	bl	800599c <HAL_UART_Receive_IT>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000264 	.word	0x20000264
 8001324:	2000035c 	.word	0x2000035c
 8001328:	200002a8 	.word	0x200002a8
 800132c:	20000268 	.word	0x20000268
 8001330:	0800ce10 	.word	0x0800ce10
 8001334:	20000260 	.word	0x20000260
 8001338:	20000261 	.word	0x20000261
 800133c:	0800ce28 	.word	0x0800ce28
 8001340:	0800ce40 	.word	0x0800ce40
 8001344:	0800ce4c 	.word	0x0800ce4c
 8001348:	20000263 	.word	0x20000263
 800134c:	20000262 	.word	0x20000262
 8001350:	200003e0 	.word	0x200003e0
 8001354:	200002d8 	.word	0x200002d8

08001358 <HAL_Delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001360:	f000 fdb2 	bl	8001ec8 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

	if(wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d00b      	beq.n	800138a <HAL_Delay+0x32>
	{
		wait += (uint32_t)uwTickFreq;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_Delay+0x4c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
	}

	while((HAL_GetTick() - tickstart) < wait)
 800137e:	e004      	b.n	800138a <HAL_Delay+0x32>
	{
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001380:	2101      	movs	r1, #1
 8001382:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001386:	f002 fc2d 	bl	8003be4 <HAL_PWR_EnterSLEEPMode>
	while((HAL_GetTick() - tickstart) < wait)
 800138a:	f000 fd9d 	bl	8001ec8 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	429a      	cmp	r2, r3
 8001398:	d8f2      	bhi.n	8001380 <HAL_Delay+0x28>
	}
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000008 	.word	0x20000008

080013a8 <__io_putchar>:

int __io_putchar(int ch)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d110      	bne.n	80013d8 <__io_putchar+0x30>
		uint8_t ch2 = '\r';
 80013b6:	230d      	movs	r3, #13
 80013b8:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);	// 1 - lora / 2 - pc
 80013ba:	f107 010f 	add.w	r1, r7, #15
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	2201      	movs	r2, #1
 80013c4:	480e      	ldr	r0, [pc, #56]	; (8001400 <__io_putchar+0x58>)
 80013c6:	f004 fa55 	bl	8005874 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013ca:	1d39      	adds	r1, r7, #4
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	2201      	movs	r2, #1
 80013d2:	480c      	ldr	r0, [pc, #48]	; (8001404 <__io_putchar+0x5c>)
 80013d4:	f004 fa4e 	bl	8005874 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // 1 - lora / 2 - pc
 80013d8:	1d39      	adds	r1, r7, #4
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	2201      	movs	r2, #1
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <__io_putchar+0x58>)
 80013e2:	f004 fa47 	bl	8005874 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013e6:	1d39      	adds	r1, r7, #4
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	2201      	movs	r2, #1
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <__io_putchar+0x5c>)
 80013f0:	f004 fa40 	bl	8005874 <HAL_UART_Transmit>
	return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002d8 	.word	0x200002d8
 8001404:	2000035c 	.word	0x2000035c

08001408 <sendConfigMessageToLora>:

void sendConfigMessageToLora(const char* msg)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	configStatusReceived = false;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <sendConfigMessageToLora+0x34>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
	printf(msg);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f007 fa3a 	bl	8008890 <iprintf>
	while(!configStatusReceived){
 800141c:	bf00      	nop
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <sendConfigMessageToLora+0x34>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f8      	bne.n	800141e <sendConfigMessageToLora+0x16>
	}
	configStatusReceived = false;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <sendConfigMessageToLora+0x34>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000262 	.word	0x20000262

08001440 <sendJoinRequestToLora>:

void sendJoinRequestToLora()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	printf("AT+JOIN\r\n");
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <sendJoinRequestToLora+0x24>)
 8001446:	f007 faa9 	bl	800899c <puts>
	while(!networkStatusReceived){
 800144a:	bf00      	nop
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <sendJoinRequestToLora+0x28>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f083 0301 	eor.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f8      	bne.n	800144c <sendJoinRequestToLora+0xc>
	}
	networkStatusReceived = false;
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <sendJoinRequestToLora+0x28>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	0800ce58 	.word	0x0800ce58
 8001468:	20000261 	.word	0x20000261

0800146c <goToDeepSleep>:

void goToDeepSleep() {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	  sendConfigMessageToLora("AT+LOWPOWER=AUTOON\r\n");
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <goToDeepSleep+0x3c>)
 8001472:	f7ff ffc9 	bl	8001408 <sendConfigMessageToLora>
	  HAL_Delay(10);
 8001476:	200a      	movs	r0, #10
 8001478:	f7ff ff6e 	bl	8001358 <HAL_Delay>
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <goToDeepSleep+0x40>)
 800147e:	221f      	movs	r2, #31
 8001480:	619a      	str	r2, [r3, #24]
	  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <goToDeepSleep+0x44>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <goToDeepSleep+0x44>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001492:	60da      	str	r2, [r3, #12]
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (TIME_SLEEP * 2048) - 1, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001494:	2200      	movs	r2, #0
 8001496:	f64e 71ff 	movw	r1, #61439	; 0xefff
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <goToDeepSleep+0x44>)
 800149c:	f004 f87a 	bl	8005594 <HAL_RTCEx_SetWakeUpTimer_IT>
	  HAL_PWR_EnterSTANDBYMode();
 80014a0:	f002 fbd4 	bl	8003c4c <HAL_PWR_EnterSTANDBYMode>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	0800ce64 	.word	0x0800ce64
 80014ac:	40007000 	.word	0x40007000
 80014b0:	200002b0 	.word	0x200002b0

080014b4 <connectToLora>:

void connectToLora()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	connectionRequestCounter++;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <connectToLora+0x60>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <connectToLora+0x60>)
 80014c0:	6013      	str	r3, [r2, #0]
	sendJoinRequestToLora();
 80014c2:	f7ff ffbd 	bl	8001440 <sendJoinRequestToLora>

	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 80014c6:	e012      	b.n	80014ee <connectToLora+0x3a>
//		sendConfigMessageToLora("AT+ID=DevEui\r\n");
//		sendConfigMessageToLora("AT+ID=AppEui\r\n");
//		sendConfigMessageToLora("AT+LW=VER\r\n");

		sendConfigMessageToLora("AT+DR=EU868\r\n");
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <connectToLora+0x64>)
 80014ca:	f7ff ff9d 	bl	8001408 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+CH=NUM,0-2\r\n");
 80014ce:	4813      	ldr	r0, [pc, #76]	; (800151c <connectToLora+0x68>)
 80014d0:	f7ff ff9a 	bl	8001408 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+MODE=LWOTAA\r\n");
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <connectToLora+0x6c>)
 80014d6:	f7ff ff97 	bl	8001408 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+KEY=APPKEY,\"D5A115FED9A381224497F0D3C9688F88\"\r\n");
 80014da:	4812      	ldr	r0, [pc, #72]	; (8001524 <connectToLora+0x70>)
 80014dc:	f7ff ff94 	bl	8001408 <sendConfigMessageToLora>
		sendJoinRequestToLora();
 80014e0:	f7ff ffae 	bl	8001440 <sendJoinRequestToLora>

		connectionRequestCounter++;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <connectToLora+0x60>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <connectToLora+0x60>)
 80014ec:	6013      	str	r3, [r2, #0]
	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <connectToLora+0x74>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f083 0301 	eor.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <connectToLora+0x50>
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <connectToLora+0x60>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b04      	cmp	r3, #4
 8001502:	dde1      	ble.n	80014c8 <connectToLora+0x14>
	}

	if(connectionRequestCounter == MAX_ATTEMPTS_CONNECTION) {
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <connectToLora+0x60>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d101      	bne.n	8001510 <connectToLora+0x5c>
		goToDeepSleep();
 800150c:	f7ff ffae 	bl	800146c <goToDeepSleep>
	}
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002ac 	.word	0x200002ac
 8001518:	0800ce7c 	.word	0x0800ce7c
 800151c:	0800ce8c 	.word	0x0800ce8c
 8001520:	0800ce9c 	.word	0x0800ce9c
 8001524:	0800ceb0 	.word	0x0800ceb0
 8001528:	20000260 	.word	0x20000260

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001530:	b08c      	sub	sp, #48	; 0x30
 8001532:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fc5f 	bl	8001df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f89a 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f7ff fe5a 	bl	80011f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001540:	f000 fad2 	bl	8001ae8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001544:	f000 faa0 	bl	8001a88 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001548:	f7ff fd66 	bl	8001018 <MX_ADC1_Init>
  MX_RTC_Init();
 800154c:	f000 f8ec 	bl	8001728 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001550:	f000 fafa 	bl	8001b48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  battery_init(&hadc1, HAL_MAX_DELAY);
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	4838      	ldr	r0, [pc, #224]	; (800163c <main+0x110>)
 800155a:	f006 f957 	bl	800780c <battery_init>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	4937      	ldr	r1, [pc, #220]	; (8001640 <main+0x114>)
 8001562:	4838      	ldr	r0, [pc, #224]	; (8001644 <main+0x118>)
 8001564:	f004 fa1a 	bl	800599c <HAL_UART_Receive_IT>

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <main+0x11c>)
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <main+0x70>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <main+0x11c>)
 8001576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157a:	619a      	str	r2, [r3, #24]

	  char *str = "Wakeup from the STANDBY MODE\n";
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <main+0x120>)
 800157e:	61fb      	str	r3, [r7, #28]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001580:	69f8      	ldr	r0, [r7, #28]
 8001582:	f7fe fe2f 	bl	80001e4 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	69f9      	ldr	r1, [r7, #28]
 8001590:	482f      	ldr	r0, [pc, #188]	; (8001650 <main+0x124>)
 8001592:	f004 f96f 	bl	8005874 <HAL_UART_Transmit>

	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001596:	482f      	ldr	r0, [pc, #188]	; (8001654 <main+0x128>)
 8001598:	f004 f890 	bl	80056bc <HAL_RTCEx_DeactivateWakeUpTimer>
  }

  /* Wyłączenie trybu LOW-POWER (lora) */
  HAL_Delay(1500);
 800159c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80015a0:	f7ff feda 	bl	8001358 <HAL_Delay>
  sendConfigMessageToLora("ÿÿÿÿAT+LOWPOWER=AUTOOFF\r\n");
 80015a4:	482c      	ldr	r0, [pc, #176]	; (8001658 <main+0x12c>)
 80015a6:	f7ff ff2f 	bl	8001408 <sendConfigMessageToLora>

  connectToLora();
 80015aa:	f7ff ff83 	bl	80014b4 <connectToLora>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(connectedToNetwork)
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <main+0x130>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <main+0x90>
		  GPS_Init(&rxData);
 80015b6:	4822      	ldr	r0, [pc, #136]	; (8001640 <main+0x114>)
 80015b8:	f006 fa1c 	bl	80079f4 <GPS_Init>

	  if(gpsDataReady)
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <main+0x134>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f4      	beq.n	80015ae <main+0x82>
	  {
		  /* Pomiary i wysyłanie danych do TTN */
		  float voltage = battery_getBatteryVolts();
 80015c4:	f006 f95d 	bl	8007882 <battery_getBatteryVolts>
 80015c8:	ed87 0a06 	vstr	s0, [r7, #24]
		  int batteryLevel = battery_getBatteryChargeLevel();
 80015cc:	f006 f938 	bl	8007840 <battery_getBatteryChargeLevel>
 80015d0:	6178      	str	r0, [r7, #20]
		  //printf("Voltage: %.3f, Battery level: %d %\r\n", voltage, batteryLevel);

		  float temperature = 38;
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <main+0x138>)
 80015d4:	613b      	str	r3, [r7, #16]
		  Position currentPosition;
		  GPS_getCurrentPosition(&currentPosition);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 fa8b 	bl	8007af4 <GPS_getCurrentPosition>
		  //printf("\n Lat: %f \t Lon: %f \r\n", currentPosition.latitude, currentPosition.longitude);
		  printf("AT+MSG=%d_%f_%f_%f\r\n", batteryLevel, temperature, currentPosition.longitude, currentPosition.latitude);
 80015de:	6938      	ldr	r0, [r7, #16]
 80015e0:	f7fe ffc2 	bl	8000568 <__aeabi_f2d>
 80015e4:	4680      	mov	r8, r0
 80015e6:	4689      	mov	r9, r1
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffbc 	bl	8000568 <__aeabi_f2d>
 80015f0:	4604      	mov	r4, r0
 80015f2:	460d      	mov	r5, r1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffb6 	bl	8000568 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001604:	e9cd 4500 	strd	r4, r5, [sp]
 8001608:	4642      	mov	r2, r8
 800160a:	464b      	mov	r3, r9
 800160c:	6979      	ldr	r1, [r7, #20]
 800160e:	4816      	ldr	r0, [pc, #88]	; (8001668 <main+0x13c>)
 8001610:	f007 f93e 	bl	8008890 <iprintf>

		  HAL_Delay(1500);
 8001614:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001618:	f7ff fe9e 	bl	8001358 <HAL_Delay>

		  char *str2 = "STANDBY MODE is ON\n";
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <main+0x140>)
 800161e:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7fe fddf 	bl	80001e4 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <main+0x124>)
 8001632:	f004 f91f 	bl	8005874 <HAL_UART_Transmit>
		  goToDeepSleep();
 8001636:	f7ff ff19 	bl	800146c <goToDeepSleep>
	  if(connectedToNetwork)
 800163a:	e7b8      	b.n	80015ae <main+0x82>
 800163c:	200001fc 	.word	0x200001fc
 8001640:	20000264 	.word	0x20000264
 8001644:	200002d8 	.word	0x200002d8
 8001648:	40007000 	.word	0x40007000
 800164c:	0800cee4 	.word	0x0800cee4
 8001650:	2000035c 	.word	0x2000035c
 8001654:	200002b0 	.word	0x200002b0
 8001658:	0800cf04 	.word	0x0800cf04
 800165c:	20000260 	.word	0x20000260
 8001660:	20000798 	.word	0x20000798
 8001664:	42180000 	.word	0x42180000
 8001668:	0800cf24 	.word	0x0800cf24
 800166c:	0800cf3c 	.word	0x0800cf3c

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b096      	sub	sp, #88	; 0x58
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2244      	movs	r2, #68	; 0x44
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f006 fa84 	bl	8007b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001696:	f002 fb01 	bl	8003c9c <HAL_PWREx_ControlVoltageScaling>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016a0:	f000 f83c 	bl	800171c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016a4:	f002 fa8e 	bl	8003bc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <SystemClock_Config+0xa8>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <SystemClock_Config+0xa8>)
 80016b0:	f023 0318 	bic.w	r3, r3, #24
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016b8:	2314      	movs	r3, #20
 80016ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fb7f 	bl	8003dd8 <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016e0:	f000 f81c 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 ff47 	bl	8004590 <HAL_RCC_ClockConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001708:	f000 f808 	bl	800171c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800170c:	f003 fc4e 	bl	8004fac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001710:	bf00      	nop
 8001712:	3758      	adds	r7, #88	; 0x58
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_RTC_Init+0x48>)
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <MX_RTC_Init+0x4c>)
 8001730:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_RTC_Init+0x48>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <MX_RTC_Init+0x48>)
 800173a:	227f      	movs	r2, #127	; 0x7f
 800173c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_RTC_Init+0x48>)
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_RTC_Init+0x48>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_RTC_Init+0x48>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_RTC_Init+0x48>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_RTC_Init+0x48>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_RTC_Init+0x48>)
 800175e:	f003 fe07 	bl	8005370 <HAL_RTC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001768:	f7ff ffd8 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200002b0 	.word	0x200002b0
 8001774:	40002800 	.word	0x40002800

08001778 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b0a4      	sub	sp, #144	; 0x90
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	2288      	movs	r2, #136	; 0x88
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f006 f9ff 	bl	8007b8c <memset>
  if(rtcHandle->Instance==RTC)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_RTC_MspInit+0x6c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d120      	bne.n	80017da <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800179e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 f914 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80017b6:	f7ff ffb1 	bl	800171c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_RTC_MspInit+0x70>)
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RTC_MspInit+0x70>)
 80017c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2003      	movs	r0, #3
 80017d0:	f001 ff99 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f001 ffb2 	bl	800373e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017da:	bf00      	nop
 80017dc:	3790      	adds	r7, #144	; 0x90
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40002800 	.word	0x40002800
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_MspInit+0x44>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_MspInit+0x44>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_MspInit+0x44>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x44>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x44>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6593      	str	r3, [r2, #88]	; 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001880:	f000 fb0e 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <RTC_WKUP_IRQHandler+0x10>)
 800188e:	f003 ff73 	bl	8005778 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002b0 	.word	0x200002b0

0800189c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART1_IRQHandler+0x10>)
 80018a2:	f004 f8d1 	bl	8005a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200002d8 	.word	0x200002d8

080018b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <USART2_IRQHandler+0x10>)
 80018b6:	f004 f8c7 	bl	8005a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000035c 	.word	0x2000035c

080018c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <USART3_IRQHandler+0x10>)
 80018ca:	f004 f8bd 	bl	8005a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200003e0 	.word	0x200003e0

080018d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	return 1;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_kill>:

int _kill(int pid, int sig)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f2:	f006 f913 	bl	8007b1c <__errno>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2216      	movs	r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
	return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_exit>:

void _exit (int status)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffe7 	bl	80018e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800191a:	e7fe      	b.n	800191a <_exit+0x12>

0800191c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00a      	b.n	8001944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800192e:	f3af 8000 	nop.w
 8001932:	4601      	mov	r1, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf0      	blt.n	800192e <_read+0x12>
	}

return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e009      	b.n	800197c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fd19 	bl	80013a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf1      	blt.n	8001968 <_write+0x12>
	}
	return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_close>:

int _close(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b6:	605a      	str	r2, [r3, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f006 f878 	bl	8007b1c <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20018000 	.word	0x20018000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	200002d4 	.word	0x200002d4
 8001a60:	20000808 	.word	0x20000808

08001a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <MX_USART1_UART_Init+0x5c>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001a94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART1_UART_Init+0x58>)
 8001acc:	f003 fe84 	bl	80057d8 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ad6:	f7ff fe21 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200002d8 	.word	0x200002d8
 8001ae4:	40013800 	.word	0x40013800

08001ae8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <MX_USART2_UART_Init+0x5c>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x58>)
 8001b2c:	f003 fe54 	bl	80057d8 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b36:	f7ff fdf1 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000035c 	.word	0x2000035c
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MX_USART3_UART_Init+0x5c>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b8c:	f003 fe24 	bl	80057d8 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b96:	f7ff fdc1 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200003e0 	.word	0x200003e0
 8001ba4:	40004800 	.word	0x40004800

08001ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0b0      	sub	sp, #192	; 0xc0
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	2288      	movs	r2, #136	; 0x88
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 ffdf 	bl	8007b8c <memset>
  if(uartHandle->Instance==USART1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6f      	ldr	r2, [pc, #444]	; (8001d90 <HAL_UART_MspInit+0x1e8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d145      	bne.n	8001c64 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fef7 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf0:	f7ff fd94 	bl	800171c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf4:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	4a66      	ldr	r2, [pc, #408]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001c00:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b61      	ldr	r3, [pc, #388]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c18:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c3e:	2307      	movs	r3, #7
 8001c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f001 fe0f 	bl	8003870 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2025      	movs	r0, #37	; 0x25
 8001c58:	f001 fd55 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c5c:	2025      	movs	r0, #37	; 0x25
 8001c5e:	f001 fd6e 	bl	800373e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c62:	e091      	b.n	8001d88 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_UART_MspInit+0x1f0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d144      	bne.n	8001cf8 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 feac 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001c86:	f7ff fd49 	bl	800171c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a41      	ldr	r2, [pc, #260]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cba:	230c      	movs	r3, #12
 8001cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f001 fdc5 	bl	8003870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2026      	movs	r0, #38	; 0x26
 8001cec:	f001 fd0b 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cf0:	2026      	movs	r0, #38	; 0x26
 8001cf2:	f001 fd24 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8001cf6:	e047      	b.n	8001d88 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_UART_MspInit+0x1f4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d142      	bne.n	8001d88 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d02:	2304      	movs	r3, #4
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fe62 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001d1a:	f7ff fcff 	bl	800171c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <HAL_UART_MspInit+0x1ec>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d4e:	2330      	movs	r3, #48	; 0x30
 8001d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d66:	2307      	movs	r3, #7
 8001d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d70:	4619      	mov	r1, r3
 8001d72:	480b      	ldr	r0, [pc, #44]	; (8001da0 <HAL_UART_MspInit+0x1f8>)
 8001d74:	f001 fd7c 	bl	8003870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2027      	movs	r0, #39	; 0x27
 8001d7e:	f001 fcc2 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d82:	2027      	movs	r0, #39	; 0x27
 8001d84:	f001 fcdb 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8001d88:	bf00      	nop
 8001d8a:	37c0      	adds	r7, #192	; 0xc0
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40004400 	.word	0x40004400
 8001d9c:	40004800 	.word	0x40004800
 8001da0:	48000800 	.word	0x48000800

08001da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da8:	f7ff fe5c 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dae:	490d      	ldr	r1, [pc, #52]	; (8001de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <LoopForever+0xe>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	; (8001df0 <LoopForever+0x16>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f005 fea9 	bl	8007b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd6:	f7ff fba9 	bl	800152c <main>

08001dda <LoopForever>:

LoopForever:
    b LoopForever
 8001dda:	e7fe      	b.n	8001dda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ddc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001de8:	0800d48c 	.word	0x0800d48c
  ldr r2, =_sbss
 8001dec:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001df0:	20000808 	.word	0x20000808

08001df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC1_2_IRQHandler>

08001df6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f001 fc75 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e06:	200f      	movs	r0, #15
 8001e08:	f000 f80e 	bl	8001e28 <HAL_InitTick>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	71fb      	strb	r3, [r7, #7]
 8001e16:	e001      	b.n	8001e1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e18:	f7ff fce8 	bl	80017ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_InitTick+0x6c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_InitTick+0x70>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_InitTick+0x6c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 fc81 	bl	800375a <HAL_SYSTICK_Config>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10f      	bne.n	8001e7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d809      	bhi.n	8001e78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f001 fc4b 	bl	8003706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_InitTick+0x74>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e007      	b.n	8001e88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e004      	b.n	8001e88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e001      	b.n	8001e88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000464 	.word	0x20000464

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_GetTick+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000464 	.word	0x20000464

08001ee0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3360      	adds	r3, #96	; 0x60
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <LL_ADC_SetOffset+0x44>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	03fff000 	.word	0x03fff000

08001f90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3360      	adds	r3, #96	; 0x60
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3360      	adds	r3, #96	; 0x60
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3330      	adds	r3, #48	; 0x30
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	4413      	add	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	211f      	movs	r1, #31
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0e9b      	lsrs	r3, r3, #26
 8002050:	f003 011f 	and.w	r1, r3, #31
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3314      	adds	r3, #20
 8002080:	461a      	mov	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	0e5b      	lsrs	r3, r3, #25
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	0d1b      	lsrs	r3, r3, #20
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2107      	movs	r1, #7
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	401a      	ands	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	0d1b      	lsrs	r3, r3, #20
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0318 	and.w	r3, r3, #24
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <LL_ADC_SetChannelSingleDiff+0x44>)
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	400b      	ands	r3, r1
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	431a      	orrs	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	0007ffff 	.word	0x0007ffff

08002110 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 031f 	and.w	r3, r3, #31
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002158:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6093      	str	r3, [r2, #8]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800217c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002180:	d101      	bne.n	8002186 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002220:	f043 0202 	orr.w	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <LL_ADC_IsEnabled+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_ADC_IsEnabled+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d101      	bne.n	8002272 <LL_ADC_IsDisableOngoing+0x18>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_IsDisableOngoing+0x1a>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002294:	f043 0204 	orr.w	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d101      	bne.n	80022c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e136      	b.n	800257c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe feff 	bl	8001120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff19 	bl	800216c <LL_ADC_IsDeepPowerDownEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff feff 	bl	8002148 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff34 	bl	80021bc <LL_ADC_IsInternalRegulatorEnabled>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff18 	bl	8002194 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002364:	4b87      	ldr	r3, [pc, #540]	; (8002584 <HAL_ADC_Init+0x290>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	4a87      	ldr	r2, [pc, #540]	; (8002588 <HAL_ADC_Init+0x294>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	3301      	adds	r3, #1
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002378:	e002      	b.n	8002380 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f9      	bne.n	800237a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff16 	bl	80021bc <LL_ADC_IsInternalRegulatorEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff76 	bl	80022a8 <LL_ADC_REG_IsConversionOngoing>
 80023bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80cf 	bne.w	800256a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 80cb 	bne.w	800256a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023dc:	f043 0202 	orr.w	r2, r3, #2
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff23 	bl	8002234 <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d115      	bne.n	8002420 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f4:	4865      	ldr	r0, [pc, #404]	; (800258c <HAL_ADC_Init+0x298>)
 80023f6:	f7ff ff1d 	bl	8002234 <LL_ADC_IsEnabled>
 80023fa:	4604      	mov	r4, r0
 80023fc:	4864      	ldr	r0, [pc, #400]	; (8002590 <HAL_ADC_Init+0x29c>)
 80023fe:	f7ff ff19 	bl	8002234 <LL_ADC_IsEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	431c      	orrs	r4, r3
 8002406:	4863      	ldr	r0, [pc, #396]	; (8002594 <HAL_ADC_Init+0x2a0>)
 8002408:	f7ff ff14 	bl	8002234 <LL_ADC_IsEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	4323      	orrs	r3, r4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4619      	mov	r1, r3
 800241a:	485f      	ldr	r0, [pc, #380]	; (8002598 <HAL_ADC_Init+0x2a4>)
 800241c:	f7ff fd60 	bl	8001ee0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7e5b      	ldrb	r3, [r3, #25]
 8002424:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800242a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002430:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002436:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d106      	bne.n	800245c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	045b      	lsls	r3, r3, #17
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_ADC_Init+0x2a8>)
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	430b      	orrs	r3, r1
 800248a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff09 	bl	80022a8 <LL_ADC_REG_IsConversionOngoing>
 8002496:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff16 	bl	80022ce <LL_ADC_INJ_IsConversionOngoing>
 80024a2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d13d      	bne.n	8002526 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d13a      	bne.n	8002526 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024bc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024cc:	f023 0302 	bic.w	r3, r3, #2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	69b9      	ldr	r1, [r7, #24]
 80024d6:	430b      	orrs	r3, r1
 80024d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d118      	bne.n	8002516 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024ee:	f023 0304 	bic.w	r3, r3, #4
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002506:	430a      	orrs	r2, r1
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	e007      	b.n	8002526 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10c      	bne.n	8002548 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f023 010f 	bic.w	r1, r3, #15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	1e5a      	subs	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
 8002546:	e007      	b.n	8002558 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 020f 	bic.w	r2, r2, #15
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f023 0303 	bic.w	r3, r3, #3
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
 8002568:	e007      	b.n	800257a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f043 0210 	orr.w	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800257a:	7ffb      	ldrb	r3, [r7, #31]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3724      	adds	r7, #36	; 0x24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	053e2d63 	.word	0x053e2d63
 800258c:	50040000 	.word	0x50040000
 8002590:	50040100 	.word	0x50040100
 8002594:	50040200 	.word	0x50040200
 8002598:	50040300 	.word	0x50040300
 800259c:	fff0c007 	.word	0xfff0c007

080025a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a8:	4857      	ldr	r0, [pc, #348]	; (8002708 <HAL_ADC_Start+0x168>)
 80025aa:	f7ff fdb1 	bl	8002110 <LL_ADC_GetMultimode>
 80025ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fe77 	bl	80022a8 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 809c 	bne.w	80026fa <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_Start+0x30>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e097      	b.n	8002700 <HAL_ADC_Start+0x160>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fd71 	bl	80030c0 <ADC_Enable>
 80025de:	4603      	mov	r3, r0
 80025e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 8083 	bne.w	80026f0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a42      	ldr	r2, [pc, #264]	; (800270c <HAL_ADC_Start+0x16c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d002      	beq.n	800260e <HAL_ADC_Start+0x6e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	e000      	b.n	8002610 <HAL_ADC_Start+0x70>
 800260e:	4b40      	ldr	r3, [pc, #256]	; (8002710 <HAL_ADC_Start+0x170>)
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	4293      	cmp	r3, r2
 8002616:	d002      	beq.n	800261e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	d106      	bne.n	8002646 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f023 0206 	bic.w	r2, r3, #6
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	659a      	str	r2, [r3, #88]	; 0x58
 8002644:	e002      	b.n	800264c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	221c      	movs	r2, #28
 8002652:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2a      	ldr	r2, [pc, #168]	; (800270c <HAL_ADC_Start+0x16c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d002      	beq.n	800266c <HAL_ADC_Start+0xcc>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	e000      	b.n	800266e <HAL_ADC_Start+0xce>
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_ADC_Start+0x170>)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4293      	cmp	r3, r2
 8002674:	d008      	beq.n	8002688 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d002      	beq.n	8002688 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d114      	bne.n	80026b2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800269e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fde8 	bl	8002280 <LL_ADC_REG_StartConversion>
 80026b0:	e025      	b.n	80026fe <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_ADC_Start+0x16c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d002      	beq.n	80026ce <HAL_ADC_Start+0x12e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e000      	b.n	80026d0 <HAL_ADC_Start+0x130>
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_ADC_Start+0x170>)
 80026d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00f      	beq.n	80026fe <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
 80026ee:	e006      	b.n	80026fe <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80026f8:	e001      	b.n	80026fe <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	50040300 	.word	0x50040300
 800270c:	50040100 	.word	0x50040100
 8002710:	50040000 	.word	0x50040000

08002714 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271e:	4866      	ldr	r0, [pc, #408]	; (80028b8 <HAL_ADC_PollForConversion+0x1a4>)
 8002720:	f7ff fcf6 	bl	8002110 <LL_ADC_GetMultimode>
 8002724:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d102      	bne.n	8002734 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800272e:	2308      	movs	r3, #8
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	e02a      	b.n	800278a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b05      	cmp	r3, #5
 800273e:	d002      	beq.n	8002746 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b09      	cmp	r3, #9
 8002744:	d111      	bne.n	800276a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0a4      	b.n	80028ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002764:	2304      	movs	r3, #4
 8002766:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002768:	e00f      	b.n	800278a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800276a:	4853      	ldr	r0, [pc, #332]	; (80028b8 <HAL_ADC_PollForConversion+0x1a4>)
 800276c:	f7ff fcde 	bl	800212c <LL_ADC_GetMultiDMATransfer>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e093      	b.n	80028ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002786:	2304      	movs	r3, #4
 8002788:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800278a:	f7ff fb9d 	bl	8001ec8 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002790:	e021      	b.n	80027d6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d01d      	beq.n	80027d6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800279a:	f7ff fb95 	bl	8001ec8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <HAL_ADC_PollForConversion+0x9c>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d112      	bne.n	80027d6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10b      	bne.n	80027d6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e06b      	b.n	80028ae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0d6      	beq.n	8002792 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fbfc 	bl	8001ff2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01c      	beq.n	800283a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7e5b      	ldrb	r3, [r3, #25]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d118      	bne.n	800283a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d111      	bne.n	800283a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_ADC_PollForConversion+0x1a8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d002      	beq.n	800284a <HAL_ADC_PollForConversion+0x136>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e000      	b.n	800284c <HAL_ADC_PollForConversion+0x138>
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_ADC_PollForConversion+0x1ac>)
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4293      	cmp	r3, r2
 8002852:	d008      	beq.n	8002866 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b05      	cmp	r3, #5
 800285e:	d002      	beq.n	8002866 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b09      	cmp	r3, #9
 8002864:	d104      	bne.n	8002870 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	e00c      	b.n	800288a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a11      	ldr	r2, [pc, #68]	; (80028bc <HAL_ADC_PollForConversion+0x1a8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d002      	beq.n	8002880 <HAL_ADC_PollForConversion+0x16c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e000      	b.n	8002882 <HAL_ADC_PollForConversion+0x16e>
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_ADC_PollForConversion+0x1ac>)
 8002882:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d104      	bne.n	800289a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2208      	movs	r2, #8
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e008      	b.n	80028ac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	220c      	movs	r2, #12
 80028aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	50040300 	.word	0x50040300
 80028bc:	50040100 	.word	0x50040100
 80028c0:	50040000 	.word	0x50040000

080028c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0b6      	sub	sp, #216	; 0xd8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x22>
 80028fe:	2302      	movs	r3, #2
 8002900:	e3c7      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7b2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fcca 	bl	80022a8 <LL_ADC_REG_IsConversionOngoing>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 83a8 	bne.w	800306c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d824      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	3b02      	subs	r3, #2
 800292a:	2b03      	cmp	r3, #3
 800292c:	d81b      	bhi.n	8002966 <HAL_ADC_ConfigChannel+0x86>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_ADC_ConfigChannel+0x54>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	0800294d 	.word	0x0800294d
 800293c:	08002955 	.word	0x08002955
 8002940:	0800295d 	.word	0x0800295d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	220c      	movs	r2, #12
 8002948:	605a      	str	r2, [r3, #4]
          break;
 800294a:	e011      	b.n	8002970 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2212      	movs	r2, #18
 8002950:	605a      	str	r2, [r3, #4]
          break;
 8002952:	e00d      	b.n	8002970 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2218      	movs	r2, #24
 8002958:	605a      	str	r2, [r3, #4]
          break;
 800295a:	e009      	b.n	8002970 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002962:	605a      	str	r2, [r3, #4]
          break;
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2206      	movs	r2, #6
 800296a:	605a      	str	r2, [r3, #4]
          break;
 800296c:	e000      	b.n	8002970 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800296e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	f7ff fb4b 	bl	8002018 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fc8e 	bl	80022a8 <LL_ADC_REG_IsConversionOngoing>
 800298c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fc9a 	bl	80022ce <LL_ADC_INJ_IsConversionOngoing>
 800299a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800299e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 81a6 	bne.w	8002cf4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 81a1 	bne.w	8002cf4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	461a      	mov	r2, r3
 80029c0:	f7ff fb56 	bl	8002070 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	08db      	lsrs	r3, r3, #3
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d00a      	beq.n	80029fc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6919      	ldr	r1, [r3, #16]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029f6:	f7ff faa7 	bl	8001f48 <LL_ADC_SetOffset>
 80029fa:	e17b      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fac4 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x148>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fab9 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	e01e      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x186>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff faae 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e004      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x19e>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	e018      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x1d0>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e004      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fa7d 	bl	8001fbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fa61 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x20e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fa56 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	e01e      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x24c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fa4b 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e004      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x264>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0e9b      	lsrs	r3, r3, #26
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	e018      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x296>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e004      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d106      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fa1a 	bl	8001fbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f9fe 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x2d4>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f9f3 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	f003 021f 	and.w	r2, r3, #31
 8002bb2:	e01e      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x312>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2102      	movs	r1, #2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff f9e8 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002be2:	2320      	movs	r3, #32
 8002be4:	e004      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x32a>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0e9b      	lsrs	r3, r3, #26
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	e016      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x358>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f9b9 	bl	8001fbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2103      	movs	r1, #3
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f99d 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x396>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2103      	movs	r1, #3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f992 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	e017      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x3c6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f987 	bl	8001f90 <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e003      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x3de>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	e011      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x402>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e003      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d106      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	2103      	movs	r1, #3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f964 	bl	8001fbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fa9b 	bl	8002234 <LL_ADC_IsEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 813f 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f7ff f9d8 	bl	80020c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a8e      	ldr	r2, [pc, #568]	; (8002f58 <HAL_ADC_ConfigChannel+0x678>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f040 8130 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x46c>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e019      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x4a0>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e003      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	bf94      	ite	ls
 8002d7a:	2301      	movls	r3, #1
 8002d7c:	2300      	movhi	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d079      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x4c0>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	3301      	adds	r3, #1
 8002d98:	069b      	lsls	r3, r3, #26
 8002d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9e:	e015      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x4ec>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002db8:	2320      	movs	r3, #32
 8002dba:	e003      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	069b      	lsls	r3, r3, #26
 8002dc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x50c>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	e017      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x53c>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	ea42 0103 	orr.w	r1, r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x562>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0e9b      	lsrs	r3, r3, #26
 8002e32:	3301      	adds	r3, #1
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	051b      	lsls	r3, r3, #20
 8002e40:	e018      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x594>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e74:	430b      	orrs	r3, r1
 8002e76:	e080      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d107      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x5b4>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	069b      	lsls	r3, r3, #26
 8002e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e92:	e015      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x5e0>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002eac:	2320      	movs	r3, #32
 8002eae:	e003      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	069b      	lsls	r3, r3, #26
 8002ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x600>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	e017      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x630>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	61fb      	str	r3, [r7, #28]
  return result;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	ea42 0103 	orr.w	r1, r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x65c>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	3301      	adds	r3, #1
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	3b1e      	subs	r3, #30
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	e01d      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x698>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	613b      	str	r3, [r7, #16]
  return result;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d103      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e005      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x684>
 8002f58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b1e      	subs	r3, #30
 8002f72:	051b      	lsls	r3, r3, #20
 8002f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	6892      	ldr	r2, [r2, #8]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7ff f876 	bl	8002070 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b44      	ldr	r3, [pc, #272]	; (800309c <HAL_ADC_ConfigChannel+0x7bc>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d07a      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f90:	4843      	ldr	r0, [pc, #268]	; (80030a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f92:	f7fe ffcb 	bl	8001f2c <LL_ADC_GetCommonPathInternalCh>
 8002f96:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a41      	ldr	r2, [pc, #260]	; (80030a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d12c      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d126      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3c      	ldr	r2, [pc, #240]	; (80030a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x6e4>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <HAL_ADC_ConfigChannel+0x7cc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d15d      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4834      	ldr	r0, [pc, #208]	; (80030a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fd0:	f7fe ff99 	bl	8001f06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fd4:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	4a36      	ldr	r2, [pc, #216]	; (80030b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fee:	e002      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffc:	e040      	b.n	8003080 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d118      	bne.n	800303a <HAL_ADC_ConfigChannel+0x75a>
 8003008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800300c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d112      	bne.n	800303a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <HAL_ADC_ConfigChannel+0x7c8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_ADC_ConfigChannel+0x748>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <HAL_ADC_ConfigChannel+0x7cc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d12d      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800302c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003030:	4619      	mov	r1, r3
 8003032:	481b      	ldr	r0, [pc, #108]	; (80030a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003034:	f7fe ff67 	bl	8001f06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003038:	e024      	b.n	8003084 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_ADC_ConfigChannel+0x7dc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d120      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11a      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d115      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800305a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800305e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003062:	4619      	mov	r1, r3
 8003064:	480e      	ldr	r0, [pc, #56]	; (80030a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003066:	f7fe ff4e 	bl	8001f06 <LL_ADC_SetCommonPathInternalCh>
 800306a:	e00c      	b.n	8003086 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800307e:	e002      	b.n	8003086 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003080:	bf00      	nop
 8003082:	e000      	b.n	8003086 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003084:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800308e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003092:	4618      	mov	r0, r3
 8003094:	37d8      	adds	r7, #216	; 0xd8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	80080000 	.word	0x80080000
 80030a0:	50040300 	.word	0x50040300
 80030a4:	c7520000 	.word	0xc7520000
 80030a8:	50040000 	.word	0x50040000
 80030ac:	50040200 	.word	0x50040200
 80030b0:	20000000 	.word	0x20000000
 80030b4:	053e2d63 	.word	0x053e2d63
 80030b8:	cb840000 	.word	0xcb840000
 80030bc:	80000001 	.word	0x80000001

080030c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f8af 	bl	8002234 <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d169      	bne.n	80031b0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <ADC_Enable+0xfc>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f043 0210 	orr.w	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e055      	b.n	80031b2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f86a 	bl	80021e4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003110:	482b      	ldr	r0, [pc, #172]	; (80031c0 <ADC_Enable+0x100>)
 8003112:	f7fe ff0b 	bl	8001f2c <LL_ADC_GetCommonPathInternalCh>
 8003116:	4603      	mov	r3, r0
 8003118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <ADC_Enable+0x104>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <ADC_Enable+0x108>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800313a:	e002      	b.n	8003142 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	3b01      	subs	r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f9      	bne.n	800313c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003148:	f7fe febe 	bl	8001ec8 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314e:	e028      	b.n	80031a2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff f86d 	bl	8002234 <LL_ADC_IsEnabled>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d104      	bne.n	800316a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff f83d 	bl	80021e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800316a:	f7fe fead 	bl	8001ec8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d914      	bls.n	80031a2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d00d      	beq.n	80031a2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	f043 0210 	orr.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d1cf      	bne.n	8003150 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	8000003f 	.word	0x8000003f
 80031c0:	50040300 	.word	0x50040300
 80031c4:	20000000 	.word	0x20000000
 80031c8:	053e2d63 	.word	0x053e2d63

080031cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f83e 	bl	800225a <LL_ADC_IsDisableOngoing>
 80031de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f825 	bl	8002234 <LL_ADC_IsEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d047      	beq.n	8003280 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d144      	bne.n	8003280 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030d 	and.w	r3, r3, #13
 8003200:	2b01      	cmp	r3, #1
 8003202:	d10c      	bne.n	800321e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe ffff 	bl	800220c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2203      	movs	r2, #3
 8003214:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003216:	f7fe fe57 	bl	8001ec8 <HAL_GetTick>
 800321a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800321c:	e029      	b.n	8003272 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	f043 0210 	orr.w	r2, r3, #16
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e023      	b.n	8003282 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800323a:	f7fe fe45 	bl	8001ec8 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d914      	bls.n	8003272 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f043 0210 	orr.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e007      	b.n	8003282 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1dc      	bne.n	800323a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <LL_ADC_IsEnabled>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <LL_ADC_IsEnabled+0x18>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <LL_ADC_IsEnabled+0x1a>
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_ADC_StartCalibration>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80032c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f6:	d101      	bne.n	80032fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_ADC_REG_IsConversionOngoing>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d101      	bne.n	8003322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_ADCEx_Calibration_Start+0x1c>
 8003348:	2302      	movs	r3, #2
 800334a:	e04d      	b.n	80033e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff39 	bl	80031cc <ADC_Disable>
 800335a:	4603      	mov	r3, r0
 800335c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d136      	bne.n	80033d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800336c:	f023 0302 	bic.w	r3, r3, #2
 8003370:	f043 0202 	orr.w	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6839      	ldr	r1, [r7, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff96 	bl	80032b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003384:	e014      	b.n	80033b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003392:	d30d      	bcc.n	80033b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f023 0312 	bic.w	r3, r3, #18
 800339c:	f043 0210 	orr.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e01b      	b.n	80033e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff94 	bl	80032e2 <LL_ADC_IsCalibrationOnGoing>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e2      	bne.n	8003386 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f023 0303 	bic.w	r3, r3, #3
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
 80033d0:	e005      	b.n	80033de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	f043 0210 	orr.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b09f      	sub	sp, #124	; 0x7c
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800340a:	2302      	movs	r3, #2
 800340c:	e093      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003416:	2300      	movs	r3, #0
 8003418:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800341a:	2300      	movs	r3, #0
 800341c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a47      	ldr	r2, [pc, #284]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	e001      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e072      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff59 	bl	800330a <LL_ADC_REG_IsConversionOngoing>
 8003458:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff53 	bl	800330a <LL_ADC_REG_IsConversionOngoing>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d154      	bne.n	8003514 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800346a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800346c:	2b00      	cmp	r3, #0
 800346e:	d151      	bne.n	8003514 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003472:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02c      	beq.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800347c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800348e:	035b      	lsls	r3, r3, #13
 8003490:	430b      	orrs	r3, r1
 8003492:	431a      	orrs	r2, r3
 8003494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003496:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003498:	4829      	ldr	r0, [pc, #164]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800349a:	f7ff fef6 	bl	800328a <LL_ADC_IsEnabled>
 800349e:	4604      	mov	r4, r0
 80034a0:	4828      	ldr	r0, [pc, #160]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034a2:	f7ff fef2 	bl	800328a <LL_ADC_IsEnabled>
 80034a6:	4603      	mov	r3, r0
 80034a8:	431c      	orrs	r4, r3
 80034aa:	4828      	ldr	r0, [pc, #160]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034ac:	f7ff feed 	bl	800328a <LL_ADC_IsEnabled>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4323      	orrs	r3, r4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d137      	bne.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034c0:	f023 030f 	bic.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	6811      	ldr	r1, [r2, #0]
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6892      	ldr	r2, [r2, #8]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d4:	e028      	b.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e2:	4817      	ldr	r0, [pc, #92]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034e4:	f7ff fed1 	bl	800328a <LL_ADC_IsEnabled>
 80034e8:	4604      	mov	r4, r0
 80034ea:	4816      	ldr	r0, [pc, #88]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034ec:	f7ff fecd 	bl	800328a <LL_ADC_IsEnabled>
 80034f0:	4603      	mov	r3, r0
 80034f2:	431c      	orrs	r4, r3
 80034f4:	4815      	ldr	r0, [pc, #84]	; (800354c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034f6:	f7ff fec8 	bl	800328a <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4323      	orrs	r3, r4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d112      	bne.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800350a:	f023 030f 	bic.w	r3, r3, #15
 800350e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003510:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003512:	e009      	b.n	8003528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003526:	e000      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003528:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003532:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003536:	4618      	mov	r0, r3
 8003538:	377c      	adds	r7, #124	; 0x7c
 800353a:	46bd      	mov	sp, r7
 800353c:	bd90      	pop	{r4, r7, pc}
 800353e:	bf00      	nop
 8003540:	50040000 	.word	0x50040000
 8003544:	50040100 	.word	0x50040100
 8003548:	50040300 	.word	0x50040300
 800354c:	50040200 	.word	0x50040200

08003550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	60d3      	str	r3, [r2, #12]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <__NVIC_GetPriorityGrouping+0x18>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 0307 	and.w	r3, r3, #7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	db0b      	blt.n	80035de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	4907      	ldr	r1, [pc, #28]	; (80035ec <__NVIC_EnableIRQ+0x38>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2001      	movs	r0, #1
 80035d6:	fa00 f202 	lsl.w	r2, r0, r2
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f7ff ff8e 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff29 	bl	8003550 <__NVIC_SetPriorityGrouping>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003718:	f7ff ff3e 	bl	8003598 <__NVIC_GetPriorityGrouping>
 800371c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff ff8e 	bl	8003644 <NVIC_EncodePriority>
 8003728:	4602      	mov	r2, r0
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff5d 	bl	80035f0 <__NVIC_SetPriority>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff31 	bl	80035b4 <__NVIC_EnableIRQ>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffa2 	bl	80036ac <SysTick_Config>
 8003768:	4603      	mov	r3, r0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d008      	beq.n	800379c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e022      	b.n	80037e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 020e 	bic.w	r2, r2, #14
 80037aa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	f003 021c 	and.w	r2, r3, #28
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f202 	lsl.w	r2, r1, r2
 80037ce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d005      	beq.n	8003812 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2204      	movs	r2, #4
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e029      	b.n	8003866 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 020e 	bic.w	r2, r2, #14
 8003820:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f003 021c 	and.w	r2, r3, #28
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2101      	movs	r1, #1
 8003840:	fa01 f202 	lsl.w	r2, r1, r2
 8003844:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
    }
  }
  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800387e:	e17f      	b.n	8003b80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2101      	movs	r1, #1
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8171 	beq.w	8003b7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d005      	beq.n	80038b0 <HAL_GPIO_Init+0x40>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d130      	bne.n	8003912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038e6:	2201      	movs	r2, #1
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0201 	and.w	r2, r3, #1
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b03      	cmp	r3, #3
 800391c:	d118      	bne.n	8003950 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003924:	2201      	movs	r2, #1
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	08db      	lsrs	r3, r3, #3
 800393a:	f003 0201 	and.w	r2, r3, #1
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b03      	cmp	r3, #3
 800395a:	d017      	beq.n	800398c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d123      	bne.n	80039e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	08da      	lsrs	r2, r3, #3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3208      	adds	r2, #8
 80039a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	08da      	lsrs	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3208      	adds	r2, #8
 80039da:	6939      	ldr	r1, [r7, #16]
 80039dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0203 	and.w	r2, r3, #3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80ac 	beq.w	8003b7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	4b5f      	ldr	r3, [pc, #380]	; (8003ba0 <HAL_GPIO_Init+0x330>)
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	4a5e      	ldr	r2, [pc, #376]	; (8003ba0 <HAL_GPIO_Init+0x330>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8003a2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ba0 <HAL_GPIO_Init+0x330>)
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a3a:	4a5a      	ldr	r2, [pc, #360]	; (8003ba4 <HAL_GPIO_Init+0x334>)
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a64:	d025      	beq.n	8003ab2 <HAL_GPIO_Init+0x242>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4f      	ldr	r2, [pc, #316]	; (8003ba8 <HAL_GPIO_Init+0x338>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01f      	beq.n	8003aae <HAL_GPIO_Init+0x23e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4e      	ldr	r2, [pc, #312]	; (8003bac <HAL_GPIO_Init+0x33c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d019      	beq.n	8003aaa <HAL_GPIO_Init+0x23a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4d      	ldr	r2, [pc, #308]	; (8003bb0 <HAL_GPIO_Init+0x340>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_GPIO_Init+0x236>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4c      	ldr	r2, [pc, #304]	; (8003bb4 <HAL_GPIO_Init+0x344>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00d      	beq.n	8003aa2 <HAL_GPIO_Init+0x232>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4b      	ldr	r2, [pc, #300]	; (8003bb8 <HAL_GPIO_Init+0x348>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <HAL_GPIO_Init+0x22e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4a      	ldr	r2, [pc, #296]	; (8003bbc <HAL_GPIO_Init+0x34c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_GPIO_Init+0x22a>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e00c      	b.n	8003ab4 <HAL_GPIO_Init+0x244>
 8003a9a:	2307      	movs	r3, #7
 8003a9c:	e00a      	b.n	8003ab4 <HAL_GPIO_Init+0x244>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x244>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x244>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x244>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x244>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x244>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ac4:	4937      	ldr	r1, [pc, #220]	; (8003ba4 <HAL_GPIO_Init+0x334>)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003af6:	4a32      	ldr	r2, [pc, #200]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003afc:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b20:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b74:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <HAL_GPIO_Init+0x350>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f47f ae78 	bne.w	8003880 <HAL_GPIO_Init+0x10>
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	48000400 	.word	0x48000400
 8003bac:	48000800 	.word	0x48000800
 8003bb0:	48000c00 	.word	0x48000c00
 8003bb4:	48001000 	.word	0x48001000
 8003bb8:	48001400 	.word	0x48001400
 8003bbc:	48001800 	.word	0x48001800
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40007000 	.word	0x40007000

08003be4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10c      	bne.n	8003c10 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c02:	d10e      	bne.n	8003c22 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003c04:	f000 f8b0 	bl	8003d68 <HAL_PWREx_DisableLowPowerRunMode>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003c0e:	e016      	b.n	8003c3e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d001      	beq.n	8003c22 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003c1e:	f000 f893 	bl	8003d48 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003c28:	f023 0304 	bic.w	r3, r3, #4
 8003c2c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003c34:	bf30      	wfi
 8003c36:	e002      	b.n	8003c3e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003c38:	bf40      	sev
    __WFE();
 8003c3a:	bf20      	wfe
    __WFE();
 8003c3c:	bf20      	wfe
  }

}
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40007000 	.word	0x40007000
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 0307 	bic.w	r3, r3, #7
 8003c58:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003c5a:	f043 0303 	orr.w	r3, r3, #3
 8003c5e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003c6c:	bf30      	wfi
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40007000 	.word	0x40007000

08003c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003caa:	d130      	bne.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cac:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb8:	d038      	beq.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2232      	movs	r2, #50	; 0x32
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0c9b      	lsrs	r3, r3, #18
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce0:	e002      	b.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d102      	bne.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f2      	bne.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d08:	d110      	bne.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d007      	beq.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d24:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	20000000 	.word	0x20000000
 8003d44:	431bde83 	.word	0x431bde83

08003d48 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d56:	6013      	str	r3, [r2, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40007000 	.word	0x40007000

08003d68 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d78:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2232      	movs	r2, #50	; 0x32
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0c9b      	lsrs	r3, r3, #18
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d90:	e002      	b.n	8003d98 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d102      	bne.n	8003dac <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f2      	bne.n	8003d92 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db8:	d101      	bne.n	8003dbe <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e000      	b.n	8003dc0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	431bde83 	.word	0x431bde83

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e3ca      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dea:	4b97      	ldr	r3, [pc, #604]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df4:	4b94      	ldr	r3, [pc, #592]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80e4 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4a>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	f040 808b 	bne.w	8003f30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f040 8087 	bne.w	8003f30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e22:	4b89      	ldr	r3, [pc, #548]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e3a2      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	4b82      	ldr	r3, [pc, #520]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_RCC_OscConfig+0x7c>
 8003e4a:	4b7f      	ldr	r3, [pc, #508]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e52:	e005      	b.n	8003e60 <HAL_RCC_OscConfig+0x88>
 8003e54:	4b7c      	ldr	r3, [pc, #496]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5a:	091b      	lsrs	r3, r3, #4
 8003e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d223      	bcs.n	8003eac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fd55 	bl	8004918 <RCC_SetFlashLatencyFromMSIRange>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e383      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e78:	4b73      	ldr	r3, [pc, #460]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a72      	ldr	r2, [pc, #456]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	f043 0308 	orr.w	r3, r3, #8
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b70      	ldr	r3, [pc, #448]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	496d      	ldr	r1, [pc, #436]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	4968      	ldr	r1, [pc, #416]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
 8003eaa:	e025      	b.n	8003ef8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a65      	ldr	r2, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	f043 0308 	orr.w	r3, r3, #8
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4960      	ldr	r1, [pc, #384]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	495b      	ldr	r1, [pc, #364]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fd15 	bl	8004918 <RCC_SetFlashLatencyFromMSIRange>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e343      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef8:	f000 fc4a 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b52      	ldr	r3, [pc, #328]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	4950      	ldr	r1, [pc, #320]	; (800404c <HAL_RCC_OscConfig+0x274>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
 8003f14:	4a4e      	ldr	r2, [pc, #312]	; (8004050 <HAL_RCC_OscConfig+0x278>)
 8003f16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f18:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fd ff83 	bl	8001e28 <HAL_InitTick>
 8003f22:	4603      	mov	r3, r0
 8003f24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d052      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	e327      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d032      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f38:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f44:	f7fd ffc0 	bl	8001ec8 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f4c:	f7fd ffbc 	bl	8001ec8 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e310      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a36      	ldr	r2, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4931      	ldr	r1, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f88:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	492c      	ldr	r1, [pc, #176]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	e01a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a29      	ldr	r2, [pc, #164]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003faa:	f7fd ff8d 	bl	8001ec8 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fb2:	f7fd ff89 	bl	8001ec8 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e2dd      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x1da>
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d074      	beq.n	80040ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x21a>
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d10e      	bne.n	800400a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d10b      	bne.n	800400a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d064      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2f0>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d160      	bne.n	80040c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e2ba      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x24a>
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e026      	b.n	8004070 <HAL_RCC_OscConfig+0x298>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402a:	d115      	bne.n	8004058 <HAL_RCC_OscConfig+0x280>
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a05      	ldr	r2, [pc, #20]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 8004032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a02      	ldr	r2, [pc, #8]	; (8004048 <HAL_RCC_OscConfig+0x270>)
 800403e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	e014      	b.n	8004070 <HAL_RCC_OscConfig+0x298>
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000
 800404c:	0800cf70 	.word	0x0800cf70
 8004050:	20000000 	.word	0x20000000
 8004054:	20000004 	.word	0x20000004
 8004058:	4ba0      	ldr	r3, [pc, #640]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a9f      	ldr	r2, [pc, #636]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b9d      	ldr	r3, [pc, #628]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a9c      	ldr	r2, [pc, #624]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd ff26 	bl	8001ec8 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fd ff22 	bl	8001ec8 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e276      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004092:	4b92      	ldr	r3, [pc, #584]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x2a8>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd ff12 	bl	8001ec8 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fd ff0e 	bl	8001ec8 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e262      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ba:	4b88      	ldr	r3, [pc, #544]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2d0>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d060      	beq.n	8004198 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x310>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d119      	bne.n	8004116 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d116      	bne.n	8004116 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e8:	4b7c      	ldr	r3, [pc, #496]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_OscConfig+0x328>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e23f      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	4973      	ldr	r1, [pc, #460]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004114:	e040      	b.n	8004198 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d023      	beq.n	8004166 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411e:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6e      	ldr	r2, [pc, #440]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fd fecd 	bl	8001ec8 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004132:	f7fd fec9 	bl	8001ec8 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e21d      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004144:	4b65      	ldr	r3, [pc, #404]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004150:	4b62      	ldr	r3, [pc, #392]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	061b      	lsls	r3, r3, #24
 800415e:	495f      	ldr	r1, [pc, #380]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
 8004164:	e018      	b.n	8004198 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004166:	4b5d      	ldr	r3, [pc, #372]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5c      	ldr	r2, [pc, #368]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fd fea9 	bl	8001ec8 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417a:	f7fd fea5 	bl	8001ec8 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1f9      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03c      	beq.n	800421e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ac:	4b4b      	ldr	r3, [pc, #300]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd fe84 	bl	8001ec8 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c4:	f7fd fe80 	bl	8001ec8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1d4      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80041d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ef      	beq.n	80041c4 <HAL_RCC_OscConfig+0x3ec>
 80041e4:	e01b      	b.n	800421e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80041e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ec:	4a3b      	ldr	r2, [pc, #236]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd fe67 	bl	8001ec8 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fe:	f7fd fe63 	bl	8001ec8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1b7      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004210:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ef      	bne.n	80041fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 80a6 	beq.w	8004378 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422c:	2300      	movs	r3, #0
 800422e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004230:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10d      	bne.n	8004258 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	4a26      	ldr	r2, [pc, #152]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	6593      	str	r3, [r2, #88]	; 0x58
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004254:	2301      	movs	r3, #1
 8004256:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_RCC_OscConfig+0x508>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d118      	bne.n	8004296 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004264:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <HAL_RCC_OscConfig+0x508>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <HAL_RCC_OscConfig+0x508>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004270:	f7fd fe2a 	bl	8001ec8 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004278:	f7fd fe26 	bl	8001ec8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e17a      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <HAL_RCC_OscConfig+0x508>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d108      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4d8>
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ae:	e029      	b.n	8004304 <HAL_RCC_OscConfig+0x52c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d115      	bne.n	80042e4 <HAL_RCC_OscConfig+0x50c>
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a07      	ldr	r2, [pc, #28]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80042c0:	f043 0304 	orr.w	r3, r3, #4
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	4a03      	ldr	r2, [pc, #12]	; (80042dc <HAL_RCC_OscConfig+0x504>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d8:	e014      	b.n	8004304 <HAL_RCC_OscConfig+0x52c>
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40007000 	.word	0x40007000
 80042e4:	4b9c      	ldr	r3, [pc, #624]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a9b      	ldr	r2, [pc, #620]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f4:	4b98      	ldr	r3, [pc, #608]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	4a97      	ldr	r2, [pc, #604]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d016      	beq.n	800433a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fd fddc 	bl	8001ec8 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004312:	e00a      	b.n	800432a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004314:	f7fd fdd8 	bl	8001ec8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e12a      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800432a:	4b8b      	ldr	r3, [pc, #556]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ed      	beq.n	8004314 <HAL_RCC_OscConfig+0x53c>
 8004338:	e015      	b.n	8004366 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433a:	f7fd fdc5 	bl	8001ec8 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004340:	e00a      	b.n	8004358 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fd fdc1 	bl	8001ec8 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e113      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004358:	4b7f      	ldr	r3, [pc, #508]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1ed      	bne.n	8004342 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d105      	bne.n	8004378 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436c:	4b7a      	ldr	r3, [pc, #488]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	4a79      	ldr	r2, [pc, #484]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004376:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80fe 	beq.w	800457e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	2b02      	cmp	r3, #2
 8004388:	f040 80d0 	bne.w	800452c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800438c:	4b72      	ldr	r3, [pc, #456]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0203 	and.w	r2, r3, #3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	429a      	cmp	r2, r3
 800439e:	d130      	bne.n	8004402 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	3b01      	subs	r3, #1
 80043ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d127      	bne.n	8004402 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d11f      	bne.n	8004402 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043cc:	2a07      	cmp	r2, #7
 80043ce:	bf14      	ite	ne
 80043d0:	2201      	movne	r2, #1
 80043d2:	2200      	moveq	r2, #0
 80043d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d113      	bne.n	8004402 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	3b01      	subs	r3, #1
 80043e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d109      	bne.n	8004402 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d06e      	beq.n	80044e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b0c      	cmp	r3, #12
 8004406:	d069      	beq.n	80044dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004408:	4b53      	ldr	r3, [pc, #332]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004414:	4b50      	ldr	r3, [pc, #320]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0ad      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a4b      	ldr	r2, [pc, #300]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800442a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004430:	f7fd fd4a 	bl	8001ec8 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd fd46 	bl	8001ec8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e09a      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800444a:	4b43      	ldr	r3, [pc, #268]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004456:	4b40      	ldr	r3, [pc, #256]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4b40      	ldr	r3, [pc, #256]	; (800455c <HAL_RCC_OscConfig+0x784>)
 800445c:	4013      	ands	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004466:	3a01      	subs	r2, #1
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	4311      	orrs	r1, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004470:	0212      	lsls	r2, r2, #8
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004478:	0852      	lsrs	r2, r2, #1
 800447a:	3a01      	subs	r2, #1
 800447c:	0552      	lsls	r2, r2, #21
 800447e:	4311      	orrs	r1, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004484:	0852      	lsrs	r2, r2, #1
 8004486:	3a01      	subs	r2, #1
 8004488:	0652      	lsls	r2, r2, #25
 800448a:	4311      	orrs	r1, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004490:	0912      	lsrs	r2, r2, #4
 8004492:	0452      	lsls	r2, r2, #17
 8004494:	430a      	orrs	r2, r1
 8004496:	4930      	ldr	r1, [pc, #192]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004498:	4313      	orrs	r3, r2
 800449a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800449c:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044b4:	f7fd fd08 	bl	8001ec8 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd fd04 	bl	8001ec8 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e058      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044da:	e050      	b.n	800457e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e04f      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e0:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d148      	bne.n	800457e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f8:	4b17      	ldr	r3, [pc, #92]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 80044fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004502:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004504:	f7fd fce0 	bl	8001ec8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd fcdc 	bl	8001ec8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e030      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x734>
 800452a:	e028      	b.n	800457e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d023      	beq.n	800457a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <HAL_RCC_OscConfig+0x780>)
 8004538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fd fcc3 	bl	8001ec8 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	e00c      	b.n	8004560 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7fd fcbf 	bl	8001ec8 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d905      	bls.n	8004560 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e013      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
 8004558:	40021000 	.word	0x40021000
 800455c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_OscConfig+0x7b0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ec      	bne.n	8004546 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_OscConfig+0x7b0>)
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	4905      	ldr	r1, [pc, #20]	; (8004588 <HAL_RCC_OscConfig+0x7b0>)
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCC_OscConfig+0x7b4>)
 8004574:	4013      	ands	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
 8004578:	e001      	b.n	800457e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	feeefffc 	.word	0xfeeefffc

08004590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0e7      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b75      	ldr	r3, [pc, #468]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d910      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b72      	ldr	r3, [pc, #456]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 0207 	bic.w	r2, r3, #7
 80045ba:	4970      	ldr	r1, [pc, #448]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b6e      	ldr	r3, [pc, #440]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cf      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d010      	beq.n	8004602 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	4b66      	ldr	r3, [pc, #408]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d908      	bls.n	8004602 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f0:	4b63      	ldr	r3, [pc, #396]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4960      	ldr	r1, [pc, #384]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d04c      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b03      	cmp	r3, #3
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004616:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d121      	bne.n	8004666 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0a6      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462e:	4b54      	ldr	r3, [pc, #336]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d115      	bne.n	8004666 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e09a      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004646:	4b4e      	ldr	r3, [pc, #312]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e08e      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004656:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e086      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004666:	4b46      	ldr	r3, [pc, #280]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 0203 	bic.w	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4943      	ldr	r1, [pc, #268]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004678:	f7fd fc26 	bl	8001ec8 <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fd fc22 	bl	8001ec8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e06e      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	4b3a      	ldr	r3, [pc, #232]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 020c 	and.w	r2, r3, #12
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1eb      	bne.n	8004680 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d208      	bcs.n	80046d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	492b      	ldr	r1, [pc, #172]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d6:	4b29      	ldr	r3, [pc, #164]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d210      	bcs.n	8004706 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e4:	4b25      	ldr	r3, [pc, #148]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f023 0207 	bic.w	r2, r3, #7
 80046ec:	4923      	ldr	r1, [pc, #140]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <HAL_RCC_ClockConfig+0x1ec>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d001      	beq.n	8004706 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e036      	b.n	8004774 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4918      	ldr	r1, [pc, #96]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004720:	4313      	orrs	r3, r2
 8004722:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d009      	beq.n	8004744 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004730:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4910      	ldr	r1, [pc, #64]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004744:	f000 f824 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_RCC_ClockConfig+0x1f0>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	490b      	ldr	r1, [pc, #44]	; (8004784 <HAL_RCC_ClockConfig+0x1f4>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	4a09      	ldr	r2, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1f8>)
 8004762:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004764:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_ClockConfig+0x1fc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fd fb5d 	bl	8001e28 <HAL_InitTick>
 800476e:	4603      	mov	r3, r0
 8004770:	72fb      	strb	r3, [r7, #11]

  return status;
 8004772:	7afb      	ldrb	r3, [r7, #11]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40022000 	.word	0x40022000
 8004780:	40021000 	.word	0x40021000
 8004784:	0800cf70 	.word	0x0800cf70
 8004788:	20000000 	.word	0x20000000
 800478c:	20000004 	.word	0x20000004

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479e:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a8:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x34>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d121      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11e      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047c4:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047d0:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	e005      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047e0:	4b2d      	ldr	r3, [pc, #180]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004800:	e00a      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d102      	bne.n	800480e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e004      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d101      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004814:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004816:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d134      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800481e:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0xa6>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d003      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0xac>
 8004834:	e005      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004838:	617b      	str	r3, [r7, #20]
      break;
 800483a:	e005      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800483e:	617b      	str	r3, [r7, #20]
      break;
 8004840:	e002      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	617b      	str	r3, [r7, #20]
      break;
 8004846:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004848:	4b13      	ldr	r3, [pc, #76]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	3301      	adds	r3, #1
 8004854:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	fb03 f202 	mul.w	r2, r3, r2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	0e5b      	lsrs	r3, r3, #25
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	3301      	adds	r3, #1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004888:	69bb      	ldr	r3, [r7, #24]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	0800cf88 	.word	0x0800cf88
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	007a1200 	.word	0x007a1200

080048a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000000 	.word	0x20000000

080048c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048c4:	f7ff fff0 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	0800cf80 	.word	0x0800cf80

080048ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048f0:	f7ff ffda 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0adb      	lsrs	r3, r3, #11
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	0800cf80 	.word	0x0800cf80

08004918 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004924:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004930:	f7ff f9a6 	bl	8003c80 <HAL_PWREx_GetVoltageRange>
 8004934:	6178      	str	r0, [r7, #20]
 8004936:	e014      	b.n	8004962 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004942:	6593      	str	r3, [r2, #88]	; 0x58
 8004944:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004950:	f7ff f996 	bl	8003c80 <HAL_PWREx_GetVoltageRange>
 8004954:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	4a1d      	ldr	r2, [pc, #116]	; (80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800495c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004960:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d10b      	bne.n	8004982 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d919      	bls.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2ba0      	cmp	r3, #160	; 0xa0
 8004974:	d902      	bls.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004976:	2302      	movs	r3, #2
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e013      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800497c:	2301      	movs	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e010      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d902      	bls.n	800498e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004988:	2303      	movs	r3, #3
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	e00a      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d102      	bne.n	800499a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004994:	2302      	movs	r3, #2
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	e004      	b.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b70      	cmp	r3, #112	; 0x70
 800499e:	d101      	bne.n	80049a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049a0:	2301      	movs	r3, #1
 80049a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 0207 	bic.w	r2, r3, #7
 80049ac:	4909      	ldr	r1, [pc, #36]	; (80049d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d001      	beq.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40022000 	.word	0x40022000

080049d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049e0:	2300      	movs	r3, #0
 80049e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e4:	2300      	movs	r3, #0
 80049e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d041      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049fc:	d02a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a02:	d824      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a08:	d008      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a0e:	d81e      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a18:	d010      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a1a:	e018      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a1c:	4b86      	ldr	r3, [pc, #536]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a85      	ldr	r2, [pc, #532]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a28:	e015      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 facb 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a3a:	e00c      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3320      	adds	r3, #32
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fbb6 	bl	80051b4 <RCCEx_PLLSAI2_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	74fb      	strb	r3, [r7, #19]
      break;
 8004a52:	e000      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a5c:	4b76      	ldr	r3, [pc, #472]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a6a:	4973      	ldr	r1, [pc, #460]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a72:	e001      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
 8004a76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d041      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a8c:	d02a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a92:	d824      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a98:	d008      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a9e:	d81e      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aa8:	d010      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004aaa:	e018      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004aac:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a61      	ldr	r2, [pc, #388]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab8:	e015      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fa83 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aca:	e00c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3320      	adds	r3, #32
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fb6e 	bl	80051b4 <RCCEx_PLLSAI2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aec:	4b52      	ldr	r3, [pc, #328]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004afa:	494f      	ldr	r1, [pc, #316]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	7cfb      	ldrb	r3, [r7, #19]
 8004b06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80a0 	beq.w	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b30:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	4a40      	ldr	r2, [pc, #256]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a3a      	ldr	r2, [pc, #232]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b58:	f7fd f9b6 	bl	8001ec8 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b5e:	e009      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b60:	f7fd f9b2 	bl	8001ec8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d902      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	74fb      	strb	r3, [r7, #19]
        break;
 8004b72:	e005      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b74:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ef      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d15c      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01f      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d019      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ba4:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bb0:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	4a20      	ldr	r2, [pc, #128]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bd0:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d016      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be2:	f7fd f971 	bl	8001ec8 <HAL_GetTick>
 8004be6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be8:	e00b      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fd f96d 	bl	8001ec8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d902      	bls.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	74fb      	strb	r3, [r7, #19]
            break;
 8004c00:	e006      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ec      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c26:	4904      	ldr	r1, [pc, #16]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c2e:	e009      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	74bb      	strb	r3, [r7, #18]
 8004c34:	e006      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c44:	7c7b      	ldrb	r3, [r7, #17]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4a:	4b9e      	ldr	r3, [pc, #632]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	4a9d      	ldr	r2, [pc, #628]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c62:	4b98      	ldr	r3, [pc, #608]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f023 0203 	bic.w	r2, r3, #3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	4994      	ldr	r1, [pc, #592]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c84:	4b8f      	ldr	r3, [pc, #572]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f023 020c 	bic.w	r2, r3, #12
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	498c      	ldr	r1, [pc, #560]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ca6:	4b87      	ldr	r3, [pc, #540]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	4983      	ldr	r1, [pc, #524]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc8:	4b7e      	ldr	r3, [pc, #504]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	497b      	ldr	r1, [pc, #492]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cea:	4b76      	ldr	r3, [pc, #472]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf8:	4972      	ldr	r1, [pc, #456]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d0c:	4b6d      	ldr	r3, [pc, #436]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	496a      	ldr	r1, [pc, #424]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d2e:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3c:	4961      	ldr	r1, [pc, #388]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d50:	4b5c      	ldr	r3, [pc, #368]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5e:	4959      	ldr	r1, [pc, #356]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d80:	4950      	ldr	r1, [pc, #320]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d94:	4b4b      	ldr	r3, [pc, #300]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	4948      	ldr	r1, [pc, #288]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004db6:	4b43      	ldr	r3, [pc, #268]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	493f      	ldr	r1, [pc, #252]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d028      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd8:	4b3a      	ldr	r3, [pc, #232]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de6:	4937      	ldr	r1, [pc, #220]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df6:	d106      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df8:	4b32      	ldr	r3, [pc, #200]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a31      	ldr	r2, [pc, #196]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e02:	60d3      	str	r3, [r2, #12]
 8004e04:	e011      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e0e:	d10c      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	2101      	movs	r1, #1
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 f8d8 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e26:	7cfb      	ldrb	r3, [r7, #19]
 8004e28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d028      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e36:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	491f      	ldr	r1, [pc, #124]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e54:	d106      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e60:	60d3      	str	r3, [r2, #12]
 8004e62:	e011      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2101      	movs	r1, #1
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f8a9 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d02b      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea2:	4908      	ldr	r1, [pc, #32]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb2:	d109      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4a02      	ldr	r2, [pc, #8]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ebe:	60d3      	str	r3, [r2, #12]
 8004ec0:	e014      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f877 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02f      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f06:	4928      	ldr	r1, [pc, #160]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f16:	d10d      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f854 	bl	8004fcc <RCCEx_PLLSAI1_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d014      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	74bb      	strb	r3, [r7, #18]
 8004f32:	e011      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3320      	adds	r3, #32
 8004f42:	2102      	movs	r1, #2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f935 	bl	80051b4 <RCCEx_PLLSAI2_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f64:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f72:	490d      	ldr	r1, [pc, #52]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f96:	4904      	ldr	r1, [pc, #16]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40021000 	.word	0x40021000

08004fac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fb6:	f043 0304 	orr.w	r3, r3, #4
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40021000 	.word	0x40021000

08004fcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fda:	4b75      	ldr	r3, [pc, #468]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fe6:	4b72      	ldr	r3, [pc, #456]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0203 	and.w	r2, r3, #3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d10d      	bne.n	8005012 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
       ||
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ffe:	4b6c      	ldr	r3, [pc, #432]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
       ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d047      	beq.n	80050a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e044      	b.n	80050a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d018      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x86>
 8005020:	2b03      	cmp	r3, #3
 8005022:	d825      	bhi.n	8005070 <RCCEx_PLLSAI1_Config+0xa4>
 8005024:	2b01      	cmp	r3, #1
 8005026:	d002      	beq.n	800502e <RCCEx_PLLSAI1_Config+0x62>
 8005028:	2b02      	cmp	r3, #2
 800502a:	d009      	beq.n	8005040 <RCCEx_PLLSAI1_Config+0x74>
 800502c:	e020      	b.n	8005070 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800502e:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11d      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503e:	e01a      	b.n	8005076 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005040:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005048:	2b00      	cmp	r3, #0
 800504a:	d116      	bne.n	800507a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005050:	e013      	b.n	800507a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005052:	4b57      	ldr	r3, [pc, #348]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10f      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800505e:	4b54      	ldr	r3, [pc, #336]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800506e:	e006      	b.n	800507e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
      break;
 8005074:	e004      	b.n	8005080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10d      	bne.n	80050a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005086:	4b4a      	ldr	r3, [pc, #296]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	3b01      	subs	r3, #1
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	430b      	orrs	r3, r1
 800509c:	4944      	ldr	r1, [pc, #272]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d17d      	bne.n	80051a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050a8:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a40      	ldr	r2, [pc, #256]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b4:	f7fc ff08 	bl	8001ec8 <HAL_GetTick>
 80050b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ba:	e009      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050bc:	f7fc ff04 	bl	8001ec8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d902      	bls.n	80050d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	73fb      	strb	r3, [r7, #15]
        break;
 80050ce:	e005      	b.n	80050dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050d0:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ef      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d160      	bne.n	80051a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d111      	bne.n	800510c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e8:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6892      	ldr	r2, [r2, #8]
 80050f8:	0211      	lsls	r1, r2, #8
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68d2      	ldr	r2, [r2, #12]
 80050fe:	0912      	lsrs	r2, r2, #4
 8005100:	0452      	lsls	r2, r2, #17
 8005102:	430a      	orrs	r2, r1
 8005104:	492a      	ldr	r1, [pc, #168]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	610b      	str	r3, [r1, #16]
 800510a:	e027      	b.n	800515c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d112      	bne.n	8005138 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005112:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800511a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6892      	ldr	r2, [r2, #8]
 8005122:	0211      	lsls	r1, r2, #8
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6912      	ldr	r2, [r2, #16]
 8005128:	0852      	lsrs	r2, r2, #1
 800512a:	3a01      	subs	r2, #1
 800512c:	0552      	lsls	r2, r2, #21
 800512e:	430a      	orrs	r2, r1
 8005130:	491f      	ldr	r1, [pc, #124]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	610b      	str	r3, [r1, #16]
 8005136:	e011      	b.n	800515c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6892      	ldr	r2, [r2, #8]
 8005148:	0211      	lsls	r1, r2, #8
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6952      	ldr	r2, [r2, #20]
 800514e:	0852      	lsrs	r2, r2, #1
 8005150:	3a01      	subs	r2, #1
 8005152:	0652      	lsls	r2, r2, #25
 8005154:	430a      	orrs	r2, r1
 8005156:	4916      	ldr	r1, [pc, #88]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005166:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005168:	f7fc feae 	bl	8001ec8 <HAL_GetTick>
 800516c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800516e:	e009      	b.n	8005184 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005170:	f7fc feaa 	bl	8001ec8 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d902      	bls.n	8005184 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	73fb      	strb	r3, [r7, #15]
          break;
 8005182:	e005      	b.n	8005190 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ef      	beq.n	8005170 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	4904      	ldr	r1, [pc, #16]	; (80051b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000

080051b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051c2:	4b6a      	ldr	r3, [pc, #424]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d018      	beq.n	8005200 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051ce:	4b67      	ldr	r3, [pc, #412]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0203 	and.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d10d      	bne.n	80051fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
       ||
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051e6:	4b61      	ldr	r3, [pc, #388]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
       ||
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d047      	beq.n	800528a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
 80051fe:	e044      	b.n	800528a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d018      	beq.n	800523a <RCCEx_PLLSAI2_Config+0x86>
 8005208:	2b03      	cmp	r3, #3
 800520a:	d825      	bhi.n	8005258 <RCCEx_PLLSAI2_Config+0xa4>
 800520c:	2b01      	cmp	r3, #1
 800520e:	d002      	beq.n	8005216 <RCCEx_PLLSAI2_Config+0x62>
 8005210:	2b02      	cmp	r3, #2
 8005212:	d009      	beq.n	8005228 <RCCEx_PLLSAI2_Config+0x74>
 8005214:	e020      	b.n	8005258 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005216:	4b55      	ldr	r3, [pc, #340]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d11d      	bne.n	800525e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005226:	e01a      	b.n	800525e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005228:	4b50      	ldr	r3, [pc, #320]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005230:	2b00      	cmp	r3, #0
 8005232:	d116      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005238:	e013      	b.n	8005262 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800523a:	4b4c      	ldr	r3, [pc, #304]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10f      	bne.n	8005266 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005246:	4b49      	ldr	r3, [pc, #292]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005256:	e006      	b.n	8005266 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
      break;
 800525c:	e004      	b.n	8005268 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800525e:	bf00      	nop
 8005260:	e002      	b.n	8005268 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005266:	bf00      	nop
    }

    if(status == HAL_OK)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800526e:	4b3f      	ldr	r3, [pc, #252]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	3b01      	subs	r3, #1
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	430b      	orrs	r3, r1
 8005284:	4939      	ldr	r1, [pc, #228]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005286:	4313      	orrs	r3, r2
 8005288:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d167      	bne.n	8005360 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005290:	4b36      	ldr	r3, [pc, #216]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a35      	ldr	r2, [pc, #212]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529c:	f7fc fe14 	bl	8001ec8 <HAL_GetTick>
 80052a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052a2:	e009      	b.n	80052b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052a4:	f7fc fe10 	bl	8001ec8 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d902      	bls.n	80052b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	73fb      	strb	r3, [r7, #15]
        break;
 80052b6:	e005      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ef      	bne.n	80052a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d14a      	bne.n	8005360 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d111      	bne.n	80052f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052d0:	4b26      	ldr	r3, [pc, #152]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6892      	ldr	r2, [r2, #8]
 80052e0:	0211      	lsls	r1, r2, #8
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68d2      	ldr	r2, [r2, #12]
 80052e6:	0912      	lsrs	r2, r2, #4
 80052e8:	0452      	lsls	r2, r2, #17
 80052ea:	430a      	orrs	r2, r1
 80052ec:	491f      	ldr	r1, [pc, #124]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	614b      	str	r3, [r1, #20]
 80052f2:	e011      	b.n	8005318 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6892      	ldr	r2, [r2, #8]
 8005304:	0211      	lsls	r1, r2, #8
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6912      	ldr	r2, [r2, #16]
 800530a:	0852      	lsrs	r2, r2, #1
 800530c:	3a01      	subs	r2, #1
 800530e:	0652      	lsls	r2, r2, #25
 8005310:	430a      	orrs	r2, r1
 8005312:	4916      	ldr	r1, [pc, #88]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005314:	4313      	orrs	r3, r2
 8005316:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005318:	4b14      	ldr	r3, [pc, #80]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a13      	ldr	r2, [pc, #76]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fc fdd0 	bl	8001ec8 <HAL_GetTick>
 8005328:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800532a:	e009      	b.n	8005340 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800532c:	f7fc fdcc 	bl	8001ec8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d902      	bls.n	8005340 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	73fb      	strb	r3, [r7, #15]
          break;
 800533e:	e005      	b.n	800534c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ef      	beq.n	800532c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4904      	ldr	r1, [pc, #16]	; (800536c <RCCEx_PLLSAI2_Config+0x1b8>)
 800535c:	4313      	orrs	r3, r2
 800535e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000

08005370 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d06c      	beq.n	800545c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc f9ee 	bl	8001778 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	22ca      	movs	r2, #202	; 0xca
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2253      	movs	r2, #83	; 0x53
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f87c 	bl	80054b2 <RTC_EnterInitMode>
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d14b      	bne.n	800545c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6899      	ldr	r1, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68d2      	ldr	r2, [r2, #12]
 80053fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6919      	ldr	r1, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	041a      	lsls	r2, r3, #16
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f87f 	bl	8005518 <RTC_ExitInitMode>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d11b      	bne.n	800545c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0203 	bic.w	r2, r2, #3
 8005432:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	22ff      	movs	r2, #255	; 0xff
 8005452:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b084      	sub	sp, #16
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800547c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800547e:	f7fc fd23 	bl	8001ec8 <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005484:	e009      	b.n	800549a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005486:	f7fc fd1f 	bl	8001ec8 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005494:	d901      	bls.n	800549a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e007      	b.n	80054aa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ee      	beq.n	8005486 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d120      	bne.n	800550e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295
 80054d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80054d6:	f7fc fcf7 	bl	8001ec8 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80054dc:	e00d      	b.n	80054fa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80054de:	f7fc fcf3 	bl	8001ec8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ec:	d905      	bls.n	80054fa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2203      	movs	r2, #3
 80054f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <RTC_EnterInitMode+0x5c>
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d1e7      	bne.n	80054de <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800550e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <RTC_ExitInitMode+0x78>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <RTC_ExitInitMode+0x78>)
 800552a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800552e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <RTC_ExitInitMode+0x78>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ff92 	bl	8005466 <HAL_RTC_WaitForSynchro>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01e      	beq.n	8005586 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2203      	movs	r2, #3
 800554c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e017      	b.n	8005586 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005556:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <RTC_ExitInitMode+0x78>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <RTC_ExitInitMode+0x78>)
 800555c:	f023 0320 	bic.w	r3, r3, #32
 8005560:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff ff7f 	bl	8005466 <HAL_RTC_WaitForSynchro>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2203      	movs	r2, #3
 8005572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <RTC_ExitInitMode+0x78>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	4a04      	ldr	r2, [pc, #16]	; (8005590 <RTC_ExitInitMode+0x78>)
 8005580:	f043 0320 	orr.w	r3, r3, #32
 8005584:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40002800 	.word	0x40002800

08005594 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e07f      	b.n	80056ae <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	22ca      	movs	r2, #202	; 0xca
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2253      	movs	r2, #83	; 0x53
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055dc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80055ee:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d120      	bne.n	8005640 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80055fe:	f7fc fc63 	bl	8001ec8 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005604:	e015      	b.n	8005632 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005606:	f7fc fc5f 	bl	8001ec8 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005614:	d90d      	bls.n	8005632 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	22ff      	movs	r2, #255	; 0xff
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2203      	movs	r2, #3
 8005622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e03d      	b.n	80056ae <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0e2      	beq.n	8005606 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 0107 	bic.w	r1, r3, #7
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800565c:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005666:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005668:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800566e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005672:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005682:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005692:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	22ff      	movs	r2, #255	; 0xff
 800569a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40010400 	.word	0x40010400

080056bc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e04d      	b.n	800576e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	22ca      	movs	r2, #202	; 0xca
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2253      	movs	r2, #83	; 0x53
 80056f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005700:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005710:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005712:	f7fc fbd9 	bl	8001ec8 <HAL_GetTick>
 8005716:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005718:	e015      	b.n	8005746 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800571a:	f7fc fbd5 	bl	8001ec8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005728:	d90d      	bls.n	8005746 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e013      	b.n	800576e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0e2      	beq.n	800571a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	22ff      	movs	r2, #255	; 0xff
 800575a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005782:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005786:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00b      	beq.n	80057ae <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80057a6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f80b 	bl	80057c4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40010400 	.word	0x40010400

080057c4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e040      	b.n	800586c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fc f9d4 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	; 0x24
 8005804:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fc18 	bl	800604c <UART_SetConfig>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e022      	b.n	800586c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fec4 	bl	80065bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 ff4b 	bl	8006700 <UART_CheckIdleState>
 800586a:	4603      	mov	r3, r0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005888:	2b20      	cmp	r3, #32
 800588a:	f040 8082 	bne.w	8005992 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_Transmit+0x26>
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e07a      	b.n	8005994 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Transmit+0x38>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e073      	b.n	8005994 <HAL_UART_Transmit+0x120>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2221      	movs	r2, #33	; 0x21
 80058c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058c2:	f7fc fb01 	bl	8001ec8 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e0:	d108      	bne.n	80058f4 <HAL_UART_Transmit+0x80>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e003      	b.n	80058fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005904:	e02d      	b.n	8005962 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	2180      	movs	r1, #128	; 0x80
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 ff3e 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e039      	b.n	8005994 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	881a      	ldrh	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005932:	b292      	uxth	r2, r2
 8005934:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	3302      	adds	r3, #2
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	e008      	b.n	8005950 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	b292      	uxth	r2, r2
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	3301      	adds	r3, #1
 800594e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1cb      	bne.n	8005906 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2140      	movs	r1, #64	; 0x40
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 ff0a 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e005      	b.n	8005994 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d142      	bne.n	8005a38 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_UART_Receive_IT+0x22>
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e03b      	b.n	8005a3a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Receive_IT+0x34>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e034      	b.n	8005a3a <HAL_UART_Receive_IT+0x9e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <HAL_UART_Receive_IT+0xa8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01f      	beq.n	8005a28 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d018      	beq.n	8005a28 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	613b      	str	r3, [r7, #16]
   return(result);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e6      	bne.n	80059f6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 ff74 	bl	800691c <UART_Start_Receive_IT>
 8005a34:	4603      	mov	r3, r0
 8005a36:	e000      	b.n	8005a3a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3728      	adds	r7, #40	; 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40008000 	.word	0x40008000

08005a48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b0ba      	sub	sp, #232	; 0xe8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a72:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a76:	4013      	ands	r3, r2
 8005a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d115      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00f      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 82a6 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
      }
      return;
 8005aae:	e2a0      	b.n	8005ff2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8117 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ac6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005aca:	4b85      	ldr	r3, [pc, #532]	; (8005ce0 <HAL_UART_IRQHandler+0x298>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 810a 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d011      	beq.n	8005b04 <HAL_UART_IRQHandler+0xbc>
 8005ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2201      	movs	r2, #1
 8005af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d011      	beq.n	8005b34 <HAL_UART_IRQHandler+0xec>
 8005b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2202      	movs	r2, #2
 8005b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b2a:	f043 0204 	orr.w	r2, r3, #4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d011      	beq.n	8005b64 <HAL_UART_IRQHandler+0x11c>
 8005b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2204      	movs	r2, #4
 8005b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5a:	f043 0202 	orr.w	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d017      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00b      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b96:	f043 0208 	orr.w	r2, r3, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d012      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x18a>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc8:	f043 0220 	orr.w	r2, r3, #32
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 820c 	beq.w	8005ff6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00d      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d005      	beq.n	8005c2a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d04f      	beq.n	8005cca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 ff40 	bl	8006ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d141      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1d9      	bne.n	8005c3e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d013      	beq.n	8005cba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <HAL_UART_IRQHandler+0x29c>)
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd fda5 	bl	80037ee <HAL_DMA_Abort_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d017      	beq.n	8005cda <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb8:	e00f      	b.n	8005cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9b0 	bl	8006020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	e00b      	b.n	8005cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f9ac 	bl	8006020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	e007      	b.n	8005cda <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f9a8 	bl	8006020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005cd8:	e18d      	b.n	8005ff6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cda:	bf00      	nop
    return;
 8005cdc:	e18b      	b.n	8005ff6 <HAL_UART_IRQHandler+0x5ae>
 8005cde:	bf00      	nop
 8005ce0:	04000120 	.word	0x04000120
 8005ce4:	08006b77 	.word	0x08006b77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f040 8146 	bne.w	8005f7e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 813f 	beq.w	8005f7e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8138 	beq.w	8005f7e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2210      	movs	r2, #16
 8005d14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	f040 80b4 	bne.w	8005e8e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 815f 	beq.w	8005ffa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d46:	429a      	cmp	r2, r3
 8005d48:	f080 8157 	bcs.w	8005ffa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 8085 	bne.w	8005e72 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1da      	bne.n	8005d68 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3308      	adds	r3, #8
 8005db8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e1      	bne.n	8005db2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e3      	bne.n	8005dee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e42:	f023 0310 	bic.w	r3, r3, #16
 8005e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e54:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e4      	bne.n	8005e32 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fd fc80 	bl	8003772 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8d4 	bl	8006034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e8c:	e0b5      	b.n	8005ffa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80a7 	beq.w	8005ffe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80a2 	beq.w	8005ffe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ede:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e4      	bne.n	8005eba <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	623b      	str	r3, [r7, #32]
   return(result);
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f14:	633a      	str	r2, [r7, #48]	; 0x30
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e3      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0310 	bic.w	r3, r3, #16
 8005f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	69b9      	ldr	r1, [r7, #24]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e4      	bne.n	8005f3a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f85c 	bl	8006034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f7c:	e03f      	b.n	8005ffe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x560>
 8005f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ff88 	bl	8006eb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fa6:	e02d      	b.n	8006004 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01c      	beq.n	8006002 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
    }
    return;
 8005fd0:	e017      	b.n	8006002 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d012      	beq.n	8006004 <HAL_UART_IRQHandler+0x5bc>
 8005fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fdd9 	bl	8006ba2 <UART_EndTransmit_IT>
    return;
 8005ff0:	e008      	b.n	8006004 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ff2:	bf00      	nop
 8005ff4:	e006      	b.n	8006004 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005ff6:	bf00      	nop
 8005ff8:	e004      	b.n	8006004 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006002:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006004:	37e8      	adds	r7, #232	; 0xe8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800604c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006050:	b08a      	sub	sp, #40	; 0x28
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	431a      	orrs	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	431a      	orrs	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	4313      	orrs	r3, r2
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4ba4      	ldr	r3, [pc, #656]	; (800630c <UART_SetConfig+0x2c0>)
 800607c:	4013      	ands	r3, r2
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006084:	430b      	orrs	r3, r1
 8006086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a99      	ldr	r2, [pc, #612]	; (8006310 <UART_SetConfig+0x2c4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	4313      	orrs	r3, r2
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c8:	430a      	orrs	r2, r1
 80060ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a90      	ldr	r2, [pc, #576]	; (8006314 <UART_SetConfig+0x2c8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d126      	bne.n	8006124 <UART_SetConfig+0xd8>
 80060d6:	4b90      	ldr	r3, [pc, #576]	; (8006318 <UART_SetConfig+0x2cc>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d81b      	bhi.n	800611c <UART_SetConfig+0xd0>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0xa0>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	080060fd 	.word	0x080060fd
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	08006105 	.word	0x08006105
 80060f8:	08006115 	.word	0x08006115
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006102:	e116      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006104:	2302      	movs	r3, #2
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610a:	e112      	b.n	8006332 <UART_SetConfig+0x2e6>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006112:	e10e      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611a:	e10a      	b.n	8006332 <UART_SetConfig+0x2e6>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006122:	e106      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a7c      	ldr	r2, [pc, #496]	; (800631c <UART_SetConfig+0x2d0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d138      	bne.n	80061a0 <UART_SetConfig+0x154>
 800612e:	4b7a      	ldr	r3, [pc, #488]	; (8006318 <UART_SetConfig+0x2cc>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f003 030c 	and.w	r3, r3, #12
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d82d      	bhi.n	8006198 <UART_SetConfig+0x14c>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0xf8>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006179 	.word	0x08006179
 8006148:	08006199 	.word	0x08006199
 800614c:	08006199 	.word	0x08006199
 8006150:	08006199 	.word	0x08006199
 8006154:	08006189 	.word	0x08006189
 8006158:	08006199 	.word	0x08006199
 800615c:	08006199 	.word	0x08006199
 8006160:	08006199 	.word	0x08006199
 8006164:	08006181 	.word	0x08006181
 8006168:	08006199 	.word	0x08006199
 800616c:	08006199 	.word	0x08006199
 8006170:	08006199 	.word	0x08006199
 8006174:	08006191 	.word	0x08006191
 8006178:	2300      	movs	r3, #0
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	e0d8      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006180:	2302      	movs	r3, #2
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e0d4      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006188:	2304      	movs	r3, #4
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618e:	e0d0      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006190:	2308      	movs	r3, #8
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006196:	e0cc      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006198:	2310      	movs	r3, #16
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619e:	e0c8      	b.n	8006332 <UART_SetConfig+0x2e6>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5e      	ldr	r2, [pc, #376]	; (8006320 <UART_SetConfig+0x2d4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d125      	bne.n	80061f6 <UART_SetConfig+0x1aa>
 80061aa:	4b5b      	ldr	r3, [pc, #364]	; (8006318 <UART_SetConfig+0x2cc>)
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061b4:	2b30      	cmp	r3, #48	; 0x30
 80061b6:	d016      	beq.n	80061e6 <UART_SetConfig+0x19a>
 80061b8:	2b30      	cmp	r3, #48	; 0x30
 80061ba:	d818      	bhi.n	80061ee <UART_SetConfig+0x1a2>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d00a      	beq.n	80061d6 <UART_SetConfig+0x18a>
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d814      	bhi.n	80061ee <UART_SetConfig+0x1a2>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <UART_SetConfig+0x182>
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d008      	beq.n	80061de <UART_SetConfig+0x192>
 80061cc:	e00f      	b.n	80061ee <UART_SetConfig+0x1a2>
 80061ce:	2300      	movs	r3, #0
 80061d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d4:	e0ad      	b.n	8006332 <UART_SetConfig+0x2e6>
 80061d6:	2302      	movs	r3, #2
 80061d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061dc:	e0a9      	b.n	8006332 <UART_SetConfig+0x2e6>
 80061de:	2304      	movs	r3, #4
 80061e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e4:	e0a5      	b.n	8006332 <UART_SetConfig+0x2e6>
 80061e6:	2308      	movs	r3, #8
 80061e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ec:	e0a1      	b.n	8006332 <UART_SetConfig+0x2e6>
 80061ee:	2310      	movs	r3, #16
 80061f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f4:	e09d      	b.n	8006332 <UART_SetConfig+0x2e6>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a4a      	ldr	r2, [pc, #296]	; (8006324 <UART_SetConfig+0x2d8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d125      	bne.n	800624c <UART_SetConfig+0x200>
 8006200:	4b45      	ldr	r3, [pc, #276]	; (8006318 <UART_SetConfig+0x2cc>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800620a:	2bc0      	cmp	r3, #192	; 0xc0
 800620c:	d016      	beq.n	800623c <UART_SetConfig+0x1f0>
 800620e:	2bc0      	cmp	r3, #192	; 0xc0
 8006210:	d818      	bhi.n	8006244 <UART_SetConfig+0x1f8>
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d00a      	beq.n	800622c <UART_SetConfig+0x1e0>
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d814      	bhi.n	8006244 <UART_SetConfig+0x1f8>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <UART_SetConfig+0x1d8>
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d008      	beq.n	8006234 <UART_SetConfig+0x1e8>
 8006222:	e00f      	b.n	8006244 <UART_SetConfig+0x1f8>
 8006224:	2300      	movs	r3, #0
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622a:	e082      	b.n	8006332 <UART_SetConfig+0x2e6>
 800622c:	2302      	movs	r3, #2
 800622e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006232:	e07e      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623a:	e07a      	b.n	8006332 <UART_SetConfig+0x2e6>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006242:	e076      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624a:	e072      	b.n	8006332 <UART_SetConfig+0x2e6>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a35      	ldr	r2, [pc, #212]	; (8006328 <UART_SetConfig+0x2dc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d12a      	bne.n	80062ac <UART_SetConfig+0x260>
 8006256:	4b30      	ldr	r3, [pc, #192]	; (8006318 <UART_SetConfig+0x2cc>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006264:	d01a      	beq.n	800629c <UART_SetConfig+0x250>
 8006266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800626a:	d81b      	bhi.n	80062a4 <UART_SetConfig+0x258>
 800626c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006270:	d00c      	beq.n	800628c <UART_SetConfig+0x240>
 8006272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006276:	d815      	bhi.n	80062a4 <UART_SetConfig+0x258>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <UART_SetConfig+0x238>
 800627c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006280:	d008      	beq.n	8006294 <UART_SetConfig+0x248>
 8006282:	e00f      	b.n	80062a4 <UART_SetConfig+0x258>
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628a:	e052      	b.n	8006332 <UART_SetConfig+0x2e6>
 800628c:	2302      	movs	r3, #2
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006292:	e04e      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006294:	2304      	movs	r3, #4
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629a:	e04a      	b.n	8006332 <UART_SetConfig+0x2e6>
 800629c:	2308      	movs	r3, #8
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a2:	e046      	b.n	8006332 <UART_SetConfig+0x2e6>
 80062a4:	2310      	movs	r3, #16
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062aa:	e042      	b.n	8006332 <UART_SetConfig+0x2e6>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a17      	ldr	r2, [pc, #92]	; (8006310 <UART_SetConfig+0x2c4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d13a      	bne.n	800632c <UART_SetConfig+0x2e0>
 80062b6:	4b18      	ldr	r3, [pc, #96]	; (8006318 <UART_SetConfig+0x2cc>)
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c4:	d01a      	beq.n	80062fc <UART_SetConfig+0x2b0>
 80062c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ca:	d81b      	bhi.n	8006304 <UART_SetConfig+0x2b8>
 80062cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d0:	d00c      	beq.n	80062ec <UART_SetConfig+0x2a0>
 80062d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d6:	d815      	bhi.n	8006304 <UART_SetConfig+0x2b8>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <UART_SetConfig+0x298>
 80062dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e0:	d008      	beq.n	80062f4 <UART_SetConfig+0x2a8>
 80062e2:	e00f      	b.n	8006304 <UART_SetConfig+0x2b8>
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e022      	b.n	8006332 <UART_SetConfig+0x2e6>
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e01e      	b.n	8006332 <UART_SetConfig+0x2e6>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e01a      	b.n	8006332 <UART_SetConfig+0x2e6>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006302:	e016      	b.n	8006332 <UART_SetConfig+0x2e6>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630a:	e012      	b.n	8006332 <UART_SetConfig+0x2e6>
 800630c:	efff69f3 	.word	0xefff69f3
 8006310:	40008000 	.word	0x40008000
 8006314:	40013800 	.word	0x40013800
 8006318:	40021000 	.word	0x40021000
 800631c:	40004400 	.word	0x40004400
 8006320:	40004800 	.word	0x40004800
 8006324:	40004c00 	.word	0x40004c00
 8006328:	40005000 	.word	0x40005000
 800632c:	2310      	movs	r3, #16
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a9f      	ldr	r2, [pc, #636]	; (80065b4 <UART_SetConfig+0x568>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d17a      	bne.n	8006432 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800633c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006340:	2b08      	cmp	r3, #8
 8006342:	d824      	bhi.n	800638e <UART_SetConfig+0x342>
 8006344:	a201      	add	r2, pc, #4	; (adr r2, 800634c <UART_SetConfig+0x300>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	08006371 	.word	0x08006371
 8006350:	0800638f 	.word	0x0800638f
 8006354:	08006379 	.word	0x08006379
 8006358:	0800638f 	.word	0x0800638f
 800635c:	0800637f 	.word	0x0800637f
 8006360:	0800638f 	.word	0x0800638f
 8006364:	0800638f 	.word	0x0800638f
 8006368:	0800638f 	.word	0x0800638f
 800636c:	08006387 	.word	0x08006387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006370:	f7fe faa6 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8006374:	61f8      	str	r0, [r7, #28]
        break;
 8006376:	e010      	b.n	800639a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006378:	4b8f      	ldr	r3, [pc, #572]	; (80065b8 <UART_SetConfig+0x56c>)
 800637a:	61fb      	str	r3, [r7, #28]
        break;
 800637c:	e00d      	b.n	800639a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637e:	f7fe fa07 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8006382:	61f8      	str	r0, [r7, #28]
        break;
 8006384:	e009      	b.n	800639a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638a:	61fb      	str	r3, [r7, #28]
        break;
 800638c:	e005      	b.n	800639a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006398:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80fb 	beq.w	8006598 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	4413      	add	r3, r2
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d305      	bcc.n	80063be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d903      	bls.n	80063c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063c4:	e0e8      	b.n	8006598 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	2200      	movs	r2, #0
 80063ca:	461c      	mov	r4, r3
 80063cc:	4615      	mov	r5, r2
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	022b      	lsls	r3, r5, #8
 80063d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063dc:	0222      	lsls	r2, r4, #8
 80063de:	68f9      	ldr	r1, [r7, #12]
 80063e0:	6849      	ldr	r1, [r1, #4]
 80063e2:	0849      	lsrs	r1, r1, #1
 80063e4:	2000      	movs	r0, #0
 80063e6:	4688      	mov	r8, r1
 80063e8:	4681      	mov	r9, r0
 80063ea:	eb12 0a08 	adds.w	sl, r2, r8
 80063ee:	eb43 0b09 	adc.w	fp, r3, r9
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	603b      	str	r3, [r7, #0]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006400:	4650      	mov	r0, sl
 8006402:	4659      	mov	r1, fp
 8006404:	f7fa fc50 	bl	8000ca8 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4613      	mov	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006416:	d308      	bcc.n	800642a <UART_SetConfig+0x3de>
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641e:	d204      	bcs.n	800642a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	60da      	str	r2, [r3, #12]
 8006428:	e0b6      	b.n	8006598 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006430:	e0b2      	b.n	8006598 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643a:	d15e      	bne.n	80064fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800643c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006440:	2b08      	cmp	r3, #8
 8006442:	d828      	bhi.n	8006496 <UART_SetConfig+0x44a>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0x400>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	08006471 	.word	0x08006471
 8006450:	08006479 	.word	0x08006479
 8006454:	08006481 	.word	0x08006481
 8006458:	08006497 	.word	0x08006497
 800645c:	08006487 	.word	0x08006487
 8006460:	08006497 	.word	0x08006497
 8006464:	08006497 	.word	0x08006497
 8006468:	08006497 	.word	0x08006497
 800646c:	0800648f 	.word	0x0800648f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006470:	f7fe fa26 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8006474:	61f8      	str	r0, [r7, #28]
        break;
 8006476:	e014      	b.n	80064a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006478:	f7fe fa38 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 800647c:	61f8      	str	r0, [r7, #28]
        break;
 800647e:	e010      	b.n	80064a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006480:	4b4d      	ldr	r3, [pc, #308]	; (80065b8 <UART_SetConfig+0x56c>)
 8006482:	61fb      	str	r3, [r7, #28]
        break;
 8006484:	e00d      	b.n	80064a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006486:	f7fe f983 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800648a:	61f8      	str	r0, [r7, #28]
        break;
 800648c:	e009      	b.n	80064a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006492:	61fb      	str	r3, [r7, #28]
        break;
 8006494:	e005      	b.n	80064a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d077      	beq.n	8006598 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	005a      	lsls	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	441a      	add	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2b0f      	cmp	r3, #15
 80064c2:	d916      	bls.n	80064f2 <UART_SetConfig+0x4a6>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ca:	d212      	bcs.n	80064f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f023 030f 	bic.w	r3, r3, #15
 80064d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	8afb      	ldrh	r3, [r7, #22]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	8afa      	ldrh	r2, [r7, #22]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	e052      	b.n	8006598 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064f8:	e04e      	b.n	8006598 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d827      	bhi.n	8006552 <UART_SetConfig+0x506>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0x4bc>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	08006553 	.word	0x08006553
 8006518:	08006543 	.word	0x08006543
 800651c:	08006553 	.word	0x08006553
 8006520:	08006553 	.word	0x08006553
 8006524:	08006553 	.word	0x08006553
 8006528:	0800654b 	.word	0x0800654b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800652c:	f7fe f9c8 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8006530:	61f8      	str	r0, [r7, #28]
        break;
 8006532:	e014      	b.n	800655e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006534:	f7fe f9da 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8006538:	61f8      	str	r0, [r7, #28]
        break;
 800653a:	e010      	b.n	800655e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <UART_SetConfig+0x56c>)
 800653e:	61fb      	str	r3, [r7, #28]
        break;
 8006540:	e00d      	b.n	800655e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006542:	f7fe f925 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8006546:	61f8      	str	r0, [r7, #28]
        break;
 8006548:	e009      	b.n	800655e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654e:	61fb      	str	r3, [r7, #28]
        break;
 8006550:	e005      	b.n	800655e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800655c:	bf00      	nop
    }

    if (pclk != 0U)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d019      	beq.n	8006598 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	085a      	lsrs	r2, r3, #1
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	fbb2 f3f3 	udiv	r3, r2, r3
 8006576:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b0f      	cmp	r3, #15
 800657c:	d909      	bls.n	8006592 <UART_SetConfig+0x546>
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006584:	d205      	bcs.n	8006592 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60da      	str	r2, [r3, #12]
 8006590:	e002      	b.n	8006598 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3728      	adds	r7, #40	; 0x28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065b2:	bf00      	nop
 80065b4:	40008000 	.word	0x40008000
 80065b8:	00f42400 	.word	0x00f42400

080065bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ba:	d10a      	bne.n	80066d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af02      	add	r7, sp, #8
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006710:	f7fb fbda 	bl	8001ec8 <HAL_GetTick>
 8006714:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b08      	cmp	r3, #8
 8006722:	d10e      	bne.n	8006742 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f82d 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e023      	b.n	800678a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b04      	cmp	r3, #4
 800674e:	d10e      	bne.n	800676e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f817 	bl	8006792 <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e00d      	b.n	800678a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b09c      	sub	sp, #112	; 0x70
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	e0a5      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	f000 80a1 	beq.w	80068f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ae:	f7fb fb8b 	bl	8001ec8 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80067be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d13e      	bne.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d8:	667b      	str	r3, [r7, #100]	; 0x64
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e6      	bne.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	663b      	str	r3, [r7, #96]	; 0x60
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006816:	64ba      	str	r2, [r7, #72]	; 0x48
 8006818:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800681c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e067      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d04f      	beq.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685e:	d147      	bne.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006868:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800687e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
 800688a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800688e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	613b      	str	r3, [r7, #16]
   return(result);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f023 0301 	bic.w	r3, r3, #1
 80068b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068bc:	623a      	str	r2, [r7, #32]
 80068be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	69f9      	ldr	r1, [r7, #28]
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e5      	bne.n	800689c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2220      	movs	r2, #32
 80068da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e010      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	429a      	cmp	r2, r3
 800690c:	f43f af4a 	beq.w	80067a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3770      	adds	r7, #112	; 0x70
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800691c:	b480      	push	{r7}
 800691e:	b097      	sub	sp, #92	; 0x5c
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	d10e      	bne.n	800696e <UART_Start_Receive_IT+0x52>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <UART_Start_Receive_IT+0x48>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800695e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006962:	e02d      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	22ff      	movs	r2, #255	; 0xff
 8006968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800696c:	e028      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <UART_Start_Receive_IT+0x76>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <UART_Start_Receive_IT+0x6c>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	22ff      	movs	r2, #255	; 0xff
 8006982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006986:	e01b      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	227f      	movs	r2, #127	; 0x7f
 800698c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006990:	e016      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800699a:	d10d      	bne.n	80069b8 <UART_Start_Receive_IT+0x9c>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <UART_Start_Receive_IT+0x92>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	227f      	movs	r2, #127	; 0x7f
 80069a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ac:	e008      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	223f      	movs	r2, #63	; 0x3f
 80069b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069b6:	e003      	b.n	80069c0 <UART_Start_Receive_IT+0xa4>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2222      	movs	r2, #34	; 0x22
 80069cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	657b      	str	r3, [r7, #84]	; 0x54
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3308      	adds	r3, #8
 80069ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80069f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e5      	bne.n	80069ce <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d107      	bne.n	8006a1c <UART_Start_Receive_IT+0x100>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a24      	ldr	r2, [pc, #144]	; (8006aa8 <UART_Start_Receive_IT+0x18c>)
 8006a18:	665a      	str	r2, [r3, #100]	; 0x64
 8006a1a:	e002      	b.n	8006a22 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a23      	ldr	r2, [pc, #140]	; (8006aac <UART_Start_Receive_IT+0x190>)
 8006a20:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d019      	beq.n	8006a66 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
 8006a52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e6      	bne.n	8006a32 <UART_Start_Receive_IT+0x116>
 8006a64:	e018      	b.n	8006a98 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	613b      	str	r3, [r7, #16]
   return(result);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f043 0320 	orr.w	r3, r3, #32
 8006a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	69f9      	ldr	r1, [r7, #28]
 8006a8a:	6a3a      	ldr	r2, [r7, #32]
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e6      	bne.n	8006a66 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	375c      	adds	r7, #92	; 0x5c
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	08006d57 	.word	0x08006d57
 8006aac:	08006bf7 	.word	0x08006bf7

08006ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b095      	sub	sp, #84	; 0x54
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e6      	bne.n	8006ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3308      	adds	r3, #8
 8006af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d118      	bne.n	8006b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6979      	ldr	r1, [r7, #20]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	613b      	str	r3, [r7, #16]
   return(result);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b6a:	bf00      	nop
 8006b6c:	3754      	adds	r7, #84	; 0x54
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7ff fa43 	bl	8006020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b088      	sub	sp, #32
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6979      	ldr	r1, [r7, #20]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff fa0f 	bl	800600c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bee:	bf00      	nop
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b096      	sub	sp, #88	; 0x58
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c0c:	2b22      	cmp	r3, #34	; 0x22
 8006c0e:	f040 8094 	bne.w	8006d3a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c18:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c20:	b2d9      	uxtb	r1, r3
 8006c22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2c:	400a      	ands	r2, r1
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d179      	bne.n	8006d4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c78:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e6      	bne.n	8006c5a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3308      	adds	r3, #8
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cac:	633a      	str	r2, [r7, #48]	; 0x30
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e5      	bne.n	8006c8c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d12e      	bne.n	8006d32 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	69b9      	ldr	r1, [r7, #24]
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	617b      	str	r3, [r7, #20]
   return(result);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e6      	bne.n	8006cda <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d103      	bne.n	8006d22 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff f982 	bl	8006034 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d30:	e00d      	b.n	8006d4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fa fa82 	bl	800123c <HAL_UART_RxCpltCallback>
}
 8006d38:	e009      	b.n	8006d4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	8b1b      	ldrh	r3, [r3, #24]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0208 	orr.w	r2, r2, #8
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	831a      	strh	r2, [r3, #24]
}
 8006d4e:	bf00      	nop
 8006d50:	3758      	adds	r7, #88	; 0x58
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b096      	sub	sp, #88	; 0x58
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d6c:	2b22      	cmp	r3, #34	; 0x22
 8006d6e:	f040 8094 	bne.w	8006e9a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d80:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	1c9a      	adds	r2, r3, #2
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d179      	bne.n	8006eae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e6      	bne.n	8006dba <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d12e      	bne.n	8006e92 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f023 0310 	bic.w	r3, r3, #16
 8006e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	613b      	str	r3, [r7, #16]
   return(result);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e6      	bne.n	8006e3a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d103      	bne.n	8006e82 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2210      	movs	r2, #16
 8006e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff f8d2 	bl	8006034 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e90:	e00d      	b.n	8006eae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fa f9d2 	bl	800123c <HAL_UART_RxCpltCallback>
}
 8006e98:	e009      	b.n	8006eae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	8b1b      	ldrh	r3, [r3, #24]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	831a      	strh	r2, [r3, #24]
}
 8006eae:	bf00      	nop
 8006eb0:	3758      	adds	r7, #88	; 0x58
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	0000      	movs	r0, r0
 8006ecc:	0000      	movs	r0, r0
	...

08006ed0 <_initVoltsArray>:

/*
 * Private functions
 */

static void _initVoltsArray(void){
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
    _vs[0] = 3.200; 
 8006ed4:	49b4      	ldr	r1, [pc, #720]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006ed6:	a36e      	add	r3, pc, #440	; (adr r3, 8007090 <_initVoltsArray+0x1c0>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	e9c1 2300 	strd	r2, r3, [r1]
    _vs[1] = 3.250; _vs[2] = 3.300; _vs[3] = 3.350; _vs[4] = 3.400; _vs[5] = 3.450;
 8006ee0:	49b1      	ldr	r1, [pc, #708]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	4bb1      	ldr	r3, [pc, #708]	; (80071ac <_initVoltsArray+0x2dc>)
 8006ee8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006eec:	49ae      	ldr	r1, [pc, #696]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006eee:	a36a      	add	r3, pc, #424	; (adr r3, 8007098 <_initVoltsArray+0x1c8>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006ef8:	49ab      	ldr	r1, [pc, #684]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006efa:	a369      	add	r3, pc, #420	; (adr r3, 80070a0 <_initVoltsArray+0x1d0>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8006f04:	49a8      	ldr	r1, [pc, #672]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f06:	a368      	add	r3, pc, #416	; (adr r3, 80070a8 <_initVoltsArray+0x1d8>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8006f10:	49a5      	ldr	r1, [pc, #660]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f12:	a367      	add	r3, pc, #412	; (adr r3, 80070b0 <_initVoltsArray+0x1e0>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    _vs[6] = 3.500; _vs[7] = 3.550; _vs[8] = 3.600; _vs[9] = 3.650; _vs[10] = 3.700;
 8006f1c:	49a2      	ldr	r1, [pc, #648]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f1e:	f04f 0200 	mov.w	r2, #0
 8006f22:	4ba3      	ldr	r3, [pc, #652]	; (80071b0 <_initVoltsArray+0x2e0>)
 8006f24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8006f28:	499f      	ldr	r1, [pc, #636]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f2a:	a363      	add	r3, pc, #396	; (adr r3, 80070b8 <_initVoltsArray+0x1e8>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006f34:	499c      	ldr	r1, [pc, #624]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f36:	a362      	add	r3, pc, #392	; (adr r3, 80070c0 <_initVoltsArray+0x1f0>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8006f40:	4999      	ldr	r1, [pc, #612]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f42:	a361      	add	r3, pc, #388	; (adr r3, 80070c8 <_initVoltsArray+0x1f8>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006f4c:	4996      	ldr	r1, [pc, #600]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f4e:	a360      	add	r3, pc, #384	; (adr r3, 80070d0 <_initVoltsArray+0x200>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    _vs[11] = 3.703; _vs[12] = 3.706; _vs[13] = 3.710; _vs[14] = 3.713; _vs[15] = 3.716;
 8006f58:	4993      	ldr	r1, [pc, #588]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f5a:	a35f      	add	r3, pc, #380	; (adr r3, 80070d8 <_initVoltsArray+0x208>)
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8006f64:	4990      	ldr	r1, [pc, #576]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f66:	a35e      	add	r3, pc, #376	; (adr r3, 80070e0 <_initVoltsArray+0x210>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006f70:	498d      	ldr	r1, [pc, #564]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f72:	a35d      	add	r3, pc, #372	; (adr r3, 80070e8 <_initVoltsArray+0x218>)
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006f7c:	498a      	ldr	r1, [pc, #552]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f7e:	a35c      	add	r3, pc, #368	; (adr r3, 80070f0 <_initVoltsArray+0x220>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006f88:	4987      	ldr	r1, [pc, #540]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f8a:	a35b      	add	r3, pc, #364	; (adr r3, 80070f8 <_initVoltsArray+0x228>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    _vs[16] = 3.719; _vs[17] = 3.723; _vs[18] = 3.726; _vs[19] = 3.729; _vs[20] = 3.732;
 8006f94:	4984      	ldr	r1, [pc, #528]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006f96:	a35a      	add	r3, pc, #360	; (adr r3, 8007100 <_initVoltsArray+0x230>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006fa0:	4981      	ldr	r1, [pc, #516]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006fa2:	a359      	add	r3, pc, #356	; (adr r3, 8007108 <_initVoltsArray+0x238>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8006fac:	497e      	ldr	r1, [pc, #504]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006fae:	a358      	add	r3, pc, #352	; (adr r3, 8007110 <_initVoltsArray+0x240>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8006fb8:	497b      	ldr	r1, [pc, #492]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006fba:	a357      	add	r3, pc, #348	; (adr r3, 8007118 <_initVoltsArray+0x248>)
 8006fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8006fc4:	4978      	ldr	r1, [pc, #480]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006fc6:	a356      	add	r3, pc, #344	; (adr r3, 8007120 <_initVoltsArray+0x250>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    _vs[21] = 3.735; _vs[22] = 3.739; _vs[23] = 3.742; _vs[24] = 3.745; _vs[25] = 3.748;
 8006fd0:	4975      	ldr	r1, [pc, #468]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006fd2:	a355      	add	r3, pc, #340	; (adr r3, 8007128 <_initVoltsArray+0x258>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8006fdc:	4972      	ldr	r1, [pc, #456]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006fde:	a354      	add	r3, pc, #336	; (adr r3, 8007130 <_initVoltsArray+0x260>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
 8006fe8:	496f      	ldr	r1, [pc, #444]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006fea:	a353      	add	r3, pc, #332	; (adr r3, 8007138 <_initVoltsArray+0x268>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8006ff4:	496c      	ldr	r1, [pc, #432]	; (80071a8 <_initVoltsArray+0x2d8>)
 8006ff6:	a352      	add	r3, pc, #328	; (adr r3, 8007140 <_initVoltsArray+0x270>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8007000:	4969      	ldr	r1, [pc, #420]	; (80071a8 <_initVoltsArray+0x2d8>)
 8007002:	a351      	add	r3, pc, #324	; (adr r3, 8007148 <_initVoltsArray+0x278>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    _vs[26] = 3.752; _vs[27] = 3.755; _vs[28] = 3.758; _vs[29] = 3.761; _vs[30] = 3.765;
 800700c:	4966      	ldr	r1, [pc, #408]	; (80071a8 <_initVoltsArray+0x2d8>)
 800700e:	a350      	add	r3, pc, #320	; (adr r3, 8007150 <_initVoltsArray+0x280>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
 8007018:	4963      	ldr	r1, [pc, #396]	; (80071a8 <_initVoltsArray+0x2d8>)
 800701a:	a34f      	add	r3, pc, #316	; (adr r3, 8007158 <_initVoltsArray+0x288>)
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8007024:	4960      	ldr	r1, [pc, #384]	; (80071a8 <_initVoltsArray+0x2d8>)
 8007026:	a34e      	add	r3, pc, #312	; (adr r3, 8007160 <_initVoltsArray+0x290>)
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8007030:	495d      	ldr	r1, [pc, #372]	; (80071a8 <_initVoltsArray+0x2d8>)
 8007032:	a34d      	add	r3, pc, #308	; (adr r3, 8007168 <_initVoltsArray+0x298>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 800703c:	495a      	ldr	r1, [pc, #360]	; (80071a8 <_initVoltsArray+0x2d8>)
 800703e:	a34c      	add	r3, pc, #304	; (adr r3, 8007170 <_initVoltsArray+0x2a0>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    _vs[31] = 3.768; _vs[32] = 3.771; _vs[33] = 3.774; _vs[34] = 3.777; _vs[35] = 3.781;
 8007048:	4957      	ldr	r1, [pc, #348]	; (80071a8 <_initVoltsArray+0x2d8>)
 800704a:	a34b      	add	r3, pc, #300	; (adr r3, 8007178 <_initVoltsArray+0x2a8>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8007054:	4954      	ldr	r1, [pc, #336]	; (80071a8 <_initVoltsArray+0x2d8>)
 8007056:	a34a      	add	r3, pc, #296	; (adr r3, 8007180 <_initVoltsArray+0x2b0>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
 8007060:	4951      	ldr	r1, [pc, #324]	; (80071a8 <_initVoltsArray+0x2d8>)
 8007062:	a349      	add	r3, pc, #292	; (adr r3, 8007188 <_initVoltsArray+0x2b8>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 800706c:	494e      	ldr	r1, [pc, #312]	; (80071a8 <_initVoltsArray+0x2d8>)
 800706e:	a348      	add	r3, pc, #288	; (adr r3, 8007190 <_initVoltsArray+0x2c0>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 8007078:	494b      	ldr	r1, [pc, #300]	; (80071a8 <_initVoltsArray+0x2d8>)
 800707a:	a347      	add	r3, pc, #284	; (adr r3, 8007198 <_initVoltsArray+0x2c8>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    _vs[36] = 3.784; _vs[37] = 3.787; _vs[38] = 3.790; _vs[39] = 3.794; _vs[40] = 3.797;
 8007084:	4948      	ldr	r1, [pc, #288]	; (80071a8 <_initVoltsArray+0x2d8>)
 8007086:	a346      	add	r3, pc, #280	; (adr r3, 80071a0 <_initVoltsArray+0x2d0>)
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	e092      	b.n	80071b4 <_initVoltsArray+0x2e4>
 800708e:	bf00      	nop
 8007090:	9999999a 	.word	0x9999999a
 8007094:	40099999 	.word	0x40099999
 8007098:	66666666 	.word	0x66666666
 800709c:	400a6666 	.word	0x400a6666
 80070a0:	cccccccd 	.word	0xcccccccd
 80070a4:	400acccc 	.word	0x400acccc
 80070a8:	33333333 	.word	0x33333333
 80070ac:	400b3333 	.word	0x400b3333
 80070b0:	9999999a 	.word	0x9999999a
 80070b4:	400b9999 	.word	0x400b9999
 80070b8:	66666666 	.word	0x66666666
 80070bc:	400c6666 	.word	0x400c6666
 80070c0:	cccccccd 	.word	0xcccccccd
 80070c4:	400ccccc 	.word	0x400ccccc
 80070c8:	33333333 	.word	0x33333333
 80070cc:	400d3333 	.word	0x400d3333
 80070d0:	9999999a 	.word	0x9999999a
 80070d4:	400d9999 	.word	0x400d9999
 80070d8:	76c8b439 	.word	0x76c8b439
 80070dc:	400d9fbe 	.word	0x400d9fbe
 80070e0:	53f7ced9 	.word	0x53f7ced9
 80070e4:	400da5e3 	.word	0x400da5e3
 80070e8:	7ae147ae 	.word	0x7ae147ae
 80070ec:	400dae14 	.word	0x400dae14
 80070f0:	5810624e 	.word	0x5810624e
 80070f4:	400db439 	.word	0x400db439
 80070f8:	353f7cee 	.word	0x353f7cee
 80070fc:	400dba5e 	.word	0x400dba5e
 8007100:	126e978d 	.word	0x126e978d
 8007104:	400dc083 	.word	0x400dc083
 8007108:	39581062 	.word	0x39581062
 800710c:	400dc8b4 	.word	0x400dc8b4
 8007110:	16872b02 	.word	0x16872b02
 8007114:	400dced9 	.word	0x400dced9
 8007118:	f3b645a2 	.word	0xf3b645a2
 800711c:	400dd4fd 	.word	0x400dd4fd
 8007120:	d0e56042 	.word	0xd0e56042
 8007124:	400ddb22 	.word	0x400ddb22
 8007128:	ae147ae1 	.word	0xae147ae1
 800712c:	400de147 	.word	0x400de147
 8007130:	d4fdf3b6 	.word	0xd4fdf3b6
 8007134:	400de978 	.word	0x400de978
 8007138:	b22d0e56 	.word	0xb22d0e56
 800713c:	400def9d 	.word	0x400def9d
 8007140:	8f5c28f6 	.word	0x8f5c28f6
 8007144:	400df5c2 	.word	0x400df5c2
 8007148:	6c8b4396 	.word	0x6c8b4396
 800714c:	400dfbe7 	.word	0x400dfbe7
 8007150:	9374bc6a 	.word	0x9374bc6a
 8007154:	400e0418 	.word	0x400e0418
 8007158:	70a3d70a 	.word	0x70a3d70a
 800715c:	400e0a3d 	.word	0x400e0a3d
 8007160:	4dd2f1aa 	.word	0x4dd2f1aa
 8007164:	400e1062 	.word	0x400e1062
 8007168:	2b020c4a 	.word	0x2b020c4a
 800716c:	400e1687 	.word	0x400e1687
 8007170:	51eb851f 	.word	0x51eb851f
 8007174:	400e1eb8 	.word	0x400e1eb8
 8007178:	2f1a9fbe 	.word	0x2f1a9fbe
 800717c:	400e24dd 	.word	0x400e24dd
 8007180:	0c49ba5e 	.word	0x0c49ba5e
 8007184:	400e2b02 	.word	0x400e2b02
 8007188:	e978d4fe 	.word	0xe978d4fe
 800718c:	400e3126 	.word	0x400e3126
 8007190:	c6a7ef9e 	.word	0xc6a7ef9e
 8007194:	400e374b 	.word	0x400e374b
 8007198:	ed916873 	.word	0xed916873
 800719c:	400e3f7c 	.word	0x400e3f7c
 80071a0:	cac08312 	.word	0xcac08312
 80071a4:	400e45a1 	.word	0x400e45a1
 80071a8:	20000468 	.word	0x20000468
 80071ac:	400a0000 	.word	0x400a0000
 80071b0:	400c0000 	.word	0x400c0000
 80071b4:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 80071b8:	49b5      	ldr	r1, [pc, #724]	; (8007490 <_initVoltsArray+0x5c0>)
 80071ba:	a36d      	add	r3, pc, #436	; (adr r3, 8007370 <_initVoltsArray+0x4a0>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
 80071c4:	49b2      	ldr	r1, [pc, #712]	; (8007490 <_initVoltsArray+0x5c0>)
 80071c6:	a36c      	add	r3, pc, #432	; (adr r3, 8007378 <_initVoltsArray+0x4a8>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 80071d0:	49af      	ldr	r1, [pc, #700]	; (8007490 <_initVoltsArray+0x5c0>)
 80071d2:	a36b      	add	r3, pc, #428	; (adr r3, 8007380 <_initVoltsArray+0x4b0>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 80071dc:	49ac      	ldr	r1, [pc, #688]	; (8007490 <_initVoltsArray+0x5c0>)
 80071de:	a36a      	add	r3, pc, #424	; (adr r3, 8007388 <_initVoltsArray+0x4b8>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    _vs[41] = 3.800; _vs[42] = 3.805; _vs[43] = 3.811; _vs[44] = 3.816; _vs[45] = 3.821;
 80071e8:	49a9      	ldr	r1, [pc, #676]	; (8007490 <_initVoltsArray+0x5c0>)
 80071ea:	a369      	add	r3, pc, #420	; (adr r3, 8007390 <_initVoltsArray+0x4c0>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 80071f4:	49a6      	ldr	r1, [pc, #664]	; (8007490 <_initVoltsArray+0x5c0>)
 80071f6:	a368      	add	r3, pc, #416	; (adr r3, 8007398 <_initVoltsArray+0x4c8>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
 8007200:	49a3      	ldr	r1, [pc, #652]	; (8007490 <_initVoltsArray+0x5c0>)
 8007202:	a367      	add	r3, pc, #412	; (adr r3, 80073a0 <_initVoltsArray+0x4d0>)
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
 800720c:	49a0      	ldr	r1, [pc, #640]	; (8007490 <_initVoltsArray+0x5c0>)
 800720e:	a366      	add	r3, pc, #408	; (adr r3, 80073a8 <_initVoltsArray+0x4d8>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
 8007218:	499d      	ldr	r1, [pc, #628]	; (8007490 <_initVoltsArray+0x5c0>)
 800721a:	a365      	add	r3, pc, #404	; (adr r3, 80073b0 <_initVoltsArray+0x4e0>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
    _vs[46] = 3.826; _vs[47] = 3.832; _vs[48] = 3.837; _vs[49] = 3.842; _vs[50] = 3.847;
 8007224:	499a      	ldr	r1, [pc, #616]	; (8007490 <_initVoltsArray+0x5c0>)
 8007226:	a364      	add	r3, pc, #400	; (adr r3, 80073b8 <_initVoltsArray+0x4e8>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
 8007230:	4997      	ldr	r1, [pc, #604]	; (8007490 <_initVoltsArray+0x5c0>)
 8007232:	a363      	add	r3, pc, #396	; (adr r3, 80073c0 <_initVoltsArray+0x4f0>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 800723c:	4994      	ldr	r1, [pc, #592]	; (8007490 <_initVoltsArray+0x5c0>)
 800723e:	a362      	add	r3, pc, #392	; (adr r3, 80073c8 <_initVoltsArray+0x4f8>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 8007248:	4991      	ldr	r1, [pc, #580]	; (8007490 <_initVoltsArray+0x5c0>)
 800724a:	a361      	add	r3, pc, #388	; (adr r3, 80073d0 <_initVoltsArray+0x500>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 8007254:	498e      	ldr	r1, [pc, #568]	; (8007490 <_initVoltsArray+0x5c0>)
 8007256:	a360      	add	r3, pc, #384	; (adr r3, 80073d8 <_initVoltsArray+0x508>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
    _vs[51] = 3.853; _vs[52] = 3.858; _vs[53] = 3.863; _vs[54] = 3.868; _vs[55] = 3.874;
 8007260:	498b      	ldr	r1, [pc, #556]	; (8007490 <_initVoltsArray+0x5c0>)
 8007262:	a35f      	add	r3, pc, #380	; (adr r3, 80073e0 <_initVoltsArray+0x510>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
 800726c:	4988      	ldr	r1, [pc, #544]	; (8007490 <_initVoltsArray+0x5c0>)
 800726e:	a35e      	add	r3, pc, #376	; (adr r3, 80073e8 <_initVoltsArray+0x518>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
 8007278:	4985      	ldr	r1, [pc, #532]	; (8007490 <_initVoltsArray+0x5c0>)
 800727a:	a35d      	add	r3, pc, #372	; (adr r3, 80073f0 <_initVoltsArray+0x520>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8007284:	4982      	ldr	r1, [pc, #520]	; (8007490 <_initVoltsArray+0x5c0>)
 8007286:	a35c      	add	r3, pc, #368	; (adr r3, 80073f8 <_initVoltsArray+0x528>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 8007290:	497f      	ldr	r1, [pc, #508]	; (8007490 <_initVoltsArray+0x5c0>)
 8007292:	a35b      	add	r3, pc, #364	; (adr r3, 8007400 <_initVoltsArray+0x530>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    _vs[56] = 3.879; _vs[57] = 3.884; _vs[58] = 3.889; _vs[59] = 3.895; _vs[60] = 3.900;
 800729c:	497c      	ldr	r1, [pc, #496]	; (8007490 <_initVoltsArray+0x5c0>)
 800729e:	a35a      	add	r3, pc, #360	; (adr r3, 8007408 <_initVoltsArray+0x538>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 80072a8:	4979      	ldr	r1, [pc, #484]	; (8007490 <_initVoltsArray+0x5c0>)
 80072aa:	a359      	add	r3, pc, #356	; (adr r3, 8007410 <_initVoltsArray+0x540>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
 80072b4:	4976      	ldr	r1, [pc, #472]	; (8007490 <_initVoltsArray+0x5c0>)
 80072b6:	a358      	add	r3, pc, #352	; (adr r3, 8007418 <_initVoltsArray+0x548>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
 80072c0:	4973      	ldr	r1, [pc, #460]	; (8007490 <_initVoltsArray+0x5c0>)
 80072c2:	a357      	add	r3, pc, #348	; (adr r3, 8007420 <_initVoltsArray+0x550>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 80072cc:	4970      	ldr	r1, [pc, #448]	; (8007490 <_initVoltsArray+0x5c0>)
 80072ce:	a356      	add	r3, pc, #344	; (adr r3, 8007428 <_initVoltsArray+0x558>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    _vs[61] = 3.906; _vs[62] = 3.911; _vs[63] = 3.917; _vs[64] = 3.922; _vs[65] = 3.928;
 80072d8:	496d      	ldr	r1, [pc, #436]	; (8007490 <_initVoltsArray+0x5c0>)
 80072da:	a355      	add	r3, pc, #340	; (adr r3, 8007430 <_initVoltsArray+0x560>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
 80072e4:	496a      	ldr	r1, [pc, #424]	; (8007490 <_initVoltsArray+0x5c0>)
 80072e6:	a354      	add	r3, pc, #336	; (adr r3, 8007438 <_initVoltsArray+0x568>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
 80072f0:	4967      	ldr	r1, [pc, #412]	; (8007490 <_initVoltsArray+0x5c0>)
 80072f2:	a353      	add	r3, pc, #332	; (adr r3, 8007440 <_initVoltsArray+0x570>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
 80072fc:	4964      	ldr	r1, [pc, #400]	; (8007490 <_initVoltsArray+0x5c0>)
 80072fe:	a352      	add	r3, pc, #328	; (adr r3, 8007448 <_initVoltsArray+0x578>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200
 8007308:	4961      	ldr	r1, [pc, #388]	; (8007490 <_initVoltsArray+0x5c0>)
 800730a:	a351      	add	r3, pc, #324	; (adr r3, 8007450 <_initVoltsArray+0x580>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    _vs[66] = 3.933; _vs[67] = 3.939; _vs[68] = 3.944; _vs[69] = 3.950; _vs[70] = 3.956;
 8007314:	495e      	ldr	r1, [pc, #376]	; (8007490 <_initVoltsArray+0x5c0>)
 8007316:	a350      	add	r3, pc, #320	; (adr r3, 8007458 <_initVoltsArray+0x588>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
 8007320:	495b      	ldr	r1, [pc, #364]	; (8007490 <_initVoltsArray+0x5c0>)
 8007322:	a34f      	add	r3, pc, #316	; (adr r3, 8007460 <_initVoltsArray+0x590>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 800732c:	4958      	ldr	r1, [pc, #352]	; (8007490 <_initVoltsArray+0x5c0>)
 800732e:	a34e      	add	r3, pc, #312	; (adr r3, 8007468 <_initVoltsArray+0x598>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
 8007338:	4955      	ldr	r1, [pc, #340]	; (8007490 <_initVoltsArray+0x5c0>)
 800733a:	a34d      	add	r3, pc, #308	; (adr r3, 8007470 <_initVoltsArray+0x5a0>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8007344:	4952      	ldr	r1, [pc, #328]	; (8007490 <_initVoltsArray+0x5c0>)
 8007346:	a34c      	add	r3, pc, #304	; (adr r3, 8007478 <_initVoltsArray+0x5a8>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    _vs[71] = 3.961; _vs[72] = 3.967; _vs[73] = 3.972; _vs[74] = 3.978; _vs[75] = 3.983;
 8007350:	494f      	ldr	r1, [pc, #316]	; (8007490 <_initVoltsArray+0x5c0>)
 8007352:	a34b      	add	r3, pc, #300	; (adr r3, 8007480 <_initVoltsArray+0x5b0>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
 800735c:	494c      	ldr	r1, [pc, #304]	; (8007490 <_initVoltsArray+0x5c0>)
 800735e:	a34a      	add	r3, pc, #296	; (adr r3, 8007488 <_initVoltsArray+0x5b8>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
 8007368:	e094      	b.n	8007494 <_initVoltsArray+0x5c4>
 800736a:	bf00      	nop
 800736c:	f3af 8000 	nop.w
 8007370:	a7ef9db2 	.word	0xa7ef9db2
 8007374:	400e4bc6 	.word	0x400e4bc6
 8007378:	851eb852 	.word	0x851eb852
 800737c:	400e51eb 	.word	0x400e51eb
 8007380:	ac083127 	.word	0xac083127
 8007384:	400e5a1c 	.word	0x400e5a1c
 8007388:	89374bc7 	.word	0x89374bc7
 800738c:	400e6041 	.word	0x400e6041
 8007390:	66666666 	.word	0x66666666
 8007394:	400e6666 	.word	0x400e6666
 8007398:	d70a3d71 	.word	0xd70a3d71
 800739c:	400e70a3 	.word	0x400e70a3
 80073a0:	916872b0 	.word	0x916872b0
 80073a4:	400e7ced 	.word	0x400e7ced
 80073a8:	020c49ba 	.word	0x020c49ba
 80073ac:	400e872b 	.word	0x400e872b
 80073b0:	72b020c5 	.word	0x72b020c5
 80073b4:	400e9168 	.word	0x400e9168
 80073b8:	e353f7cf 	.word	0xe353f7cf
 80073bc:	400e9ba5 	.word	0x400e9ba5
 80073c0:	9db22d0e 	.word	0x9db22d0e
 80073c4:	400ea7ef 	.word	0x400ea7ef
 80073c8:	0e560419 	.word	0x0e560419
 80073cc:	400eb22d 	.word	0x400eb22d
 80073d0:	7ef9db23 	.word	0x7ef9db23
 80073d4:	400ebc6a 	.word	0x400ebc6a
 80073d8:	ef9db22d 	.word	0xef9db22d
 80073dc:	400ec6a7 	.word	0x400ec6a7
 80073e0:	a9fbe76d 	.word	0xa9fbe76d
 80073e4:	400ed2f1 	.word	0x400ed2f1
 80073e8:	1a9fbe77 	.word	0x1a9fbe77
 80073ec:	400edd2f 	.word	0x400edd2f
 80073f0:	8b439581 	.word	0x8b439581
 80073f4:	400ee76c 	.word	0x400ee76c
 80073f8:	fbe76c8b 	.word	0xfbe76c8b
 80073fc:	400ef1a9 	.word	0x400ef1a9
 8007400:	b645a1cb 	.word	0xb645a1cb
 8007404:	400efdf3 	.word	0x400efdf3
 8007408:	26e978d5 	.word	0x26e978d5
 800740c:	400f0831 	.word	0x400f0831
 8007410:	978d4fdf 	.word	0x978d4fdf
 8007414:	400f126e 	.word	0x400f126e
 8007418:	083126e9 	.word	0x083126e9
 800741c:	400f1cac 	.word	0x400f1cac
 8007420:	c28f5c29 	.word	0xc28f5c29
 8007424:	400f28f5 	.word	0x400f28f5
 8007428:	33333333 	.word	0x33333333
 800742c:	400f3333 	.word	0x400f3333
 8007430:	ed916873 	.word	0xed916873
 8007434:	400f3f7c 	.word	0x400f3f7c
 8007438:	5e353f7d 	.word	0x5e353f7d
 800743c:	400f49ba 	.word	0x400f49ba
 8007440:	189374bc 	.word	0x189374bc
 8007444:	400f5604 	.word	0x400f5604
 8007448:	89374bc7 	.word	0x89374bc7
 800744c:	400f6041 	.word	0x400f6041
 8007450:	43958106 	.word	0x43958106
 8007454:	400f6c8b 	.word	0x400f6c8b
 8007458:	b4395810 	.word	0xb4395810
 800745c:	400f76c8 	.word	0x400f76c8
 8007460:	6e978d50 	.word	0x6e978d50
 8007464:	400f8312 	.word	0x400f8312
 8007468:	df3b645a 	.word	0xdf3b645a
 800746c:	400f8d4f 	.word	0x400f8d4f
 8007470:	9999999a 	.word	0x9999999a
 8007474:	400f9999 	.word	0x400f9999
 8007478:	53f7ced9 	.word	0x53f7ced9
 800747c:	400fa5e3 	.word	0x400fa5e3
 8007480:	c49ba5e3 	.word	0xc49ba5e3
 8007484:	400fb020 	.word	0x400fb020
 8007488:	7ef9db23 	.word	0x7ef9db23
 800748c:	400fbc6a 	.word	0x400fbc6a
 8007490:	20000468 	.word	0x20000468
 8007494:	498c      	ldr	r1, [pc, #560]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007496:	a356      	add	r3, pc, #344	; (adr r3, 80075f0 <_initVoltsArray+0x720>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
 80074a0:	4989      	ldr	r1, [pc, #548]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074a2:	a355      	add	r3, pc, #340	; (adr r3, 80075f8 <_initVoltsArray+0x728>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 80074ac:	4986      	ldr	r1, [pc, #536]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074ae:	a354      	add	r3, pc, #336	; (adr r3, 8007600 <_initVoltsArray+0x730>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
    _vs[76] = 3.989; _vs[77] = 3.994; _vs[78] = 4.000; _vs[79] = 4.008; _vs[80] = 4.015;
 80074b8:	4983      	ldr	r1, [pc, #524]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074ba:	a353      	add	r3, pc, #332	; (adr r3, 8007608 <_initVoltsArray+0x738>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 80074c4:	4980      	ldr	r1, [pc, #512]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074c6:	a352      	add	r3, pc, #328	; (adr r3, 8007610 <_initVoltsArray+0x740>)
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
 80074d0:	497d      	ldr	r1, [pc, #500]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	4b7d      	ldr	r3, [pc, #500]	; (80076cc <_initVoltsArray+0x7fc>)
 80074d8:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
 80074dc:	497a      	ldr	r1, [pc, #488]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074de:	a34e      	add	r3, pc, #312	; (adr r3, 8007618 <_initVoltsArray+0x748>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
 80074e8:	4977      	ldr	r1, [pc, #476]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074ea:	a34d      	add	r3, pc, #308	; (adr r3, 8007620 <_initVoltsArray+0x750>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
    _vs[81] = 4.023; _vs[82] = 4.031; _vs[83] = 4.038; _vs[84] = 4.046; _vs[85] = 4.054;
 80074f4:	4974      	ldr	r1, [pc, #464]	; (80076c8 <_initVoltsArray+0x7f8>)
 80074f6:	a34c      	add	r3, pc, #304	; (adr r3, 8007628 <_initVoltsArray+0x758>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
 8007500:	4971      	ldr	r1, [pc, #452]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007502:	a34b      	add	r3, pc, #300	; (adr r3, 8007630 <_initVoltsArray+0x760>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
 800750c:	496e      	ldr	r1, [pc, #440]	; (80076c8 <_initVoltsArray+0x7f8>)
 800750e:	a34a      	add	r3, pc, #296	; (adr r3, 8007638 <_initVoltsArray+0x768>)
 8007510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007514:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
 8007518:	496b      	ldr	r1, [pc, #428]	; (80076c8 <_initVoltsArray+0x7f8>)
 800751a:	a349      	add	r3, pc, #292	; (adr r3, 8007640 <_initVoltsArray+0x770>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
 8007524:	4968      	ldr	r1, [pc, #416]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007526:	a348      	add	r3, pc, #288	; (adr r3, 8007648 <_initVoltsArray+0x778>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
    _vs[86] = 4.062; _vs[87] = 4.069; _vs[88] = 4.077; _vs[89] = 4.085; _vs[90] = 4.092;
 8007530:	4965      	ldr	r1, [pc, #404]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007532:	a347      	add	r3, pc, #284	; (adr r3, 8007650 <_initVoltsArray+0x780>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
 800753c:	4962      	ldr	r1, [pc, #392]	; (80076c8 <_initVoltsArray+0x7f8>)
 800753e:	a346      	add	r3, pc, #280	; (adr r3, 8007658 <_initVoltsArray+0x788>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
 8007548:	495f      	ldr	r1, [pc, #380]	; (80076c8 <_initVoltsArray+0x7f8>)
 800754a:	a345      	add	r3, pc, #276	; (adr r3, 8007660 <_initVoltsArray+0x790>)
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
 8007554:	495c      	ldr	r1, [pc, #368]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007556:	a344      	add	r3, pc, #272	; (adr r3, 8007668 <_initVoltsArray+0x798>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
 8007560:	4959      	ldr	r1, [pc, #356]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007562:	a343      	add	r3, pc, #268	; (adr r3, 8007670 <_initVoltsArray+0x7a0>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
    _vs[91] = 4.100; _vs[92] = 4.111; _vs[93] = 4.122; _vs[94] = 4.133; _vs[95] = 4.144;
 800756c:	4956      	ldr	r1, [pc, #344]	; (80076c8 <_initVoltsArray+0x7f8>)
 800756e:	a342      	add	r3, pc, #264	; (adr r3, 8007678 <_initVoltsArray+0x7a8>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8007578:	4953      	ldr	r1, [pc, #332]	; (80076c8 <_initVoltsArray+0x7f8>)
 800757a:	a341      	add	r3, pc, #260	; (adr r3, 8007680 <_initVoltsArray+0x7b0>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0
 8007584:	4950      	ldr	r1, [pc, #320]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007586:	a340      	add	r3, pc, #256	; (adr r3, 8007688 <_initVoltsArray+0x7b8>)
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
 8007590:	494d      	ldr	r1, [pc, #308]	; (80076c8 <_initVoltsArray+0x7f8>)
 8007592:	a33f      	add	r3, pc, #252	; (adr r3, 8007690 <_initVoltsArray+0x7c0>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 800759c:	494a      	ldr	r1, [pc, #296]	; (80076c8 <_initVoltsArray+0x7f8>)
 800759e:	a33e      	add	r3, pc, #248	; (adr r3, 8007698 <_initVoltsArray+0x7c8>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    _vs[96] = 4.156; _vs[97] = 4.167; _vs[98] = 4.178; _vs[99] = 4.189; _vs[100] = 4.200;
 80075a8:	4947      	ldr	r1, [pc, #284]	; (80076c8 <_initVoltsArray+0x7f8>)
 80075aa:	a33d      	add	r3, pc, #244	; (adr r3, 80076a0 <_initVoltsArray+0x7d0>)
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	e9c1 23c0 	strd	r2, r3, [r1, #768]	; 0x300
 80075b4:	4944      	ldr	r1, [pc, #272]	; (80076c8 <_initVoltsArray+0x7f8>)
 80075b6:	a33c      	add	r3, pc, #240	; (adr r3, 80076a8 <_initVoltsArray+0x7d8>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	e9c1 23c2 	strd	r2, r3, [r1, #776]	; 0x308
 80075c0:	4941      	ldr	r1, [pc, #260]	; (80076c8 <_initVoltsArray+0x7f8>)
 80075c2:	a33b      	add	r3, pc, #236	; (adr r3, 80076b0 <_initVoltsArray+0x7e0>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310
 80075cc:	493e      	ldr	r1, [pc, #248]	; (80076c8 <_initVoltsArray+0x7f8>)
 80075ce:	a33a      	add	r3, pc, #232	; (adr r3, 80076b8 <_initVoltsArray+0x7e8>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	e9c1 23c6 	strd	r2, r3, [r1, #792]	; 0x318
 80075d8:	493b      	ldr	r1, [pc, #236]	; (80076c8 <_initVoltsArray+0x7f8>)
 80075da:	a339      	add	r3, pc, #228	; (adr r3, 80076c0 <_initVoltsArray+0x7f0>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
}
 80075e4:	bf00      	nop
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	ef9db22d 	.word	0xef9db22d
 80075f4:	400fc6a7 	.word	0x400fc6a7
 80075f8:	a9fbe76d 	.word	0xa9fbe76d
 80075fc:	400fd2f1 	.word	0x400fd2f1
 8007600:	1a9fbe77 	.word	0x1a9fbe77
 8007604:	400fdd2f 	.word	0x400fdd2f
 8007608:	d4fdf3b6 	.word	0xd4fdf3b6
 800760c:	400fe978 	.word	0x400fe978
 8007610:	45a1cac1 	.word	0x45a1cac1
 8007614:	400ff3b6 	.word	0x400ff3b6
 8007618:	26e978d5 	.word	0x26e978d5
 800761c:	40100831 	.word	0x40100831
 8007620:	28f5c28f 	.word	0x28f5c28f
 8007624:	40100f5c 	.word	0x40100f5c
 8007628:	4fdf3b64 	.word	0x4fdf3b64
 800762c:	4010178d 	.word	0x4010178d
 8007630:	76c8b439 	.word	0x76c8b439
 8007634:	40101fbe 	.word	0x40101fbe
 8007638:	78d4fdf4 	.word	0x78d4fdf4
 800763c:	401026e9 	.word	0x401026e9
 8007640:	9fbe76c9 	.word	0x9fbe76c9
 8007644:	40102f1a 	.word	0x40102f1a
 8007648:	c6a7ef9e 	.word	0xc6a7ef9e
 800764c:	4010374b 	.word	0x4010374b
 8007650:	ed916873 	.word	0xed916873
 8007654:	40103f7c 	.word	0x40103f7c
 8007658:	ef9db22d 	.word	0xef9db22d
 800765c:	401046a7 	.word	0x401046a7
 8007660:	16872b02 	.word	0x16872b02
 8007664:	40104ed9 	.word	0x40104ed9
 8007668:	3d70a3d7 	.word	0x3d70a3d7
 800766c:	4010570a 	.word	0x4010570a
 8007670:	3f7ced91 	.word	0x3f7ced91
 8007674:	40105e35 	.word	0x40105e35
 8007678:	66666666 	.word	0x66666666
 800767c:	40106666 	.word	0x40106666
 8007680:	fbe76c8b 	.word	0xfbe76c8b
 8007684:	401071a9 	.word	0x401071a9
 8007688:	916872b0 	.word	0x916872b0
 800768c:	40107ced 	.word	0x40107ced
 8007690:	26e978d5 	.word	0x26e978d5
 8007694:	40108831 	.word	0x40108831
 8007698:	bc6a7efa 	.word	0xbc6a7efa
 800769c:	40109374 	.word	0x40109374
 80076a0:	76c8b439 	.word	0x76c8b439
 80076a4:	40109fbe 	.word	0x40109fbe
 80076a8:	0c49ba5e 	.word	0x0c49ba5e
 80076ac:	4010ab02 	.word	0x4010ab02
 80076b0:	a1cac083 	.word	0xa1cac083
 80076b4:	4010b645 	.word	0x4010b645
 80076b8:	374bc6a8 	.word	0x374bc6a8
 80076bc:	4010c189 	.word	0x4010c189
 80076c0:	cccccccd 	.word	0xcccccccd
 80076c4:	4010cccc 	.word	0x4010cccc
 80076c8:	20000468 	.word	0x20000468
 80076cc:	40100000 	.word	0x40100000

080076d0 <_analogRead>:

static uint32_t _analogRead(void) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
    HAL_ADC_Start(_hadc);
 80076d4:	4b0a      	ldr	r3, [pc, #40]	; (8007700 <_analogRead+0x30>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fa ff61 	bl	80025a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(_hadc, _timeout);
 80076de:	4b08      	ldr	r3, [pc, #32]	; (8007700 <_analogRead+0x30>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a08      	ldr	r2, [pc, #32]	; (8007704 <_analogRead+0x34>)
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	4611      	mov	r1, r2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fb f813 	bl	8002714 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(_hadc);
 80076ee:	4b04      	ldr	r3, [pc, #16]	; (8007700 <_analogRead+0x30>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fb f8e6 	bl	80028c4 <HAL_ADC_GetValue>
 80076f8:	4603      	mov	r3, r0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000794 	.word	0x20000794
 8007704:	20000790 	.word	0x20000790

08007708 <_analogReadToVolts>:

static float _analogReadToVolts(uint32_t readValue) {
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  float volts = 2.0f * readValue * 3.3f / 4096.0f;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	ee07 3a90 	vmov	s15, r3
 8007716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800771e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007748 <_analogReadToVolts+0x40>
 8007722:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007726:	eddf 6a09 	vldr	s13, [pc, #36]	; 800774c <_analogReadToVolts+0x44>
 800772a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800772e:	edc7 7a03 	vstr	s15, [r7, #12]
  return volts;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	ee07 3a90 	vmov	s15, r3
}
 8007738:	eeb0 0a67 	vmov.f32	s0, s15
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40533333 	.word	0x40533333
 800774c:	45800000 	.word	0x45800000

08007750 <_getChargeLevel>:

static int _getChargeLevel(float volts) {
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	ed87 0a01 	vstr	s0, [r7, #4]
  int idx = 50;
 800775a:	2332      	movs	r3, #50	; 0x32
 800775c:	617b      	str	r3, [r7, #20]
  int prev = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	613b      	str	r3, [r7, #16]
  int half = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  if (volts >= 4.2){
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7f8 fefe 	bl	8000568 <__aeabi_f2d>
 800776c:	a323      	add	r3, pc, #140	; (adr r3, 80077fc <_getChargeLevel+0xac>)
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f7f9 f9d7 	bl	8000b24 <__aeabi_dcmpge>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <_getChargeLevel+0x30>
    return 100;
 800777c:	2364      	movs	r3, #100	; 0x64
 800777e:	e037      	b.n	80077f0 <_getChargeLevel+0xa0>
  }
  if (volts <= 3.2){
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7f8 fef1 	bl	8000568 <__aeabi_f2d>
 8007786:	a31f      	add	r3, pc, #124	; (adr r3, 8007804 <_getChargeLevel+0xb4>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f9 f9c0 	bl	8000b10 <__aeabi_dcmple>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d100      	bne.n	8007798 <_getChargeLevel+0x48>
 8007796:	e001      	b.n	800779c <_getChargeLevel+0x4c>
    return 0;
 8007798:	2300      	movs	r3, #0
 800779a:	e029      	b.n	80077f0 <_getChargeLevel+0xa0>
  }
  while(1){
    half = abs(idx - prev) / 2;
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	425b      	neglt	r3, r3
 80077a8:	0fda      	lsrs	r2, r3, #31
 80077aa:	4413      	add	r3, r2
 80077ac:	105b      	asrs	r3, r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
    prev = idx;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	613b      	str	r3, [r7, #16]
    if(volts >= _vs[idx]){
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7f8 fed7 	bl	8000568 <__aeabi_f2d>
 80077ba:	4a0f      	ldr	r2, [pc, #60]	; (80077f8 <_getChargeLevel+0xa8>)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	f7f9 f9ad 	bl	8000b24 <__aeabi_dcmpge>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <_getChargeLevel+0x8a>
      idx = idx + half;
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e003      	b.n	80077e2 <_getChargeLevel+0x92>
    }else{
      idx = idx - half;
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	617b      	str	r3, [r7, #20]
    }
    if (prev == idx){
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d000      	beq.n	80077ec <_getChargeLevel+0x9c>
    half = abs(idx - prev) / 2;
 80077ea:	e7d7      	b.n	800779c <_getChargeLevel+0x4c>
      break;
 80077ec:	bf00      	nop
    }
  }
  return idx;
 80077ee:	697b      	ldr	r3, [r7, #20]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20000468 	.word	0x20000468
 80077fc:	cccccccd 	.word	0xcccccccd
 8007800:	4010cccc 	.word	0x4010cccc
 8007804:	9999999a 	.word	0x9999999a
 8007808:	40099999 	.word	0x40099999

0800780c <battery_init>:

/*
 * Public functions
 */

void battery_init(ADC_HandleTypeDef* hadc, uint32_t timeout) {
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
	_hadc = hadc;
 8007816:	4a08      	ldr	r2, [pc, #32]	; (8007838 <battery_init+0x2c>)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6013      	str	r3, [r2, #0]
	_timeout = timeout;
 800781c:	4a07      	ldr	r2, [pc, #28]	; (800783c <battery_init+0x30>)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6013      	str	r3, [r2, #0]
	_initVoltsArray();
 8007822:	f7ff fb55 	bl	8006ed0 <_initVoltsArray>
    HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 8007826:	217f      	movs	r1, #127	; 0x7f
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7fb fd81 	bl	8003330 <HAL_ADCEx_Calibration_Start>
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000794 	.word	0x20000794
 800783c:	20000790 	.word	0x20000790

08007840 <battery_getBatteryChargeLevel>:


int battery_getBatteryChargeLevel(void) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 8007846:	f7ff ff43 	bl	80076d0 <_analogRead>
 800784a:	6178      	str	r0, [r7, #20]
    double volts = _analogReadToVolts(readValue);
 800784c:	6978      	ldr	r0, [r7, #20]
 800784e:	f7ff ff5b 	bl	8007708 <_analogReadToVolts>
 8007852:	ee10 3a10 	vmov	r3, s0
 8007856:	4618      	mov	r0, r3
 8007858:	f7f8 fe86 	bl	8000568 <__aeabi_f2d>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int chargeLevel = _getChargeLevel(volts);
 8007864:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007868:	f7f9 f9ce 	bl	8000c08 <__aeabi_d2f>
 800786c:	4603      	mov	r3, r0
 800786e:	ee00 3a10 	vmov	s0, r3
 8007872:	f7ff ff6d 	bl	8007750 <_getChargeLevel>
 8007876:	6078      	str	r0, [r7, #4]
    return chargeLevel;
 8007878:	687b      	ldr	r3, [r7, #4]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <battery_getBatteryVolts>:

float battery_getBatteryVolts(void) {
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 8007888:	f7ff ff22 	bl	80076d0 <_analogRead>
 800788c:	6078      	str	r0, [r7, #4]
    return _analogReadToVolts(readValue);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ff3a 	bl	8007708 <_analogReadToVolts>
 8007894:	eef0 7a40 	vmov.f32	s15, s0
}
 8007898:	eeb0 0a67 	vmov.f32	s0, s15
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <validateMessage>:
static uint8_t validateMessage();
static void parseGPGLLSentence();
static float changeCordsToDec(float deg_coord, char nsew);

static uint8_t validateMessage()
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0

	return (messageBuffer[0] == '$' &&
 80078a8:	4b10      	ldr	r3, [pc, #64]	; (80078ec <validateMessage+0x48>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
		messageBuffer[1] == 'G' &&
		messageBuffer[2] == 'P' &&
		messageBuffer[3] == 'G' &&
		messageBuffer[4] == 'L' &&
 80078ac:	2b24      	cmp	r3, #36	; 0x24
 80078ae:	d115      	bne.n	80078dc <validateMessage+0x38>
		messageBuffer[1] == 'G' &&
 80078b0:	4b0e      	ldr	r3, [pc, #56]	; (80078ec <validateMessage+0x48>)
 80078b2:	785b      	ldrb	r3, [r3, #1]
	return (messageBuffer[0] == '$' &&
 80078b4:	2b47      	cmp	r3, #71	; 0x47
 80078b6:	d111      	bne.n	80078dc <validateMessage+0x38>
		messageBuffer[2] == 'P' &&
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <validateMessage+0x48>)
 80078ba:	789b      	ldrb	r3, [r3, #2]
		messageBuffer[1] == 'G' &&
 80078bc:	2b50      	cmp	r3, #80	; 0x50
 80078be:	d10d      	bne.n	80078dc <validateMessage+0x38>
		messageBuffer[3] == 'G' &&
 80078c0:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <validateMessage+0x48>)
 80078c2:	78db      	ldrb	r3, [r3, #3]
		messageBuffer[2] == 'P' &&
 80078c4:	2b47      	cmp	r3, #71	; 0x47
 80078c6:	d109      	bne.n	80078dc <validateMessage+0x38>
		messageBuffer[4] == 'L' &&
 80078c8:	4b08      	ldr	r3, [pc, #32]	; (80078ec <validateMessage+0x48>)
 80078ca:	791b      	ldrb	r3, [r3, #4]
		messageBuffer[3] == 'G' &&
 80078cc:	2b4c      	cmp	r3, #76	; 0x4c
 80078ce:	d105      	bne.n	80078dc <validateMessage+0x38>
		messageBuffer[5] == 'L');
 80078d0:	4b06      	ldr	r3, [pc, #24]	; (80078ec <validateMessage+0x48>)
 80078d2:	795b      	ldrb	r3, [r3, #5]
		messageBuffer[4] == 'L' &&
 80078d4:	2b4c      	cmp	r3, #76	; 0x4c
 80078d6:	d101      	bne.n	80078dc <validateMessage+0x38>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <validateMessage+0x3a>
 80078dc:	2300      	movs	r3, #0
 80078de:	b2db      	uxtb	r3, r3

}
 80078e0:	4618      	mov	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	2000079c 	.word	0x2000079c

080078f0 <parseGPGLLSentence>:

static void parseGPGLLSentence()
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
	float lat, lon;
    char sn, we;
	sscanf(messageBuffer, "$GPGLL,%f,%c,%f,%c", &lat, &sn, &lon, &we);
 80078f6:	1df9      	adds	r1, r7, #7
 80078f8:	f107 020c 	add.w	r2, r7, #12
 80078fc:	1dbb      	adds	r3, r7, #6
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	f107 0308 	add.w	r3, r7, #8
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	460b      	mov	r3, r1
 8007908:	4910      	ldr	r1, [pc, #64]	; (800794c <parseGPGLLSentence+0x5c>)
 800790a:	4811      	ldr	r0, [pc, #68]	; (8007950 <parseGPGLLSentence+0x60>)
 800790c:	f001 f874 	bl	80089f8 <siscanf>
	currentPosition.latitude = (float) changeCordsToDec(lat, sn);
 8007910:	edd7 7a03 	vldr	s15, [r7, #12]
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	4618      	mov	r0, r3
 8007918:	eeb0 0a67 	vmov.f32	s0, s15
 800791c:	f000 f81c 	bl	8007958 <changeCordsToDec>
 8007920:	eef0 7a40 	vmov.f32	s15, s0
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <parseGPGLLSentence+0x64>)
 8007926:	edc3 7a00 	vstr	s15, [r3]
	currentPosition.longitude = (float) changeCordsToDec(lon, we);
 800792a:	edd7 7a02 	vldr	s15, [r7, #8]
 800792e:	79bb      	ldrb	r3, [r7, #6]
 8007930:	4618      	mov	r0, r3
 8007932:	eeb0 0a67 	vmov.f32	s0, s15
 8007936:	f000 f80f 	bl	8007958 <changeCordsToDec>
 800793a:	eef0 7a40 	vmov.f32	s15, s0
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <parseGPGLLSentence+0x64>)
 8007940:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007944:	bf00      	nop
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	0800cf50 	.word	0x0800cf50
 8007950:	2000079c 	.word	0x2000079c
 8007954:	200007f0 	.word	0x200007f0

08007958 <changeCordsToDec>:

static float changeCordsToDec(float deg_coord, char nsew) {
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	ed87 0a01 	vstr	s0, [r7, #4]
 8007962:	4603      	mov	r3, r0
 8007964:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8007966:	ed97 7a01 	vldr	s14, [r7, #4]
 800796a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80079ec <changeCordsToDec+0x94>
 800796e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007976:	ee17 3a90 	vmov	r3, s15
 800797a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2264      	movs	r2, #100	; 0x64
 8007980:	fb02 f303 	mul.w	r3, r2, r3
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800798c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007994:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8007998:	ed97 7a03 	vldr	s14, [r7, #12]
 800799c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80079f0 <changeCordsToDec+0x98>
 80079a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079a4:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80079b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079ba:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W')
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	2b53      	cmp	r3, #83	; 0x53
 80079c2:	d002      	beq.n	80079ca <changeCordsToDec+0x72>
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	2b57      	cmp	r3, #87	; 0x57
 80079c8:	d105      	bne.n	80079d6 <changeCordsToDec+0x7e>
    {
        decimal *= -1;
 80079ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80079ce:	eef1 7a67 	vneg.f32	s15, s15
 80079d2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	ee07 3a90 	vmov	s15, r3
}
 80079dc:	eeb0 0a67 	vmov.f32	s0, s15
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	42c80000 	.word	0x42c80000
 80079f0:	42700000 	.word	0x42700000

080079f4 <GPS_Init>:
/*
 * public functions
 */

void GPS_Init(uint8_t *rxData)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	gpsDataReady = 0;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <GPS_Init+0x24>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(GPS_USART, (uint8_t *) &rxData, 1);
 8007a02:	1d3b      	adds	r3, r7, #4
 8007a04:	2201      	movs	r2, #1
 8007a06:	4619      	mov	r1, r3
 8007a08:	4804      	ldr	r0, [pc, #16]	; (8007a1c <GPS_Init+0x28>)
 8007a0a:	f7fd ffc7 	bl	800599c <HAL_UART_Receive_IT>
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000798 	.word	0x20000798
 8007a1c:	200003e0 	.word	0x200003e0

08007a20 <GPS_UART_Callback>:


void GPS_UART_Callback(uint8_t *rxData)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

	if(mess_index == 0 && *rxData == '$')
 8007a28:	4b2e      	ldr	r3, [pc, #184]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d111      	bne.n	8007a54 <GPS_UART_Callback+0x34>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b24      	cmp	r3, #36	; 0x24
 8007a36:	d10d      	bne.n	8007a54 <GPS_UART_Callback+0x34>
	{
		messageBuffer[mess_index] = *rxData;
 8007a38:	4b2a      	ldr	r3, [pc, #168]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7819      	ldrb	r1, [r3, #0]
 8007a42:	4b29      	ldr	r3, [pc, #164]	; (8007ae8 <GPS_UART_Callback+0xc8>)
 8007a44:	5499      	strb	r1, [r3, r2]
		++mess_index;
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e039      	b.n	8007ac8 <GPS_UART_Callback+0xa8>
	}
	else if (mess_index >= 1 && mess_index < sizeof(messageBuffer))
 8007a54:	4b23      	ldr	r3, [pc, #140]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d032      	beq.n	8007ac2 <GPS_UART_Callback+0xa2>
 8007a5c:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b4f      	cmp	r3, #79	; 0x4f
 8007a62:	d82e      	bhi.n	8007ac2 <GPS_UART_Callback+0xa2>
	{
		if(*rxData == '\n' || *rxData == '\r')
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b0a      	cmp	r3, #10
 8007a6a:	d003      	beq.n	8007a74 <GPS_UART_Callback+0x54>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b0d      	cmp	r3, #13
 8007a72:	d118      	bne.n	8007aa6 <GPS_UART_Callback+0x86>
		{
			messageBuffer[mess_index] = '\0';
 8007a74:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <GPS_UART_Callback+0xc8>)
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	5499      	strb	r1, [r3, r2]
			if(validateMessage())
 8007a80:	f7ff ff10 	bl	80078a4 <validateMessage>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <GPS_UART_Callback+0x74>
			{
				parseGPGLLSentence();
 8007a8a:	f7ff ff31 	bl	80078f0 <parseGPGLLSentence>
				gpsDataReady = 1;
 8007a8e:	4b17      	ldr	r3, [pc, #92]	; (8007aec <GPS_UART_Callback+0xcc>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	701a      	strb	r2, [r3, #0]
			}
			mess_index = 0;
 8007a94:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
			memset(messageBuffer, 0 , sizeof(messageBuffer));
 8007a9a:	2250      	movs	r2, #80	; 0x50
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4812      	ldr	r0, [pc, #72]	; (8007ae8 <GPS_UART_Callback+0xc8>)
 8007aa0:	f000 f874 	bl	8007b8c <memset>
		if(*rxData == '\n' || *rxData == '\r')
 8007aa4:	e010      	b.n	8007ac8 <GPS_UART_Callback+0xa8>
		}
		else
		{
			messageBuffer[mess_index] = *rxData;
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7819      	ldrb	r1, [r3, #0]
 8007ab0:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <GPS_UART_Callback+0xc8>)
 8007ab2:	5499      	strb	r1, [r3, r2]
			++mess_index;
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007abe:	701a      	strb	r2, [r3, #0]
		if(*rxData == '\n' || *rxData == '\r')
 8007ac0:	e002      	b.n	8007ac8 <GPS_UART_Callback+0xa8>
		}
	}
	else
	{
		mess_index = 0;
 8007ac2:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <GPS_UART_Callback+0xc4>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
	}

	if(gpsDataReady == 0)
 8007ac8:	4b08      	ldr	r3, [pc, #32]	; (8007aec <GPS_UART_Callback+0xcc>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <GPS_UART_Callback+0xba>
	{
		HAL_UART_Receive_IT(GPS_USART, (uint8_t *) rxData, 1);
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	4806      	ldr	r0, [pc, #24]	; (8007af0 <GPS_UART_Callback+0xd0>)
 8007ad6:	f7fd ff61 	bl	800599c <HAL_UART_Receive_IT>
	}
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200007ec 	.word	0x200007ec
 8007ae8:	2000079c 	.word	0x2000079c
 8007aec:	20000798 	.word	0x20000798
 8007af0:	200003e0 	.word	0x200003e0

08007af4 <GPS_getCurrentPosition>:


void GPS_getCurrentPosition(Position *const position)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	memcpy(position, &currentPosition, sizeof(Position));
 8007afc:	2208      	movs	r2, #8
 8007afe:	4905      	ldr	r1, [pc, #20]	; (8007b14 <GPS_getCurrentPosition+0x20>)
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f835 	bl	8007b70 <memcpy>
	gpsDataReady = 0;
 8007b06:	4b04      	ldr	r3, [pc, #16]	; (8007b18 <GPS_getCurrentPosition+0x24>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	200007f0 	.word	0x200007f0
 8007b18:	20000798 	.word	0x20000798

08007b1c <__errno>:
 8007b1c:	4b01      	ldr	r3, [pc, #4]	; (8007b24 <__errno+0x8>)
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000000c 	.word	0x2000000c

08007b28 <__libc_init_array>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	4d0d      	ldr	r5, [pc, #52]	; (8007b60 <__libc_init_array+0x38>)
 8007b2c:	4c0d      	ldr	r4, [pc, #52]	; (8007b64 <__libc_init_array+0x3c>)
 8007b2e:	1b64      	subs	r4, r4, r5
 8007b30:	10a4      	asrs	r4, r4, #2
 8007b32:	2600      	movs	r6, #0
 8007b34:	42a6      	cmp	r6, r4
 8007b36:	d109      	bne.n	8007b4c <__libc_init_array+0x24>
 8007b38:	4d0b      	ldr	r5, [pc, #44]	; (8007b68 <__libc_init_array+0x40>)
 8007b3a:	4c0c      	ldr	r4, [pc, #48]	; (8007b6c <__libc_init_array+0x44>)
 8007b3c:	f005 f95a 	bl	800cdf4 <_init>
 8007b40:	1b64      	subs	r4, r4, r5
 8007b42:	10a4      	asrs	r4, r4, #2
 8007b44:	2600      	movs	r6, #0
 8007b46:	42a6      	cmp	r6, r4
 8007b48:	d105      	bne.n	8007b56 <__libc_init_array+0x2e>
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b50:	4798      	blx	r3
 8007b52:	3601      	adds	r6, #1
 8007b54:	e7ee      	b.n	8007b34 <__libc_init_array+0xc>
 8007b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5a:	4798      	blx	r3
 8007b5c:	3601      	adds	r6, #1
 8007b5e:	e7f2      	b.n	8007b46 <__libc_init_array+0x1e>
 8007b60:	0800d484 	.word	0x0800d484
 8007b64:	0800d484 	.word	0x0800d484
 8007b68:	0800d484 	.word	0x0800d484
 8007b6c:	0800d488 	.word	0x0800d488

08007b70 <memcpy>:
 8007b70:	440a      	add	r2, r1
 8007b72:	4291      	cmp	r1, r2
 8007b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b78:	d100      	bne.n	8007b7c <memcpy+0xc>
 8007b7a:	4770      	bx	lr
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b86:	4291      	cmp	r1, r2
 8007b88:	d1f9      	bne.n	8007b7e <memcpy+0xe>
 8007b8a:	bd10      	pop	{r4, pc}

08007b8c <memset>:
 8007b8c:	4402      	add	r2, r0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d100      	bne.n	8007b96 <memset+0xa>
 8007b94:	4770      	bx	lr
 8007b96:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9a:	e7f9      	b.n	8007b90 <memset+0x4>

08007b9c <__cvt>:
 8007b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	ec55 4b10 	vmov	r4, r5, d0
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	460e      	mov	r6, r1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	462b      	mov	r3, r5
 8007bac:	bfbb      	ittet	lt
 8007bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bb2:	461d      	movlt	r5, r3
 8007bb4:	2300      	movge	r3, #0
 8007bb6:	232d      	movlt	r3, #45	; 0x2d
 8007bb8:	700b      	strb	r3, [r1, #0]
 8007bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bc0:	4691      	mov	r9, r2
 8007bc2:	f023 0820 	bic.w	r8, r3, #32
 8007bc6:	bfbc      	itt	lt
 8007bc8:	4622      	movlt	r2, r4
 8007bca:	4614      	movlt	r4, r2
 8007bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bd0:	d005      	beq.n	8007bde <__cvt+0x42>
 8007bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bd6:	d100      	bne.n	8007bda <__cvt+0x3e>
 8007bd8:	3601      	adds	r6, #1
 8007bda:	2102      	movs	r1, #2
 8007bdc:	e000      	b.n	8007be0 <__cvt+0x44>
 8007bde:	2103      	movs	r1, #3
 8007be0:	ab03      	add	r3, sp, #12
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	ab02      	add	r3, sp, #8
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	ec45 4b10 	vmov	d0, r4, r5
 8007bec:	4653      	mov	r3, sl
 8007bee:	4632      	mov	r2, r6
 8007bf0:	f001 ff92 	bl	8009b18 <_dtoa_r>
 8007bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	d102      	bne.n	8007c02 <__cvt+0x66>
 8007bfc:	f019 0f01 	tst.w	r9, #1
 8007c00:	d022      	beq.n	8007c48 <__cvt+0xac>
 8007c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c06:	eb07 0906 	add.w	r9, r7, r6
 8007c0a:	d110      	bne.n	8007c2e <__cvt+0x92>
 8007c0c:	783b      	ldrb	r3, [r7, #0]
 8007c0e:	2b30      	cmp	r3, #48	; 0x30
 8007c10:	d10a      	bne.n	8007c28 <__cvt+0x8c>
 8007c12:	2200      	movs	r2, #0
 8007c14:	2300      	movs	r3, #0
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 ff65 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c1e:	b918      	cbnz	r0, 8007c28 <__cvt+0x8c>
 8007c20:	f1c6 0601 	rsb	r6, r6, #1
 8007c24:	f8ca 6000 	str.w	r6, [sl]
 8007c28:	f8da 3000 	ldr.w	r3, [sl]
 8007c2c:	4499      	add	r9, r3
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	4620      	mov	r0, r4
 8007c34:	4629      	mov	r1, r5
 8007c36:	f7f8 ff57 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c3a:	b108      	cbz	r0, 8007c40 <__cvt+0xa4>
 8007c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c40:	2230      	movs	r2, #48	; 0x30
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	454b      	cmp	r3, r9
 8007c46:	d307      	bcc.n	8007c58 <__cvt+0xbc>
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c4c:	1bdb      	subs	r3, r3, r7
 8007c4e:	4638      	mov	r0, r7
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	b004      	add	sp, #16
 8007c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c58:	1c59      	adds	r1, r3, #1
 8007c5a:	9103      	str	r1, [sp, #12]
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e7f0      	b.n	8007c42 <__cvt+0xa6>

08007c60 <__exponent>:
 8007c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c62:	4603      	mov	r3, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	bfb8      	it	lt
 8007c68:	4249      	neglt	r1, r1
 8007c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c6e:	bfb4      	ite	lt
 8007c70:	222d      	movlt	r2, #45	; 0x2d
 8007c72:	222b      	movge	r2, #43	; 0x2b
 8007c74:	2909      	cmp	r1, #9
 8007c76:	7042      	strb	r2, [r0, #1]
 8007c78:	dd2a      	ble.n	8007cd0 <__exponent+0x70>
 8007c7a:	f10d 0407 	add.w	r4, sp, #7
 8007c7e:	46a4      	mov	ip, r4
 8007c80:	270a      	movs	r7, #10
 8007c82:	46a6      	mov	lr, r4
 8007c84:	460a      	mov	r2, r1
 8007c86:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c8a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c8e:	3530      	adds	r5, #48	; 0x30
 8007c90:	2a63      	cmp	r2, #99	; 0x63
 8007c92:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	dcf1      	bgt.n	8007c82 <__exponent+0x22>
 8007c9e:	3130      	adds	r1, #48	; 0x30
 8007ca0:	f1ae 0502 	sub.w	r5, lr, #2
 8007ca4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ca8:	1c44      	adds	r4, r0, #1
 8007caa:	4629      	mov	r1, r5
 8007cac:	4561      	cmp	r1, ip
 8007cae:	d30a      	bcc.n	8007cc6 <__exponent+0x66>
 8007cb0:	f10d 0209 	add.w	r2, sp, #9
 8007cb4:	eba2 020e 	sub.w	r2, r2, lr
 8007cb8:	4565      	cmp	r5, ip
 8007cba:	bf88      	it	hi
 8007cbc:	2200      	movhi	r2, #0
 8007cbe:	4413      	add	r3, r2
 8007cc0:	1a18      	subs	r0, r3, r0
 8007cc2:	b003      	add	sp, #12
 8007cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007cce:	e7ed      	b.n	8007cac <__exponent+0x4c>
 8007cd0:	2330      	movs	r3, #48	; 0x30
 8007cd2:	3130      	adds	r1, #48	; 0x30
 8007cd4:	7083      	strb	r3, [r0, #2]
 8007cd6:	70c1      	strb	r1, [r0, #3]
 8007cd8:	1d03      	adds	r3, r0, #4
 8007cda:	e7f1      	b.n	8007cc0 <__exponent+0x60>

08007cdc <_printf_float>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	ed2d 8b02 	vpush	{d8}
 8007ce4:	b08d      	sub	sp, #52	; 0x34
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007cec:	4616      	mov	r6, r2
 8007cee:	461f      	mov	r7, r3
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	f003 fa25 	bl	800b140 <_localeconv_r>
 8007cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8007cfa:	4650      	mov	r0, sl
 8007cfc:	f7f8 fa72 	bl	80001e4 <strlen>
 8007d00:	2300      	movs	r3, #0
 8007d02:	930a      	str	r3, [sp, #40]	; 0x28
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	f8d8 3000 	ldr.w	r3, [r8]
 8007d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d10:	3307      	adds	r3, #7
 8007d12:	f023 0307 	bic.w	r3, r3, #7
 8007d16:	f103 0208 	add.w	r2, r3, #8
 8007d1a:	f8c8 2000 	str.w	r2, [r8]
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d34:	ee08 0a10 	vmov	s16, r0
 8007d38:	4b9f      	ldr	r3, [pc, #636]	; (8007fb8 <_printf_float+0x2dc>)
 8007d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d42:	f7f8 ff03 	bl	8000b4c <__aeabi_dcmpun>
 8007d46:	bb88      	cbnz	r0, 8007dac <_printf_float+0xd0>
 8007d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d4c:	4b9a      	ldr	r3, [pc, #616]	; (8007fb8 <_printf_float+0x2dc>)
 8007d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d52:	f7f8 fedd 	bl	8000b10 <__aeabi_dcmple>
 8007d56:	bb48      	cbnz	r0, 8007dac <_printf_float+0xd0>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4649      	mov	r1, r9
 8007d60:	f7f8 fecc 	bl	8000afc <__aeabi_dcmplt>
 8007d64:	b110      	cbz	r0, 8007d6c <_printf_float+0x90>
 8007d66:	232d      	movs	r3, #45	; 0x2d
 8007d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6c:	4b93      	ldr	r3, [pc, #588]	; (8007fbc <_printf_float+0x2e0>)
 8007d6e:	4894      	ldr	r0, [pc, #592]	; (8007fc0 <_printf_float+0x2e4>)
 8007d70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d74:	bf94      	ite	ls
 8007d76:	4698      	movls	r8, r3
 8007d78:	4680      	movhi	r8, r0
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	9b05      	ldr	r3, [sp, #20]
 8007d80:	f023 0204 	bic.w	r2, r3, #4
 8007d84:	6022      	str	r2, [r4, #0]
 8007d86:	f04f 0900 	mov.w	r9, #0
 8007d8a:	9700      	str	r7, [sp, #0]
 8007d8c:	4633      	mov	r3, r6
 8007d8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d90:	4621      	mov	r1, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 f9d8 	bl	8008148 <_printf_common>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f040 8090 	bne.w	8007ebe <_printf_float+0x1e2>
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007da2:	b00d      	add	sp, #52	; 0x34
 8007da4:	ecbd 8b02 	vpop	{d8}
 8007da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dac:	4642      	mov	r2, r8
 8007dae:	464b      	mov	r3, r9
 8007db0:	4640      	mov	r0, r8
 8007db2:	4649      	mov	r1, r9
 8007db4:	f7f8 feca 	bl	8000b4c <__aeabi_dcmpun>
 8007db8:	b140      	cbz	r0, 8007dcc <_printf_float+0xf0>
 8007dba:	464b      	mov	r3, r9
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bfbc      	itt	lt
 8007dc0:	232d      	movlt	r3, #45	; 0x2d
 8007dc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007dc6:	487f      	ldr	r0, [pc, #508]	; (8007fc4 <_printf_float+0x2e8>)
 8007dc8:	4b7f      	ldr	r3, [pc, #508]	; (8007fc8 <_printf_float+0x2ec>)
 8007dca:	e7d1      	b.n	8007d70 <_printf_float+0x94>
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007dd2:	9206      	str	r2, [sp, #24]
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	d13f      	bne.n	8007e58 <_printf_float+0x17c>
 8007dd8:	2306      	movs	r3, #6
 8007dda:	6063      	str	r3, [r4, #4]
 8007ddc:	9b05      	ldr	r3, [sp, #20]
 8007dde:	6861      	ldr	r1, [r4, #4]
 8007de0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007de4:	2300      	movs	r3, #0
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	ab0a      	add	r3, sp, #40	; 0x28
 8007dea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007dee:	ab09      	add	r3, sp, #36	; 0x24
 8007df0:	ec49 8b10 	vmov	d0, r8, r9
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	6022      	str	r2, [r4, #0]
 8007df8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7ff fecd 	bl	8007b9c <__cvt>
 8007e02:	9b06      	ldr	r3, [sp, #24]
 8007e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e06:	2b47      	cmp	r3, #71	; 0x47
 8007e08:	4680      	mov	r8, r0
 8007e0a:	d108      	bne.n	8007e1e <_printf_float+0x142>
 8007e0c:	1cc8      	adds	r0, r1, #3
 8007e0e:	db02      	blt.n	8007e16 <_printf_float+0x13a>
 8007e10:	6863      	ldr	r3, [r4, #4]
 8007e12:	4299      	cmp	r1, r3
 8007e14:	dd41      	ble.n	8007e9a <_printf_float+0x1be>
 8007e16:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e1a:	fa5f fb8b 	uxtb.w	fp, fp
 8007e1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e22:	d820      	bhi.n	8007e66 <_printf_float+0x18a>
 8007e24:	3901      	subs	r1, #1
 8007e26:	465a      	mov	r2, fp
 8007e28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e2c:	9109      	str	r1, [sp, #36]	; 0x24
 8007e2e:	f7ff ff17 	bl	8007c60 <__exponent>
 8007e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e34:	1813      	adds	r3, r2, r0
 8007e36:	2a01      	cmp	r2, #1
 8007e38:	4681      	mov	r9, r0
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	dc02      	bgt.n	8007e44 <_printf_float+0x168>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	07d2      	lsls	r2, r2, #31
 8007e42:	d501      	bpl.n	8007e48 <_printf_float+0x16c>
 8007e44:	3301      	adds	r3, #1
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d09c      	beq.n	8007d8a <_printf_float+0xae>
 8007e50:	232d      	movs	r3, #45	; 0x2d
 8007e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e56:	e798      	b.n	8007d8a <_printf_float+0xae>
 8007e58:	9a06      	ldr	r2, [sp, #24]
 8007e5a:	2a47      	cmp	r2, #71	; 0x47
 8007e5c:	d1be      	bne.n	8007ddc <_printf_float+0x100>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1bc      	bne.n	8007ddc <_printf_float+0x100>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e7b9      	b.n	8007dda <_printf_float+0xfe>
 8007e66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e6a:	d118      	bne.n	8007e9e <_printf_float+0x1c2>
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	6863      	ldr	r3, [r4, #4]
 8007e70:	dd0b      	ble.n	8007e8a <_printf_float+0x1ae>
 8007e72:	6121      	str	r1, [r4, #16]
 8007e74:	b913      	cbnz	r3, 8007e7c <_printf_float+0x1a0>
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	07d0      	lsls	r0, r2, #31
 8007e7a:	d502      	bpl.n	8007e82 <_printf_float+0x1a6>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	440b      	add	r3, r1
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e84:	f04f 0900 	mov.w	r9, #0
 8007e88:	e7de      	b.n	8007e48 <_printf_float+0x16c>
 8007e8a:	b913      	cbnz	r3, 8007e92 <_printf_float+0x1b6>
 8007e8c:	6822      	ldr	r2, [r4, #0]
 8007e8e:	07d2      	lsls	r2, r2, #31
 8007e90:	d501      	bpl.n	8007e96 <_printf_float+0x1ba>
 8007e92:	3302      	adds	r3, #2
 8007e94:	e7f4      	b.n	8007e80 <_printf_float+0x1a4>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e7f2      	b.n	8007e80 <_printf_float+0x1a4>
 8007e9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	db05      	blt.n	8007eb0 <_printf_float+0x1d4>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	6121      	str	r1, [r4, #16]
 8007ea8:	07d8      	lsls	r0, r3, #31
 8007eaa:	d5ea      	bpl.n	8007e82 <_printf_float+0x1a6>
 8007eac:	1c4b      	adds	r3, r1, #1
 8007eae:	e7e7      	b.n	8007e80 <_printf_float+0x1a4>
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	bfd4      	ite	le
 8007eb4:	f1c1 0202 	rsble	r2, r1, #2
 8007eb8:	2201      	movgt	r2, #1
 8007eba:	4413      	add	r3, r2
 8007ebc:	e7e0      	b.n	8007e80 <_printf_float+0x1a4>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	055a      	lsls	r2, r3, #21
 8007ec2:	d407      	bmi.n	8007ed4 <_printf_float+0x1f8>
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	4642      	mov	r2, r8
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d12c      	bne.n	8007f2c <_printf_float+0x250>
 8007ed2:	e764      	b.n	8007d9e <_printf_float+0xc2>
 8007ed4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ed8:	f240 80e0 	bls.w	800809c <_printf_float+0x3c0>
 8007edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f7f8 fe00 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d034      	beq.n	8007f56 <_printf_float+0x27a>
 8007eec:	4a37      	ldr	r2, [pc, #220]	; (8007fcc <_printf_float+0x2f0>)
 8007eee:	2301      	movs	r3, #1
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b8      	blx	r7
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	f43f af51 	beq.w	8007d9e <_printf_float+0xc2>
 8007efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f00:	429a      	cmp	r2, r3
 8007f02:	db02      	blt.n	8007f0a <_printf_float+0x22e>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	07d8      	lsls	r0, r3, #31
 8007f08:	d510      	bpl.n	8007f2c <_printf_float+0x250>
 8007f0a:	ee18 3a10 	vmov	r3, s16
 8007f0e:	4652      	mov	r2, sl
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af41 	beq.w	8007d9e <_printf_float+0xc2>
 8007f1c:	f04f 0800 	mov.w	r8, #0
 8007f20:	f104 091a 	add.w	r9, r4, #26
 8007f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f26:	3b01      	subs	r3, #1
 8007f28:	4543      	cmp	r3, r8
 8007f2a:	dc09      	bgt.n	8007f40 <_printf_float+0x264>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	079b      	lsls	r3, r3, #30
 8007f30:	f100 8105 	bmi.w	800813e <_printf_float+0x462>
 8007f34:	68e0      	ldr	r0, [r4, #12]
 8007f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f38:	4298      	cmp	r0, r3
 8007f3a:	bfb8      	it	lt
 8007f3c:	4618      	movlt	r0, r3
 8007f3e:	e730      	b.n	8007da2 <_printf_float+0xc6>
 8007f40:	2301      	movs	r3, #1
 8007f42:	464a      	mov	r2, r9
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f43f af27 	beq.w	8007d9e <_printf_float+0xc2>
 8007f50:	f108 0801 	add.w	r8, r8, #1
 8007f54:	e7e6      	b.n	8007f24 <_printf_float+0x248>
 8007f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dc39      	bgt.n	8007fd0 <_printf_float+0x2f4>
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <_printf_float+0x2f0>)
 8007f5e:	2301      	movs	r3, #1
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	f43f af19 	beq.w	8007d9e <_printf_float+0xc2>
 8007f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d102      	bne.n	8007f7a <_printf_float+0x29e>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	07d9      	lsls	r1, r3, #31
 8007f78:	d5d8      	bpl.n	8007f2c <_printf_float+0x250>
 8007f7a:	ee18 3a10 	vmov	r3, s16
 8007f7e:	4652      	mov	r2, sl
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	f43f af09 	beq.w	8007d9e <_printf_float+0xc2>
 8007f8c:	f04f 0900 	mov.w	r9, #0
 8007f90:	f104 0a1a 	add.w	sl, r4, #26
 8007f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f96:	425b      	negs	r3, r3
 8007f98:	454b      	cmp	r3, r9
 8007f9a:	dc01      	bgt.n	8007fa0 <_printf_float+0x2c4>
 8007f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9e:	e792      	b.n	8007ec6 <_printf_float+0x1ea>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f aef7 	beq.w	8007d9e <_printf_float+0xc2>
 8007fb0:	f109 0901 	add.w	r9, r9, #1
 8007fb4:	e7ee      	b.n	8007f94 <_printf_float+0x2b8>
 8007fb6:	bf00      	nop
 8007fb8:	7fefffff 	.word	0x7fefffff
 8007fbc:	0800cfbc 	.word	0x0800cfbc
 8007fc0:	0800cfc0 	.word	0x0800cfc0
 8007fc4:	0800cfc8 	.word	0x0800cfc8
 8007fc8:	0800cfc4 	.word	0x0800cfc4
 8007fcc:	0800d429 	.word	0x0800d429
 8007fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	bfa8      	it	ge
 8007fd8:	461a      	movge	r2, r3
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	4691      	mov	r9, r2
 8007fde:	dc37      	bgt.n	8008050 <_printf_float+0x374>
 8007fe0:	f04f 0b00 	mov.w	fp, #0
 8007fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fe8:	f104 021a 	add.w	r2, r4, #26
 8007fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fee:	9305      	str	r3, [sp, #20]
 8007ff0:	eba3 0309 	sub.w	r3, r3, r9
 8007ff4:	455b      	cmp	r3, fp
 8007ff6:	dc33      	bgt.n	8008060 <_printf_float+0x384>
 8007ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	db3b      	blt.n	8008078 <_printf_float+0x39c>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	07da      	lsls	r2, r3, #31
 8008004:	d438      	bmi.n	8008078 <_printf_float+0x39c>
 8008006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008008:	9a05      	ldr	r2, [sp, #20]
 800800a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800800c:	1a9a      	subs	r2, r3, r2
 800800e:	eba3 0901 	sub.w	r9, r3, r1
 8008012:	4591      	cmp	r9, r2
 8008014:	bfa8      	it	ge
 8008016:	4691      	movge	r9, r2
 8008018:	f1b9 0f00 	cmp.w	r9, #0
 800801c:	dc35      	bgt.n	800808a <_printf_float+0x3ae>
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008026:	f104 0a1a 	add.w	sl, r4, #26
 800802a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	eba3 0309 	sub.w	r3, r3, r9
 8008034:	4543      	cmp	r3, r8
 8008036:	f77f af79 	ble.w	8007f2c <_printf_float+0x250>
 800803a:	2301      	movs	r3, #1
 800803c:	4652      	mov	r2, sl
 800803e:	4631      	mov	r1, r6
 8008040:	4628      	mov	r0, r5
 8008042:	47b8      	blx	r7
 8008044:	3001      	adds	r0, #1
 8008046:	f43f aeaa 	beq.w	8007d9e <_printf_float+0xc2>
 800804a:	f108 0801 	add.w	r8, r8, #1
 800804e:	e7ec      	b.n	800802a <_printf_float+0x34e>
 8008050:	4613      	mov	r3, r2
 8008052:	4631      	mov	r1, r6
 8008054:	4642      	mov	r2, r8
 8008056:	4628      	mov	r0, r5
 8008058:	47b8      	blx	r7
 800805a:	3001      	adds	r0, #1
 800805c:	d1c0      	bne.n	8007fe0 <_printf_float+0x304>
 800805e:	e69e      	b.n	8007d9e <_printf_float+0xc2>
 8008060:	2301      	movs	r3, #1
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	9205      	str	r2, [sp, #20]
 8008068:	47b8      	blx	r7
 800806a:	3001      	adds	r0, #1
 800806c:	f43f ae97 	beq.w	8007d9e <_printf_float+0xc2>
 8008070:	9a05      	ldr	r2, [sp, #20]
 8008072:	f10b 0b01 	add.w	fp, fp, #1
 8008076:	e7b9      	b.n	8007fec <_printf_float+0x310>
 8008078:	ee18 3a10 	vmov	r3, s16
 800807c:	4652      	mov	r2, sl
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	d1be      	bne.n	8008006 <_printf_float+0x32a>
 8008088:	e689      	b.n	8007d9e <_printf_float+0xc2>
 800808a:	9a05      	ldr	r2, [sp, #20]
 800808c:	464b      	mov	r3, r9
 800808e:	4442      	add	r2, r8
 8008090:	4631      	mov	r1, r6
 8008092:	4628      	mov	r0, r5
 8008094:	47b8      	blx	r7
 8008096:	3001      	adds	r0, #1
 8008098:	d1c1      	bne.n	800801e <_printf_float+0x342>
 800809a:	e680      	b.n	8007d9e <_printf_float+0xc2>
 800809c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800809e:	2a01      	cmp	r2, #1
 80080a0:	dc01      	bgt.n	80080a6 <_printf_float+0x3ca>
 80080a2:	07db      	lsls	r3, r3, #31
 80080a4:	d538      	bpl.n	8008118 <_printf_float+0x43c>
 80080a6:	2301      	movs	r3, #1
 80080a8:	4642      	mov	r2, r8
 80080aa:	4631      	mov	r1, r6
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	f43f ae74 	beq.w	8007d9e <_printf_float+0xc2>
 80080b6:	ee18 3a10 	vmov	r3, s16
 80080ba:	4652      	mov	r2, sl
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f ae6b 	beq.w	8007d9e <_printf_float+0xc2>
 80080c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080cc:	2200      	movs	r2, #0
 80080ce:	2300      	movs	r3, #0
 80080d0:	f7f8 fd0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80080d4:	b9d8      	cbnz	r0, 800810e <_printf_float+0x432>
 80080d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d8:	f108 0201 	add.w	r2, r8, #1
 80080dc:	3b01      	subs	r3, #1
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	d10e      	bne.n	8008106 <_printf_float+0x42a>
 80080e8:	e659      	b.n	8007d9e <_printf_float+0xc2>
 80080ea:	2301      	movs	r3, #1
 80080ec:	4652      	mov	r2, sl
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae52 	beq.w	8007d9e <_printf_float+0xc2>
 80080fa:	f108 0801 	add.w	r8, r8, #1
 80080fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008100:	3b01      	subs	r3, #1
 8008102:	4543      	cmp	r3, r8
 8008104:	dcf1      	bgt.n	80080ea <_printf_float+0x40e>
 8008106:	464b      	mov	r3, r9
 8008108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800810c:	e6dc      	b.n	8007ec8 <_printf_float+0x1ec>
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	f104 0a1a 	add.w	sl, r4, #26
 8008116:	e7f2      	b.n	80080fe <_printf_float+0x422>
 8008118:	2301      	movs	r3, #1
 800811a:	4642      	mov	r2, r8
 800811c:	e7df      	b.n	80080de <_printf_float+0x402>
 800811e:	2301      	movs	r3, #1
 8008120:	464a      	mov	r2, r9
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	f43f ae38 	beq.w	8007d9e <_printf_float+0xc2>
 800812e:	f108 0801 	add.w	r8, r8, #1
 8008132:	68e3      	ldr	r3, [r4, #12]
 8008134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008136:	1a5b      	subs	r3, r3, r1
 8008138:	4543      	cmp	r3, r8
 800813a:	dcf0      	bgt.n	800811e <_printf_float+0x442>
 800813c:	e6fa      	b.n	8007f34 <_printf_float+0x258>
 800813e:	f04f 0800 	mov.w	r8, #0
 8008142:	f104 0919 	add.w	r9, r4, #25
 8008146:	e7f4      	b.n	8008132 <_printf_float+0x456>

08008148 <_printf_common>:
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	4616      	mov	r6, r2
 800814e:	4699      	mov	r9, r3
 8008150:	688a      	ldr	r2, [r1, #8]
 8008152:	690b      	ldr	r3, [r1, #16]
 8008154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008158:	4293      	cmp	r3, r2
 800815a:	bfb8      	it	lt
 800815c:	4613      	movlt	r3, r2
 800815e:	6033      	str	r3, [r6, #0]
 8008160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008164:	4607      	mov	r7, r0
 8008166:	460c      	mov	r4, r1
 8008168:	b10a      	cbz	r2, 800816e <_printf_common+0x26>
 800816a:	3301      	adds	r3, #1
 800816c:	6033      	str	r3, [r6, #0]
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	0699      	lsls	r1, r3, #26
 8008172:	bf42      	ittt	mi
 8008174:	6833      	ldrmi	r3, [r6, #0]
 8008176:	3302      	addmi	r3, #2
 8008178:	6033      	strmi	r3, [r6, #0]
 800817a:	6825      	ldr	r5, [r4, #0]
 800817c:	f015 0506 	ands.w	r5, r5, #6
 8008180:	d106      	bne.n	8008190 <_printf_common+0x48>
 8008182:	f104 0a19 	add.w	sl, r4, #25
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	6832      	ldr	r2, [r6, #0]
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	42ab      	cmp	r3, r5
 800818e:	dc26      	bgt.n	80081de <_printf_common+0x96>
 8008190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008194:	1e13      	subs	r3, r2, #0
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	bf18      	it	ne
 800819a:	2301      	movne	r3, #1
 800819c:	0692      	lsls	r2, r2, #26
 800819e:	d42b      	bmi.n	80081f8 <_printf_common+0xb0>
 80081a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081a4:	4649      	mov	r1, r9
 80081a6:	4638      	mov	r0, r7
 80081a8:	47c0      	blx	r8
 80081aa:	3001      	adds	r0, #1
 80081ac:	d01e      	beq.n	80081ec <_printf_common+0xa4>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	68e5      	ldr	r5, [r4, #12]
 80081b2:	6832      	ldr	r2, [r6, #0]
 80081b4:	f003 0306 	and.w	r3, r3, #6
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	bf08      	it	eq
 80081bc:	1aad      	subeq	r5, r5, r2
 80081be:	68a3      	ldr	r3, [r4, #8]
 80081c0:	6922      	ldr	r2, [r4, #16]
 80081c2:	bf0c      	ite	eq
 80081c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081c8:	2500      	movne	r5, #0
 80081ca:	4293      	cmp	r3, r2
 80081cc:	bfc4      	itt	gt
 80081ce:	1a9b      	subgt	r3, r3, r2
 80081d0:	18ed      	addgt	r5, r5, r3
 80081d2:	2600      	movs	r6, #0
 80081d4:	341a      	adds	r4, #26
 80081d6:	42b5      	cmp	r5, r6
 80081d8:	d11a      	bne.n	8008210 <_printf_common+0xc8>
 80081da:	2000      	movs	r0, #0
 80081dc:	e008      	b.n	80081f0 <_printf_common+0xa8>
 80081de:	2301      	movs	r3, #1
 80081e0:	4652      	mov	r2, sl
 80081e2:	4649      	mov	r1, r9
 80081e4:	4638      	mov	r0, r7
 80081e6:	47c0      	blx	r8
 80081e8:	3001      	adds	r0, #1
 80081ea:	d103      	bne.n	80081f4 <_printf_common+0xac>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f4:	3501      	adds	r5, #1
 80081f6:	e7c6      	b.n	8008186 <_printf_common+0x3e>
 80081f8:	18e1      	adds	r1, r4, r3
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	2030      	movs	r0, #48	; 0x30
 80081fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008202:	4422      	add	r2, r4
 8008204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800820c:	3302      	adds	r3, #2
 800820e:	e7c7      	b.n	80081a0 <_printf_common+0x58>
 8008210:	2301      	movs	r3, #1
 8008212:	4622      	mov	r2, r4
 8008214:	4649      	mov	r1, r9
 8008216:	4638      	mov	r0, r7
 8008218:	47c0      	blx	r8
 800821a:	3001      	adds	r0, #1
 800821c:	d0e6      	beq.n	80081ec <_printf_common+0xa4>
 800821e:	3601      	adds	r6, #1
 8008220:	e7d9      	b.n	80081d6 <_printf_common+0x8e>
	...

08008224 <_printf_i>:
 8008224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008228:	7e0f      	ldrb	r7, [r1, #24]
 800822a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800822c:	2f78      	cmp	r7, #120	; 0x78
 800822e:	4691      	mov	r9, r2
 8008230:	4680      	mov	r8, r0
 8008232:	460c      	mov	r4, r1
 8008234:	469a      	mov	sl, r3
 8008236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800823a:	d807      	bhi.n	800824c <_printf_i+0x28>
 800823c:	2f62      	cmp	r7, #98	; 0x62
 800823e:	d80a      	bhi.n	8008256 <_printf_i+0x32>
 8008240:	2f00      	cmp	r7, #0
 8008242:	f000 80d8 	beq.w	80083f6 <_printf_i+0x1d2>
 8008246:	2f58      	cmp	r7, #88	; 0x58
 8008248:	f000 80a3 	beq.w	8008392 <_printf_i+0x16e>
 800824c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008254:	e03a      	b.n	80082cc <_printf_i+0xa8>
 8008256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800825a:	2b15      	cmp	r3, #21
 800825c:	d8f6      	bhi.n	800824c <_printf_i+0x28>
 800825e:	a101      	add	r1, pc, #4	; (adr r1, 8008264 <_printf_i+0x40>)
 8008260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008264:	080082bd 	.word	0x080082bd
 8008268:	080082d1 	.word	0x080082d1
 800826c:	0800824d 	.word	0x0800824d
 8008270:	0800824d 	.word	0x0800824d
 8008274:	0800824d 	.word	0x0800824d
 8008278:	0800824d 	.word	0x0800824d
 800827c:	080082d1 	.word	0x080082d1
 8008280:	0800824d 	.word	0x0800824d
 8008284:	0800824d 	.word	0x0800824d
 8008288:	0800824d 	.word	0x0800824d
 800828c:	0800824d 	.word	0x0800824d
 8008290:	080083dd 	.word	0x080083dd
 8008294:	08008301 	.word	0x08008301
 8008298:	080083bf 	.word	0x080083bf
 800829c:	0800824d 	.word	0x0800824d
 80082a0:	0800824d 	.word	0x0800824d
 80082a4:	080083ff 	.word	0x080083ff
 80082a8:	0800824d 	.word	0x0800824d
 80082ac:	08008301 	.word	0x08008301
 80082b0:	0800824d 	.word	0x0800824d
 80082b4:	0800824d 	.word	0x0800824d
 80082b8:	080083c7 	.word	0x080083c7
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	1d1a      	adds	r2, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	602a      	str	r2, [r5, #0]
 80082c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082cc:	2301      	movs	r3, #1
 80082ce:	e0a3      	b.n	8008418 <_printf_i+0x1f4>
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	6829      	ldr	r1, [r5, #0]
 80082d4:	0606      	lsls	r6, r0, #24
 80082d6:	f101 0304 	add.w	r3, r1, #4
 80082da:	d50a      	bpl.n	80082f2 <_printf_i+0xce>
 80082dc:	680e      	ldr	r6, [r1, #0]
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	da03      	bge.n	80082ec <_printf_i+0xc8>
 80082e4:	232d      	movs	r3, #45	; 0x2d
 80082e6:	4276      	negs	r6, r6
 80082e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ec:	485e      	ldr	r0, [pc, #376]	; (8008468 <_printf_i+0x244>)
 80082ee:	230a      	movs	r3, #10
 80082f0:	e019      	b.n	8008326 <_printf_i+0x102>
 80082f2:	680e      	ldr	r6, [r1, #0]
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082fa:	bf18      	it	ne
 80082fc:	b236      	sxthne	r6, r6
 80082fe:	e7ef      	b.n	80082e0 <_printf_i+0xbc>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	6820      	ldr	r0, [r4, #0]
 8008304:	1d19      	adds	r1, r3, #4
 8008306:	6029      	str	r1, [r5, #0]
 8008308:	0601      	lsls	r1, r0, #24
 800830a:	d501      	bpl.n	8008310 <_printf_i+0xec>
 800830c:	681e      	ldr	r6, [r3, #0]
 800830e:	e002      	b.n	8008316 <_printf_i+0xf2>
 8008310:	0646      	lsls	r6, r0, #25
 8008312:	d5fb      	bpl.n	800830c <_printf_i+0xe8>
 8008314:	881e      	ldrh	r6, [r3, #0]
 8008316:	4854      	ldr	r0, [pc, #336]	; (8008468 <_printf_i+0x244>)
 8008318:	2f6f      	cmp	r7, #111	; 0x6f
 800831a:	bf0c      	ite	eq
 800831c:	2308      	moveq	r3, #8
 800831e:	230a      	movne	r3, #10
 8008320:	2100      	movs	r1, #0
 8008322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008326:	6865      	ldr	r5, [r4, #4]
 8008328:	60a5      	str	r5, [r4, #8]
 800832a:	2d00      	cmp	r5, #0
 800832c:	bfa2      	ittt	ge
 800832e:	6821      	ldrge	r1, [r4, #0]
 8008330:	f021 0104 	bicge.w	r1, r1, #4
 8008334:	6021      	strge	r1, [r4, #0]
 8008336:	b90e      	cbnz	r6, 800833c <_printf_i+0x118>
 8008338:	2d00      	cmp	r5, #0
 800833a:	d04d      	beq.n	80083d8 <_printf_i+0x1b4>
 800833c:	4615      	mov	r5, r2
 800833e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008342:	fb03 6711 	mls	r7, r3, r1, r6
 8008346:	5dc7      	ldrb	r7, [r0, r7]
 8008348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800834c:	4637      	mov	r7, r6
 800834e:	42bb      	cmp	r3, r7
 8008350:	460e      	mov	r6, r1
 8008352:	d9f4      	bls.n	800833e <_printf_i+0x11a>
 8008354:	2b08      	cmp	r3, #8
 8008356:	d10b      	bne.n	8008370 <_printf_i+0x14c>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	07de      	lsls	r6, r3, #31
 800835c:	d508      	bpl.n	8008370 <_printf_i+0x14c>
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	6861      	ldr	r1, [r4, #4]
 8008362:	4299      	cmp	r1, r3
 8008364:	bfde      	ittt	le
 8008366:	2330      	movle	r3, #48	; 0x30
 8008368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800836c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008370:	1b52      	subs	r2, r2, r5
 8008372:	6122      	str	r2, [r4, #16]
 8008374:	f8cd a000 	str.w	sl, [sp]
 8008378:	464b      	mov	r3, r9
 800837a:	aa03      	add	r2, sp, #12
 800837c:	4621      	mov	r1, r4
 800837e:	4640      	mov	r0, r8
 8008380:	f7ff fee2 	bl	8008148 <_printf_common>
 8008384:	3001      	adds	r0, #1
 8008386:	d14c      	bne.n	8008422 <_printf_i+0x1fe>
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	b004      	add	sp, #16
 800838e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008392:	4835      	ldr	r0, [pc, #212]	; (8008468 <_printf_i+0x244>)
 8008394:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008398:	6829      	ldr	r1, [r5, #0]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	f851 6b04 	ldr.w	r6, [r1], #4
 80083a0:	6029      	str	r1, [r5, #0]
 80083a2:	061d      	lsls	r5, r3, #24
 80083a4:	d514      	bpl.n	80083d0 <_printf_i+0x1ac>
 80083a6:	07df      	lsls	r7, r3, #31
 80083a8:	bf44      	itt	mi
 80083aa:	f043 0320 	orrmi.w	r3, r3, #32
 80083ae:	6023      	strmi	r3, [r4, #0]
 80083b0:	b91e      	cbnz	r6, 80083ba <_printf_i+0x196>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	f023 0320 	bic.w	r3, r3, #32
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	2310      	movs	r3, #16
 80083bc:	e7b0      	b.n	8008320 <_printf_i+0xfc>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	f043 0320 	orr.w	r3, r3, #32
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	2378      	movs	r3, #120	; 0x78
 80083c8:	4828      	ldr	r0, [pc, #160]	; (800846c <_printf_i+0x248>)
 80083ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083ce:	e7e3      	b.n	8008398 <_printf_i+0x174>
 80083d0:	0659      	lsls	r1, r3, #25
 80083d2:	bf48      	it	mi
 80083d4:	b2b6      	uxthmi	r6, r6
 80083d6:	e7e6      	b.n	80083a6 <_printf_i+0x182>
 80083d8:	4615      	mov	r5, r2
 80083da:	e7bb      	b.n	8008354 <_printf_i+0x130>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	6826      	ldr	r6, [r4, #0]
 80083e0:	6961      	ldr	r1, [r4, #20]
 80083e2:	1d18      	adds	r0, r3, #4
 80083e4:	6028      	str	r0, [r5, #0]
 80083e6:	0635      	lsls	r5, r6, #24
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	d501      	bpl.n	80083f0 <_printf_i+0x1cc>
 80083ec:	6019      	str	r1, [r3, #0]
 80083ee:	e002      	b.n	80083f6 <_printf_i+0x1d2>
 80083f0:	0670      	lsls	r0, r6, #25
 80083f2:	d5fb      	bpl.n	80083ec <_printf_i+0x1c8>
 80083f4:	8019      	strh	r1, [r3, #0]
 80083f6:	2300      	movs	r3, #0
 80083f8:	6123      	str	r3, [r4, #16]
 80083fa:	4615      	mov	r5, r2
 80083fc:	e7ba      	b.n	8008374 <_printf_i+0x150>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	1d1a      	adds	r2, r3, #4
 8008402:	602a      	str	r2, [r5, #0]
 8008404:	681d      	ldr	r5, [r3, #0]
 8008406:	6862      	ldr	r2, [r4, #4]
 8008408:	2100      	movs	r1, #0
 800840a:	4628      	mov	r0, r5
 800840c:	f7f7 fef8 	bl	8000200 <memchr>
 8008410:	b108      	cbz	r0, 8008416 <_printf_i+0x1f2>
 8008412:	1b40      	subs	r0, r0, r5
 8008414:	6060      	str	r0, [r4, #4]
 8008416:	6863      	ldr	r3, [r4, #4]
 8008418:	6123      	str	r3, [r4, #16]
 800841a:	2300      	movs	r3, #0
 800841c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008420:	e7a8      	b.n	8008374 <_printf_i+0x150>
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	462a      	mov	r2, r5
 8008426:	4649      	mov	r1, r9
 8008428:	4640      	mov	r0, r8
 800842a:	47d0      	blx	sl
 800842c:	3001      	adds	r0, #1
 800842e:	d0ab      	beq.n	8008388 <_printf_i+0x164>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	079b      	lsls	r3, r3, #30
 8008434:	d413      	bmi.n	800845e <_printf_i+0x23a>
 8008436:	68e0      	ldr	r0, [r4, #12]
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	4298      	cmp	r0, r3
 800843c:	bfb8      	it	lt
 800843e:	4618      	movlt	r0, r3
 8008440:	e7a4      	b.n	800838c <_printf_i+0x168>
 8008442:	2301      	movs	r3, #1
 8008444:	4632      	mov	r2, r6
 8008446:	4649      	mov	r1, r9
 8008448:	4640      	mov	r0, r8
 800844a:	47d0      	blx	sl
 800844c:	3001      	adds	r0, #1
 800844e:	d09b      	beq.n	8008388 <_printf_i+0x164>
 8008450:	3501      	adds	r5, #1
 8008452:	68e3      	ldr	r3, [r4, #12]
 8008454:	9903      	ldr	r1, [sp, #12]
 8008456:	1a5b      	subs	r3, r3, r1
 8008458:	42ab      	cmp	r3, r5
 800845a:	dcf2      	bgt.n	8008442 <_printf_i+0x21e>
 800845c:	e7eb      	b.n	8008436 <_printf_i+0x212>
 800845e:	2500      	movs	r5, #0
 8008460:	f104 0619 	add.w	r6, r4, #25
 8008464:	e7f5      	b.n	8008452 <_printf_i+0x22e>
 8008466:	bf00      	nop
 8008468:	0800cfcc 	.word	0x0800cfcc
 800846c:	0800cfdd 	.word	0x0800cfdd

08008470 <_scanf_float>:
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	b087      	sub	sp, #28
 8008476:	4617      	mov	r7, r2
 8008478:	9303      	str	r3, [sp, #12]
 800847a:	688b      	ldr	r3, [r1, #8]
 800847c:	1e5a      	subs	r2, r3, #1
 800847e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008482:	bf83      	ittte	hi
 8008484:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008488:	195b      	addhi	r3, r3, r5
 800848a:	9302      	strhi	r3, [sp, #8]
 800848c:	2300      	movls	r3, #0
 800848e:	bf86      	itte	hi
 8008490:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008494:	608b      	strhi	r3, [r1, #8]
 8008496:	9302      	strls	r3, [sp, #8]
 8008498:	680b      	ldr	r3, [r1, #0]
 800849a:	468b      	mov	fp, r1
 800849c:	2500      	movs	r5, #0
 800849e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084a2:	f84b 3b1c 	str.w	r3, [fp], #28
 80084a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084aa:	4680      	mov	r8, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	465e      	mov	r6, fp
 80084b0:	46aa      	mov	sl, r5
 80084b2:	46a9      	mov	r9, r5
 80084b4:	9501      	str	r5, [sp, #4]
 80084b6:	68a2      	ldr	r2, [r4, #8]
 80084b8:	b152      	cbz	r2, 80084d0 <_scanf_float+0x60>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b4e      	cmp	r3, #78	; 0x4e
 80084c0:	d864      	bhi.n	800858c <_scanf_float+0x11c>
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d83c      	bhi.n	8008540 <_scanf_float+0xd0>
 80084c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80084ca:	b2c8      	uxtb	r0, r1
 80084cc:	280e      	cmp	r0, #14
 80084ce:	d93a      	bls.n	8008546 <_scanf_float+0xd6>
 80084d0:	f1b9 0f00 	cmp.w	r9, #0
 80084d4:	d003      	beq.n	80084de <_scanf_float+0x6e>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084e2:	f1ba 0f01 	cmp.w	sl, #1
 80084e6:	f200 8113 	bhi.w	8008710 <_scanf_float+0x2a0>
 80084ea:	455e      	cmp	r6, fp
 80084ec:	f200 8105 	bhi.w	80086fa <_scanf_float+0x28a>
 80084f0:	2501      	movs	r5, #1
 80084f2:	4628      	mov	r0, r5
 80084f4:	b007      	add	sp, #28
 80084f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80084fe:	2a0d      	cmp	r2, #13
 8008500:	d8e6      	bhi.n	80084d0 <_scanf_float+0x60>
 8008502:	a101      	add	r1, pc, #4	; (adr r1, 8008508 <_scanf_float+0x98>)
 8008504:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008508:	08008647 	.word	0x08008647
 800850c:	080084d1 	.word	0x080084d1
 8008510:	080084d1 	.word	0x080084d1
 8008514:	080084d1 	.word	0x080084d1
 8008518:	080086a7 	.word	0x080086a7
 800851c:	0800867f 	.word	0x0800867f
 8008520:	080084d1 	.word	0x080084d1
 8008524:	080084d1 	.word	0x080084d1
 8008528:	08008655 	.word	0x08008655
 800852c:	080084d1 	.word	0x080084d1
 8008530:	080084d1 	.word	0x080084d1
 8008534:	080084d1 	.word	0x080084d1
 8008538:	080084d1 	.word	0x080084d1
 800853c:	0800860d 	.word	0x0800860d
 8008540:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008544:	e7db      	b.n	80084fe <_scanf_float+0x8e>
 8008546:	290e      	cmp	r1, #14
 8008548:	d8c2      	bhi.n	80084d0 <_scanf_float+0x60>
 800854a:	a001      	add	r0, pc, #4	; (adr r0, 8008550 <_scanf_float+0xe0>)
 800854c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008550:	080085ff 	.word	0x080085ff
 8008554:	080084d1 	.word	0x080084d1
 8008558:	080085ff 	.word	0x080085ff
 800855c:	08008693 	.word	0x08008693
 8008560:	080084d1 	.word	0x080084d1
 8008564:	080085ad 	.word	0x080085ad
 8008568:	080085e9 	.word	0x080085e9
 800856c:	080085e9 	.word	0x080085e9
 8008570:	080085e9 	.word	0x080085e9
 8008574:	080085e9 	.word	0x080085e9
 8008578:	080085e9 	.word	0x080085e9
 800857c:	080085e9 	.word	0x080085e9
 8008580:	080085e9 	.word	0x080085e9
 8008584:	080085e9 	.word	0x080085e9
 8008588:	080085e9 	.word	0x080085e9
 800858c:	2b6e      	cmp	r3, #110	; 0x6e
 800858e:	d809      	bhi.n	80085a4 <_scanf_float+0x134>
 8008590:	2b60      	cmp	r3, #96	; 0x60
 8008592:	d8b2      	bhi.n	80084fa <_scanf_float+0x8a>
 8008594:	2b54      	cmp	r3, #84	; 0x54
 8008596:	d077      	beq.n	8008688 <_scanf_float+0x218>
 8008598:	2b59      	cmp	r3, #89	; 0x59
 800859a:	d199      	bne.n	80084d0 <_scanf_float+0x60>
 800859c:	2d07      	cmp	r5, #7
 800859e:	d197      	bne.n	80084d0 <_scanf_float+0x60>
 80085a0:	2508      	movs	r5, #8
 80085a2:	e029      	b.n	80085f8 <_scanf_float+0x188>
 80085a4:	2b74      	cmp	r3, #116	; 0x74
 80085a6:	d06f      	beq.n	8008688 <_scanf_float+0x218>
 80085a8:	2b79      	cmp	r3, #121	; 0x79
 80085aa:	e7f6      	b.n	800859a <_scanf_float+0x12a>
 80085ac:	6821      	ldr	r1, [r4, #0]
 80085ae:	05c8      	lsls	r0, r1, #23
 80085b0:	d51a      	bpl.n	80085e8 <_scanf_float+0x178>
 80085b2:	9b02      	ldr	r3, [sp, #8]
 80085b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085b8:	6021      	str	r1, [r4, #0]
 80085ba:	f109 0901 	add.w	r9, r9, #1
 80085be:	b11b      	cbz	r3, 80085c8 <_scanf_float+0x158>
 80085c0:	3b01      	subs	r3, #1
 80085c2:	3201      	adds	r2, #1
 80085c4:	9302      	str	r3, [sp, #8]
 80085c6:	60a2      	str	r2, [r4, #8]
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	3301      	adds	r3, #1
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	607b      	str	r3, [r7, #4]
 80085dc:	f340 8084 	ble.w	80086e8 <_scanf_float+0x278>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	3301      	adds	r3, #1
 80085e4:	603b      	str	r3, [r7, #0]
 80085e6:	e766      	b.n	80084b6 <_scanf_float+0x46>
 80085e8:	eb1a 0f05 	cmn.w	sl, r5
 80085ec:	f47f af70 	bne.w	80084d0 <_scanf_float+0x60>
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80085f6:	6022      	str	r2, [r4, #0]
 80085f8:	f806 3b01 	strb.w	r3, [r6], #1
 80085fc:	e7e4      	b.n	80085c8 <_scanf_float+0x158>
 80085fe:	6822      	ldr	r2, [r4, #0]
 8008600:	0610      	lsls	r0, r2, #24
 8008602:	f57f af65 	bpl.w	80084d0 <_scanf_float+0x60>
 8008606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800860a:	e7f4      	b.n	80085f6 <_scanf_float+0x186>
 800860c:	f1ba 0f00 	cmp.w	sl, #0
 8008610:	d10e      	bne.n	8008630 <_scanf_float+0x1c0>
 8008612:	f1b9 0f00 	cmp.w	r9, #0
 8008616:	d10e      	bne.n	8008636 <_scanf_float+0x1c6>
 8008618:	6822      	ldr	r2, [r4, #0]
 800861a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800861e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008622:	d108      	bne.n	8008636 <_scanf_float+0x1c6>
 8008624:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008628:	6022      	str	r2, [r4, #0]
 800862a:	f04f 0a01 	mov.w	sl, #1
 800862e:	e7e3      	b.n	80085f8 <_scanf_float+0x188>
 8008630:	f1ba 0f02 	cmp.w	sl, #2
 8008634:	d055      	beq.n	80086e2 <_scanf_float+0x272>
 8008636:	2d01      	cmp	r5, #1
 8008638:	d002      	beq.n	8008640 <_scanf_float+0x1d0>
 800863a:	2d04      	cmp	r5, #4
 800863c:	f47f af48 	bne.w	80084d0 <_scanf_float+0x60>
 8008640:	3501      	adds	r5, #1
 8008642:	b2ed      	uxtb	r5, r5
 8008644:	e7d8      	b.n	80085f8 <_scanf_float+0x188>
 8008646:	f1ba 0f01 	cmp.w	sl, #1
 800864a:	f47f af41 	bne.w	80084d0 <_scanf_float+0x60>
 800864e:	f04f 0a02 	mov.w	sl, #2
 8008652:	e7d1      	b.n	80085f8 <_scanf_float+0x188>
 8008654:	b97d      	cbnz	r5, 8008676 <_scanf_float+0x206>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	f47f af3c 	bne.w	80084d6 <_scanf_float+0x66>
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008664:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008668:	f47f af39 	bne.w	80084de <_scanf_float+0x6e>
 800866c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008670:	6022      	str	r2, [r4, #0]
 8008672:	2501      	movs	r5, #1
 8008674:	e7c0      	b.n	80085f8 <_scanf_float+0x188>
 8008676:	2d03      	cmp	r5, #3
 8008678:	d0e2      	beq.n	8008640 <_scanf_float+0x1d0>
 800867a:	2d05      	cmp	r5, #5
 800867c:	e7de      	b.n	800863c <_scanf_float+0x1cc>
 800867e:	2d02      	cmp	r5, #2
 8008680:	f47f af26 	bne.w	80084d0 <_scanf_float+0x60>
 8008684:	2503      	movs	r5, #3
 8008686:	e7b7      	b.n	80085f8 <_scanf_float+0x188>
 8008688:	2d06      	cmp	r5, #6
 800868a:	f47f af21 	bne.w	80084d0 <_scanf_float+0x60>
 800868e:	2507      	movs	r5, #7
 8008690:	e7b2      	b.n	80085f8 <_scanf_float+0x188>
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	0591      	lsls	r1, r2, #22
 8008696:	f57f af1b 	bpl.w	80084d0 <_scanf_float+0x60>
 800869a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80086a4:	e7a8      	b.n	80085f8 <_scanf_float+0x188>
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086b0:	d006      	beq.n	80086c0 <_scanf_float+0x250>
 80086b2:	0550      	lsls	r0, r2, #21
 80086b4:	f57f af0c 	bpl.w	80084d0 <_scanf_float+0x60>
 80086b8:	f1b9 0f00 	cmp.w	r9, #0
 80086bc:	f43f af0f 	beq.w	80084de <_scanf_float+0x6e>
 80086c0:	0591      	lsls	r1, r2, #22
 80086c2:	bf58      	it	pl
 80086c4:	9901      	ldrpl	r1, [sp, #4]
 80086c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086ca:	bf58      	it	pl
 80086cc:	eba9 0101 	subpl.w	r1, r9, r1
 80086d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80086d4:	bf58      	it	pl
 80086d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80086da:	6022      	str	r2, [r4, #0]
 80086dc:	f04f 0900 	mov.w	r9, #0
 80086e0:	e78a      	b.n	80085f8 <_scanf_float+0x188>
 80086e2:	f04f 0a03 	mov.w	sl, #3
 80086e6:	e787      	b.n	80085f8 <_scanf_float+0x188>
 80086e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086ec:	4639      	mov	r1, r7
 80086ee:	4640      	mov	r0, r8
 80086f0:	4798      	blx	r3
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f43f aedf 	beq.w	80084b6 <_scanf_float+0x46>
 80086f8:	e6ea      	b.n	80084d0 <_scanf_float+0x60>
 80086fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008702:	463a      	mov	r2, r7
 8008704:	4640      	mov	r0, r8
 8008706:	4798      	blx	r3
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	3b01      	subs	r3, #1
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	e6ec      	b.n	80084ea <_scanf_float+0x7a>
 8008710:	1e6b      	subs	r3, r5, #1
 8008712:	2b06      	cmp	r3, #6
 8008714:	d825      	bhi.n	8008762 <_scanf_float+0x2f2>
 8008716:	2d02      	cmp	r5, #2
 8008718:	d836      	bhi.n	8008788 <_scanf_float+0x318>
 800871a:	455e      	cmp	r6, fp
 800871c:	f67f aee8 	bls.w	80084f0 <_scanf_float+0x80>
 8008720:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008724:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008728:	463a      	mov	r2, r7
 800872a:	4640      	mov	r0, r8
 800872c:	4798      	blx	r3
 800872e:	6923      	ldr	r3, [r4, #16]
 8008730:	3b01      	subs	r3, #1
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	e7f1      	b.n	800871a <_scanf_float+0x2aa>
 8008736:	9802      	ldr	r0, [sp, #8]
 8008738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800873c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008740:	9002      	str	r0, [sp, #8]
 8008742:	463a      	mov	r2, r7
 8008744:	4640      	mov	r0, r8
 8008746:	4798      	blx	r3
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	3b01      	subs	r3, #1
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008752:	fa5f fa8a 	uxtb.w	sl, sl
 8008756:	f1ba 0f02 	cmp.w	sl, #2
 800875a:	d1ec      	bne.n	8008736 <_scanf_float+0x2c6>
 800875c:	3d03      	subs	r5, #3
 800875e:	b2ed      	uxtb	r5, r5
 8008760:	1b76      	subs	r6, r6, r5
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	05da      	lsls	r2, r3, #23
 8008766:	d52f      	bpl.n	80087c8 <_scanf_float+0x358>
 8008768:	055b      	lsls	r3, r3, #21
 800876a:	d510      	bpl.n	800878e <_scanf_float+0x31e>
 800876c:	455e      	cmp	r6, fp
 800876e:	f67f aebf 	bls.w	80084f0 <_scanf_float+0x80>
 8008772:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800877a:	463a      	mov	r2, r7
 800877c:	4640      	mov	r0, r8
 800877e:	4798      	blx	r3
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	3b01      	subs	r3, #1
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	e7f1      	b.n	800876c <_scanf_float+0x2fc>
 8008788:	46aa      	mov	sl, r5
 800878a:	9602      	str	r6, [sp, #8]
 800878c:	e7df      	b.n	800874e <_scanf_float+0x2de>
 800878e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	2965      	cmp	r1, #101	; 0x65
 8008796:	f103 33ff 	add.w	r3, r3, #4294967295
 800879a:	f106 35ff 	add.w	r5, r6, #4294967295
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	d00c      	beq.n	80087bc <_scanf_float+0x34c>
 80087a2:	2945      	cmp	r1, #69	; 0x45
 80087a4:	d00a      	beq.n	80087bc <_scanf_float+0x34c>
 80087a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087aa:	463a      	mov	r2, r7
 80087ac:	4640      	mov	r0, r8
 80087ae:	4798      	blx	r3
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	1eb5      	subs	r5, r6, #2
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087c0:	463a      	mov	r2, r7
 80087c2:	4640      	mov	r0, r8
 80087c4:	4798      	blx	r3
 80087c6:	462e      	mov	r6, r5
 80087c8:	6825      	ldr	r5, [r4, #0]
 80087ca:	f015 0510 	ands.w	r5, r5, #16
 80087ce:	d159      	bne.n	8008884 <_scanf_float+0x414>
 80087d0:	7035      	strb	r5, [r6, #0]
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087dc:	d11b      	bne.n	8008816 <_scanf_float+0x3a6>
 80087de:	9b01      	ldr	r3, [sp, #4]
 80087e0:	454b      	cmp	r3, r9
 80087e2:	eba3 0209 	sub.w	r2, r3, r9
 80087e6:	d123      	bne.n	8008830 <_scanf_float+0x3c0>
 80087e8:	2200      	movs	r2, #0
 80087ea:	4659      	mov	r1, fp
 80087ec:	4640      	mov	r0, r8
 80087ee:	f000 ff99 	bl	8009724 <_strtod_r>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	f012 0f02 	tst.w	r2, #2
 80087fa:	ec57 6b10 	vmov	r6, r7, d0
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	d021      	beq.n	8008846 <_scanf_float+0x3d6>
 8008802:	9903      	ldr	r1, [sp, #12]
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	600a      	str	r2, [r1, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	e9c3 6700 	strd	r6, r7, [r3]
 800880e:	68e3      	ldr	r3, [r4, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60e3      	str	r3, [r4, #12]
 8008814:	e66d      	b.n	80084f2 <_scanf_float+0x82>
 8008816:	9b04      	ldr	r3, [sp, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0e5      	beq.n	80087e8 <_scanf_float+0x378>
 800881c:	9905      	ldr	r1, [sp, #20]
 800881e:	230a      	movs	r3, #10
 8008820:	462a      	mov	r2, r5
 8008822:	3101      	adds	r1, #1
 8008824:	4640      	mov	r0, r8
 8008826:	f001 f805 	bl	8009834 <_strtol_r>
 800882a:	9b04      	ldr	r3, [sp, #16]
 800882c:	9e05      	ldr	r6, [sp, #20]
 800882e:	1ac2      	subs	r2, r0, r3
 8008830:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008834:	429e      	cmp	r6, r3
 8008836:	bf28      	it	cs
 8008838:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800883c:	4912      	ldr	r1, [pc, #72]	; (8008888 <_scanf_float+0x418>)
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f8ba 	bl	80089b8 <siprintf>
 8008844:	e7d0      	b.n	80087e8 <_scanf_float+0x378>
 8008846:	9903      	ldr	r1, [sp, #12]
 8008848:	f012 0f04 	tst.w	r2, #4
 800884c:	f103 0204 	add.w	r2, r3, #4
 8008850:	600a      	str	r2, [r1, #0]
 8008852:	d1d9      	bne.n	8008808 <_scanf_float+0x398>
 8008854:	f8d3 8000 	ldr.w	r8, [r3]
 8008858:	ee10 2a10 	vmov	r2, s0
 800885c:	ee10 0a10 	vmov	r0, s0
 8008860:	463b      	mov	r3, r7
 8008862:	4639      	mov	r1, r7
 8008864:	f7f8 f972 	bl	8000b4c <__aeabi_dcmpun>
 8008868:	b128      	cbz	r0, 8008876 <_scanf_float+0x406>
 800886a:	4808      	ldr	r0, [pc, #32]	; (800888c <_scanf_float+0x41c>)
 800886c:	f000 f89e 	bl	80089ac <nanf>
 8008870:	ed88 0a00 	vstr	s0, [r8]
 8008874:	e7cb      	b.n	800880e <_scanf_float+0x39e>
 8008876:	4630      	mov	r0, r6
 8008878:	4639      	mov	r1, r7
 800887a:	f7f8 f9c5 	bl	8000c08 <__aeabi_d2f>
 800887e:	f8c8 0000 	str.w	r0, [r8]
 8008882:	e7c4      	b.n	800880e <_scanf_float+0x39e>
 8008884:	2500      	movs	r5, #0
 8008886:	e634      	b.n	80084f2 <_scanf_float+0x82>
 8008888:	0800cfee 	.word	0x0800cfee
 800888c:	0800d47b 	.word	0x0800d47b

08008890 <iprintf>:
 8008890:	b40f      	push	{r0, r1, r2, r3}
 8008892:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <iprintf+0x2c>)
 8008894:	b513      	push	{r0, r1, r4, lr}
 8008896:	681c      	ldr	r4, [r3, #0]
 8008898:	b124      	cbz	r4, 80088a4 <iprintf+0x14>
 800889a:	69a3      	ldr	r3, [r4, #24]
 800889c:	b913      	cbnz	r3, 80088a4 <iprintf+0x14>
 800889e:	4620      	mov	r0, r4
 80088a0:	f002 f842 	bl	800a928 <__sinit>
 80088a4:	ab05      	add	r3, sp, #20
 80088a6:	9a04      	ldr	r2, [sp, #16]
 80088a8:	68a1      	ldr	r1, [r4, #8]
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	4620      	mov	r0, r4
 80088ae:	f003 fdf1 	bl	800c494 <_vfiprintf_r>
 80088b2:	b002      	add	sp, #8
 80088b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b8:	b004      	add	sp, #16
 80088ba:	4770      	bx	lr
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <_puts_r>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	460e      	mov	r6, r1
 80088c4:	4605      	mov	r5, r0
 80088c6:	b118      	cbz	r0, 80088d0 <_puts_r+0x10>
 80088c8:	6983      	ldr	r3, [r0, #24]
 80088ca:	b90b      	cbnz	r3, 80088d0 <_puts_r+0x10>
 80088cc:	f002 f82c 	bl	800a928 <__sinit>
 80088d0:	69ab      	ldr	r3, [r5, #24]
 80088d2:	68ac      	ldr	r4, [r5, #8]
 80088d4:	b913      	cbnz	r3, 80088dc <_puts_r+0x1c>
 80088d6:	4628      	mov	r0, r5
 80088d8:	f002 f826 	bl	800a928 <__sinit>
 80088dc:	4b2c      	ldr	r3, [pc, #176]	; (8008990 <_puts_r+0xd0>)
 80088de:	429c      	cmp	r4, r3
 80088e0:	d120      	bne.n	8008924 <_puts_r+0x64>
 80088e2:	686c      	ldr	r4, [r5, #4]
 80088e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088e6:	07db      	lsls	r3, r3, #31
 80088e8:	d405      	bmi.n	80088f6 <_puts_r+0x36>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	0598      	lsls	r0, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_puts_r+0x36>
 80088f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f2:	f002 fc2a 	bl	800b14a <__retarget_lock_acquire_recursive>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	0719      	lsls	r1, r3, #28
 80088fa:	d51d      	bpl.n	8008938 <_puts_r+0x78>
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	b1db      	cbz	r3, 8008938 <_puts_r+0x78>
 8008900:	3e01      	subs	r6, #1
 8008902:	68a3      	ldr	r3, [r4, #8]
 8008904:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008908:	3b01      	subs	r3, #1
 800890a:	60a3      	str	r3, [r4, #8]
 800890c:	bb39      	cbnz	r1, 800895e <_puts_r+0x9e>
 800890e:	2b00      	cmp	r3, #0
 8008910:	da38      	bge.n	8008984 <_puts_r+0xc4>
 8008912:	4622      	mov	r2, r4
 8008914:	210a      	movs	r1, #10
 8008916:	4628      	mov	r0, r5
 8008918:	f000 ff8e 	bl	8009838 <__swbuf_r>
 800891c:	3001      	adds	r0, #1
 800891e:	d011      	beq.n	8008944 <_puts_r+0x84>
 8008920:	250a      	movs	r5, #10
 8008922:	e011      	b.n	8008948 <_puts_r+0x88>
 8008924:	4b1b      	ldr	r3, [pc, #108]	; (8008994 <_puts_r+0xd4>)
 8008926:	429c      	cmp	r4, r3
 8008928:	d101      	bne.n	800892e <_puts_r+0x6e>
 800892a:	68ac      	ldr	r4, [r5, #8]
 800892c:	e7da      	b.n	80088e4 <_puts_r+0x24>
 800892e:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <_puts_r+0xd8>)
 8008930:	429c      	cmp	r4, r3
 8008932:	bf08      	it	eq
 8008934:	68ec      	ldreq	r4, [r5, #12]
 8008936:	e7d5      	b.n	80088e4 <_puts_r+0x24>
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f000 ffe0 	bl	8009900 <__swsetup_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	d0dd      	beq.n	8008900 <_puts_r+0x40>
 8008944:	f04f 35ff 	mov.w	r5, #4294967295
 8008948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800894a:	07da      	lsls	r2, r3, #31
 800894c:	d405      	bmi.n	800895a <_puts_r+0x9a>
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	059b      	lsls	r3, r3, #22
 8008952:	d402      	bmi.n	800895a <_puts_r+0x9a>
 8008954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008956:	f002 fbf9 	bl	800b14c <__retarget_lock_release_recursive>
 800895a:	4628      	mov	r0, r5
 800895c:	bd70      	pop	{r4, r5, r6, pc}
 800895e:	2b00      	cmp	r3, #0
 8008960:	da04      	bge.n	800896c <_puts_r+0xac>
 8008962:	69a2      	ldr	r2, [r4, #24]
 8008964:	429a      	cmp	r2, r3
 8008966:	dc06      	bgt.n	8008976 <_puts_r+0xb6>
 8008968:	290a      	cmp	r1, #10
 800896a:	d004      	beq.n	8008976 <_puts_r+0xb6>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	6022      	str	r2, [r4, #0]
 8008972:	7019      	strb	r1, [r3, #0]
 8008974:	e7c5      	b.n	8008902 <_puts_r+0x42>
 8008976:	4622      	mov	r2, r4
 8008978:	4628      	mov	r0, r5
 800897a:	f000 ff5d 	bl	8009838 <__swbuf_r>
 800897e:	3001      	adds	r0, #1
 8008980:	d1bf      	bne.n	8008902 <_puts_r+0x42>
 8008982:	e7df      	b.n	8008944 <_puts_r+0x84>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	250a      	movs	r5, #10
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	701d      	strb	r5, [r3, #0]
 800898e:	e7db      	b.n	8008948 <_puts_r+0x88>
 8008990:	0800d1fc 	.word	0x0800d1fc
 8008994:	0800d21c 	.word	0x0800d21c
 8008998:	0800d1dc 	.word	0x0800d1dc

0800899c <puts>:
 800899c:	4b02      	ldr	r3, [pc, #8]	; (80089a8 <puts+0xc>)
 800899e:	4601      	mov	r1, r0
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	f7ff bf8d 	b.w	80088c0 <_puts_r>
 80089a6:	bf00      	nop
 80089a8:	2000000c 	.word	0x2000000c

080089ac <nanf>:
 80089ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089b4 <nanf+0x8>
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	7fc00000 	.word	0x7fc00000

080089b8 <siprintf>:
 80089b8:	b40e      	push	{r1, r2, r3}
 80089ba:	b500      	push	{lr}
 80089bc:	b09c      	sub	sp, #112	; 0x70
 80089be:	ab1d      	add	r3, sp, #116	; 0x74
 80089c0:	9002      	str	r0, [sp, #8]
 80089c2:	9006      	str	r0, [sp, #24]
 80089c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089c8:	4809      	ldr	r0, [pc, #36]	; (80089f0 <siprintf+0x38>)
 80089ca:	9107      	str	r1, [sp, #28]
 80089cc:	9104      	str	r1, [sp, #16]
 80089ce:	4909      	ldr	r1, [pc, #36]	; (80089f4 <siprintf+0x3c>)
 80089d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d4:	9105      	str	r1, [sp, #20]
 80089d6:	6800      	ldr	r0, [r0, #0]
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	a902      	add	r1, sp, #8
 80089dc:	f003 fa5e 	bl	800be9c <_svfiprintf_r>
 80089e0:	9b02      	ldr	r3, [sp, #8]
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	b01c      	add	sp, #112	; 0x70
 80089e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089ec:	b003      	add	sp, #12
 80089ee:	4770      	bx	lr
 80089f0:	2000000c 	.word	0x2000000c
 80089f4:	ffff0208 	.word	0xffff0208

080089f8 <siscanf>:
 80089f8:	b40e      	push	{r1, r2, r3}
 80089fa:	b510      	push	{r4, lr}
 80089fc:	b09f      	sub	sp, #124	; 0x7c
 80089fe:	ac21      	add	r4, sp, #132	; 0x84
 8008a00:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008a04:	f854 2b04 	ldr.w	r2, [r4], #4
 8008a08:	9201      	str	r2, [sp, #4]
 8008a0a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008a0e:	9004      	str	r0, [sp, #16]
 8008a10:	9008      	str	r0, [sp, #32]
 8008a12:	f7f7 fbe7 	bl	80001e4 <strlen>
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <siscanf+0x50>)
 8008a18:	9005      	str	r0, [sp, #20]
 8008a1a:	9009      	str	r0, [sp, #36]	; 0x24
 8008a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a1e:	480b      	ldr	r0, [pc, #44]	; (8008a4c <siscanf+0x54>)
 8008a20:	9a01      	ldr	r2, [sp, #4]
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	9403      	str	r4, [sp, #12]
 8008a26:	2300      	movs	r3, #0
 8008a28:	9311      	str	r3, [sp, #68]	; 0x44
 8008a2a:	9316      	str	r3, [sp, #88]	; 0x58
 8008a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a30:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	4623      	mov	r3, r4
 8008a38:	f003 fb8a 	bl	800c150 <__ssvfiscanf_r>
 8008a3c:	b01f      	add	sp, #124	; 0x7c
 8008a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a42:	b003      	add	sp, #12
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	08008a73 	.word	0x08008a73
 8008a4c:	2000000c 	.word	0x2000000c

08008a50 <__sread>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	460c      	mov	r4, r1
 8008a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a58:	f003 ff9e 	bl	800c998 <_read_r>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	bfab      	itete	ge
 8008a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a62:	89a3      	ldrhlt	r3, [r4, #12]
 8008a64:	181b      	addge	r3, r3, r0
 8008a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a6a:	bfac      	ite	ge
 8008a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a6e:	81a3      	strhlt	r3, [r4, #12]
 8008a70:	bd10      	pop	{r4, pc}

08008a72 <__seofread>:
 8008a72:	2000      	movs	r0, #0
 8008a74:	4770      	bx	lr

08008a76 <__swrite>:
 8008a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	461f      	mov	r7, r3
 8008a7c:	898b      	ldrh	r3, [r1, #12]
 8008a7e:	05db      	lsls	r3, r3, #23
 8008a80:	4605      	mov	r5, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	4616      	mov	r6, r2
 8008a86:	d505      	bpl.n	8008a94 <__swrite+0x1e>
 8008a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f002 fb5e 	bl	800b150 <_lseek_r>
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aaa:	f000 bf17 	b.w	80098dc <_write_r>

08008aae <__sseek>:
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab6:	f002 fb4b 	bl	800b150 <_lseek_r>
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	bf15      	itete	ne
 8008ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aca:	81a3      	strheq	r3, [r4, #12]
 8008acc:	bf18      	it	ne
 8008ace:	81a3      	strhne	r3, [r4, #12]
 8008ad0:	bd10      	pop	{r4, pc}

08008ad2 <__sclose>:
 8008ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad6:	f000 bf81 	b.w	80099dc <_close_r>

08008ada <sulp>:
 8008ada:	b570      	push	{r4, r5, r6, lr}
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	ec45 4b10 	vmov	d0, r4, r5
 8008ae4:	4616      	mov	r6, r2
 8008ae6:	f002 ff37 	bl	800b958 <__ulp>
 8008aea:	ec51 0b10 	vmov	r0, r1, d0
 8008aee:	b17e      	cbz	r6, 8008b10 <sulp+0x36>
 8008af0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008af4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	dd09      	ble.n	8008b10 <sulp+0x36>
 8008afc:	051b      	lsls	r3, r3, #20
 8008afe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b02:	2400      	movs	r4, #0
 8008b04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b08:	4622      	mov	r2, r4
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	f7f7 fd84 	bl	8000618 <__aeabi_dmul>
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
 8008b12:	0000      	movs	r0, r0
 8008b14:	0000      	movs	r0, r0
	...

08008b18 <_strtod_l>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	ed2d 8b02 	vpush	{d8}
 8008b20:	b09d      	sub	sp, #116	; 0x74
 8008b22:	461f      	mov	r7, r3
 8008b24:	2300      	movs	r3, #0
 8008b26:	9318      	str	r3, [sp, #96]	; 0x60
 8008b28:	4ba2      	ldr	r3, [pc, #648]	; (8008db4 <_strtod_l+0x29c>)
 8008b2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	9305      	str	r3, [sp, #20]
 8008b30:	4604      	mov	r4, r0
 8008b32:	4618      	mov	r0, r3
 8008b34:	4688      	mov	r8, r1
 8008b36:	f7f7 fb55 	bl	80001e4 <strlen>
 8008b3a:	f04f 0a00 	mov.w	sl, #0
 8008b3e:	4605      	mov	r5, r0
 8008b40:	f04f 0b00 	mov.w	fp, #0
 8008b44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	2a2b      	cmp	r2, #43	; 0x2b
 8008b4e:	d04e      	beq.n	8008bee <_strtod_l+0xd6>
 8008b50:	d83b      	bhi.n	8008bca <_strtod_l+0xb2>
 8008b52:	2a0d      	cmp	r2, #13
 8008b54:	d834      	bhi.n	8008bc0 <_strtod_l+0xa8>
 8008b56:	2a08      	cmp	r2, #8
 8008b58:	d834      	bhi.n	8008bc4 <_strtod_l+0xac>
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	d03e      	beq.n	8008bdc <_strtod_l+0xc4>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	930a      	str	r3, [sp, #40]	; 0x28
 8008b62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b64:	7833      	ldrb	r3, [r6, #0]
 8008b66:	2b30      	cmp	r3, #48	; 0x30
 8008b68:	f040 80b0 	bne.w	8008ccc <_strtod_l+0x1b4>
 8008b6c:	7873      	ldrb	r3, [r6, #1]
 8008b6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b72:	2b58      	cmp	r3, #88	; 0x58
 8008b74:	d168      	bne.n	8008c48 <_strtod_l+0x130>
 8008b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	ab18      	add	r3, sp, #96	; 0x60
 8008b7c:	9702      	str	r7, [sp, #8]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	4a8d      	ldr	r2, [pc, #564]	; (8008db8 <_strtod_l+0x2a0>)
 8008b82:	ab19      	add	r3, sp, #100	; 0x64
 8008b84:	a917      	add	r1, sp, #92	; 0x5c
 8008b86:	4620      	mov	r0, r4
 8008b88:	f001 ffd2 	bl	800ab30 <__gethex>
 8008b8c:	f010 0707 	ands.w	r7, r0, #7
 8008b90:	4605      	mov	r5, r0
 8008b92:	d005      	beq.n	8008ba0 <_strtod_l+0x88>
 8008b94:	2f06      	cmp	r7, #6
 8008b96:	d12c      	bne.n	8008bf2 <_strtod_l+0xda>
 8008b98:	3601      	adds	r6, #1
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f040 8590 	bne.w	80096c8 <_strtod_l+0xbb0>
 8008ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008baa:	b1eb      	cbz	r3, 8008be8 <_strtod_l+0xd0>
 8008bac:	4652      	mov	r2, sl
 8008bae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008bb2:	ec43 2b10 	vmov	d0, r2, r3
 8008bb6:	b01d      	add	sp, #116	; 0x74
 8008bb8:	ecbd 8b02 	vpop	{d8}
 8008bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc0:	2a20      	cmp	r2, #32
 8008bc2:	d1cc      	bne.n	8008b5e <_strtod_l+0x46>
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bc8:	e7be      	b.n	8008b48 <_strtod_l+0x30>
 8008bca:	2a2d      	cmp	r2, #45	; 0x2d
 8008bcc:	d1c7      	bne.n	8008b5e <_strtod_l+0x46>
 8008bce:	2201      	movs	r2, #1
 8008bd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bd6:	785b      	ldrb	r3, [r3, #1]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1c2      	bne.n	8008b62 <_strtod_l+0x4a>
 8008bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f040 856e 	bne.w	80096c4 <_strtod_l+0xbac>
 8008be8:	4652      	mov	r2, sl
 8008bea:	465b      	mov	r3, fp
 8008bec:	e7e1      	b.n	8008bb2 <_strtod_l+0x9a>
 8008bee:	2200      	movs	r2, #0
 8008bf0:	e7ee      	b.n	8008bd0 <_strtod_l+0xb8>
 8008bf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bf4:	b13a      	cbz	r2, 8008c06 <_strtod_l+0xee>
 8008bf6:	2135      	movs	r1, #53	; 0x35
 8008bf8:	a81a      	add	r0, sp, #104	; 0x68
 8008bfa:	f002 ffb8 	bl	800bb6e <__copybits>
 8008bfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c00:	4620      	mov	r0, r4
 8008c02:	f002 fb77 	bl	800b2f4 <_Bfree>
 8008c06:	3f01      	subs	r7, #1
 8008c08:	2f04      	cmp	r7, #4
 8008c0a:	d806      	bhi.n	8008c1a <_strtod_l+0x102>
 8008c0c:	e8df f007 	tbb	[pc, r7]
 8008c10:	1714030a 	.word	0x1714030a
 8008c14:	0a          	.byte	0x0a
 8008c15:	00          	.byte	0x00
 8008c16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008c1a:	0728      	lsls	r0, r5, #28
 8008c1c:	d5c0      	bpl.n	8008ba0 <_strtod_l+0x88>
 8008c1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008c22:	e7bd      	b.n	8008ba0 <_strtod_l+0x88>
 8008c24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008c28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c36:	e7f0      	b.n	8008c1a <_strtod_l+0x102>
 8008c38:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008dbc <_strtod_l+0x2a4>
 8008c3c:	e7ed      	b.n	8008c1a <_strtod_l+0x102>
 8008c3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008c42:	f04f 3aff 	mov.w	sl, #4294967295
 8008c46:	e7e8      	b.n	8008c1a <_strtod_l+0x102>
 8008c48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c4e:	785b      	ldrb	r3, [r3, #1]
 8008c50:	2b30      	cmp	r3, #48	; 0x30
 8008c52:	d0f9      	beq.n	8008c48 <_strtod_l+0x130>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0a3      	beq.n	8008ba0 <_strtod_l+0x88>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	f04f 0900 	mov.w	r9, #0
 8008c5e:	9304      	str	r3, [sp, #16]
 8008c60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c62:	9308      	str	r3, [sp, #32]
 8008c64:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c68:	464f      	mov	r7, r9
 8008c6a:	220a      	movs	r2, #10
 8008c6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008c6e:	7806      	ldrb	r6, [r0, #0]
 8008c70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c74:	b2d9      	uxtb	r1, r3
 8008c76:	2909      	cmp	r1, #9
 8008c78:	d92a      	bls.n	8008cd0 <_strtod_l+0x1b8>
 8008c7a:	9905      	ldr	r1, [sp, #20]
 8008c7c:	462a      	mov	r2, r5
 8008c7e:	f003 feef 	bl	800ca60 <strncmp>
 8008c82:	b398      	cbz	r0, 8008cec <_strtod_l+0x1d4>
 8008c84:	2000      	movs	r0, #0
 8008c86:	4632      	mov	r2, r6
 8008c88:	463d      	mov	r5, r7
 8008c8a:	9005      	str	r0, [sp, #20]
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2a65      	cmp	r2, #101	; 0x65
 8008c90:	d001      	beq.n	8008c96 <_strtod_l+0x17e>
 8008c92:	2a45      	cmp	r2, #69	; 0x45
 8008c94:	d118      	bne.n	8008cc8 <_strtod_l+0x1b0>
 8008c96:	b91d      	cbnz	r5, 8008ca0 <_strtod_l+0x188>
 8008c98:	9a04      	ldr	r2, [sp, #16]
 8008c9a:	4302      	orrs	r2, r0
 8008c9c:	d09e      	beq.n	8008bdc <_strtod_l+0xc4>
 8008c9e:	2500      	movs	r5, #0
 8008ca0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008ca4:	f108 0201 	add.w	r2, r8, #1
 8008ca8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008caa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008cae:	2a2b      	cmp	r2, #43	; 0x2b
 8008cb0:	d075      	beq.n	8008d9e <_strtod_l+0x286>
 8008cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8008cb4:	d07b      	beq.n	8008dae <_strtod_l+0x296>
 8008cb6:	f04f 0c00 	mov.w	ip, #0
 8008cba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008cbe:	2909      	cmp	r1, #9
 8008cc0:	f240 8082 	bls.w	8008dc8 <_strtod_l+0x2b0>
 8008cc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008cc8:	2600      	movs	r6, #0
 8008cca:	e09d      	b.n	8008e08 <_strtod_l+0x2f0>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	e7c4      	b.n	8008c5a <_strtod_l+0x142>
 8008cd0:	2f08      	cmp	r7, #8
 8008cd2:	bfd8      	it	le
 8008cd4:	9907      	ldrle	r1, [sp, #28]
 8008cd6:	f100 0001 	add.w	r0, r0, #1
 8008cda:	bfda      	itte	le
 8008cdc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ce0:	9307      	strle	r3, [sp, #28]
 8008ce2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008ce6:	3701      	adds	r7, #1
 8008ce8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008cea:	e7bf      	b.n	8008c6c <_strtod_l+0x154>
 8008cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cee:	195a      	adds	r2, r3, r5
 8008cf0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cf2:	5d5a      	ldrb	r2, [r3, r5]
 8008cf4:	2f00      	cmp	r7, #0
 8008cf6:	d037      	beq.n	8008d68 <_strtod_l+0x250>
 8008cf8:	9005      	str	r0, [sp, #20]
 8008cfa:	463d      	mov	r5, r7
 8008cfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008d00:	2b09      	cmp	r3, #9
 8008d02:	d912      	bls.n	8008d2a <_strtod_l+0x212>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e7c2      	b.n	8008c8e <_strtod_l+0x176>
 8008d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d0e:	785a      	ldrb	r2, [r3, #1]
 8008d10:	3001      	adds	r0, #1
 8008d12:	2a30      	cmp	r2, #48	; 0x30
 8008d14:	d0f8      	beq.n	8008d08 <_strtod_l+0x1f0>
 8008d16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	f200 84d9 	bhi.w	80096d2 <_strtod_l+0xbba>
 8008d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d22:	9005      	str	r0, [sp, #20]
 8008d24:	2000      	movs	r0, #0
 8008d26:	9308      	str	r3, [sp, #32]
 8008d28:	4605      	mov	r5, r0
 8008d2a:	3a30      	subs	r2, #48	; 0x30
 8008d2c:	f100 0301 	add.w	r3, r0, #1
 8008d30:	d014      	beq.n	8008d5c <_strtod_l+0x244>
 8008d32:	9905      	ldr	r1, [sp, #20]
 8008d34:	4419      	add	r1, r3
 8008d36:	9105      	str	r1, [sp, #20]
 8008d38:	462b      	mov	r3, r5
 8008d3a:	eb00 0e05 	add.w	lr, r0, r5
 8008d3e:	210a      	movs	r1, #10
 8008d40:	4573      	cmp	r3, lr
 8008d42:	d113      	bne.n	8008d6c <_strtod_l+0x254>
 8008d44:	182b      	adds	r3, r5, r0
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	f105 0501 	add.w	r5, r5, #1
 8008d4c:	4405      	add	r5, r0
 8008d4e:	dc1c      	bgt.n	8008d8a <_strtod_l+0x272>
 8008d50:	9907      	ldr	r1, [sp, #28]
 8008d52:	230a      	movs	r3, #10
 8008d54:	fb03 2301 	mla	r3, r3, r1, r2
 8008d58:	9307      	str	r3, [sp, #28]
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d5e:	1c51      	adds	r1, r2, #1
 8008d60:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d62:	7852      	ldrb	r2, [r2, #1]
 8008d64:	4618      	mov	r0, r3
 8008d66:	e7c9      	b.n	8008cfc <_strtod_l+0x1e4>
 8008d68:	4638      	mov	r0, r7
 8008d6a:	e7d2      	b.n	8008d12 <_strtod_l+0x1fa>
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	dc04      	bgt.n	8008d7a <_strtod_l+0x262>
 8008d70:	9e07      	ldr	r6, [sp, #28]
 8008d72:	434e      	muls	r6, r1
 8008d74:	9607      	str	r6, [sp, #28]
 8008d76:	3301      	adds	r3, #1
 8008d78:	e7e2      	b.n	8008d40 <_strtod_l+0x228>
 8008d7a:	f103 0c01 	add.w	ip, r3, #1
 8008d7e:	f1bc 0f10 	cmp.w	ip, #16
 8008d82:	bfd8      	it	le
 8008d84:	fb01 f909 	mulle.w	r9, r1, r9
 8008d88:	e7f5      	b.n	8008d76 <_strtod_l+0x25e>
 8008d8a:	2d10      	cmp	r5, #16
 8008d8c:	bfdc      	itt	le
 8008d8e:	230a      	movle	r3, #10
 8008d90:	fb03 2909 	mlale	r9, r3, r9, r2
 8008d94:	e7e1      	b.n	8008d5a <_strtod_l+0x242>
 8008d96:	2300      	movs	r3, #0
 8008d98:	9305      	str	r3, [sp, #20]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e77c      	b.n	8008c98 <_strtod_l+0x180>
 8008d9e:	f04f 0c00 	mov.w	ip, #0
 8008da2:	f108 0202 	add.w	r2, r8, #2
 8008da6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008da8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008dac:	e785      	b.n	8008cba <_strtod_l+0x1a2>
 8008dae:	f04f 0c01 	mov.w	ip, #1
 8008db2:	e7f6      	b.n	8008da2 <_strtod_l+0x28a>
 8008db4:	0800d2a4 	.word	0x0800d2a4
 8008db8:	0800cff4 	.word	0x0800cff4
 8008dbc:	7ff00000 	.word	0x7ff00000
 8008dc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dc2:	1c51      	adds	r1, r2, #1
 8008dc4:	9117      	str	r1, [sp, #92]	; 0x5c
 8008dc6:	7852      	ldrb	r2, [r2, #1]
 8008dc8:	2a30      	cmp	r2, #48	; 0x30
 8008dca:	d0f9      	beq.n	8008dc0 <_strtod_l+0x2a8>
 8008dcc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008dd0:	2908      	cmp	r1, #8
 8008dd2:	f63f af79 	bhi.w	8008cc8 <_strtod_l+0x1b0>
 8008dd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008dda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ddc:	9206      	str	r2, [sp, #24]
 8008dde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008de0:	1c51      	adds	r1, r2, #1
 8008de2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008de4:	7852      	ldrb	r2, [r2, #1]
 8008de6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008dea:	2e09      	cmp	r6, #9
 8008dec:	d937      	bls.n	8008e5e <_strtod_l+0x346>
 8008dee:	9e06      	ldr	r6, [sp, #24]
 8008df0:	1b89      	subs	r1, r1, r6
 8008df2:	2908      	cmp	r1, #8
 8008df4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008df8:	dc02      	bgt.n	8008e00 <_strtod_l+0x2e8>
 8008dfa:	4576      	cmp	r6, lr
 8008dfc:	bfa8      	it	ge
 8008dfe:	4676      	movge	r6, lr
 8008e00:	f1bc 0f00 	cmp.w	ip, #0
 8008e04:	d000      	beq.n	8008e08 <_strtod_l+0x2f0>
 8008e06:	4276      	negs	r6, r6
 8008e08:	2d00      	cmp	r5, #0
 8008e0a:	d14d      	bne.n	8008ea8 <_strtod_l+0x390>
 8008e0c:	9904      	ldr	r1, [sp, #16]
 8008e0e:	4301      	orrs	r1, r0
 8008e10:	f47f aec6 	bne.w	8008ba0 <_strtod_l+0x88>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f47f aee1 	bne.w	8008bdc <_strtod_l+0xc4>
 8008e1a:	2a69      	cmp	r2, #105	; 0x69
 8008e1c:	d027      	beq.n	8008e6e <_strtod_l+0x356>
 8008e1e:	dc24      	bgt.n	8008e6a <_strtod_l+0x352>
 8008e20:	2a49      	cmp	r2, #73	; 0x49
 8008e22:	d024      	beq.n	8008e6e <_strtod_l+0x356>
 8008e24:	2a4e      	cmp	r2, #78	; 0x4e
 8008e26:	f47f aed9 	bne.w	8008bdc <_strtod_l+0xc4>
 8008e2a:	499f      	ldr	r1, [pc, #636]	; (80090a8 <_strtod_l+0x590>)
 8008e2c:	a817      	add	r0, sp, #92	; 0x5c
 8008e2e:	f002 f8d7 	bl	800afe0 <__match>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f43f aed2 	beq.w	8008bdc <_strtod_l+0xc4>
 8008e38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b28      	cmp	r3, #40	; 0x28
 8008e3e:	d12d      	bne.n	8008e9c <_strtod_l+0x384>
 8008e40:	499a      	ldr	r1, [pc, #616]	; (80090ac <_strtod_l+0x594>)
 8008e42:	aa1a      	add	r2, sp, #104	; 0x68
 8008e44:	a817      	add	r0, sp, #92	; 0x5c
 8008e46:	f002 f8df 	bl	800b008 <__hexnan>
 8008e4a:	2805      	cmp	r0, #5
 8008e4c:	d126      	bne.n	8008e9c <_strtod_l+0x384>
 8008e4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008e54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008e58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008e5c:	e6a0      	b.n	8008ba0 <_strtod_l+0x88>
 8008e5e:	210a      	movs	r1, #10
 8008e60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008e64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e68:	e7b9      	b.n	8008dde <_strtod_l+0x2c6>
 8008e6a:	2a6e      	cmp	r2, #110	; 0x6e
 8008e6c:	e7db      	b.n	8008e26 <_strtod_l+0x30e>
 8008e6e:	4990      	ldr	r1, [pc, #576]	; (80090b0 <_strtod_l+0x598>)
 8008e70:	a817      	add	r0, sp, #92	; 0x5c
 8008e72:	f002 f8b5 	bl	800afe0 <__match>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f43f aeb0 	beq.w	8008bdc <_strtod_l+0xc4>
 8008e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e7e:	498d      	ldr	r1, [pc, #564]	; (80090b4 <_strtod_l+0x59c>)
 8008e80:	3b01      	subs	r3, #1
 8008e82:	a817      	add	r0, sp, #92	; 0x5c
 8008e84:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e86:	f002 f8ab 	bl	800afe0 <__match>
 8008e8a:	b910      	cbnz	r0, 8008e92 <_strtod_l+0x37a>
 8008e8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e8e:	3301      	adds	r3, #1
 8008e90:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e92:	f8df b230 	ldr.w	fp, [pc, #560]	; 80090c4 <_strtod_l+0x5ac>
 8008e96:	f04f 0a00 	mov.w	sl, #0
 8008e9a:	e681      	b.n	8008ba0 <_strtod_l+0x88>
 8008e9c:	4886      	ldr	r0, [pc, #536]	; (80090b8 <_strtod_l+0x5a0>)
 8008e9e:	f003 fd8f 	bl	800c9c0 <nan>
 8008ea2:	ec5b ab10 	vmov	sl, fp, d0
 8008ea6:	e67b      	b.n	8008ba0 <_strtod_l+0x88>
 8008ea8:	9b05      	ldr	r3, [sp, #20]
 8008eaa:	9807      	ldr	r0, [sp, #28]
 8008eac:	1af3      	subs	r3, r6, r3
 8008eae:	2f00      	cmp	r7, #0
 8008eb0:	bf08      	it	eq
 8008eb2:	462f      	moveq	r7, r5
 8008eb4:	2d10      	cmp	r5, #16
 8008eb6:	9306      	str	r3, [sp, #24]
 8008eb8:	46a8      	mov	r8, r5
 8008eba:	bfa8      	it	ge
 8008ebc:	f04f 0810 	movge.w	r8, #16
 8008ec0:	f7f7 fb30 	bl	8000524 <__aeabi_ui2d>
 8008ec4:	2d09      	cmp	r5, #9
 8008ec6:	4682      	mov	sl, r0
 8008ec8:	468b      	mov	fp, r1
 8008eca:	dd13      	ble.n	8008ef4 <_strtod_l+0x3dc>
 8008ecc:	4b7b      	ldr	r3, [pc, #492]	; (80090bc <_strtod_l+0x5a4>)
 8008ece:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008ed2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ed6:	f7f7 fb9f 	bl	8000618 <__aeabi_dmul>
 8008eda:	4682      	mov	sl, r0
 8008edc:	4648      	mov	r0, r9
 8008ede:	468b      	mov	fp, r1
 8008ee0:	f7f7 fb20 	bl	8000524 <__aeabi_ui2d>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4650      	mov	r0, sl
 8008eea:	4659      	mov	r1, fp
 8008eec:	f7f7 f9de 	bl	80002ac <__adddf3>
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	468b      	mov	fp, r1
 8008ef4:	2d0f      	cmp	r5, #15
 8008ef6:	dc38      	bgt.n	8008f6a <_strtod_l+0x452>
 8008ef8:	9b06      	ldr	r3, [sp, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f43f ae50 	beq.w	8008ba0 <_strtod_l+0x88>
 8008f00:	dd24      	ble.n	8008f4c <_strtod_l+0x434>
 8008f02:	2b16      	cmp	r3, #22
 8008f04:	dc0b      	bgt.n	8008f1e <_strtod_l+0x406>
 8008f06:	496d      	ldr	r1, [pc, #436]	; (80090bc <_strtod_l+0x5a4>)
 8008f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f10:	4652      	mov	r2, sl
 8008f12:	465b      	mov	r3, fp
 8008f14:	f7f7 fb80 	bl	8000618 <__aeabi_dmul>
 8008f18:	4682      	mov	sl, r0
 8008f1a:	468b      	mov	fp, r1
 8008f1c:	e640      	b.n	8008ba0 <_strtod_l+0x88>
 8008f1e:	9a06      	ldr	r2, [sp, #24]
 8008f20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008f24:	4293      	cmp	r3, r2
 8008f26:	db20      	blt.n	8008f6a <_strtod_l+0x452>
 8008f28:	4c64      	ldr	r4, [pc, #400]	; (80090bc <_strtod_l+0x5a4>)
 8008f2a:	f1c5 050f 	rsb	r5, r5, #15
 8008f2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f32:	4652      	mov	r2, sl
 8008f34:	465b      	mov	r3, fp
 8008f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f3a:	f7f7 fb6d 	bl	8000618 <__aeabi_dmul>
 8008f3e:	9b06      	ldr	r3, [sp, #24]
 8008f40:	1b5d      	subs	r5, r3, r5
 8008f42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f4a:	e7e3      	b.n	8008f14 <_strtod_l+0x3fc>
 8008f4c:	9b06      	ldr	r3, [sp, #24]
 8008f4e:	3316      	adds	r3, #22
 8008f50:	db0b      	blt.n	8008f6a <_strtod_l+0x452>
 8008f52:	9b05      	ldr	r3, [sp, #20]
 8008f54:	1b9e      	subs	r6, r3, r6
 8008f56:	4b59      	ldr	r3, [pc, #356]	; (80090bc <_strtod_l+0x5a4>)
 8008f58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008f5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f60:	4650      	mov	r0, sl
 8008f62:	4659      	mov	r1, fp
 8008f64:	f7f7 fc82 	bl	800086c <__aeabi_ddiv>
 8008f68:	e7d6      	b.n	8008f18 <_strtod_l+0x400>
 8008f6a:	9b06      	ldr	r3, [sp, #24]
 8008f6c:	eba5 0808 	sub.w	r8, r5, r8
 8008f70:	4498      	add	r8, r3
 8008f72:	f1b8 0f00 	cmp.w	r8, #0
 8008f76:	dd74      	ble.n	8009062 <_strtod_l+0x54a>
 8008f78:	f018 030f 	ands.w	r3, r8, #15
 8008f7c:	d00a      	beq.n	8008f94 <_strtod_l+0x47c>
 8008f7e:	494f      	ldr	r1, [pc, #316]	; (80090bc <_strtod_l+0x5a4>)
 8008f80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f84:	4652      	mov	r2, sl
 8008f86:	465b      	mov	r3, fp
 8008f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8c:	f7f7 fb44 	bl	8000618 <__aeabi_dmul>
 8008f90:	4682      	mov	sl, r0
 8008f92:	468b      	mov	fp, r1
 8008f94:	f038 080f 	bics.w	r8, r8, #15
 8008f98:	d04f      	beq.n	800903a <_strtod_l+0x522>
 8008f9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f9e:	dd22      	ble.n	8008fe6 <_strtod_l+0x4ce>
 8008fa0:	2500      	movs	r5, #0
 8008fa2:	462e      	mov	r6, r5
 8008fa4:	9507      	str	r5, [sp, #28]
 8008fa6:	9505      	str	r5, [sp, #20]
 8008fa8:	2322      	movs	r3, #34	; 0x22
 8008faa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80090c4 <_strtod_l+0x5ac>
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	f04f 0a00 	mov.w	sl, #0
 8008fb4:	9b07      	ldr	r3, [sp, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f43f adf2 	beq.w	8008ba0 <_strtod_l+0x88>
 8008fbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f002 f998 	bl	800b2f4 <_Bfree>
 8008fc4:	9905      	ldr	r1, [sp, #20]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f002 f994 	bl	800b2f4 <_Bfree>
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f002 f990 	bl	800b2f4 <_Bfree>
 8008fd4:	9907      	ldr	r1, [sp, #28]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f002 f98c 	bl	800b2f4 <_Bfree>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f002 f988 	bl	800b2f4 <_Bfree>
 8008fe4:	e5dc      	b.n	8008ba0 <_strtod_l+0x88>
 8008fe6:	4b36      	ldr	r3, [pc, #216]	; (80090c0 <_strtod_l+0x5a8>)
 8008fe8:	9304      	str	r3, [sp, #16]
 8008fea:	2300      	movs	r3, #0
 8008fec:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	4659      	mov	r1, fp
 8008ff4:	4699      	mov	r9, r3
 8008ff6:	f1b8 0f01 	cmp.w	r8, #1
 8008ffa:	dc21      	bgt.n	8009040 <_strtod_l+0x528>
 8008ffc:	b10b      	cbz	r3, 8009002 <_strtod_l+0x4ea>
 8008ffe:	4682      	mov	sl, r0
 8009000:	468b      	mov	fp, r1
 8009002:	4b2f      	ldr	r3, [pc, #188]	; (80090c0 <_strtod_l+0x5a8>)
 8009004:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009008:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800900c:	4652      	mov	r2, sl
 800900e:	465b      	mov	r3, fp
 8009010:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009014:	f7f7 fb00 	bl	8000618 <__aeabi_dmul>
 8009018:	4b2a      	ldr	r3, [pc, #168]	; (80090c4 <_strtod_l+0x5ac>)
 800901a:	460a      	mov	r2, r1
 800901c:	400b      	ands	r3, r1
 800901e:	492a      	ldr	r1, [pc, #168]	; (80090c8 <_strtod_l+0x5b0>)
 8009020:	428b      	cmp	r3, r1
 8009022:	4682      	mov	sl, r0
 8009024:	d8bc      	bhi.n	8008fa0 <_strtod_l+0x488>
 8009026:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800902a:	428b      	cmp	r3, r1
 800902c:	bf86      	itte	hi
 800902e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80090cc <_strtod_l+0x5b4>
 8009032:	f04f 3aff 	movhi.w	sl, #4294967295
 8009036:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800903a:	2300      	movs	r3, #0
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	e084      	b.n	800914a <_strtod_l+0x632>
 8009040:	f018 0f01 	tst.w	r8, #1
 8009044:	d005      	beq.n	8009052 <_strtod_l+0x53a>
 8009046:	9b04      	ldr	r3, [sp, #16]
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f7f7 fae4 	bl	8000618 <__aeabi_dmul>
 8009050:	2301      	movs	r3, #1
 8009052:	9a04      	ldr	r2, [sp, #16]
 8009054:	3208      	adds	r2, #8
 8009056:	f109 0901 	add.w	r9, r9, #1
 800905a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800905e:	9204      	str	r2, [sp, #16]
 8009060:	e7c9      	b.n	8008ff6 <_strtod_l+0x4de>
 8009062:	d0ea      	beq.n	800903a <_strtod_l+0x522>
 8009064:	f1c8 0800 	rsb	r8, r8, #0
 8009068:	f018 020f 	ands.w	r2, r8, #15
 800906c:	d00a      	beq.n	8009084 <_strtod_l+0x56c>
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <_strtod_l+0x5a4>)
 8009070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009074:	4650      	mov	r0, sl
 8009076:	4659      	mov	r1, fp
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f7f7 fbf6 	bl	800086c <__aeabi_ddiv>
 8009080:	4682      	mov	sl, r0
 8009082:	468b      	mov	fp, r1
 8009084:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009088:	d0d7      	beq.n	800903a <_strtod_l+0x522>
 800908a:	f1b8 0f1f 	cmp.w	r8, #31
 800908e:	dd1f      	ble.n	80090d0 <_strtod_l+0x5b8>
 8009090:	2500      	movs	r5, #0
 8009092:	462e      	mov	r6, r5
 8009094:	9507      	str	r5, [sp, #28]
 8009096:	9505      	str	r5, [sp, #20]
 8009098:	2322      	movs	r3, #34	; 0x22
 800909a:	f04f 0a00 	mov.w	sl, #0
 800909e:	f04f 0b00 	mov.w	fp, #0
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	e786      	b.n	8008fb4 <_strtod_l+0x49c>
 80090a6:	bf00      	nop
 80090a8:	0800cfc9 	.word	0x0800cfc9
 80090ac:	0800d008 	.word	0x0800d008
 80090b0:	0800cfc1 	.word	0x0800cfc1
 80090b4:	0800d14c 	.word	0x0800d14c
 80090b8:	0800d47b 	.word	0x0800d47b
 80090bc:	0800d340 	.word	0x0800d340
 80090c0:	0800d318 	.word	0x0800d318
 80090c4:	7ff00000 	.word	0x7ff00000
 80090c8:	7ca00000 	.word	0x7ca00000
 80090cc:	7fefffff 	.word	0x7fefffff
 80090d0:	f018 0310 	ands.w	r3, r8, #16
 80090d4:	bf18      	it	ne
 80090d6:	236a      	movne	r3, #106	; 0x6a
 80090d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009488 <_strtod_l+0x970>
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	4650      	mov	r0, sl
 80090e0:	4659      	mov	r1, fp
 80090e2:	2300      	movs	r3, #0
 80090e4:	f018 0f01 	tst.w	r8, #1
 80090e8:	d004      	beq.n	80090f4 <_strtod_l+0x5dc>
 80090ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090ee:	f7f7 fa93 	bl	8000618 <__aeabi_dmul>
 80090f2:	2301      	movs	r3, #1
 80090f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80090f8:	f109 0908 	add.w	r9, r9, #8
 80090fc:	d1f2      	bne.n	80090e4 <_strtod_l+0x5cc>
 80090fe:	b10b      	cbz	r3, 8009104 <_strtod_l+0x5ec>
 8009100:	4682      	mov	sl, r0
 8009102:	468b      	mov	fp, r1
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	b1c3      	cbz	r3, 800913a <_strtod_l+0x622>
 8009108:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800910c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009110:	2b00      	cmp	r3, #0
 8009112:	4659      	mov	r1, fp
 8009114:	dd11      	ble.n	800913a <_strtod_l+0x622>
 8009116:	2b1f      	cmp	r3, #31
 8009118:	f340 8124 	ble.w	8009364 <_strtod_l+0x84c>
 800911c:	2b34      	cmp	r3, #52	; 0x34
 800911e:	bfde      	ittt	le
 8009120:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009124:	f04f 33ff 	movle.w	r3, #4294967295
 8009128:	fa03 f202 	lslle.w	r2, r3, r2
 800912c:	f04f 0a00 	mov.w	sl, #0
 8009130:	bfcc      	ite	gt
 8009132:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009136:	ea02 0b01 	andle.w	fp, r2, r1
 800913a:	2200      	movs	r2, #0
 800913c:	2300      	movs	r3, #0
 800913e:	4650      	mov	r0, sl
 8009140:	4659      	mov	r1, fp
 8009142:	f7f7 fcd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009146:	2800      	cmp	r0, #0
 8009148:	d1a2      	bne.n	8009090 <_strtod_l+0x578>
 800914a:	9b07      	ldr	r3, [sp, #28]
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	9908      	ldr	r1, [sp, #32]
 8009150:	462b      	mov	r3, r5
 8009152:	463a      	mov	r2, r7
 8009154:	4620      	mov	r0, r4
 8009156:	f002 f935 	bl	800b3c4 <__s2b>
 800915a:	9007      	str	r0, [sp, #28]
 800915c:	2800      	cmp	r0, #0
 800915e:	f43f af1f 	beq.w	8008fa0 <_strtod_l+0x488>
 8009162:	9b05      	ldr	r3, [sp, #20]
 8009164:	1b9e      	subs	r6, r3, r6
 8009166:	9b06      	ldr	r3, [sp, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	bfb4      	ite	lt
 800916c:	4633      	movlt	r3, r6
 800916e:	2300      	movge	r3, #0
 8009170:	930c      	str	r3, [sp, #48]	; 0x30
 8009172:	9b06      	ldr	r3, [sp, #24]
 8009174:	2500      	movs	r5, #0
 8009176:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800917a:	9312      	str	r3, [sp, #72]	; 0x48
 800917c:	462e      	mov	r6, r5
 800917e:	9b07      	ldr	r3, [sp, #28]
 8009180:	4620      	mov	r0, r4
 8009182:	6859      	ldr	r1, [r3, #4]
 8009184:	f002 f876 	bl	800b274 <_Balloc>
 8009188:	9005      	str	r0, [sp, #20]
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f af0c 	beq.w	8008fa8 <_strtod_l+0x490>
 8009190:	9b07      	ldr	r3, [sp, #28]
 8009192:	691a      	ldr	r2, [r3, #16]
 8009194:	3202      	adds	r2, #2
 8009196:	f103 010c 	add.w	r1, r3, #12
 800919a:	0092      	lsls	r2, r2, #2
 800919c:	300c      	adds	r0, #12
 800919e:	f7fe fce7 	bl	8007b70 <memcpy>
 80091a2:	ec4b ab10 	vmov	d0, sl, fp
 80091a6:	aa1a      	add	r2, sp, #104	; 0x68
 80091a8:	a919      	add	r1, sp, #100	; 0x64
 80091aa:	4620      	mov	r0, r4
 80091ac:	f002 fc50 	bl	800ba50 <__d2b>
 80091b0:	ec4b ab18 	vmov	d8, sl, fp
 80091b4:	9018      	str	r0, [sp, #96]	; 0x60
 80091b6:	2800      	cmp	r0, #0
 80091b8:	f43f aef6 	beq.w	8008fa8 <_strtod_l+0x490>
 80091bc:	2101      	movs	r1, #1
 80091be:	4620      	mov	r0, r4
 80091c0:	f002 f99a 	bl	800b4f8 <__i2b>
 80091c4:	4606      	mov	r6, r0
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f43f aeee 	beq.w	8008fa8 <_strtod_l+0x490>
 80091cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091ce:	9904      	ldr	r1, [sp, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	bfab      	itete	ge
 80091d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80091d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80091d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80091da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80091de:	bfac      	ite	ge
 80091e0:	eb03 0902 	addge.w	r9, r3, r2
 80091e4:	1ad7      	sublt	r7, r2, r3
 80091e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80091e8:	eba3 0801 	sub.w	r8, r3, r1
 80091ec:	4490      	add	r8, r2
 80091ee:	4ba1      	ldr	r3, [pc, #644]	; (8009474 <_strtod_l+0x95c>)
 80091f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80091f4:	4598      	cmp	r8, r3
 80091f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80091fa:	f280 80c7 	bge.w	800938c <_strtod_l+0x874>
 80091fe:	eba3 0308 	sub.w	r3, r3, r8
 8009202:	2b1f      	cmp	r3, #31
 8009204:	eba2 0203 	sub.w	r2, r2, r3
 8009208:	f04f 0101 	mov.w	r1, #1
 800920c:	f300 80b1 	bgt.w	8009372 <_strtod_l+0x85a>
 8009210:	fa01 f303 	lsl.w	r3, r1, r3
 8009214:	930d      	str	r3, [sp, #52]	; 0x34
 8009216:	2300      	movs	r3, #0
 8009218:	9308      	str	r3, [sp, #32]
 800921a:	eb09 0802 	add.w	r8, r9, r2
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	45c1      	cmp	r9, r8
 8009222:	4417      	add	r7, r2
 8009224:	441f      	add	r7, r3
 8009226:	464b      	mov	r3, r9
 8009228:	bfa8      	it	ge
 800922a:	4643      	movge	r3, r8
 800922c:	42bb      	cmp	r3, r7
 800922e:	bfa8      	it	ge
 8009230:	463b      	movge	r3, r7
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfc2      	ittt	gt
 8009236:	eba8 0803 	subgt.w	r8, r8, r3
 800923a:	1aff      	subgt	r7, r7, r3
 800923c:	eba9 0903 	subgt.w	r9, r9, r3
 8009240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009242:	2b00      	cmp	r3, #0
 8009244:	dd17      	ble.n	8009276 <_strtod_l+0x75e>
 8009246:	4631      	mov	r1, r6
 8009248:	461a      	mov	r2, r3
 800924a:	4620      	mov	r0, r4
 800924c:	f002 fa14 	bl	800b678 <__pow5mult>
 8009250:	4606      	mov	r6, r0
 8009252:	2800      	cmp	r0, #0
 8009254:	f43f aea8 	beq.w	8008fa8 <_strtod_l+0x490>
 8009258:	4601      	mov	r1, r0
 800925a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800925c:	4620      	mov	r0, r4
 800925e:	f002 f961 	bl	800b524 <__multiply>
 8009262:	900b      	str	r0, [sp, #44]	; 0x2c
 8009264:	2800      	cmp	r0, #0
 8009266:	f43f ae9f 	beq.w	8008fa8 <_strtod_l+0x490>
 800926a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800926c:	4620      	mov	r0, r4
 800926e:	f002 f841 	bl	800b2f4 <_Bfree>
 8009272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009274:	9318      	str	r3, [sp, #96]	; 0x60
 8009276:	f1b8 0f00 	cmp.w	r8, #0
 800927a:	f300 808c 	bgt.w	8009396 <_strtod_l+0x87e>
 800927e:	9b06      	ldr	r3, [sp, #24]
 8009280:	2b00      	cmp	r3, #0
 8009282:	dd08      	ble.n	8009296 <_strtod_l+0x77e>
 8009284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009286:	9905      	ldr	r1, [sp, #20]
 8009288:	4620      	mov	r0, r4
 800928a:	f002 f9f5 	bl	800b678 <__pow5mult>
 800928e:	9005      	str	r0, [sp, #20]
 8009290:	2800      	cmp	r0, #0
 8009292:	f43f ae89 	beq.w	8008fa8 <_strtod_l+0x490>
 8009296:	2f00      	cmp	r7, #0
 8009298:	dd08      	ble.n	80092ac <_strtod_l+0x794>
 800929a:	9905      	ldr	r1, [sp, #20]
 800929c:	463a      	mov	r2, r7
 800929e:	4620      	mov	r0, r4
 80092a0:	f002 fa44 	bl	800b72c <__lshift>
 80092a4:	9005      	str	r0, [sp, #20]
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f43f ae7e 	beq.w	8008fa8 <_strtod_l+0x490>
 80092ac:	f1b9 0f00 	cmp.w	r9, #0
 80092b0:	dd08      	ble.n	80092c4 <_strtod_l+0x7ac>
 80092b2:	4631      	mov	r1, r6
 80092b4:	464a      	mov	r2, r9
 80092b6:	4620      	mov	r0, r4
 80092b8:	f002 fa38 	bl	800b72c <__lshift>
 80092bc:	4606      	mov	r6, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	f43f ae72 	beq.w	8008fa8 <_strtod_l+0x490>
 80092c4:	9a05      	ldr	r2, [sp, #20]
 80092c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092c8:	4620      	mov	r0, r4
 80092ca:	f002 fabb 	bl	800b844 <__mdiff>
 80092ce:	4605      	mov	r5, r0
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f43f ae69 	beq.w	8008fa8 <_strtod_l+0x490>
 80092d6:	68c3      	ldr	r3, [r0, #12]
 80092d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80092da:	2300      	movs	r3, #0
 80092dc:	60c3      	str	r3, [r0, #12]
 80092de:	4631      	mov	r1, r6
 80092e0:	f002 fa94 	bl	800b80c <__mcmp>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	da60      	bge.n	80093aa <_strtod_l+0x892>
 80092e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ea:	ea53 030a 	orrs.w	r3, r3, sl
 80092ee:	f040 8082 	bne.w	80093f6 <_strtod_l+0x8de>
 80092f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d17d      	bne.n	80093f6 <_strtod_l+0x8de>
 80092fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092fe:	0d1b      	lsrs	r3, r3, #20
 8009300:	051b      	lsls	r3, r3, #20
 8009302:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009306:	d976      	bls.n	80093f6 <_strtod_l+0x8de>
 8009308:	696b      	ldr	r3, [r5, #20]
 800930a:	b913      	cbnz	r3, 8009312 <_strtod_l+0x7fa>
 800930c:	692b      	ldr	r3, [r5, #16]
 800930e:	2b01      	cmp	r3, #1
 8009310:	dd71      	ble.n	80093f6 <_strtod_l+0x8de>
 8009312:	4629      	mov	r1, r5
 8009314:	2201      	movs	r2, #1
 8009316:	4620      	mov	r0, r4
 8009318:	f002 fa08 	bl	800b72c <__lshift>
 800931c:	4631      	mov	r1, r6
 800931e:	4605      	mov	r5, r0
 8009320:	f002 fa74 	bl	800b80c <__mcmp>
 8009324:	2800      	cmp	r0, #0
 8009326:	dd66      	ble.n	80093f6 <_strtod_l+0x8de>
 8009328:	9904      	ldr	r1, [sp, #16]
 800932a:	4a53      	ldr	r2, [pc, #332]	; (8009478 <_strtod_l+0x960>)
 800932c:	465b      	mov	r3, fp
 800932e:	2900      	cmp	r1, #0
 8009330:	f000 8081 	beq.w	8009436 <_strtod_l+0x91e>
 8009334:	ea02 010b 	and.w	r1, r2, fp
 8009338:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800933c:	dc7b      	bgt.n	8009436 <_strtod_l+0x91e>
 800933e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009342:	f77f aea9 	ble.w	8009098 <_strtod_l+0x580>
 8009346:	4b4d      	ldr	r3, [pc, #308]	; (800947c <_strtod_l+0x964>)
 8009348:	4650      	mov	r0, sl
 800934a:	4659      	mov	r1, fp
 800934c:	2200      	movs	r2, #0
 800934e:	f7f7 f963 	bl	8000618 <__aeabi_dmul>
 8009352:	460b      	mov	r3, r1
 8009354:	4303      	orrs	r3, r0
 8009356:	bf08      	it	eq
 8009358:	2322      	moveq	r3, #34	; 0x22
 800935a:	4682      	mov	sl, r0
 800935c:	468b      	mov	fp, r1
 800935e:	bf08      	it	eq
 8009360:	6023      	streq	r3, [r4, #0]
 8009362:	e62b      	b.n	8008fbc <_strtod_l+0x4a4>
 8009364:	f04f 32ff 	mov.w	r2, #4294967295
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	ea03 0a0a 	and.w	sl, r3, sl
 8009370:	e6e3      	b.n	800913a <_strtod_l+0x622>
 8009372:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009376:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800937a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800937e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009382:	fa01 f308 	lsl.w	r3, r1, r8
 8009386:	9308      	str	r3, [sp, #32]
 8009388:	910d      	str	r1, [sp, #52]	; 0x34
 800938a:	e746      	b.n	800921a <_strtod_l+0x702>
 800938c:	2300      	movs	r3, #0
 800938e:	9308      	str	r3, [sp, #32]
 8009390:	2301      	movs	r3, #1
 8009392:	930d      	str	r3, [sp, #52]	; 0x34
 8009394:	e741      	b.n	800921a <_strtod_l+0x702>
 8009396:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009398:	4642      	mov	r2, r8
 800939a:	4620      	mov	r0, r4
 800939c:	f002 f9c6 	bl	800b72c <__lshift>
 80093a0:	9018      	str	r0, [sp, #96]	; 0x60
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f47f af6b 	bne.w	800927e <_strtod_l+0x766>
 80093a8:	e5fe      	b.n	8008fa8 <_strtod_l+0x490>
 80093aa:	465f      	mov	r7, fp
 80093ac:	d16e      	bne.n	800948c <_strtod_l+0x974>
 80093ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b4:	b342      	cbz	r2, 8009408 <_strtod_l+0x8f0>
 80093b6:	4a32      	ldr	r2, [pc, #200]	; (8009480 <_strtod_l+0x968>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d128      	bne.n	800940e <_strtod_l+0x8f6>
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	4651      	mov	r1, sl
 80093c0:	b1eb      	cbz	r3, 80093fe <_strtod_l+0x8e6>
 80093c2:	4b2d      	ldr	r3, [pc, #180]	; (8009478 <_strtod_l+0x960>)
 80093c4:	403b      	ands	r3, r7
 80093c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	d819      	bhi.n	8009404 <_strtod_l+0x8ec>
 80093d0:	0d1b      	lsrs	r3, r3, #20
 80093d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093d6:	fa02 f303 	lsl.w	r3, r2, r3
 80093da:	4299      	cmp	r1, r3
 80093dc:	d117      	bne.n	800940e <_strtod_l+0x8f6>
 80093de:	4b29      	ldr	r3, [pc, #164]	; (8009484 <_strtod_l+0x96c>)
 80093e0:	429f      	cmp	r7, r3
 80093e2:	d102      	bne.n	80093ea <_strtod_l+0x8d2>
 80093e4:	3101      	adds	r1, #1
 80093e6:	f43f addf 	beq.w	8008fa8 <_strtod_l+0x490>
 80093ea:	4b23      	ldr	r3, [pc, #140]	; (8009478 <_strtod_l+0x960>)
 80093ec:	403b      	ands	r3, r7
 80093ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80093f2:	f04f 0a00 	mov.w	sl, #0
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1a4      	bne.n	8009346 <_strtod_l+0x82e>
 80093fc:	e5de      	b.n	8008fbc <_strtod_l+0x4a4>
 80093fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009402:	e7ea      	b.n	80093da <_strtod_l+0x8c2>
 8009404:	4613      	mov	r3, r2
 8009406:	e7e8      	b.n	80093da <_strtod_l+0x8c2>
 8009408:	ea53 030a 	orrs.w	r3, r3, sl
 800940c:	d08c      	beq.n	8009328 <_strtod_l+0x810>
 800940e:	9b08      	ldr	r3, [sp, #32]
 8009410:	b1db      	cbz	r3, 800944a <_strtod_l+0x932>
 8009412:	423b      	tst	r3, r7
 8009414:	d0ef      	beq.n	80093f6 <_strtod_l+0x8de>
 8009416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009418:	9a04      	ldr	r2, [sp, #16]
 800941a:	4650      	mov	r0, sl
 800941c:	4659      	mov	r1, fp
 800941e:	b1c3      	cbz	r3, 8009452 <_strtod_l+0x93a>
 8009420:	f7ff fb5b 	bl	8008ada <sulp>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	ec51 0b18 	vmov	r0, r1, d8
 800942c:	f7f6 ff3e 	bl	80002ac <__adddf3>
 8009430:	4682      	mov	sl, r0
 8009432:	468b      	mov	fp, r1
 8009434:	e7df      	b.n	80093f6 <_strtod_l+0x8de>
 8009436:	4013      	ands	r3, r2
 8009438:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800943c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009440:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009444:	f04f 3aff 	mov.w	sl, #4294967295
 8009448:	e7d5      	b.n	80093f6 <_strtod_l+0x8de>
 800944a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800944c:	ea13 0f0a 	tst.w	r3, sl
 8009450:	e7e0      	b.n	8009414 <_strtod_l+0x8fc>
 8009452:	f7ff fb42 	bl	8008ada <sulp>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	ec51 0b18 	vmov	r0, r1, d8
 800945e:	f7f6 ff23 	bl	80002a8 <__aeabi_dsub>
 8009462:	2200      	movs	r2, #0
 8009464:	2300      	movs	r3, #0
 8009466:	4682      	mov	sl, r0
 8009468:	468b      	mov	fp, r1
 800946a:	f7f7 fb3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800946e:	2800      	cmp	r0, #0
 8009470:	d0c1      	beq.n	80093f6 <_strtod_l+0x8de>
 8009472:	e611      	b.n	8009098 <_strtod_l+0x580>
 8009474:	fffffc02 	.word	0xfffffc02
 8009478:	7ff00000 	.word	0x7ff00000
 800947c:	39500000 	.word	0x39500000
 8009480:	000fffff 	.word	0x000fffff
 8009484:	7fefffff 	.word	0x7fefffff
 8009488:	0800d020 	.word	0x0800d020
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	f002 fb3a 	bl	800bb08 <__ratio>
 8009494:	ec59 8b10 	vmov	r8, r9, d0
 8009498:	ee10 0a10 	vmov	r0, s0
 800949c:	2200      	movs	r2, #0
 800949e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094a2:	4649      	mov	r1, r9
 80094a4:	f7f7 fb34 	bl	8000b10 <__aeabi_dcmple>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d07a      	beq.n	80095a2 <_strtod_l+0xa8a>
 80094ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d04a      	beq.n	8009548 <_strtod_l+0xa30>
 80094b2:	4b95      	ldr	r3, [pc, #596]	; (8009708 <_strtod_l+0xbf0>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009708 <_strtod_l+0xbf0>
 80094be:	f04f 0800 	mov.w	r8, #0
 80094c2:	4b92      	ldr	r3, [pc, #584]	; (800970c <_strtod_l+0xbf4>)
 80094c4:	403b      	ands	r3, r7
 80094c6:	930d      	str	r3, [sp, #52]	; 0x34
 80094c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ca:	4b91      	ldr	r3, [pc, #580]	; (8009710 <_strtod_l+0xbf8>)
 80094cc:	429a      	cmp	r2, r3
 80094ce:	f040 80b0 	bne.w	8009632 <_strtod_l+0xb1a>
 80094d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80094da:	ec4b ab10 	vmov	d0, sl, fp
 80094de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094e2:	f002 fa39 	bl	800b958 <__ulp>
 80094e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094ea:	ec53 2b10 	vmov	r2, r3, d0
 80094ee:	f7f7 f893 	bl	8000618 <__aeabi_dmul>
 80094f2:	4652      	mov	r2, sl
 80094f4:	465b      	mov	r3, fp
 80094f6:	f7f6 fed9 	bl	80002ac <__adddf3>
 80094fa:	460b      	mov	r3, r1
 80094fc:	4983      	ldr	r1, [pc, #524]	; (800970c <_strtod_l+0xbf4>)
 80094fe:	4a85      	ldr	r2, [pc, #532]	; (8009714 <_strtod_l+0xbfc>)
 8009500:	4019      	ands	r1, r3
 8009502:	4291      	cmp	r1, r2
 8009504:	4682      	mov	sl, r0
 8009506:	d960      	bls.n	80095ca <_strtod_l+0xab2>
 8009508:	ee18 3a90 	vmov	r3, s17
 800950c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009510:	4293      	cmp	r3, r2
 8009512:	d104      	bne.n	800951e <_strtod_l+0xa06>
 8009514:	ee18 3a10 	vmov	r3, s16
 8009518:	3301      	adds	r3, #1
 800951a:	f43f ad45 	beq.w	8008fa8 <_strtod_l+0x490>
 800951e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009720 <_strtod_l+0xc08>
 8009522:	f04f 3aff 	mov.w	sl, #4294967295
 8009526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009528:	4620      	mov	r0, r4
 800952a:	f001 fee3 	bl	800b2f4 <_Bfree>
 800952e:	9905      	ldr	r1, [sp, #20]
 8009530:	4620      	mov	r0, r4
 8009532:	f001 fedf 	bl	800b2f4 <_Bfree>
 8009536:	4631      	mov	r1, r6
 8009538:	4620      	mov	r0, r4
 800953a:	f001 fedb 	bl	800b2f4 <_Bfree>
 800953e:	4629      	mov	r1, r5
 8009540:	4620      	mov	r0, r4
 8009542:	f001 fed7 	bl	800b2f4 <_Bfree>
 8009546:	e61a      	b.n	800917e <_strtod_l+0x666>
 8009548:	f1ba 0f00 	cmp.w	sl, #0
 800954c:	d11b      	bne.n	8009586 <_strtod_l+0xa6e>
 800954e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009552:	b9f3      	cbnz	r3, 8009592 <_strtod_l+0xa7a>
 8009554:	4b6c      	ldr	r3, [pc, #432]	; (8009708 <_strtod_l+0xbf0>)
 8009556:	2200      	movs	r2, #0
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f7 face 	bl	8000afc <__aeabi_dcmplt>
 8009560:	b9d0      	cbnz	r0, 8009598 <_strtod_l+0xa80>
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	4b6c      	ldr	r3, [pc, #432]	; (8009718 <_strtod_l+0xc00>)
 8009568:	2200      	movs	r2, #0
 800956a:	f7f7 f855 	bl	8000618 <__aeabi_dmul>
 800956e:	4680      	mov	r8, r0
 8009570:	4689      	mov	r9, r1
 8009572:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009576:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800957a:	9315      	str	r3, [sp, #84]	; 0x54
 800957c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009580:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009584:	e79d      	b.n	80094c2 <_strtod_l+0x9aa>
 8009586:	f1ba 0f01 	cmp.w	sl, #1
 800958a:	d102      	bne.n	8009592 <_strtod_l+0xa7a>
 800958c:	2f00      	cmp	r7, #0
 800958e:	f43f ad83 	beq.w	8009098 <_strtod_l+0x580>
 8009592:	4b62      	ldr	r3, [pc, #392]	; (800971c <_strtod_l+0xc04>)
 8009594:	2200      	movs	r2, #0
 8009596:	e78e      	b.n	80094b6 <_strtod_l+0x99e>
 8009598:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009718 <_strtod_l+0xc00>
 800959c:	f04f 0800 	mov.w	r8, #0
 80095a0:	e7e7      	b.n	8009572 <_strtod_l+0xa5a>
 80095a2:	4b5d      	ldr	r3, [pc, #372]	; (8009718 <_strtod_l+0xc00>)
 80095a4:	4640      	mov	r0, r8
 80095a6:	4649      	mov	r1, r9
 80095a8:	2200      	movs	r2, #0
 80095aa:	f7f7 f835 	bl	8000618 <__aeabi_dmul>
 80095ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b0:	4680      	mov	r8, r0
 80095b2:	4689      	mov	r9, r1
 80095b4:	b933      	cbnz	r3, 80095c4 <_strtod_l+0xaac>
 80095b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095ba:	900e      	str	r0, [sp, #56]	; 0x38
 80095bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80095be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80095c2:	e7dd      	b.n	8009580 <_strtod_l+0xa68>
 80095c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80095c8:	e7f9      	b.n	80095be <_strtod_l+0xaa6>
 80095ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1a8      	bne.n	8009526 <_strtod_l+0xa0e>
 80095d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095da:	0d1b      	lsrs	r3, r3, #20
 80095dc:	051b      	lsls	r3, r3, #20
 80095de:	429a      	cmp	r2, r3
 80095e0:	d1a1      	bne.n	8009526 <_strtod_l+0xa0e>
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f7 fb77 	bl	8000cd8 <__aeabi_d2lz>
 80095ea:	f7f6 ffe7 	bl	80005bc <__aeabi_l2d>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	f7f6 fe57 	bl	80002a8 <__aeabi_dsub>
 80095fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009600:	ea43 030a 	orr.w	r3, r3, sl
 8009604:	4313      	orrs	r3, r2
 8009606:	4680      	mov	r8, r0
 8009608:	4689      	mov	r9, r1
 800960a:	d055      	beq.n	80096b8 <_strtod_l+0xba0>
 800960c:	a336      	add	r3, pc, #216	; (adr r3, 80096e8 <_strtod_l+0xbd0>)
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	f7f7 fa73 	bl	8000afc <__aeabi_dcmplt>
 8009616:	2800      	cmp	r0, #0
 8009618:	f47f acd0 	bne.w	8008fbc <_strtod_l+0x4a4>
 800961c:	a334      	add	r3, pc, #208	; (adr r3, 80096f0 <_strtod_l+0xbd8>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	f7f7 fa87 	bl	8000b38 <__aeabi_dcmpgt>
 800962a:	2800      	cmp	r0, #0
 800962c:	f43f af7b 	beq.w	8009526 <_strtod_l+0xa0e>
 8009630:	e4c4      	b.n	8008fbc <_strtod_l+0x4a4>
 8009632:	9b04      	ldr	r3, [sp, #16]
 8009634:	b333      	cbz	r3, 8009684 <_strtod_l+0xb6c>
 8009636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009638:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800963c:	d822      	bhi.n	8009684 <_strtod_l+0xb6c>
 800963e:	a32e      	add	r3, pc, #184	; (adr r3, 80096f8 <_strtod_l+0xbe0>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	4640      	mov	r0, r8
 8009646:	4649      	mov	r1, r9
 8009648:	f7f7 fa62 	bl	8000b10 <__aeabi_dcmple>
 800964c:	b1a0      	cbz	r0, 8009678 <_strtod_l+0xb60>
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	f7f7 fab9 	bl	8000bc8 <__aeabi_d2uiz>
 8009656:	2801      	cmp	r0, #1
 8009658:	bf38      	it	cc
 800965a:	2001      	movcc	r0, #1
 800965c:	f7f6 ff62 	bl	8000524 <__aeabi_ui2d>
 8009660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009662:	4680      	mov	r8, r0
 8009664:	4689      	mov	r9, r1
 8009666:	bb23      	cbnz	r3, 80096b2 <_strtod_l+0xb9a>
 8009668:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800966c:	9010      	str	r0, [sp, #64]	; 0x40
 800966e:	9311      	str	r3, [sp, #68]	; 0x44
 8009670:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009674:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800967c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	9309      	str	r3, [sp, #36]	; 0x24
 8009684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009688:	eeb0 0a48 	vmov.f32	s0, s16
 800968c:	eef0 0a68 	vmov.f32	s1, s17
 8009690:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009694:	f002 f960 	bl	800b958 <__ulp>
 8009698:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800969c:	ec53 2b10 	vmov	r2, r3, d0
 80096a0:	f7f6 ffba 	bl	8000618 <__aeabi_dmul>
 80096a4:	ec53 2b18 	vmov	r2, r3, d8
 80096a8:	f7f6 fe00 	bl	80002ac <__adddf3>
 80096ac:	4682      	mov	sl, r0
 80096ae:	468b      	mov	fp, r1
 80096b0:	e78d      	b.n	80095ce <_strtod_l+0xab6>
 80096b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80096b6:	e7db      	b.n	8009670 <_strtod_l+0xb58>
 80096b8:	a311      	add	r3, pc, #68	; (adr r3, 8009700 <_strtod_l+0xbe8>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f7 fa1d 	bl	8000afc <__aeabi_dcmplt>
 80096c2:	e7b2      	b.n	800962a <_strtod_l+0xb12>
 80096c4:	2300      	movs	r3, #0
 80096c6:	930a      	str	r3, [sp, #40]	; 0x28
 80096c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	f7ff ba6b 	b.w	8008ba8 <_strtod_l+0x90>
 80096d2:	2a65      	cmp	r2, #101	; 0x65
 80096d4:	f43f ab5f 	beq.w	8008d96 <_strtod_l+0x27e>
 80096d8:	2a45      	cmp	r2, #69	; 0x45
 80096da:	f43f ab5c 	beq.w	8008d96 <_strtod_l+0x27e>
 80096de:	2301      	movs	r3, #1
 80096e0:	f7ff bb94 	b.w	8008e0c <_strtod_l+0x2f4>
 80096e4:	f3af 8000 	nop.w
 80096e8:	94a03595 	.word	0x94a03595
 80096ec:	3fdfffff 	.word	0x3fdfffff
 80096f0:	35afe535 	.word	0x35afe535
 80096f4:	3fe00000 	.word	0x3fe00000
 80096f8:	ffc00000 	.word	0xffc00000
 80096fc:	41dfffff 	.word	0x41dfffff
 8009700:	94a03595 	.word	0x94a03595
 8009704:	3fcfffff 	.word	0x3fcfffff
 8009708:	3ff00000 	.word	0x3ff00000
 800970c:	7ff00000 	.word	0x7ff00000
 8009710:	7fe00000 	.word	0x7fe00000
 8009714:	7c9fffff 	.word	0x7c9fffff
 8009718:	3fe00000 	.word	0x3fe00000
 800971c:	bff00000 	.word	0xbff00000
 8009720:	7fefffff 	.word	0x7fefffff

08009724 <_strtod_r>:
 8009724:	4b01      	ldr	r3, [pc, #4]	; (800972c <_strtod_r+0x8>)
 8009726:	f7ff b9f7 	b.w	8008b18 <_strtod_l>
 800972a:	bf00      	nop
 800972c:	20000074 	.word	0x20000074

08009730 <_strtol_l.constprop.0>:
 8009730:	2b01      	cmp	r3, #1
 8009732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009736:	d001      	beq.n	800973c <_strtol_l.constprop.0+0xc>
 8009738:	2b24      	cmp	r3, #36	; 0x24
 800973a:	d906      	bls.n	800974a <_strtol_l.constprop.0+0x1a>
 800973c:	f7fe f9ee 	bl	8007b1c <__errno>
 8009740:	2316      	movs	r3, #22
 8009742:	6003      	str	r3, [r0, #0]
 8009744:	2000      	movs	r0, #0
 8009746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800974a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009830 <_strtol_l.constprop.0+0x100>
 800974e:	460d      	mov	r5, r1
 8009750:	462e      	mov	r6, r5
 8009752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009756:	f814 700c 	ldrb.w	r7, [r4, ip]
 800975a:	f017 0708 	ands.w	r7, r7, #8
 800975e:	d1f7      	bne.n	8009750 <_strtol_l.constprop.0+0x20>
 8009760:	2c2d      	cmp	r4, #45	; 0x2d
 8009762:	d132      	bne.n	80097ca <_strtol_l.constprop.0+0x9a>
 8009764:	782c      	ldrb	r4, [r5, #0]
 8009766:	2701      	movs	r7, #1
 8009768:	1cb5      	adds	r5, r6, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d05b      	beq.n	8009826 <_strtol_l.constprop.0+0xf6>
 800976e:	2b10      	cmp	r3, #16
 8009770:	d109      	bne.n	8009786 <_strtol_l.constprop.0+0x56>
 8009772:	2c30      	cmp	r4, #48	; 0x30
 8009774:	d107      	bne.n	8009786 <_strtol_l.constprop.0+0x56>
 8009776:	782c      	ldrb	r4, [r5, #0]
 8009778:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800977c:	2c58      	cmp	r4, #88	; 0x58
 800977e:	d14d      	bne.n	800981c <_strtol_l.constprop.0+0xec>
 8009780:	786c      	ldrb	r4, [r5, #1]
 8009782:	2310      	movs	r3, #16
 8009784:	3502      	adds	r5, #2
 8009786:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800978a:	f108 38ff 	add.w	r8, r8, #4294967295
 800978e:	f04f 0c00 	mov.w	ip, #0
 8009792:	fbb8 f9f3 	udiv	r9, r8, r3
 8009796:	4666      	mov	r6, ip
 8009798:	fb03 8a19 	mls	sl, r3, r9, r8
 800979c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80097a0:	f1be 0f09 	cmp.w	lr, #9
 80097a4:	d816      	bhi.n	80097d4 <_strtol_l.constprop.0+0xa4>
 80097a6:	4674      	mov	r4, lr
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	dd24      	ble.n	80097f6 <_strtol_l.constprop.0+0xc6>
 80097ac:	f1bc 0f00 	cmp.w	ip, #0
 80097b0:	db1e      	blt.n	80097f0 <_strtol_l.constprop.0+0xc0>
 80097b2:	45b1      	cmp	r9, r6
 80097b4:	d31c      	bcc.n	80097f0 <_strtol_l.constprop.0+0xc0>
 80097b6:	d101      	bne.n	80097bc <_strtol_l.constprop.0+0x8c>
 80097b8:	45a2      	cmp	sl, r4
 80097ba:	db19      	blt.n	80097f0 <_strtol_l.constprop.0+0xc0>
 80097bc:	fb06 4603 	mla	r6, r6, r3, r4
 80097c0:	f04f 0c01 	mov.w	ip, #1
 80097c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097c8:	e7e8      	b.n	800979c <_strtol_l.constprop.0+0x6c>
 80097ca:	2c2b      	cmp	r4, #43	; 0x2b
 80097cc:	bf04      	itt	eq
 80097ce:	782c      	ldrbeq	r4, [r5, #0]
 80097d0:	1cb5      	addeq	r5, r6, #2
 80097d2:	e7ca      	b.n	800976a <_strtol_l.constprop.0+0x3a>
 80097d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097d8:	f1be 0f19 	cmp.w	lr, #25
 80097dc:	d801      	bhi.n	80097e2 <_strtol_l.constprop.0+0xb2>
 80097de:	3c37      	subs	r4, #55	; 0x37
 80097e0:	e7e2      	b.n	80097a8 <_strtol_l.constprop.0+0x78>
 80097e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097e6:	f1be 0f19 	cmp.w	lr, #25
 80097ea:	d804      	bhi.n	80097f6 <_strtol_l.constprop.0+0xc6>
 80097ec:	3c57      	subs	r4, #87	; 0x57
 80097ee:	e7db      	b.n	80097a8 <_strtol_l.constprop.0+0x78>
 80097f0:	f04f 3cff 	mov.w	ip, #4294967295
 80097f4:	e7e6      	b.n	80097c4 <_strtol_l.constprop.0+0x94>
 80097f6:	f1bc 0f00 	cmp.w	ip, #0
 80097fa:	da05      	bge.n	8009808 <_strtol_l.constprop.0+0xd8>
 80097fc:	2322      	movs	r3, #34	; 0x22
 80097fe:	6003      	str	r3, [r0, #0]
 8009800:	4646      	mov	r6, r8
 8009802:	b942      	cbnz	r2, 8009816 <_strtol_l.constprop.0+0xe6>
 8009804:	4630      	mov	r0, r6
 8009806:	e79e      	b.n	8009746 <_strtol_l.constprop.0+0x16>
 8009808:	b107      	cbz	r7, 800980c <_strtol_l.constprop.0+0xdc>
 800980a:	4276      	negs	r6, r6
 800980c:	2a00      	cmp	r2, #0
 800980e:	d0f9      	beq.n	8009804 <_strtol_l.constprop.0+0xd4>
 8009810:	f1bc 0f00 	cmp.w	ip, #0
 8009814:	d000      	beq.n	8009818 <_strtol_l.constprop.0+0xe8>
 8009816:	1e69      	subs	r1, r5, #1
 8009818:	6011      	str	r1, [r2, #0]
 800981a:	e7f3      	b.n	8009804 <_strtol_l.constprop.0+0xd4>
 800981c:	2430      	movs	r4, #48	; 0x30
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1b1      	bne.n	8009786 <_strtol_l.constprop.0+0x56>
 8009822:	2308      	movs	r3, #8
 8009824:	e7af      	b.n	8009786 <_strtol_l.constprop.0+0x56>
 8009826:	2c30      	cmp	r4, #48	; 0x30
 8009828:	d0a5      	beq.n	8009776 <_strtol_l.constprop.0+0x46>
 800982a:	230a      	movs	r3, #10
 800982c:	e7ab      	b.n	8009786 <_strtol_l.constprop.0+0x56>
 800982e:	bf00      	nop
 8009830:	0800d049 	.word	0x0800d049

08009834 <_strtol_r>:
 8009834:	f7ff bf7c 	b.w	8009730 <_strtol_l.constprop.0>

08009838 <__swbuf_r>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	460e      	mov	r6, r1
 800983c:	4614      	mov	r4, r2
 800983e:	4605      	mov	r5, r0
 8009840:	b118      	cbz	r0, 800984a <__swbuf_r+0x12>
 8009842:	6983      	ldr	r3, [r0, #24]
 8009844:	b90b      	cbnz	r3, 800984a <__swbuf_r+0x12>
 8009846:	f001 f86f 	bl	800a928 <__sinit>
 800984a:	4b21      	ldr	r3, [pc, #132]	; (80098d0 <__swbuf_r+0x98>)
 800984c:	429c      	cmp	r4, r3
 800984e:	d12b      	bne.n	80098a8 <__swbuf_r+0x70>
 8009850:	686c      	ldr	r4, [r5, #4]
 8009852:	69a3      	ldr	r3, [r4, #24]
 8009854:	60a3      	str	r3, [r4, #8]
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	071a      	lsls	r2, r3, #28
 800985a:	d52f      	bpl.n	80098bc <__swbuf_r+0x84>
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	b36b      	cbz	r3, 80098bc <__swbuf_r+0x84>
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	6820      	ldr	r0, [r4, #0]
 8009864:	1ac0      	subs	r0, r0, r3
 8009866:	6963      	ldr	r3, [r4, #20]
 8009868:	b2f6      	uxtb	r6, r6
 800986a:	4283      	cmp	r3, r0
 800986c:	4637      	mov	r7, r6
 800986e:	dc04      	bgt.n	800987a <__swbuf_r+0x42>
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	f000 ffc4 	bl	800a800 <_fflush_r>
 8009878:	bb30      	cbnz	r0, 80098c8 <__swbuf_r+0x90>
 800987a:	68a3      	ldr	r3, [r4, #8]
 800987c:	3b01      	subs	r3, #1
 800987e:	60a3      	str	r3, [r4, #8]
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	6022      	str	r2, [r4, #0]
 8009886:	701e      	strb	r6, [r3, #0]
 8009888:	6963      	ldr	r3, [r4, #20]
 800988a:	3001      	adds	r0, #1
 800988c:	4283      	cmp	r3, r0
 800988e:	d004      	beq.n	800989a <__swbuf_r+0x62>
 8009890:	89a3      	ldrh	r3, [r4, #12]
 8009892:	07db      	lsls	r3, r3, #31
 8009894:	d506      	bpl.n	80098a4 <__swbuf_r+0x6c>
 8009896:	2e0a      	cmp	r6, #10
 8009898:	d104      	bne.n	80098a4 <__swbuf_r+0x6c>
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 ffaf 	bl	800a800 <_fflush_r>
 80098a2:	b988      	cbnz	r0, 80098c8 <__swbuf_r+0x90>
 80098a4:	4638      	mov	r0, r7
 80098a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a8:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <__swbuf_r+0x9c>)
 80098aa:	429c      	cmp	r4, r3
 80098ac:	d101      	bne.n	80098b2 <__swbuf_r+0x7a>
 80098ae:	68ac      	ldr	r4, [r5, #8]
 80098b0:	e7cf      	b.n	8009852 <__swbuf_r+0x1a>
 80098b2:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <__swbuf_r+0xa0>)
 80098b4:	429c      	cmp	r4, r3
 80098b6:	bf08      	it	eq
 80098b8:	68ec      	ldreq	r4, [r5, #12]
 80098ba:	e7ca      	b.n	8009852 <__swbuf_r+0x1a>
 80098bc:	4621      	mov	r1, r4
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f81e 	bl	8009900 <__swsetup_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d0cb      	beq.n	8009860 <__swbuf_r+0x28>
 80098c8:	f04f 37ff 	mov.w	r7, #4294967295
 80098cc:	e7ea      	b.n	80098a4 <__swbuf_r+0x6c>
 80098ce:	bf00      	nop
 80098d0:	0800d1fc 	.word	0x0800d1fc
 80098d4:	0800d21c 	.word	0x0800d21c
 80098d8:	0800d1dc 	.word	0x0800d1dc

080098dc <_write_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d07      	ldr	r5, [pc, #28]	; (80098fc <_write_r+0x20>)
 80098e0:	4604      	mov	r4, r0
 80098e2:	4608      	mov	r0, r1
 80098e4:	4611      	mov	r1, r2
 80098e6:	2200      	movs	r2, #0
 80098e8:	602a      	str	r2, [r5, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	f7f8 f833 	bl	8001956 <_write>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_write_r+0x1e>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_write_r+0x1e>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20000804 	.word	0x20000804

08009900 <__swsetup_r>:
 8009900:	4b32      	ldr	r3, [pc, #200]	; (80099cc <__swsetup_r+0xcc>)
 8009902:	b570      	push	{r4, r5, r6, lr}
 8009904:	681d      	ldr	r5, [r3, #0]
 8009906:	4606      	mov	r6, r0
 8009908:	460c      	mov	r4, r1
 800990a:	b125      	cbz	r5, 8009916 <__swsetup_r+0x16>
 800990c:	69ab      	ldr	r3, [r5, #24]
 800990e:	b913      	cbnz	r3, 8009916 <__swsetup_r+0x16>
 8009910:	4628      	mov	r0, r5
 8009912:	f001 f809 	bl	800a928 <__sinit>
 8009916:	4b2e      	ldr	r3, [pc, #184]	; (80099d0 <__swsetup_r+0xd0>)
 8009918:	429c      	cmp	r4, r3
 800991a:	d10f      	bne.n	800993c <__swsetup_r+0x3c>
 800991c:	686c      	ldr	r4, [r5, #4]
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009924:	0719      	lsls	r1, r3, #28
 8009926:	d42c      	bmi.n	8009982 <__swsetup_r+0x82>
 8009928:	06dd      	lsls	r5, r3, #27
 800992a:	d411      	bmi.n	8009950 <__swsetup_r+0x50>
 800992c:	2309      	movs	r3, #9
 800992e:	6033      	str	r3, [r6, #0]
 8009930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	f04f 30ff 	mov.w	r0, #4294967295
 800993a:	e03e      	b.n	80099ba <__swsetup_r+0xba>
 800993c:	4b25      	ldr	r3, [pc, #148]	; (80099d4 <__swsetup_r+0xd4>)
 800993e:	429c      	cmp	r4, r3
 8009940:	d101      	bne.n	8009946 <__swsetup_r+0x46>
 8009942:	68ac      	ldr	r4, [r5, #8]
 8009944:	e7eb      	b.n	800991e <__swsetup_r+0x1e>
 8009946:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <__swsetup_r+0xd8>)
 8009948:	429c      	cmp	r4, r3
 800994a:	bf08      	it	eq
 800994c:	68ec      	ldreq	r4, [r5, #12]
 800994e:	e7e6      	b.n	800991e <__swsetup_r+0x1e>
 8009950:	0758      	lsls	r0, r3, #29
 8009952:	d512      	bpl.n	800997a <__swsetup_r+0x7a>
 8009954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009956:	b141      	cbz	r1, 800996a <__swsetup_r+0x6a>
 8009958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800995c:	4299      	cmp	r1, r3
 800995e:	d002      	beq.n	8009966 <__swsetup_r+0x66>
 8009960:	4630      	mov	r0, r6
 8009962:	f002 f95f 	bl	800bc24 <_free_r>
 8009966:	2300      	movs	r3, #0
 8009968:	6363      	str	r3, [r4, #52]	; 0x34
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	2300      	movs	r3, #0
 8009974:	6063      	str	r3, [r4, #4]
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	f043 0308 	orr.w	r3, r3, #8
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	6923      	ldr	r3, [r4, #16]
 8009984:	b94b      	cbnz	r3, 800999a <__swsetup_r+0x9a>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800998c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009990:	d003      	beq.n	800999a <__swsetup_r+0x9a>
 8009992:	4621      	mov	r1, r4
 8009994:	4630      	mov	r0, r6
 8009996:	f001 fc13 	bl	800b1c0 <__smakebuf_r>
 800999a:	89a0      	ldrh	r0, [r4, #12]
 800999c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a0:	f010 0301 	ands.w	r3, r0, #1
 80099a4:	d00a      	beq.n	80099bc <__swsetup_r+0xbc>
 80099a6:	2300      	movs	r3, #0
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	6963      	ldr	r3, [r4, #20]
 80099ac:	425b      	negs	r3, r3
 80099ae:	61a3      	str	r3, [r4, #24]
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	b943      	cbnz	r3, 80099c6 <__swsetup_r+0xc6>
 80099b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099b8:	d1ba      	bne.n	8009930 <__swsetup_r+0x30>
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	0781      	lsls	r1, r0, #30
 80099be:	bf58      	it	pl
 80099c0:	6963      	ldrpl	r3, [r4, #20]
 80099c2:	60a3      	str	r3, [r4, #8]
 80099c4:	e7f4      	b.n	80099b0 <__swsetup_r+0xb0>
 80099c6:	2000      	movs	r0, #0
 80099c8:	e7f7      	b.n	80099ba <__swsetup_r+0xba>
 80099ca:	bf00      	nop
 80099cc:	2000000c 	.word	0x2000000c
 80099d0:	0800d1fc 	.word	0x0800d1fc
 80099d4:	0800d21c 	.word	0x0800d21c
 80099d8:	0800d1dc 	.word	0x0800d1dc

080099dc <_close_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4d06      	ldr	r5, [pc, #24]	; (80099f8 <_close_r+0x1c>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	f7f7 ffd1 	bl	800198e <_close>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_close_r+0x1a>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_close_r+0x1a>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	20000804 	.word	0x20000804

080099fc <quorem>:
 80099fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	6903      	ldr	r3, [r0, #16]
 8009a02:	690c      	ldr	r4, [r1, #16]
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	4607      	mov	r7, r0
 8009a08:	f2c0 8081 	blt.w	8009b0e <quorem+0x112>
 8009a0c:	3c01      	subs	r4, #1
 8009a0e:	f101 0814 	add.w	r8, r1, #20
 8009a12:	f100 0514 	add.w	r5, r0, #20
 8009a16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a24:	3301      	adds	r3, #1
 8009a26:	429a      	cmp	r2, r3
 8009a28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a30:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a34:	d331      	bcc.n	8009a9a <quorem+0x9e>
 8009a36:	f04f 0e00 	mov.w	lr, #0
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	46ac      	mov	ip, r5
 8009a3e:	46f2      	mov	sl, lr
 8009a40:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a44:	b293      	uxth	r3, r2
 8009a46:	fb06 e303 	mla	r3, r6, r3, lr
 8009a4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	ebaa 0303 	sub.w	r3, sl, r3
 8009a54:	f8dc a000 	ldr.w	sl, [ip]
 8009a58:	0c12      	lsrs	r2, r2, #16
 8009a5a:	fa13 f38a 	uxtah	r3, r3, sl
 8009a5e:	fb06 e202 	mla	r2, r6, r2, lr
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a6a:	b292      	uxth	r2, r2
 8009a6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a74:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a78:	4581      	cmp	r9, r0
 8009a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a7e:	f84c 3b04 	str.w	r3, [ip], #4
 8009a82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a86:	d2db      	bcs.n	8009a40 <quorem+0x44>
 8009a88:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a8c:	b92b      	cbnz	r3, 8009a9a <quorem+0x9e>
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	3b04      	subs	r3, #4
 8009a92:	429d      	cmp	r5, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	d32e      	bcc.n	8009af6 <quorem+0xfa>
 8009a98:	613c      	str	r4, [r7, #16]
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	f001 feb6 	bl	800b80c <__mcmp>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	db24      	blt.n	8009aee <quorem+0xf2>
 8009aa4:	3601      	adds	r6, #1
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f04f 0c00 	mov.w	ip, #0
 8009aac:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ab0:	f8d0 e000 	ldr.w	lr, [r0]
 8009ab4:	b293      	uxth	r3, r2
 8009ab6:	ebac 0303 	sub.w	r3, ip, r3
 8009aba:	0c12      	lsrs	r2, r2, #16
 8009abc:	fa13 f38e 	uxtah	r3, r3, lr
 8009ac0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ace:	45c1      	cmp	r9, r8
 8009ad0:	f840 3b04 	str.w	r3, [r0], #4
 8009ad4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ad8:	d2e8      	bcs.n	8009aac <quorem+0xb0>
 8009ada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ae2:	b922      	cbnz	r2, 8009aee <quorem+0xf2>
 8009ae4:	3b04      	subs	r3, #4
 8009ae6:	429d      	cmp	r5, r3
 8009ae8:	461a      	mov	r2, r3
 8009aea:	d30a      	bcc.n	8009b02 <quorem+0x106>
 8009aec:	613c      	str	r4, [r7, #16]
 8009aee:	4630      	mov	r0, r6
 8009af0:	b003      	add	sp, #12
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	6812      	ldr	r2, [r2, #0]
 8009af8:	3b04      	subs	r3, #4
 8009afa:	2a00      	cmp	r2, #0
 8009afc:	d1cc      	bne.n	8009a98 <quorem+0x9c>
 8009afe:	3c01      	subs	r4, #1
 8009b00:	e7c7      	b.n	8009a92 <quorem+0x96>
 8009b02:	6812      	ldr	r2, [r2, #0]
 8009b04:	3b04      	subs	r3, #4
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	d1f0      	bne.n	8009aec <quorem+0xf0>
 8009b0a:	3c01      	subs	r4, #1
 8009b0c:	e7eb      	b.n	8009ae6 <quorem+0xea>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e7ee      	b.n	8009af0 <quorem+0xf4>
 8009b12:	0000      	movs	r0, r0
 8009b14:	0000      	movs	r0, r0
	...

08009b18 <_dtoa_r>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	ed2d 8b04 	vpush	{d8-d9}
 8009b20:	ec57 6b10 	vmov	r6, r7, d0
 8009b24:	b093      	sub	sp, #76	; 0x4c
 8009b26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b2c:	9106      	str	r1, [sp, #24]
 8009b2e:	ee10 aa10 	vmov	sl, s0
 8009b32:	4604      	mov	r4, r0
 8009b34:	9209      	str	r2, [sp, #36]	; 0x24
 8009b36:	930c      	str	r3, [sp, #48]	; 0x30
 8009b38:	46bb      	mov	fp, r7
 8009b3a:	b975      	cbnz	r5, 8009b5a <_dtoa_r+0x42>
 8009b3c:	2010      	movs	r0, #16
 8009b3e:	f001 fb7f 	bl	800b240 <malloc>
 8009b42:	4602      	mov	r2, r0
 8009b44:	6260      	str	r0, [r4, #36]	; 0x24
 8009b46:	b920      	cbnz	r0, 8009b52 <_dtoa_r+0x3a>
 8009b48:	4ba7      	ldr	r3, [pc, #668]	; (8009de8 <_dtoa_r+0x2d0>)
 8009b4a:	21ea      	movs	r1, #234	; 0xea
 8009b4c:	48a7      	ldr	r0, [pc, #668]	; (8009dec <_dtoa_r+0x2d4>)
 8009b4e:	f003 f857 	bl	800cc00 <__assert_func>
 8009b52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b56:	6005      	str	r5, [r0, #0]
 8009b58:	60c5      	str	r5, [r0, #12]
 8009b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b5c:	6819      	ldr	r1, [r3, #0]
 8009b5e:	b151      	cbz	r1, 8009b76 <_dtoa_r+0x5e>
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	604a      	str	r2, [r1, #4]
 8009b64:	2301      	movs	r3, #1
 8009b66:	4093      	lsls	r3, r2
 8009b68:	608b      	str	r3, [r1, #8]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f001 fbc2 	bl	800b2f4 <_Bfree>
 8009b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	1e3b      	subs	r3, r7, #0
 8009b78:	bfaa      	itet	ge
 8009b7a:	2300      	movge	r3, #0
 8009b7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009b80:	f8c8 3000 	strge.w	r3, [r8]
 8009b84:	4b9a      	ldr	r3, [pc, #616]	; (8009df0 <_dtoa_r+0x2d8>)
 8009b86:	bfbc      	itt	lt
 8009b88:	2201      	movlt	r2, #1
 8009b8a:	f8c8 2000 	strlt.w	r2, [r8]
 8009b8e:	ea33 030b 	bics.w	r3, r3, fp
 8009b92:	d11b      	bne.n	8009bcc <_dtoa_r+0xb4>
 8009b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b96:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ba0:	4333      	orrs	r3, r6
 8009ba2:	f000 8592 	beq.w	800a6ca <_dtoa_r+0xbb2>
 8009ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ba8:	b963      	cbnz	r3, 8009bc4 <_dtoa_r+0xac>
 8009baa:	4b92      	ldr	r3, [pc, #584]	; (8009df4 <_dtoa_r+0x2dc>)
 8009bac:	e022      	b.n	8009bf4 <_dtoa_r+0xdc>
 8009bae:	4b92      	ldr	r3, [pc, #584]	; (8009df8 <_dtoa_r+0x2e0>)
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	9801      	ldr	r0, [sp, #4]
 8009bba:	b013      	add	sp, #76	; 0x4c
 8009bbc:	ecbd 8b04 	vpop	{d8-d9}
 8009bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	4b8b      	ldr	r3, [pc, #556]	; (8009df4 <_dtoa_r+0x2dc>)
 8009bc6:	9301      	str	r3, [sp, #4]
 8009bc8:	3303      	adds	r3, #3
 8009bca:	e7f3      	b.n	8009bb4 <_dtoa_r+0x9c>
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2300      	movs	r3, #0
 8009bd0:	4650      	mov	r0, sl
 8009bd2:	4659      	mov	r1, fp
 8009bd4:	f7f6 ff88 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bd8:	ec4b ab19 	vmov	d9, sl, fp
 8009bdc:	4680      	mov	r8, r0
 8009bde:	b158      	cbz	r0, 8009bf8 <_dtoa_r+0xe0>
 8009be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009be2:	2301      	movs	r3, #1
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 856b 	beq.w	800a6c4 <_dtoa_r+0xbac>
 8009bee:	4883      	ldr	r0, [pc, #524]	; (8009dfc <_dtoa_r+0x2e4>)
 8009bf0:	6018      	str	r0, [r3, #0]
 8009bf2:	1e43      	subs	r3, r0, #1
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	e7df      	b.n	8009bb8 <_dtoa_r+0xa0>
 8009bf8:	ec4b ab10 	vmov	d0, sl, fp
 8009bfc:	aa10      	add	r2, sp, #64	; 0x40
 8009bfe:	a911      	add	r1, sp, #68	; 0x44
 8009c00:	4620      	mov	r0, r4
 8009c02:	f001 ff25 	bl	800ba50 <__d2b>
 8009c06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009c0a:	ee08 0a10 	vmov	s16, r0
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	f000 8084 	beq.w	8009d1c <_dtoa_r+0x204>
 8009c14:	ee19 3a90 	vmov	r3, s19
 8009c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c20:	4656      	mov	r6, sl
 8009c22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009c2e:	4b74      	ldr	r3, [pc, #464]	; (8009e00 <_dtoa_r+0x2e8>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	4630      	mov	r0, r6
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 fb37 	bl	80002a8 <__aeabi_dsub>
 8009c3a:	a365      	add	r3, pc, #404	; (adr r3, 8009dd0 <_dtoa_r+0x2b8>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fcea 	bl	8000618 <__aeabi_dmul>
 8009c44:	a364      	add	r3, pc, #400	; (adr r3, 8009dd8 <_dtoa_r+0x2c0>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 fb2f 	bl	80002ac <__adddf3>
 8009c4e:	4606      	mov	r6, r0
 8009c50:	4628      	mov	r0, r5
 8009c52:	460f      	mov	r7, r1
 8009c54:	f7f6 fc76 	bl	8000544 <__aeabi_i2d>
 8009c58:	a361      	add	r3, pc, #388	; (adr r3, 8009de0 <_dtoa_r+0x2c8>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f6 fcdb 	bl	8000618 <__aeabi_dmul>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4630      	mov	r0, r6
 8009c68:	4639      	mov	r1, r7
 8009c6a:	f7f6 fb1f 	bl	80002ac <__adddf3>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460f      	mov	r7, r1
 8009c72:	f7f6 ff81 	bl	8000b78 <__aeabi_d2iz>
 8009c76:	2200      	movs	r2, #0
 8009c78:	9000      	str	r0, [sp, #0]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	4639      	mov	r1, r7
 8009c80:	f7f6 ff3c 	bl	8000afc <__aeabi_dcmplt>
 8009c84:	b150      	cbz	r0, 8009c9c <_dtoa_r+0x184>
 8009c86:	9800      	ldr	r0, [sp, #0]
 8009c88:	f7f6 fc5c 	bl	8000544 <__aeabi_i2d>
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	463b      	mov	r3, r7
 8009c90:	f7f6 ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c94:	b910      	cbnz	r0, 8009c9c <_dtoa_r+0x184>
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	9b00      	ldr	r3, [sp, #0]
 8009c9e:	2b16      	cmp	r3, #22
 8009ca0:	d85a      	bhi.n	8009d58 <_dtoa_r+0x240>
 8009ca2:	9a00      	ldr	r2, [sp, #0]
 8009ca4:	4b57      	ldr	r3, [pc, #348]	; (8009e04 <_dtoa_r+0x2ec>)
 8009ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	ec51 0b19 	vmov	r0, r1, d9
 8009cb2:	f7f6 ff23 	bl	8000afc <__aeabi_dcmplt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d050      	beq.n	8009d5c <_dtoa_r+0x244>
 8009cba:	9b00      	ldr	r3, [sp, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cc6:	1b5d      	subs	r5, r3, r5
 8009cc8:	1e6b      	subs	r3, r5, #1
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	bf45      	ittet	mi
 8009cce:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cd2:	9304      	strmi	r3, [sp, #16]
 8009cd4:	2300      	movpl	r3, #0
 8009cd6:	2300      	movmi	r3, #0
 8009cd8:	bf4c      	ite	mi
 8009cda:	9305      	strmi	r3, [sp, #20]
 8009cdc:	9304      	strpl	r3, [sp, #16]
 8009cde:	9b00      	ldr	r3, [sp, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	db3d      	blt.n	8009d60 <_dtoa_r+0x248>
 8009ce4:	9b05      	ldr	r3, [sp, #20]
 8009ce6:	9a00      	ldr	r2, [sp, #0]
 8009ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8009cea:	4413      	add	r3, r2
 8009cec:	9305      	str	r3, [sp, #20]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	9307      	str	r3, [sp, #28]
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	f200 8089 	bhi.w	8009e0c <_dtoa_r+0x2f4>
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	bfc4      	itt	gt
 8009cfe:	3b04      	subgt	r3, #4
 8009d00:	9306      	strgt	r3, [sp, #24]
 8009d02:	9b06      	ldr	r3, [sp, #24]
 8009d04:	f1a3 0302 	sub.w	r3, r3, #2
 8009d08:	bfcc      	ite	gt
 8009d0a:	2500      	movgt	r5, #0
 8009d0c:	2501      	movle	r5, #1
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	f200 8087 	bhi.w	8009e22 <_dtoa_r+0x30a>
 8009d14:	e8df f003 	tbb	[pc, r3]
 8009d18:	59383a2d 	.word	0x59383a2d
 8009d1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d20:	441d      	add	r5, r3
 8009d22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	bfc1      	itttt	gt
 8009d2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d32:	fa0b f303 	lslgt.w	r3, fp, r3
 8009d36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d3a:	bfda      	itte	le
 8009d3c:	f1c3 0320 	rsble	r3, r3, #32
 8009d40:	fa06 f003 	lslle.w	r0, r6, r3
 8009d44:	4318      	orrgt	r0, r3
 8009d46:	f7f6 fbed 	bl	8000524 <__aeabi_ui2d>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009d52:	3d01      	subs	r5, #1
 8009d54:	930e      	str	r3, [sp, #56]	; 0x38
 8009d56:	e76a      	b.n	8009c2e <_dtoa_r+0x116>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e7b2      	b.n	8009cc2 <_dtoa_r+0x1aa>
 8009d5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d5e:	e7b1      	b.n	8009cc4 <_dtoa_r+0x1ac>
 8009d60:	9b04      	ldr	r3, [sp, #16]
 8009d62:	9a00      	ldr	r2, [sp, #0]
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	4253      	negs	r3, r2
 8009d6a:	9307      	str	r3, [sp, #28]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d70:	e7bf      	b.n	8009cf2 <_dtoa_r+0x1da>
 8009d72:	2300      	movs	r3, #0
 8009d74:	9308      	str	r3, [sp, #32]
 8009d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dc55      	bgt.n	8009e28 <_dtoa_r+0x310>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d82:	461a      	mov	r2, r3
 8009d84:	9209      	str	r2, [sp, #36]	; 0x24
 8009d86:	e00c      	b.n	8009da2 <_dtoa_r+0x28a>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e7f3      	b.n	8009d74 <_dtoa_r+0x25c>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d90:	9308      	str	r3, [sp, #32]
 8009d92:	9b00      	ldr	r3, [sp, #0]
 8009d94:	4413      	add	r3, r2
 8009d96:	9302      	str	r3, [sp, #8]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	9303      	str	r3, [sp, #12]
 8009d9e:	bfb8      	it	lt
 8009da0:	2301      	movlt	r3, #1
 8009da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009da4:	2200      	movs	r2, #0
 8009da6:	6042      	str	r2, [r0, #4]
 8009da8:	2204      	movs	r2, #4
 8009daa:	f102 0614 	add.w	r6, r2, #20
 8009dae:	429e      	cmp	r6, r3
 8009db0:	6841      	ldr	r1, [r0, #4]
 8009db2:	d93d      	bls.n	8009e30 <_dtoa_r+0x318>
 8009db4:	4620      	mov	r0, r4
 8009db6:	f001 fa5d 	bl	800b274 <_Balloc>
 8009dba:	9001      	str	r0, [sp, #4]
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d13b      	bne.n	8009e38 <_dtoa_r+0x320>
 8009dc0:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <_dtoa_r+0x2f0>)
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009dc8:	e6c0      	b.n	8009b4c <_dtoa_r+0x34>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e7df      	b.n	8009d8e <_dtoa_r+0x276>
 8009dce:	bf00      	nop
 8009dd0:	636f4361 	.word	0x636f4361
 8009dd4:	3fd287a7 	.word	0x3fd287a7
 8009dd8:	8b60c8b3 	.word	0x8b60c8b3
 8009ddc:	3fc68a28 	.word	0x3fc68a28
 8009de0:	509f79fb 	.word	0x509f79fb
 8009de4:	3fd34413 	.word	0x3fd34413
 8009de8:	0800d156 	.word	0x0800d156
 8009dec:	0800d16d 	.word	0x0800d16d
 8009df0:	7ff00000 	.word	0x7ff00000
 8009df4:	0800d152 	.word	0x0800d152
 8009df8:	0800d149 	.word	0x0800d149
 8009dfc:	0800d42a 	.word	0x0800d42a
 8009e00:	3ff80000 	.word	0x3ff80000
 8009e04:	0800d340 	.word	0x0800d340
 8009e08:	0800d1c8 	.word	0x0800d1c8
 8009e0c:	2501      	movs	r5, #1
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9306      	str	r3, [sp, #24]
 8009e12:	9508      	str	r5, [sp, #32]
 8009e14:	f04f 33ff 	mov.w	r3, #4294967295
 8009e18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2312      	movs	r3, #18
 8009e20:	e7b0      	b.n	8009d84 <_dtoa_r+0x26c>
 8009e22:	2301      	movs	r3, #1
 8009e24:	9308      	str	r3, [sp, #32]
 8009e26:	e7f5      	b.n	8009e14 <_dtoa_r+0x2fc>
 8009e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e2e:	e7b8      	b.n	8009da2 <_dtoa_r+0x28a>
 8009e30:	3101      	adds	r1, #1
 8009e32:	6041      	str	r1, [r0, #4]
 8009e34:	0052      	lsls	r2, r2, #1
 8009e36:	e7b8      	b.n	8009daa <_dtoa_r+0x292>
 8009e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e3a:	9a01      	ldr	r2, [sp, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	2b0e      	cmp	r3, #14
 8009e42:	f200 809d 	bhi.w	8009f80 <_dtoa_r+0x468>
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	f000 809a 	beq.w	8009f80 <_dtoa_r+0x468>
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dd32      	ble.n	8009eb8 <_dtoa_r+0x3a0>
 8009e52:	4ab7      	ldr	r2, [pc, #732]	; (800a130 <_dtoa_r+0x618>)
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e60:	9b00      	ldr	r3, [sp, #0]
 8009e62:	05d8      	lsls	r0, r3, #23
 8009e64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009e68:	d516      	bpl.n	8009e98 <_dtoa_r+0x380>
 8009e6a:	4bb2      	ldr	r3, [pc, #712]	; (800a134 <_dtoa_r+0x61c>)
 8009e6c:	ec51 0b19 	vmov	r0, r1, d9
 8009e70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e74:	f7f6 fcfa 	bl	800086c <__aeabi_ddiv>
 8009e78:	f007 070f 	and.w	r7, r7, #15
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	468b      	mov	fp, r1
 8009e80:	2503      	movs	r5, #3
 8009e82:	4eac      	ldr	r6, [pc, #688]	; (800a134 <_dtoa_r+0x61c>)
 8009e84:	b957      	cbnz	r7, 8009e9c <_dtoa_r+0x384>
 8009e86:	4642      	mov	r2, r8
 8009e88:	464b      	mov	r3, r9
 8009e8a:	4650      	mov	r0, sl
 8009e8c:	4659      	mov	r1, fp
 8009e8e:	f7f6 fced 	bl	800086c <__aeabi_ddiv>
 8009e92:	4682      	mov	sl, r0
 8009e94:	468b      	mov	fp, r1
 8009e96:	e028      	b.n	8009eea <_dtoa_r+0x3d2>
 8009e98:	2502      	movs	r5, #2
 8009e9a:	e7f2      	b.n	8009e82 <_dtoa_r+0x36a>
 8009e9c:	07f9      	lsls	r1, r7, #31
 8009e9e:	d508      	bpl.n	8009eb2 <_dtoa_r+0x39a>
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ea8:	f7f6 fbb6 	bl	8000618 <__aeabi_dmul>
 8009eac:	3501      	adds	r5, #1
 8009eae:	4680      	mov	r8, r0
 8009eb0:	4689      	mov	r9, r1
 8009eb2:	107f      	asrs	r7, r7, #1
 8009eb4:	3608      	adds	r6, #8
 8009eb6:	e7e5      	b.n	8009e84 <_dtoa_r+0x36c>
 8009eb8:	f000 809b 	beq.w	8009ff2 <_dtoa_r+0x4da>
 8009ebc:	9b00      	ldr	r3, [sp, #0]
 8009ebe:	4f9d      	ldr	r7, [pc, #628]	; (800a134 <_dtoa_r+0x61c>)
 8009ec0:	425e      	negs	r6, r3
 8009ec2:	4b9b      	ldr	r3, [pc, #620]	; (800a130 <_dtoa_r+0x618>)
 8009ec4:	f006 020f 	and.w	r2, r6, #15
 8009ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	ec51 0b19 	vmov	r0, r1, d9
 8009ed4:	f7f6 fba0 	bl	8000618 <__aeabi_dmul>
 8009ed8:	1136      	asrs	r6, r6, #4
 8009eda:	4682      	mov	sl, r0
 8009edc:	468b      	mov	fp, r1
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2502      	movs	r5, #2
 8009ee2:	2e00      	cmp	r6, #0
 8009ee4:	d17a      	bne.n	8009fdc <_dtoa_r+0x4c4>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1d3      	bne.n	8009e92 <_dtoa_r+0x37a>
 8009eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 8082 	beq.w	8009ff6 <_dtoa_r+0x4de>
 8009ef2:	4b91      	ldr	r3, [pc, #580]	; (800a138 <_dtoa_r+0x620>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	4659      	mov	r1, fp
 8009efa:	f7f6 fdff 	bl	8000afc <__aeabi_dcmplt>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d079      	beq.n	8009ff6 <_dtoa_r+0x4de>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d076      	beq.n	8009ff6 <_dtoa_r+0x4de>
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dd36      	ble.n	8009f7c <_dtoa_r+0x464>
 8009f0e:	9b00      	ldr	r3, [sp, #0]
 8009f10:	4650      	mov	r0, sl
 8009f12:	4659      	mov	r1, fp
 8009f14:	1e5f      	subs	r7, r3, #1
 8009f16:	2200      	movs	r2, #0
 8009f18:	4b88      	ldr	r3, [pc, #544]	; (800a13c <_dtoa_r+0x624>)
 8009f1a:	f7f6 fb7d 	bl	8000618 <__aeabi_dmul>
 8009f1e:	9e02      	ldr	r6, [sp, #8]
 8009f20:	4682      	mov	sl, r0
 8009f22:	468b      	mov	fp, r1
 8009f24:	3501      	adds	r5, #1
 8009f26:	4628      	mov	r0, r5
 8009f28:	f7f6 fb0c 	bl	8000544 <__aeabi_i2d>
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	465b      	mov	r3, fp
 8009f30:	f7f6 fb72 	bl	8000618 <__aeabi_dmul>
 8009f34:	4b82      	ldr	r3, [pc, #520]	; (800a140 <_dtoa_r+0x628>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	f7f6 f9b8 	bl	80002ac <__adddf3>
 8009f3c:	46d0      	mov	r8, sl
 8009f3e:	46d9      	mov	r9, fp
 8009f40:	4682      	mov	sl, r0
 8009f42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	d158      	bne.n	8009ffc <_dtoa_r+0x4e4>
 8009f4a:	4b7e      	ldr	r3, [pc, #504]	; (800a144 <_dtoa_r+0x62c>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	f7f6 f9a9 	bl	80002a8 <__aeabi_dsub>
 8009f56:	4652      	mov	r2, sl
 8009f58:	465b      	mov	r3, fp
 8009f5a:	4680      	mov	r8, r0
 8009f5c:	4689      	mov	r9, r1
 8009f5e:	f7f6 fdeb 	bl	8000b38 <__aeabi_dcmpgt>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	f040 8295 	bne.w	800a492 <_dtoa_r+0x97a>
 8009f68:	4652      	mov	r2, sl
 8009f6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f6e:	4640      	mov	r0, r8
 8009f70:	4649      	mov	r1, r9
 8009f72:	f7f6 fdc3 	bl	8000afc <__aeabi_dcmplt>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f040 8289 	bne.w	800a48e <_dtoa_r+0x976>
 8009f7c:	ec5b ab19 	vmov	sl, fp, d9
 8009f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f2c0 8148 	blt.w	800a218 <_dtoa_r+0x700>
 8009f88:	9a00      	ldr	r2, [sp, #0]
 8009f8a:	2a0e      	cmp	r2, #14
 8009f8c:	f300 8144 	bgt.w	800a218 <_dtoa_r+0x700>
 8009f90:	4b67      	ldr	r3, [pc, #412]	; (800a130 <_dtoa_r+0x618>)
 8009f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f280 80d5 	bge.w	800a14c <_dtoa_r+0x634>
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f300 80d1 	bgt.w	800a14c <_dtoa_r+0x634>
 8009faa:	f040 826f 	bne.w	800a48c <_dtoa_r+0x974>
 8009fae:	4b65      	ldr	r3, [pc, #404]	; (800a144 <_dtoa_r+0x62c>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	f7f6 fb2f 	bl	8000618 <__aeabi_dmul>
 8009fba:	4652      	mov	r2, sl
 8009fbc:	465b      	mov	r3, fp
 8009fbe:	f7f6 fdb1 	bl	8000b24 <__aeabi_dcmpge>
 8009fc2:	9e03      	ldr	r6, [sp, #12]
 8009fc4:	4637      	mov	r7, r6
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f040 8245 	bne.w	800a456 <_dtoa_r+0x93e>
 8009fcc:	9d01      	ldr	r5, [sp, #4]
 8009fce:	2331      	movs	r3, #49	; 0x31
 8009fd0:	f805 3b01 	strb.w	r3, [r5], #1
 8009fd4:	9b00      	ldr	r3, [sp, #0]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	e240      	b.n	800a45e <_dtoa_r+0x946>
 8009fdc:	07f2      	lsls	r2, r6, #31
 8009fde:	d505      	bpl.n	8009fec <_dtoa_r+0x4d4>
 8009fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe4:	f7f6 fb18 	bl	8000618 <__aeabi_dmul>
 8009fe8:	3501      	adds	r5, #1
 8009fea:	2301      	movs	r3, #1
 8009fec:	1076      	asrs	r6, r6, #1
 8009fee:	3708      	adds	r7, #8
 8009ff0:	e777      	b.n	8009ee2 <_dtoa_r+0x3ca>
 8009ff2:	2502      	movs	r5, #2
 8009ff4:	e779      	b.n	8009eea <_dtoa_r+0x3d2>
 8009ff6:	9f00      	ldr	r7, [sp, #0]
 8009ff8:	9e03      	ldr	r6, [sp, #12]
 8009ffa:	e794      	b.n	8009f26 <_dtoa_r+0x40e>
 8009ffc:	9901      	ldr	r1, [sp, #4]
 8009ffe:	4b4c      	ldr	r3, [pc, #304]	; (800a130 <_dtoa_r+0x618>)
 800a000:	4431      	add	r1, r6
 800a002:	910d      	str	r1, [sp, #52]	; 0x34
 800a004:	9908      	ldr	r1, [sp, #32]
 800a006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a00a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a00e:	2900      	cmp	r1, #0
 800a010:	d043      	beq.n	800a09a <_dtoa_r+0x582>
 800a012:	494d      	ldr	r1, [pc, #308]	; (800a148 <_dtoa_r+0x630>)
 800a014:	2000      	movs	r0, #0
 800a016:	f7f6 fc29 	bl	800086c <__aeabi_ddiv>
 800a01a:	4652      	mov	r2, sl
 800a01c:	465b      	mov	r3, fp
 800a01e:	f7f6 f943 	bl	80002a8 <__aeabi_dsub>
 800a022:	9d01      	ldr	r5, [sp, #4]
 800a024:	4682      	mov	sl, r0
 800a026:	468b      	mov	fp, r1
 800a028:	4649      	mov	r1, r9
 800a02a:	4640      	mov	r0, r8
 800a02c:	f7f6 fda4 	bl	8000b78 <__aeabi_d2iz>
 800a030:	4606      	mov	r6, r0
 800a032:	f7f6 fa87 	bl	8000544 <__aeabi_i2d>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4640      	mov	r0, r8
 800a03c:	4649      	mov	r1, r9
 800a03e:	f7f6 f933 	bl	80002a8 <__aeabi_dsub>
 800a042:	3630      	adds	r6, #48	; 0x30
 800a044:	f805 6b01 	strb.w	r6, [r5], #1
 800a048:	4652      	mov	r2, sl
 800a04a:	465b      	mov	r3, fp
 800a04c:	4680      	mov	r8, r0
 800a04e:	4689      	mov	r9, r1
 800a050:	f7f6 fd54 	bl	8000afc <__aeabi_dcmplt>
 800a054:	2800      	cmp	r0, #0
 800a056:	d163      	bne.n	800a120 <_dtoa_r+0x608>
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	4936      	ldr	r1, [pc, #216]	; (800a138 <_dtoa_r+0x620>)
 800a05e:	2000      	movs	r0, #0
 800a060:	f7f6 f922 	bl	80002a8 <__aeabi_dsub>
 800a064:	4652      	mov	r2, sl
 800a066:	465b      	mov	r3, fp
 800a068:	f7f6 fd48 	bl	8000afc <__aeabi_dcmplt>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f040 80b5 	bne.w	800a1dc <_dtoa_r+0x6c4>
 800a072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a074:	429d      	cmp	r5, r3
 800a076:	d081      	beq.n	8009f7c <_dtoa_r+0x464>
 800a078:	4b30      	ldr	r3, [pc, #192]	; (800a13c <_dtoa_r+0x624>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	4650      	mov	r0, sl
 800a07e:	4659      	mov	r1, fp
 800a080:	f7f6 faca 	bl	8000618 <__aeabi_dmul>
 800a084:	4b2d      	ldr	r3, [pc, #180]	; (800a13c <_dtoa_r+0x624>)
 800a086:	4682      	mov	sl, r0
 800a088:	468b      	mov	fp, r1
 800a08a:	4640      	mov	r0, r8
 800a08c:	4649      	mov	r1, r9
 800a08e:	2200      	movs	r2, #0
 800a090:	f7f6 fac2 	bl	8000618 <__aeabi_dmul>
 800a094:	4680      	mov	r8, r0
 800a096:	4689      	mov	r9, r1
 800a098:	e7c6      	b.n	800a028 <_dtoa_r+0x510>
 800a09a:	4650      	mov	r0, sl
 800a09c:	4659      	mov	r1, fp
 800a09e:	f7f6 fabb 	bl	8000618 <__aeabi_dmul>
 800a0a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a4:	9d01      	ldr	r5, [sp, #4]
 800a0a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	f7f6 fd62 	bl	8000b78 <__aeabi_d2iz>
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	f7f6 fa45 	bl	8000544 <__aeabi_i2d>
 800a0ba:	3630      	adds	r6, #48	; 0x30
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	f7f6 f8f0 	bl	80002a8 <__aeabi_dsub>
 800a0c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ce:	429d      	cmp	r5, r3
 800a0d0:	4680      	mov	r8, r0
 800a0d2:	4689      	mov	r9, r1
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	d124      	bne.n	800a124 <_dtoa_r+0x60c>
 800a0da:	4b1b      	ldr	r3, [pc, #108]	; (800a148 <_dtoa_r+0x630>)
 800a0dc:	4650      	mov	r0, sl
 800a0de:	4659      	mov	r1, fp
 800a0e0:	f7f6 f8e4 	bl	80002ac <__adddf3>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	f7f6 fd24 	bl	8000b38 <__aeabi_dcmpgt>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d173      	bne.n	800a1dc <_dtoa_r+0x6c4>
 800a0f4:	4652      	mov	r2, sl
 800a0f6:	465b      	mov	r3, fp
 800a0f8:	4913      	ldr	r1, [pc, #76]	; (800a148 <_dtoa_r+0x630>)
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	f7f6 f8d4 	bl	80002a8 <__aeabi_dsub>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4640      	mov	r0, r8
 800a106:	4649      	mov	r1, r9
 800a108:	f7f6 fcf8 	bl	8000afc <__aeabi_dcmplt>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f43f af35 	beq.w	8009f7c <_dtoa_r+0x464>
 800a112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a114:	1e6b      	subs	r3, r5, #1
 800a116:	930f      	str	r3, [sp, #60]	; 0x3c
 800a118:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a11c:	2b30      	cmp	r3, #48	; 0x30
 800a11e:	d0f8      	beq.n	800a112 <_dtoa_r+0x5fa>
 800a120:	9700      	str	r7, [sp, #0]
 800a122:	e049      	b.n	800a1b8 <_dtoa_r+0x6a0>
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <_dtoa_r+0x624>)
 800a126:	f7f6 fa77 	bl	8000618 <__aeabi_dmul>
 800a12a:	4680      	mov	r8, r0
 800a12c:	4689      	mov	r9, r1
 800a12e:	e7bd      	b.n	800a0ac <_dtoa_r+0x594>
 800a130:	0800d340 	.word	0x0800d340
 800a134:	0800d318 	.word	0x0800d318
 800a138:	3ff00000 	.word	0x3ff00000
 800a13c:	40240000 	.word	0x40240000
 800a140:	401c0000 	.word	0x401c0000
 800a144:	40140000 	.word	0x40140000
 800a148:	3fe00000 	.word	0x3fe00000
 800a14c:	9d01      	ldr	r5, [sp, #4]
 800a14e:	4656      	mov	r6, sl
 800a150:	465f      	mov	r7, fp
 800a152:	4642      	mov	r2, r8
 800a154:	464b      	mov	r3, r9
 800a156:	4630      	mov	r0, r6
 800a158:	4639      	mov	r1, r7
 800a15a:	f7f6 fb87 	bl	800086c <__aeabi_ddiv>
 800a15e:	f7f6 fd0b 	bl	8000b78 <__aeabi_d2iz>
 800a162:	4682      	mov	sl, r0
 800a164:	f7f6 f9ee 	bl	8000544 <__aeabi_i2d>
 800a168:	4642      	mov	r2, r8
 800a16a:	464b      	mov	r3, r9
 800a16c:	f7f6 fa54 	bl	8000618 <__aeabi_dmul>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4630      	mov	r0, r6
 800a176:	4639      	mov	r1, r7
 800a178:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a17c:	f7f6 f894 	bl	80002a8 <__aeabi_dsub>
 800a180:	f805 6b01 	strb.w	r6, [r5], #1
 800a184:	9e01      	ldr	r6, [sp, #4]
 800a186:	9f03      	ldr	r7, [sp, #12]
 800a188:	1bae      	subs	r6, r5, r6
 800a18a:	42b7      	cmp	r7, r6
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	d135      	bne.n	800a1fe <_dtoa_r+0x6e6>
 800a192:	f7f6 f88b 	bl	80002ac <__adddf3>
 800a196:	4642      	mov	r2, r8
 800a198:	464b      	mov	r3, r9
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	f7f6 fccb 	bl	8000b38 <__aeabi_dcmpgt>
 800a1a2:	b9d0      	cbnz	r0, 800a1da <_dtoa_r+0x6c2>
 800a1a4:	4642      	mov	r2, r8
 800a1a6:	464b      	mov	r3, r9
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	f7f6 fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1b0:	b110      	cbz	r0, 800a1b8 <_dtoa_r+0x6a0>
 800a1b2:	f01a 0f01 	tst.w	sl, #1
 800a1b6:	d110      	bne.n	800a1da <_dtoa_r+0x6c2>
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	ee18 1a10 	vmov	r1, s16
 800a1be:	f001 f899 	bl	800b2f4 <_Bfree>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	9800      	ldr	r0, [sp, #0]
 800a1c6:	702b      	strb	r3, [r5, #0]
 800a1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	6018      	str	r0, [r3, #0]
 800a1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f43f acf1 	beq.w	8009bb8 <_dtoa_r+0xa0>
 800a1d6:	601d      	str	r5, [r3, #0]
 800a1d8:	e4ee      	b.n	8009bb8 <_dtoa_r+0xa0>
 800a1da:	9f00      	ldr	r7, [sp, #0]
 800a1dc:	462b      	mov	r3, r5
 800a1de:	461d      	mov	r5, r3
 800a1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1e4:	2a39      	cmp	r2, #57	; 0x39
 800a1e6:	d106      	bne.n	800a1f6 <_dtoa_r+0x6de>
 800a1e8:	9a01      	ldr	r2, [sp, #4]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d1f7      	bne.n	800a1de <_dtoa_r+0x6c6>
 800a1ee:	9901      	ldr	r1, [sp, #4]
 800a1f0:	2230      	movs	r2, #48	; 0x30
 800a1f2:	3701      	adds	r7, #1
 800a1f4:	700a      	strb	r2, [r1, #0]
 800a1f6:	781a      	ldrb	r2, [r3, #0]
 800a1f8:	3201      	adds	r2, #1
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	e790      	b.n	800a120 <_dtoa_r+0x608>
 800a1fe:	4ba6      	ldr	r3, [pc, #664]	; (800a498 <_dtoa_r+0x980>)
 800a200:	2200      	movs	r2, #0
 800a202:	f7f6 fa09 	bl	8000618 <__aeabi_dmul>
 800a206:	2200      	movs	r2, #0
 800a208:	2300      	movs	r3, #0
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	f7f6 fc6b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a212:	2800      	cmp	r0, #0
 800a214:	d09d      	beq.n	800a152 <_dtoa_r+0x63a>
 800a216:	e7cf      	b.n	800a1b8 <_dtoa_r+0x6a0>
 800a218:	9a08      	ldr	r2, [sp, #32]
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	f000 80d7 	beq.w	800a3ce <_dtoa_r+0x8b6>
 800a220:	9a06      	ldr	r2, [sp, #24]
 800a222:	2a01      	cmp	r2, #1
 800a224:	f300 80ba 	bgt.w	800a39c <_dtoa_r+0x884>
 800a228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	f000 80b2 	beq.w	800a394 <_dtoa_r+0x87c>
 800a230:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a234:	9e07      	ldr	r6, [sp, #28]
 800a236:	9d04      	ldr	r5, [sp, #16]
 800a238:	9a04      	ldr	r2, [sp, #16]
 800a23a:	441a      	add	r2, r3
 800a23c:	9204      	str	r2, [sp, #16]
 800a23e:	9a05      	ldr	r2, [sp, #20]
 800a240:	2101      	movs	r1, #1
 800a242:	441a      	add	r2, r3
 800a244:	4620      	mov	r0, r4
 800a246:	9205      	str	r2, [sp, #20]
 800a248:	f001 f956 	bl	800b4f8 <__i2b>
 800a24c:	4607      	mov	r7, r0
 800a24e:	2d00      	cmp	r5, #0
 800a250:	dd0c      	ble.n	800a26c <_dtoa_r+0x754>
 800a252:	9b05      	ldr	r3, [sp, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	dd09      	ble.n	800a26c <_dtoa_r+0x754>
 800a258:	42ab      	cmp	r3, r5
 800a25a:	9a04      	ldr	r2, [sp, #16]
 800a25c:	bfa8      	it	ge
 800a25e:	462b      	movge	r3, r5
 800a260:	1ad2      	subs	r2, r2, r3
 800a262:	9204      	str	r2, [sp, #16]
 800a264:	9a05      	ldr	r2, [sp, #20]
 800a266:	1aed      	subs	r5, r5, r3
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	9b07      	ldr	r3, [sp, #28]
 800a26e:	b31b      	cbz	r3, 800a2b8 <_dtoa_r+0x7a0>
 800a270:	9b08      	ldr	r3, [sp, #32]
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 80af 	beq.w	800a3d6 <_dtoa_r+0x8be>
 800a278:	2e00      	cmp	r6, #0
 800a27a:	dd13      	ble.n	800a2a4 <_dtoa_r+0x78c>
 800a27c:	4639      	mov	r1, r7
 800a27e:	4632      	mov	r2, r6
 800a280:	4620      	mov	r0, r4
 800a282:	f001 f9f9 	bl	800b678 <__pow5mult>
 800a286:	ee18 2a10 	vmov	r2, s16
 800a28a:	4601      	mov	r1, r0
 800a28c:	4607      	mov	r7, r0
 800a28e:	4620      	mov	r0, r4
 800a290:	f001 f948 	bl	800b524 <__multiply>
 800a294:	ee18 1a10 	vmov	r1, s16
 800a298:	4680      	mov	r8, r0
 800a29a:	4620      	mov	r0, r4
 800a29c:	f001 f82a 	bl	800b2f4 <_Bfree>
 800a2a0:	ee08 8a10 	vmov	s16, r8
 800a2a4:	9b07      	ldr	r3, [sp, #28]
 800a2a6:	1b9a      	subs	r2, r3, r6
 800a2a8:	d006      	beq.n	800a2b8 <_dtoa_r+0x7a0>
 800a2aa:	ee18 1a10 	vmov	r1, s16
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f001 f9e2 	bl	800b678 <__pow5mult>
 800a2b4:	ee08 0a10 	vmov	s16, r0
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f001 f91c 	bl	800b4f8 <__i2b>
 800a2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	f340 8088 	ble.w	800a3da <_dtoa_r+0x8c2>
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f001 f9d2 	bl	800b678 <__pow5mult>
 800a2d4:	9b06      	ldr	r3, [sp, #24]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	4606      	mov	r6, r0
 800a2da:	f340 8081 	ble.w	800a3e0 <_dtoa_r+0x8c8>
 800a2de:	f04f 0800 	mov.w	r8, #0
 800a2e2:	6933      	ldr	r3, [r6, #16]
 800a2e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2e8:	6918      	ldr	r0, [r3, #16]
 800a2ea:	f001 f8b5 	bl	800b458 <__hi0bits>
 800a2ee:	f1c0 0020 	rsb	r0, r0, #32
 800a2f2:	9b05      	ldr	r3, [sp, #20]
 800a2f4:	4418      	add	r0, r3
 800a2f6:	f010 001f 	ands.w	r0, r0, #31
 800a2fa:	f000 8092 	beq.w	800a422 <_dtoa_r+0x90a>
 800a2fe:	f1c0 0320 	rsb	r3, r0, #32
 800a302:	2b04      	cmp	r3, #4
 800a304:	f340 808a 	ble.w	800a41c <_dtoa_r+0x904>
 800a308:	f1c0 001c 	rsb	r0, r0, #28
 800a30c:	9b04      	ldr	r3, [sp, #16]
 800a30e:	4403      	add	r3, r0
 800a310:	9304      	str	r3, [sp, #16]
 800a312:	9b05      	ldr	r3, [sp, #20]
 800a314:	4403      	add	r3, r0
 800a316:	4405      	add	r5, r0
 800a318:	9305      	str	r3, [sp, #20]
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	dd07      	ble.n	800a330 <_dtoa_r+0x818>
 800a320:	ee18 1a10 	vmov	r1, s16
 800a324:	461a      	mov	r2, r3
 800a326:	4620      	mov	r0, r4
 800a328:	f001 fa00 	bl	800b72c <__lshift>
 800a32c:	ee08 0a10 	vmov	s16, r0
 800a330:	9b05      	ldr	r3, [sp, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	dd05      	ble.n	800a342 <_dtoa_r+0x82a>
 800a336:	4631      	mov	r1, r6
 800a338:	461a      	mov	r2, r3
 800a33a:	4620      	mov	r0, r4
 800a33c:	f001 f9f6 	bl	800b72c <__lshift>
 800a340:	4606      	mov	r6, r0
 800a342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d06e      	beq.n	800a426 <_dtoa_r+0x90e>
 800a348:	ee18 0a10 	vmov	r0, s16
 800a34c:	4631      	mov	r1, r6
 800a34e:	f001 fa5d 	bl	800b80c <__mcmp>
 800a352:	2800      	cmp	r0, #0
 800a354:	da67      	bge.n	800a426 <_dtoa_r+0x90e>
 800a356:	9b00      	ldr	r3, [sp, #0]
 800a358:	3b01      	subs	r3, #1
 800a35a:	ee18 1a10 	vmov	r1, s16
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	220a      	movs	r2, #10
 800a362:	2300      	movs	r3, #0
 800a364:	4620      	mov	r0, r4
 800a366:	f000 ffe7 	bl	800b338 <__multadd>
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	ee08 0a10 	vmov	s16, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 81b1 	beq.w	800a6d8 <_dtoa_r+0xbc0>
 800a376:	2300      	movs	r3, #0
 800a378:	4639      	mov	r1, r7
 800a37a:	220a      	movs	r2, #10
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 ffdb 	bl	800b338 <__multadd>
 800a382:	9b02      	ldr	r3, [sp, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	4607      	mov	r7, r0
 800a388:	f300 808e 	bgt.w	800a4a8 <_dtoa_r+0x990>
 800a38c:	9b06      	ldr	r3, [sp, #24]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	dc51      	bgt.n	800a436 <_dtoa_r+0x91e>
 800a392:	e089      	b.n	800a4a8 <_dtoa_r+0x990>
 800a394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a39a:	e74b      	b.n	800a234 <_dtoa_r+0x71c>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	1e5e      	subs	r6, r3, #1
 800a3a0:	9b07      	ldr	r3, [sp, #28]
 800a3a2:	42b3      	cmp	r3, r6
 800a3a4:	bfbf      	itttt	lt
 800a3a6:	9b07      	ldrlt	r3, [sp, #28]
 800a3a8:	9607      	strlt	r6, [sp, #28]
 800a3aa:	1af2      	sublt	r2, r6, r3
 800a3ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a3ae:	bfb6      	itet	lt
 800a3b0:	189b      	addlt	r3, r3, r2
 800a3b2:	1b9e      	subge	r6, r3, r6
 800a3b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	bfb8      	it	lt
 800a3ba:	2600      	movlt	r6, #0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bfb7      	itett	lt
 800a3c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a3c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a3c8:	1a9d      	sublt	r5, r3, r2
 800a3ca:	2300      	movlt	r3, #0
 800a3cc:	e734      	b.n	800a238 <_dtoa_r+0x720>
 800a3ce:	9e07      	ldr	r6, [sp, #28]
 800a3d0:	9d04      	ldr	r5, [sp, #16]
 800a3d2:	9f08      	ldr	r7, [sp, #32]
 800a3d4:	e73b      	b.n	800a24e <_dtoa_r+0x736>
 800a3d6:	9a07      	ldr	r2, [sp, #28]
 800a3d8:	e767      	b.n	800a2aa <_dtoa_r+0x792>
 800a3da:	9b06      	ldr	r3, [sp, #24]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	dc18      	bgt.n	800a412 <_dtoa_r+0x8fa>
 800a3e0:	f1ba 0f00 	cmp.w	sl, #0
 800a3e4:	d115      	bne.n	800a412 <_dtoa_r+0x8fa>
 800a3e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3ea:	b993      	cbnz	r3, 800a412 <_dtoa_r+0x8fa>
 800a3ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3f0:	0d1b      	lsrs	r3, r3, #20
 800a3f2:	051b      	lsls	r3, r3, #20
 800a3f4:	b183      	cbz	r3, 800a418 <_dtoa_r+0x900>
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	9304      	str	r3, [sp, #16]
 800a3fc:	9b05      	ldr	r3, [sp, #20]
 800a3fe:	3301      	adds	r3, #1
 800a400:	9305      	str	r3, [sp, #20]
 800a402:	f04f 0801 	mov.w	r8, #1
 800a406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f47f af6a 	bne.w	800a2e2 <_dtoa_r+0x7ca>
 800a40e:	2001      	movs	r0, #1
 800a410:	e76f      	b.n	800a2f2 <_dtoa_r+0x7da>
 800a412:	f04f 0800 	mov.w	r8, #0
 800a416:	e7f6      	b.n	800a406 <_dtoa_r+0x8ee>
 800a418:	4698      	mov	r8, r3
 800a41a:	e7f4      	b.n	800a406 <_dtoa_r+0x8ee>
 800a41c:	f43f af7d 	beq.w	800a31a <_dtoa_r+0x802>
 800a420:	4618      	mov	r0, r3
 800a422:	301c      	adds	r0, #28
 800a424:	e772      	b.n	800a30c <_dtoa_r+0x7f4>
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dc37      	bgt.n	800a49c <_dtoa_r+0x984>
 800a42c:	9b06      	ldr	r3, [sp, #24]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	dd34      	ble.n	800a49c <_dtoa_r+0x984>
 800a432:	9b03      	ldr	r3, [sp, #12]
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	9b02      	ldr	r3, [sp, #8]
 800a438:	b96b      	cbnz	r3, 800a456 <_dtoa_r+0x93e>
 800a43a:	4631      	mov	r1, r6
 800a43c:	2205      	movs	r2, #5
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 ff7a 	bl	800b338 <__multadd>
 800a444:	4601      	mov	r1, r0
 800a446:	4606      	mov	r6, r0
 800a448:	ee18 0a10 	vmov	r0, s16
 800a44c:	f001 f9de 	bl	800b80c <__mcmp>
 800a450:	2800      	cmp	r0, #0
 800a452:	f73f adbb 	bgt.w	8009fcc <_dtoa_r+0x4b4>
 800a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a458:	9d01      	ldr	r5, [sp, #4]
 800a45a:	43db      	mvns	r3, r3
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	f04f 0800 	mov.w	r8, #0
 800a462:	4631      	mov	r1, r6
 800a464:	4620      	mov	r0, r4
 800a466:	f000 ff45 	bl	800b2f4 <_Bfree>
 800a46a:	2f00      	cmp	r7, #0
 800a46c:	f43f aea4 	beq.w	800a1b8 <_dtoa_r+0x6a0>
 800a470:	f1b8 0f00 	cmp.w	r8, #0
 800a474:	d005      	beq.n	800a482 <_dtoa_r+0x96a>
 800a476:	45b8      	cmp	r8, r7
 800a478:	d003      	beq.n	800a482 <_dtoa_r+0x96a>
 800a47a:	4641      	mov	r1, r8
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 ff39 	bl	800b2f4 <_Bfree>
 800a482:	4639      	mov	r1, r7
 800a484:	4620      	mov	r0, r4
 800a486:	f000 ff35 	bl	800b2f4 <_Bfree>
 800a48a:	e695      	b.n	800a1b8 <_dtoa_r+0x6a0>
 800a48c:	2600      	movs	r6, #0
 800a48e:	4637      	mov	r7, r6
 800a490:	e7e1      	b.n	800a456 <_dtoa_r+0x93e>
 800a492:	9700      	str	r7, [sp, #0]
 800a494:	4637      	mov	r7, r6
 800a496:	e599      	b.n	8009fcc <_dtoa_r+0x4b4>
 800a498:	40240000 	.word	0x40240000
 800a49c:	9b08      	ldr	r3, [sp, #32]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 80ca 	beq.w	800a638 <_dtoa_r+0xb20>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	9302      	str	r3, [sp, #8]
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	dd05      	ble.n	800a4b8 <_dtoa_r+0x9a0>
 800a4ac:	4639      	mov	r1, r7
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f001 f93b 	bl	800b72c <__lshift>
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	f1b8 0f00 	cmp.w	r8, #0
 800a4bc:	d05b      	beq.n	800a576 <_dtoa_r+0xa5e>
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fed7 	bl	800b274 <_Balloc>
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	b928      	cbnz	r0, 800a4d6 <_dtoa_r+0x9be>
 800a4ca:	4b87      	ldr	r3, [pc, #540]	; (800a6e8 <_dtoa_r+0xbd0>)
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4d2:	f7ff bb3b 	b.w	8009b4c <_dtoa_r+0x34>
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	3202      	adds	r2, #2
 800a4da:	0092      	lsls	r2, r2, #2
 800a4dc:	f107 010c 	add.w	r1, r7, #12
 800a4e0:	300c      	adds	r0, #12
 800a4e2:	f7fd fb45 	bl	8007b70 <memcpy>
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f001 f91e 	bl	800b72c <__lshift>
 800a4f0:	9b01      	ldr	r3, [sp, #4]
 800a4f2:	f103 0901 	add.w	r9, r3, #1
 800a4f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	9305      	str	r3, [sp, #20]
 800a4fe:	f00a 0301 	and.w	r3, sl, #1
 800a502:	46b8      	mov	r8, r7
 800a504:	9304      	str	r3, [sp, #16]
 800a506:	4607      	mov	r7, r0
 800a508:	4631      	mov	r1, r6
 800a50a:	ee18 0a10 	vmov	r0, s16
 800a50e:	f7ff fa75 	bl	80099fc <quorem>
 800a512:	4641      	mov	r1, r8
 800a514:	9002      	str	r0, [sp, #8]
 800a516:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a51a:	ee18 0a10 	vmov	r0, s16
 800a51e:	f001 f975 	bl	800b80c <__mcmp>
 800a522:	463a      	mov	r2, r7
 800a524:	9003      	str	r0, [sp, #12]
 800a526:	4631      	mov	r1, r6
 800a528:	4620      	mov	r0, r4
 800a52a:	f001 f98b 	bl	800b844 <__mdiff>
 800a52e:	68c2      	ldr	r2, [r0, #12]
 800a530:	f109 3bff 	add.w	fp, r9, #4294967295
 800a534:	4605      	mov	r5, r0
 800a536:	bb02      	cbnz	r2, 800a57a <_dtoa_r+0xa62>
 800a538:	4601      	mov	r1, r0
 800a53a:	ee18 0a10 	vmov	r0, s16
 800a53e:	f001 f965 	bl	800b80c <__mcmp>
 800a542:	4602      	mov	r2, r0
 800a544:	4629      	mov	r1, r5
 800a546:	4620      	mov	r0, r4
 800a548:	9207      	str	r2, [sp, #28]
 800a54a:	f000 fed3 	bl	800b2f4 <_Bfree>
 800a54e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a552:	ea43 0102 	orr.w	r1, r3, r2
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	430b      	orrs	r3, r1
 800a55a:	464d      	mov	r5, r9
 800a55c:	d10f      	bne.n	800a57e <_dtoa_r+0xa66>
 800a55e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a562:	d02a      	beq.n	800a5ba <_dtoa_r+0xaa2>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	dd02      	ble.n	800a570 <_dtoa_r+0xa58>
 800a56a:	9b02      	ldr	r3, [sp, #8]
 800a56c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a570:	f88b a000 	strb.w	sl, [fp]
 800a574:	e775      	b.n	800a462 <_dtoa_r+0x94a>
 800a576:	4638      	mov	r0, r7
 800a578:	e7ba      	b.n	800a4f0 <_dtoa_r+0x9d8>
 800a57a:	2201      	movs	r2, #1
 800a57c:	e7e2      	b.n	800a544 <_dtoa_r+0xa2c>
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	db04      	blt.n	800a58e <_dtoa_r+0xa76>
 800a584:	9906      	ldr	r1, [sp, #24]
 800a586:	430b      	orrs	r3, r1
 800a588:	9904      	ldr	r1, [sp, #16]
 800a58a:	430b      	orrs	r3, r1
 800a58c:	d122      	bne.n	800a5d4 <_dtoa_r+0xabc>
 800a58e:	2a00      	cmp	r2, #0
 800a590:	ddee      	ble.n	800a570 <_dtoa_r+0xa58>
 800a592:	ee18 1a10 	vmov	r1, s16
 800a596:	2201      	movs	r2, #1
 800a598:	4620      	mov	r0, r4
 800a59a:	f001 f8c7 	bl	800b72c <__lshift>
 800a59e:	4631      	mov	r1, r6
 800a5a0:	ee08 0a10 	vmov	s16, r0
 800a5a4:	f001 f932 	bl	800b80c <__mcmp>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	dc03      	bgt.n	800a5b4 <_dtoa_r+0xa9c>
 800a5ac:	d1e0      	bne.n	800a570 <_dtoa_r+0xa58>
 800a5ae:	f01a 0f01 	tst.w	sl, #1
 800a5b2:	d0dd      	beq.n	800a570 <_dtoa_r+0xa58>
 800a5b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5b8:	d1d7      	bne.n	800a56a <_dtoa_r+0xa52>
 800a5ba:	2339      	movs	r3, #57	; 0x39
 800a5bc:	f88b 3000 	strb.w	r3, [fp]
 800a5c0:	462b      	mov	r3, r5
 800a5c2:	461d      	mov	r5, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5ca:	2a39      	cmp	r2, #57	; 0x39
 800a5cc:	d071      	beq.n	800a6b2 <_dtoa_r+0xb9a>
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	701a      	strb	r2, [r3, #0]
 800a5d2:	e746      	b.n	800a462 <_dtoa_r+0x94a>
 800a5d4:	2a00      	cmp	r2, #0
 800a5d6:	dd07      	ble.n	800a5e8 <_dtoa_r+0xad0>
 800a5d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5dc:	d0ed      	beq.n	800a5ba <_dtoa_r+0xaa2>
 800a5de:	f10a 0301 	add.w	r3, sl, #1
 800a5e2:	f88b 3000 	strb.w	r3, [fp]
 800a5e6:	e73c      	b.n	800a462 <_dtoa_r+0x94a>
 800a5e8:	9b05      	ldr	r3, [sp, #20]
 800a5ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a5ee:	4599      	cmp	r9, r3
 800a5f0:	d047      	beq.n	800a682 <_dtoa_r+0xb6a>
 800a5f2:	ee18 1a10 	vmov	r1, s16
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	220a      	movs	r2, #10
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 fe9c 	bl	800b338 <__multadd>
 800a600:	45b8      	cmp	r8, r7
 800a602:	ee08 0a10 	vmov	s16, r0
 800a606:	f04f 0300 	mov.w	r3, #0
 800a60a:	f04f 020a 	mov.w	r2, #10
 800a60e:	4641      	mov	r1, r8
 800a610:	4620      	mov	r0, r4
 800a612:	d106      	bne.n	800a622 <_dtoa_r+0xb0a>
 800a614:	f000 fe90 	bl	800b338 <__multadd>
 800a618:	4680      	mov	r8, r0
 800a61a:	4607      	mov	r7, r0
 800a61c:	f109 0901 	add.w	r9, r9, #1
 800a620:	e772      	b.n	800a508 <_dtoa_r+0x9f0>
 800a622:	f000 fe89 	bl	800b338 <__multadd>
 800a626:	4639      	mov	r1, r7
 800a628:	4680      	mov	r8, r0
 800a62a:	2300      	movs	r3, #0
 800a62c:	220a      	movs	r2, #10
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 fe82 	bl	800b338 <__multadd>
 800a634:	4607      	mov	r7, r0
 800a636:	e7f1      	b.n	800a61c <_dtoa_r+0xb04>
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	9302      	str	r3, [sp, #8]
 800a63c:	9d01      	ldr	r5, [sp, #4]
 800a63e:	ee18 0a10 	vmov	r0, s16
 800a642:	4631      	mov	r1, r6
 800a644:	f7ff f9da 	bl	80099fc <quorem>
 800a648:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a64c:	9b01      	ldr	r3, [sp, #4]
 800a64e:	f805 ab01 	strb.w	sl, [r5], #1
 800a652:	1aea      	subs	r2, r5, r3
 800a654:	9b02      	ldr	r3, [sp, #8]
 800a656:	4293      	cmp	r3, r2
 800a658:	dd09      	ble.n	800a66e <_dtoa_r+0xb56>
 800a65a:	ee18 1a10 	vmov	r1, s16
 800a65e:	2300      	movs	r3, #0
 800a660:	220a      	movs	r2, #10
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fe68 	bl	800b338 <__multadd>
 800a668:	ee08 0a10 	vmov	s16, r0
 800a66c:	e7e7      	b.n	800a63e <_dtoa_r+0xb26>
 800a66e:	9b02      	ldr	r3, [sp, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	bfc8      	it	gt
 800a674:	461d      	movgt	r5, r3
 800a676:	9b01      	ldr	r3, [sp, #4]
 800a678:	bfd8      	it	le
 800a67a:	2501      	movle	r5, #1
 800a67c:	441d      	add	r5, r3
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	ee18 1a10 	vmov	r1, s16
 800a686:	2201      	movs	r2, #1
 800a688:	4620      	mov	r0, r4
 800a68a:	f001 f84f 	bl	800b72c <__lshift>
 800a68e:	4631      	mov	r1, r6
 800a690:	ee08 0a10 	vmov	s16, r0
 800a694:	f001 f8ba 	bl	800b80c <__mcmp>
 800a698:	2800      	cmp	r0, #0
 800a69a:	dc91      	bgt.n	800a5c0 <_dtoa_r+0xaa8>
 800a69c:	d102      	bne.n	800a6a4 <_dtoa_r+0xb8c>
 800a69e:	f01a 0f01 	tst.w	sl, #1
 800a6a2:	d18d      	bne.n	800a5c0 <_dtoa_r+0xaa8>
 800a6a4:	462b      	mov	r3, r5
 800a6a6:	461d      	mov	r5, r3
 800a6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6ac:	2a30      	cmp	r2, #48	; 0x30
 800a6ae:	d0fa      	beq.n	800a6a6 <_dtoa_r+0xb8e>
 800a6b0:	e6d7      	b.n	800a462 <_dtoa_r+0x94a>
 800a6b2:	9a01      	ldr	r2, [sp, #4]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d184      	bne.n	800a5c2 <_dtoa_r+0xaaa>
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	2331      	movs	r3, #49	; 0x31
 800a6c0:	7013      	strb	r3, [r2, #0]
 800a6c2:	e6ce      	b.n	800a462 <_dtoa_r+0x94a>
 800a6c4:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <_dtoa_r+0xbd4>)
 800a6c6:	f7ff ba95 	b.w	8009bf4 <_dtoa_r+0xdc>
 800a6ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f47f aa6e 	bne.w	8009bae <_dtoa_r+0x96>
 800a6d2:	4b07      	ldr	r3, [pc, #28]	; (800a6f0 <_dtoa_r+0xbd8>)
 800a6d4:	f7ff ba8e 	b.w	8009bf4 <_dtoa_r+0xdc>
 800a6d8:	9b02      	ldr	r3, [sp, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dcae      	bgt.n	800a63c <_dtoa_r+0xb24>
 800a6de:	9b06      	ldr	r3, [sp, #24]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	f73f aea8 	bgt.w	800a436 <_dtoa_r+0x91e>
 800a6e6:	e7a9      	b.n	800a63c <_dtoa_r+0xb24>
 800a6e8:	0800d1c8 	.word	0x0800d1c8
 800a6ec:	0800d429 	.word	0x0800d429
 800a6f0:	0800d149 	.word	0x0800d149

0800a6f4 <__sflush_r>:
 800a6f4:	898a      	ldrh	r2, [r1, #12]
 800a6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	0710      	lsls	r0, r2, #28
 800a6fe:	460c      	mov	r4, r1
 800a700:	d458      	bmi.n	800a7b4 <__sflush_r+0xc0>
 800a702:	684b      	ldr	r3, [r1, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	dc05      	bgt.n	800a714 <__sflush_r+0x20>
 800a708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	dc02      	bgt.n	800a714 <__sflush_r+0x20>
 800a70e:	2000      	movs	r0, #0
 800a710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a716:	2e00      	cmp	r6, #0
 800a718:	d0f9      	beq.n	800a70e <__sflush_r+0x1a>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a720:	682f      	ldr	r7, [r5, #0]
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	d032      	beq.n	800a78c <__sflush_r+0x98>
 800a726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	075a      	lsls	r2, r3, #29
 800a72c:	d505      	bpl.n	800a73a <__sflush_r+0x46>
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	1ac0      	subs	r0, r0, r3
 800a732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a734:	b10b      	cbz	r3, 800a73a <__sflush_r+0x46>
 800a736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a738:	1ac0      	subs	r0, r0, r3
 800a73a:	2300      	movs	r3, #0
 800a73c:	4602      	mov	r2, r0
 800a73e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a740:	6a21      	ldr	r1, [r4, #32]
 800a742:	4628      	mov	r0, r5
 800a744:	47b0      	blx	r6
 800a746:	1c43      	adds	r3, r0, #1
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	d106      	bne.n	800a75a <__sflush_r+0x66>
 800a74c:	6829      	ldr	r1, [r5, #0]
 800a74e:	291d      	cmp	r1, #29
 800a750:	d82c      	bhi.n	800a7ac <__sflush_r+0xb8>
 800a752:	4a2a      	ldr	r2, [pc, #168]	; (800a7fc <__sflush_r+0x108>)
 800a754:	40ca      	lsrs	r2, r1
 800a756:	07d6      	lsls	r6, r2, #31
 800a758:	d528      	bpl.n	800a7ac <__sflush_r+0xb8>
 800a75a:	2200      	movs	r2, #0
 800a75c:	6062      	str	r2, [r4, #4]
 800a75e:	04d9      	lsls	r1, r3, #19
 800a760:	6922      	ldr	r2, [r4, #16]
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	d504      	bpl.n	800a770 <__sflush_r+0x7c>
 800a766:	1c42      	adds	r2, r0, #1
 800a768:	d101      	bne.n	800a76e <__sflush_r+0x7a>
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	b903      	cbnz	r3, 800a770 <__sflush_r+0x7c>
 800a76e:	6560      	str	r0, [r4, #84]	; 0x54
 800a770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a772:	602f      	str	r7, [r5, #0]
 800a774:	2900      	cmp	r1, #0
 800a776:	d0ca      	beq.n	800a70e <__sflush_r+0x1a>
 800a778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a77c:	4299      	cmp	r1, r3
 800a77e:	d002      	beq.n	800a786 <__sflush_r+0x92>
 800a780:	4628      	mov	r0, r5
 800a782:	f001 fa4f 	bl	800bc24 <_free_r>
 800a786:	2000      	movs	r0, #0
 800a788:	6360      	str	r0, [r4, #52]	; 0x34
 800a78a:	e7c1      	b.n	800a710 <__sflush_r+0x1c>
 800a78c:	6a21      	ldr	r1, [r4, #32]
 800a78e:	2301      	movs	r3, #1
 800a790:	4628      	mov	r0, r5
 800a792:	47b0      	blx	r6
 800a794:	1c41      	adds	r1, r0, #1
 800a796:	d1c7      	bne.n	800a728 <__sflush_r+0x34>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0c4      	beq.n	800a728 <__sflush_r+0x34>
 800a79e:	2b1d      	cmp	r3, #29
 800a7a0:	d001      	beq.n	800a7a6 <__sflush_r+0xb2>
 800a7a2:	2b16      	cmp	r3, #22
 800a7a4:	d101      	bne.n	800a7aa <__sflush_r+0xb6>
 800a7a6:	602f      	str	r7, [r5, #0]
 800a7a8:	e7b1      	b.n	800a70e <__sflush_r+0x1a>
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	e7ad      	b.n	800a710 <__sflush_r+0x1c>
 800a7b4:	690f      	ldr	r7, [r1, #16]
 800a7b6:	2f00      	cmp	r7, #0
 800a7b8:	d0a9      	beq.n	800a70e <__sflush_r+0x1a>
 800a7ba:	0793      	lsls	r3, r2, #30
 800a7bc:	680e      	ldr	r6, [r1, #0]
 800a7be:	bf08      	it	eq
 800a7c0:	694b      	ldreq	r3, [r1, #20]
 800a7c2:	600f      	str	r7, [r1, #0]
 800a7c4:	bf18      	it	ne
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	eba6 0807 	sub.w	r8, r6, r7
 800a7cc:	608b      	str	r3, [r1, #8]
 800a7ce:	f1b8 0f00 	cmp.w	r8, #0
 800a7d2:	dd9c      	ble.n	800a70e <__sflush_r+0x1a>
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7d8:	4643      	mov	r3, r8
 800a7da:	463a      	mov	r2, r7
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b0      	blx	r6
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	dc06      	bgt.n	800a7f2 <__sflush_r+0xfe>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ea:	81a3      	strh	r3, [r4, #12]
 800a7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f0:	e78e      	b.n	800a710 <__sflush_r+0x1c>
 800a7f2:	4407      	add	r7, r0
 800a7f4:	eba8 0800 	sub.w	r8, r8, r0
 800a7f8:	e7e9      	b.n	800a7ce <__sflush_r+0xda>
 800a7fa:	bf00      	nop
 800a7fc:	20400001 	.word	0x20400001

0800a800 <_fflush_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	690b      	ldr	r3, [r1, #16]
 800a804:	4605      	mov	r5, r0
 800a806:	460c      	mov	r4, r1
 800a808:	b913      	cbnz	r3, 800a810 <_fflush_r+0x10>
 800a80a:	2500      	movs	r5, #0
 800a80c:	4628      	mov	r0, r5
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	b118      	cbz	r0, 800a81a <_fflush_r+0x1a>
 800a812:	6983      	ldr	r3, [r0, #24]
 800a814:	b90b      	cbnz	r3, 800a81a <_fflush_r+0x1a>
 800a816:	f000 f887 	bl	800a928 <__sinit>
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <_fflush_r+0x6c>)
 800a81c:	429c      	cmp	r4, r3
 800a81e:	d11b      	bne.n	800a858 <_fflush_r+0x58>
 800a820:	686c      	ldr	r4, [r5, #4]
 800a822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d0ef      	beq.n	800a80a <_fflush_r+0xa>
 800a82a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a82c:	07d0      	lsls	r0, r2, #31
 800a82e:	d404      	bmi.n	800a83a <_fflush_r+0x3a>
 800a830:	0599      	lsls	r1, r3, #22
 800a832:	d402      	bmi.n	800a83a <_fflush_r+0x3a>
 800a834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a836:	f000 fc88 	bl	800b14a <__retarget_lock_acquire_recursive>
 800a83a:	4628      	mov	r0, r5
 800a83c:	4621      	mov	r1, r4
 800a83e:	f7ff ff59 	bl	800a6f4 <__sflush_r>
 800a842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a844:	07da      	lsls	r2, r3, #31
 800a846:	4605      	mov	r5, r0
 800a848:	d4e0      	bmi.n	800a80c <_fflush_r+0xc>
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	059b      	lsls	r3, r3, #22
 800a84e:	d4dd      	bmi.n	800a80c <_fflush_r+0xc>
 800a850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a852:	f000 fc7b 	bl	800b14c <__retarget_lock_release_recursive>
 800a856:	e7d9      	b.n	800a80c <_fflush_r+0xc>
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <_fflush_r+0x70>)
 800a85a:	429c      	cmp	r4, r3
 800a85c:	d101      	bne.n	800a862 <_fflush_r+0x62>
 800a85e:	68ac      	ldr	r4, [r5, #8]
 800a860:	e7df      	b.n	800a822 <_fflush_r+0x22>
 800a862:	4b04      	ldr	r3, [pc, #16]	; (800a874 <_fflush_r+0x74>)
 800a864:	429c      	cmp	r4, r3
 800a866:	bf08      	it	eq
 800a868:	68ec      	ldreq	r4, [r5, #12]
 800a86a:	e7da      	b.n	800a822 <_fflush_r+0x22>
 800a86c:	0800d1fc 	.word	0x0800d1fc
 800a870:	0800d21c 	.word	0x0800d21c
 800a874:	0800d1dc 	.word	0x0800d1dc

0800a878 <std>:
 800a878:	2300      	movs	r3, #0
 800a87a:	b510      	push	{r4, lr}
 800a87c:	4604      	mov	r4, r0
 800a87e:	e9c0 3300 	strd	r3, r3, [r0]
 800a882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a886:	6083      	str	r3, [r0, #8]
 800a888:	8181      	strh	r1, [r0, #12]
 800a88a:	6643      	str	r3, [r0, #100]	; 0x64
 800a88c:	81c2      	strh	r2, [r0, #14]
 800a88e:	6183      	str	r3, [r0, #24]
 800a890:	4619      	mov	r1, r3
 800a892:	2208      	movs	r2, #8
 800a894:	305c      	adds	r0, #92	; 0x5c
 800a896:	f7fd f979 	bl	8007b8c <memset>
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <std+0x38>)
 800a89c:	6263      	str	r3, [r4, #36]	; 0x24
 800a89e:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <std+0x3c>)
 800a8a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8a2:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <std+0x40>)
 800a8a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8a6:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <std+0x44>)
 800a8a8:	6224      	str	r4, [r4, #32]
 800a8aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a8ac:	bd10      	pop	{r4, pc}
 800a8ae:	bf00      	nop
 800a8b0:	08008a51 	.word	0x08008a51
 800a8b4:	08008a77 	.word	0x08008a77
 800a8b8:	08008aaf 	.word	0x08008aaf
 800a8bc:	08008ad3 	.word	0x08008ad3

0800a8c0 <_cleanup_r>:
 800a8c0:	4901      	ldr	r1, [pc, #4]	; (800a8c8 <_cleanup_r+0x8>)
 800a8c2:	f000 b8af 	b.w	800aa24 <_fwalk_reent>
 800a8c6:	bf00      	nop
 800a8c8:	0800a801 	.word	0x0800a801

0800a8cc <__sfmoreglue>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	2268      	movs	r2, #104	; 0x68
 800a8d0:	1e4d      	subs	r5, r1, #1
 800a8d2:	4355      	muls	r5, r2
 800a8d4:	460e      	mov	r6, r1
 800a8d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8da:	f001 fa0f 	bl	800bcfc <_malloc_r>
 800a8de:	4604      	mov	r4, r0
 800a8e0:	b140      	cbz	r0, 800a8f4 <__sfmoreglue+0x28>
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a8e8:	300c      	adds	r0, #12
 800a8ea:	60a0      	str	r0, [r4, #8]
 800a8ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8f0:	f7fd f94c 	bl	8007b8c <memset>
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}

0800a8f8 <__sfp_lock_acquire>:
 800a8f8:	4801      	ldr	r0, [pc, #4]	; (800a900 <__sfp_lock_acquire+0x8>)
 800a8fa:	f000 bc26 	b.w	800b14a <__retarget_lock_acquire_recursive>
 800a8fe:	bf00      	nop
 800a900:	200007f9 	.word	0x200007f9

0800a904 <__sfp_lock_release>:
 800a904:	4801      	ldr	r0, [pc, #4]	; (800a90c <__sfp_lock_release+0x8>)
 800a906:	f000 bc21 	b.w	800b14c <__retarget_lock_release_recursive>
 800a90a:	bf00      	nop
 800a90c:	200007f9 	.word	0x200007f9

0800a910 <__sinit_lock_acquire>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__sinit_lock_acquire+0x8>)
 800a912:	f000 bc1a 	b.w	800b14a <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	200007fa 	.word	0x200007fa

0800a91c <__sinit_lock_release>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__sinit_lock_release+0x8>)
 800a91e:	f000 bc15 	b.w	800b14c <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	200007fa 	.word	0x200007fa

0800a928 <__sinit>:
 800a928:	b510      	push	{r4, lr}
 800a92a:	4604      	mov	r4, r0
 800a92c:	f7ff fff0 	bl	800a910 <__sinit_lock_acquire>
 800a930:	69a3      	ldr	r3, [r4, #24]
 800a932:	b11b      	cbz	r3, 800a93c <__sinit+0x14>
 800a934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a938:	f7ff bff0 	b.w	800a91c <__sinit_lock_release>
 800a93c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a940:	6523      	str	r3, [r4, #80]	; 0x50
 800a942:	4b13      	ldr	r3, [pc, #76]	; (800a990 <__sinit+0x68>)
 800a944:	4a13      	ldr	r2, [pc, #76]	; (800a994 <__sinit+0x6c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	62a2      	str	r2, [r4, #40]	; 0x28
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	bf04      	itt	eq
 800a94e:	2301      	moveq	r3, #1
 800a950:	61a3      	streq	r3, [r4, #24]
 800a952:	4620      	mov	r0, r4
 800a954:	f000 f820 	bl	800a998 <__sfp>
 800a958:	6060      	str	r0, [r4, #4]
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 f81c 	bl	800a998 <__sfp>
 800a960:	60a0      	str	r0, [r4, #8]
 800a962:	4620      	mov	r0, r4
 800a964:	f000 f818 	bl	800a998 <__sfp>
 800a968:	2200      	movs	r2, #0
 800a96a:	60e0      	str	r0, [r4, #12]
 800a96c:	2104      	movs	r1, #4
 800a96e:	6860      	ldr	r0, [r4, #4]
 800a970:	f7ff ff82 	bl	800a878 <std>
 800a974:	68a0      	ldr	r0, [r4, #8]
 800a976:	2201      	movs	r2, #1
 800a978:	2109      	movs	r1, #9
 800a97a:	f7ff ff7d 	bl	800a878 <std>
 800a97e:	68e0      	ldr	r0, [r4, #12]
 800a980:	2202      	movs	r2, #2
 800a982:	2112      	movs	r1, #18
 800a984:	f7ff ff78 	bl	800a878 <std>
 800a988:	2301      	movs	r3, #1
 800a98a:	61a3      	str	r3, [r4, #24]
 800a98c:	e7d2      	b.n	800a934 <__sinit+0xc>
 800a98e:	bf00      	nop
 800a990:	0800cfb8 	.word	0x0800cfb8
 800a994:	0800a8c1 	.word	0x0800a8c1

0800a998 <__sfp>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	4607      	mov	r7, r0
 800a99c:	f7ff ffac 	bl	800a8f8 <__sfp_lock_acquire>
 800a9a0:	4b1e      	ldr	r3, [pc, #120]	; (800aa1c <__sfp+0x84>)
 800a9a2:	681e      	ldr	r6, [r3, #0]
 800a9a4:	69b3      	ldr	r3, [r6, #24]
 800a9a6:	b913      	cbnz	r3, 800a9ae <__sfp+0x16>
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7ff ffbd 	bl	800a928 <__sinit>
 800a9ae:	3648      	adds	r6, #72	; 0x48
 800a9b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	d503      	bpl.n	800a9c0 <__sfp+0x28>
 800a9b8:	6833      	ldr	r3, [r6, #0]
 800a9ba:	b30b      	cbz	r3, 800aa00 <__sfp+0x68>
 800a9bc:	6836      	ldr	r6, [r6, #0]
 800a9be:	e7f7      	b.n	800a9b0 <__sfp+0x18>
 800a9c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9c4:	b9d5      	cbnz	r5, 800a9fc <__sfp+0x64>
 800a9c6:	4b16      	ldr	r3, [pc, #88]	; (800aa20 <__sfp+0x88>)
 800a9c8:	60e3      	str	r3, [r4, #12]
 800a9ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a9d0:	f000 fbba 	bl	800b148 <__retarget_lock_init_recursive>
 800a9d4:	f7ff ff96 	bl	800a904 <__sfp_lock_release>
 800a9d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9e0:	6025      	str	r5, [r4, #0]
 800a9e2:	61a5      	str	r5, [r4, #24]
 800a9e4:	2208      	movs	r2, #8
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9ec:	f7fd f8ce 	bl	8007b8c <memset>
 800a9f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fc:	3468      	adds	r4, #104	; 0x68
 800a9fe:	e7d9      	b.n	800a9b4 <__sfp+0x1c>
 800aa00:	2104      	movs	r1, #4
 800aa02:	4638      	mov	r0, r7
 800aa04:	f7ff ff62 	bl	800a8cc <__sfmoreglue>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	6030      	str	r0, [r6, #0]
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d1d5      	bne.n	800a9bc <__sfp+0x24>
 800aa10:	f7ff ff78 	bl	800a904 <__sfp_lock_release>
 800aa14:	230c      	movs	r3, #12
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	e7ee      	b.n	800a9f8 <__sfp+0x60>
 800aa1a:	bf00      	nop
 800aa1c:	0800cfb8 	.word	0x0800cfb8
 800aa20:	ffff0001 	.word	0xffff0001

0800aa24 <_fwalk_reent>:
 800aa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa28:	4606      	mov	r6, r0
 800aa2a:	4688      	mov	r8, r1
 800aa2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa30:	2700      	movs	r7, #0
 800aa32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa36:	f1b9 0901 	subs.w	r9, r9, #1
 800aa3a:	d505      	bpl.n	800aa48 <_fwalk_reent+0x24>
 800aa3c:	6824      	ldr	r4, [r4, #0]
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	d1f7      	bne.n	800aa32 <_fwalk_reent+0xe>
 800aa42:	4638      	mov	r0, r7
 800aa44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa48:	89ab      	ldrh	r3, [r5, #12]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d907      	bls.n	800aa5e <_fwalk_reent+0x3a>
 800aa4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa52:	3301      	adds	r3, #1
 800aa54:	d003      	beq.n	800aa5e <_fwalk_reent+0x3a>
 800aa56:	4629      	mov	r1, r5
 800aa58:	4630      	mov	r0, r6
 800aa5a:	47c0      	blx	r8
 800aa5c:	4307      	orrs	r7, r0
 800aa5e:	3568      	adds	r5, #104	; 0x68
 800aa60:	e7e9      	b.n	800aa36 <_fwalk_reent+0x12>

0800aa62 <rshift>:
 800aa62:	6903      	ldr	r3, [r0, #16]
 800aa64:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa6c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa70:	f100 0414 	add.w	r4, r0, #20
 800aa74:	dd45      	ble.n	800ab02 <rshift+0xa0>
 800aa76:	f011 011f 	ands.w	r1, r1, #31
 800aa7a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa7e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa82:	d10c      	bne.n	800aa9e <rshift+0x3c>
 800aa84:	f100 0710 	add.w	r7, r0, #16
 800aa88:	4629      	mov	r1, r5
 800aa8a:	42b1      	cmp	r1, r6
 800aa8c:	d334      	bcc.n	800aaf8 <rshift+0x96>
 800aa8e:	1a9b      	subs	r3, r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	1eea      	subs	r2, r5, #3
 800aa94:	4296      	cmp	r6, r2
 800aa96:	bf38      	it	cc
 800aa98:	2300      	movcc	r3, #0
 800aa9a:	4423      	add	r3, r4
 800aa9c:	e015      	b.n	800aaca <rshift+0x68>
 800aa9e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aaa2:	f1c1 0820 	rsb	r8, r1, #32
 800aaa6:	40cf      	lsrs	r7, r1
 800aaa8:	f105 0e04 	add.w	lr, r5, #4
 800aaac:	46a1      	mov	r9, r4
 800aaae:	4576      	cmp	r6, lr
 800aab0:	46f4      	mov	ip, lr
 800aab2:	d815      	bhi.n	800aae0 <rshift+0x7e>
 800aab4:	1a9a      	subs	r2, r3, r2
 800aab6:	0092      	lsls	r2, r2, #2
 800aab8:	3a04      	subs	r2, #4
 800aaba:	3501      	adds	r5, #1
 800aabc:	42ae      	cmp	r6, r5
 800aabe:	bf38      	it	cc
 800aac0:	2200      	movcc	r2, #0
 800aac2:	18a3      	adds	r3, r4, r2
 800aac4:	50a7      	str	r7, [r4, r2]
 800aac6:	b107      	cbz	r7, 800aaca <rshift+0x68>
 800aac8:	3304      	adds	r3, #4
 800aaca:	1b1a      	subs	r2, r3, r4
 800aacc:	42a3      	cmp	r3, r4
 800aace:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aad2:	bf08      	it	eq
 800aad4:	2300      	moveq	r3, #0
 800aad6:	6102      	str	r2, [r0, #16]
 800aad8:	bf08      	it	eq
 800aada:	6143      	streq	r3, [r0, #20]
 800aadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae0:	f8dc c000 	ldr.w	ip, [ip]
 800aae4:	fa0c fc08 	lsl.w	ip, ip, r8
 800aae8:	ea4c 0707 	orr.w	r7, ip, r7
 800aaec:	f849 7b04 	str.w	r7, [r9], #4
 800aaf0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aaf4:	40cf      	lsrs	r7, r1
 800aaf6:	e7da      	b.n	800aaae <rshift+0x4c>
 800aaf8:	f851 cb04 	ldr.w	ip, [r1], #4
 800aafc:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab00:	e7c3      	b.n	800aa8a <rshift+0x28>
 800ab02:	4623      	mov	r3, r4
 800ab04:	e7e1      	b.n	800aaca <rshift+0x68>

0800ab06 <__hexdig_fun>:
 800ab06:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab0a:	2b09      	cmp	r3, #9
 800ab0c:	d802      	bhi.n	800ab14 <__hexdig_fun+0xe>
 800ab0e:	3820      	subs	r0, #32
 800ab10:	b2c0      	uxtb	r0, r0
 800ab12:	4770      	bx	lr
 800ab14:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab18:	2b05      	cmp	r3, #5
 800ab1a:	d801      	bhi.n	800ab20 <__hexdig_fun+0x1a>
 800ab1c:	3847      	subs	r0, #71	; 0x47
 800ab1e:	e7f7      	b.n	800ab10 <__hexdig_fun+0xa>
 800ab20:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab24:	2b05      	cmp	r3, #5
 800ab26:	d801      	bhi.n	800ab2c <__hexdig_fun+0x26>
 800ab28:	3827      	subs	r0, #39	; 0x27
 800ab2a:	e7f1      	b.n	800ab10 <__hexdig_fun+0xa>
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	4770      	bx	lr

0800ab30 <__gethex>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	ed2d 8b02 	vpush	{d8}
 800ab38:	b089      	sub	sp, #36	; 0x24
 800ab3a:	ee08 0a10 	vmov	s16, r0
 800ab3e:	9304      	str	r3, [sp, #16]
 800ab40:	4bb4      	ldr	r3, [pc, #720]	; (800ae14 <__gethex+0x2e4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	4618      	mov	r0, r3
 800ab48:	468b      	mov	fp, r1
 800ab4a:	4690      	mov	r8, r2
 800ab4c:	f7f5 fb4a 	bl	80001e4 <strlen>
 800ab50:	9b01      	ldr	r3, [sp, #4]
 800ab52:	f8db 2000 	ldr.w	r2, [fp]
 800ab56:	4403      	add	r3, r0
 800ab58:	4682      	mov	sl, r0
 800ab5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab5e:	9305      	str	r3, [sp, #20]
 800ab60:	1c93      	adds	r3, r2, #2
 800ab62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab6a:	32fe      	adds	r2, #254	; 0xfe
 800ab6c:	18d1      	adds	r1, r2, r3
 800ab6e:	461f      	mov	r7, r3
 800ab70:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab74:	9100      	str	r1, [sp, #0]
 800ab76:	2830      	cmp	r0, #48	; 0x30
 800ab78:	d0f8      	beq.n	800ab6c <__gethex+0x3c>
 800ab7a:	f7ff ffc4 	bl	800ab06 <__hexdig_fun>
 800ab7e:	4604      	mov	r4, r0
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d13a      	bne.n	800abfa <__gethex+0xca>
 800ab84:	9901      	ldr	r1, [sp, #4]
 800ab86:	4652      	mov	r2, sl
 800ab88:	4638      	mov	r0, r7
 800ab8a:	f001 ff69 	bl	800ca60 <strncmp>
 800ab8e:	4605      	mov	r5, r0
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d168      	bne.n	800ac66 <__gethex+0x136>
 800ab94:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ab98:	eb07 060a 	add.w	r6, r7, sl
 800ab9c:	f7ff ffb3 	bl	800ab06 <__hexdig_fun>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d062      	beq.n	800ac6a <__gethex+0x13a>
 800aba4:	4633      	mov	r3, r6
 800aba6:	7818      	ldrb	r0, [r3, #0]
 800aba8:	2830      	cmp	r0, #48	; 0x30
 800abaa:	461f      	mov	r7, r3
 800abac:	f103 0301 	add.w	r3, r3, #1
 800abb0:	d0f9      	beq.n	800aba6 <__gethex+0x76>
 800abb2:	f7ff ffa8 	bl	800ab06 <__hexdig_fun>
 800abb6:	2301      	movs	r3, #1
 800abb8:	fab0 f480 	clz	r4, r0
 800abbc:	0964      	lsrs	r4, r4, #5
 800abbe:	4635      	mov	r5, r6
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	463a      	mov	r2, r7
 800abc4:	4616      	mov	r6, r2
 800abc6:	3201      	adds	r2, #1
 800abc8:	7830      	ldrb	r0, [r6, #0]
 800abca:	f7ff ff9c 	bl	800ab06 <__hexdig_fun>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d1f8      	bne.n	800abc4 <__gethex+0x94>
 800abd2:	9901      	ldr	r1, [sp, #4]
 800abd4:	4652      	mov	r2, sl
 800abd6:	4630      	mov	r0, r6
 800abd8:	f001 ff42 	bl	800ca60 <strncmp>
 800abdc:	b980      	cbnz	r0, 800ac00 <__gethex+0xd0>
 800abde:	b94d      	cbnz	r5, 800abf4 <__gethex+0xc4>
 800abe0:	eb06 050a 	add.w	r5, r6, sl
 800abe4:	462a      	mov	r2, r5
 800abe6:	4616      	mov	r6, r2
 800abe8:	3201      	adds	r2, #1
 800abea:	7830      	ldrb	r0, [r6, #0]
 800abec:	f7ff ff8b 	bl	800ab06 <__hexdig_fun>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d1f8      	bne.n	800abe6 <__gethex+0xb6>
 800abf4:	1bad      	subs	r5, r5, r6
 800abf6:	00ad      	lsls	r5, r5, #2
 800abf8:	e004      	b.n	800ac04 <__gethex+0xd4>
 800abfa:	2400      	movs	r4, #0
 800abfc:	4625      	mov	r5, r4
 800abfe:	e7e0      	b.n	800abc2 <__gethex+0x92>
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	d1f7      	bne.n	800abf4 <__gethex+0xc4>
 800ac04:	7833      	ldrb	r3, [r6, #0]
 800ac06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac0a:	2b50      	cmp	r3, #80	; 0x50
 800ac0c:	d13b      	bne.n	800ac86 <__gethex+0x156>
 800ac0e:	7873      	ldrb	r3, [r6, #1]
 800ac10:	2b2b      	cmp	r3, #43	; 0x2b
 800ac12:	d02c      	beq.n	800ac6e <__gethex+0x13e>
 800ac14:	2b2d      	cmp	r3, #45	; 0x2d
 800ac16:	d02e      	beq.n	800ac76 <__gethex+0x146>
 800ac18:	1c71      	adds	r1, r6, #1
 800ac1a:	f04f 0900 	mov.w	r9, #0
 800ac1e:	7808      	ldrb	r0, [r1, #0]
 800ac20:	f7ff ff71 	bl	800ab06 <__hexdig_fun>
 800ac24:	1e43      	subs	r3, r0, #1
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b18      	cmp	r3, #24
 800ac2a:	d82c      	bhi.n	800ac86 <__gethex+0x156>
 800ac2c:	f1a0 0210 	sub.w	r2, r0, #16
 800ac30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac34:	f7ff ff67 	bl	800ab06 <__hexdig_fun>
 800ac38:	1e43      	subs	r3, r0, #1
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b18      	cmp	r3, #24
 800ac3e:	d91d      	bls.n	800ac7c <__gethex+0x14c>
 800ac40:	f1b9 0f00 	cmp.w	r9, #0
 800ac44:	d000      	beq.n	800ac48 <__gethex+0x118>
 800ac46:	4252      	negs	r2, r2
 800ac48:	4415      	add	r5, r2
 800ac4a:	f8cb 1000 	str.w	r1, [fp]
 800ac4e:	b1e4      	cbz	r4, 800ac8a <__gethex+0x15a>
 800ac50:	9b00      	ldr	r3, [sp, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bf14      	ite	ne
 800ac56:	2700      	movne	r7, #0
 800ac58:	2706      	moveq	r7, #6
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	b009      	add	sp, #36	; 0x24
 800ac5e:	ecbd 8b02 	vpop	{d8}
 800ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac66:	463e      	mov	r6, r7
 800ac68:	4625      	mov	r5, r4
 800ac6a:	2401      	movs	r4, #1
 800ac6c:	e7ca      	b.n	800ac04 <__gethex+0xd4>
 800ac6e:	f04f 0900 	mov.w	r9, #0
 800ac72:	1cb1      	adds	r1, r6, #2
 800ac74:	e7d3      	b.n	800ac1e <__gethex+0xee>
 800ac76:	f04f 0901 	mov.w	r9, #1
 800ac7a:	e7fa      	b.n	800ac72 <__gethex+0x142>
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	fb03 0202 	mla	r2, r3, r2, r0
 800ac82:	3a10      	subs	r2, #16
 800ac84:	e7d4      	b.n	800ac30 <__gethex+0x100>
 800ac86:	4631      	mov	r1, r6
 800ac88:	e7df      	b.n	800ac4a <__gethex+0x11a>
 800ac8a:	1bf3      	subs	r3, r6, r7
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	4621      	mov	r1, r4
 800ac90:	2b07      	cmp	r3, #7
 800ac92:	dc0b      	bgt.n	800acac <__gethex+0x17c>
 800ac94:	ee18 0a10 	vmov	r0, s16
 800ac98:	f000 faec 	bl	800b274 <_Balloc>
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	b940      	cbnz	r0, 800acb2 <__gethex+0x182>
 800aca0:	4b5d      	ldr	r3, [pc, #372]	; (800ae18 <__gethex+0x2e8>)
 800aca2:	4602      	mov	r2, r0
 800aca4:	21de      	movs	r1, #222	; 0xde
 800aca6:	485d      	ldr	r0, [pc, #372]	; (800ae1c <__gethex+0x2ec>)
 800aca8:	f001 ffaa 	bl	800cc00 <__assert_func>
 800acac:	3101      	adds	r1, #1
 800acae:	105b      	asrs	r3, r3, #1
 800acb0:	e7ee      	b.n	800ac90 <__gethex+0x160>
 800acb2:	f100 0914 	add.w	r9, r0, #20
 800acb6:	f04f 0b00 	mov.w	fp, #0
 800acba:	f1ca 0301 	rsb	r3, sl, #1
 800acbe:	f8cd 9008 	str.w	r9, [sp, #8]
 800acc2:	f8cd b000 	str.w	fp, [sp]
 800acc6:	9306      	str	r3, [sp, #24]
 800acc8:	42b7      	cmp	r7, r6
 800acca:	d340      	bcc.n	800ad4e <__gethex+0x21e>
 800accc:	9802      	ldr	r0, [sp, #8]
 800acce:	9b00      	ldr	r3, [sp, #0]
 800acd0:	f840 3b04 	str.w	r3, [r0], #4
 800acd4:	eba0 0009 	sub.w	r0, r0, r9
 800acd8:	1080      	asrs	r0, r0, #2
 800acda:	0146      	lsls	r6, r0, #5
 800acdc:	6120      	str	r0, [r4, #16]
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 fbba 	bl	800b458 <__hi0bits>
 800ace4:	1a30      	subs	r0, r6, r0
 800ace6:	f8d8 6000 	ldr.w	r6, [r8]
 800acea:	42b0      	cmp	r0, r6
 800acec:	dd63      	ble.n	800adb6 <__gethex+0x286>
 800acee:	1b87      	subs	r7, r0, r6
 800acf0:	4639      	mov	r1, r7
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 ff5e 	bl	800bbb4 <__any_on>
 800acf8:	4682      	mov	sl, r0
 800acfa:	b1a8      	cbz	r0, 800ad28 <__gethex+0x1f8>
 800acfc:	1e7b      	subs	r3, r7, #1
 800acfe:	1159      	asrs	r1, r3, #5
 800ad00:	f003 021f 	and.w	r2, r3, #31
 800ad04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad08:	f04f 0a01 	mov.w	sl, #1
 800ad0c:	fa0a f202 	lsl.w	r2, sl, r2
 800ad10:	420a      	tst	r2, r1
 800ad12:	d009      	beq.n	800ad28 <__gethex+0x1f8>
 800ad14:	4553      	cmp	r3, sl
 800ad16:	dd05      	ble.n	800ad24 <__gethex+0x1f4>
 800ad18:	1eb9      	subs	r1, r7, #2
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 ff4a 	bl	800bbb4 <__any_on>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d145      	bne.n	800adb0 <__gethex+0x280>
 800ad24:	f04f 0a02 	mov.w	sl, #2
 800ad28:	4639      	mov	r1, r7
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f7ff fe99 	bl	800aa62 <rshift>
 800ad30:	443d      	add	r5, r7
 800ad32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad36:	42ab      	cmp	r3, r5
 800ad38:	da4c      	bge.n	800add4 <__gethex+0x2a4>
 800ad3a:	ee18 0a10 	vmov	r0, s16
 800ad3e:	4621      	mov	r1, r4
 800ad40:	f000 fad8 	bl	800b2f4 <_Bfree>
 800ad44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad46:	2300      	movs	r3, #0
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	27a3      	movs	r7, #163	; 0xa3
 800ad4c:	e785      	b.n	800ac5a <__gethex+0x12a>
 800ad4e:	1e73      	subs	r3, r6, #1
 800ad50:	9a05      	ldr	r2, [sp, #20]
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d019      	beq.n	800ad90 <__gethex+0x260>
 800ad5c:	f1bb 0f20 	cmp.w	fp, #32
 800ad60:	d107      	bne.n	800ad72 <__gethex+0x242>
 800ad62:	9b02      	ldr	r3, [sp, #8]
 800ad64:	9a00      	ldr	r2, [sp, #0]
 800ad66:	f843 2b04 	str.w	r2, [r3], #4
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	469b      	mov	fp, r3
 800ad72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ad76:	f7ff fec6 	bl	800ab06 <__hexdig_fun>
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	f000 000f 	and.w	r0, r0, #15
 800ad80:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad84:	4303      	orrs	r3, r0
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	f10b 0b04 	add.w	fp, fp, #4
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	e00d      	b.n	800adac <__gethex+0x27c>
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	9a06      	ldr	r2, [sp, #24]
 800ad94:	4413      	add	r3, r2
 800ad96:	42bb      	cmp	r3, r7
 800ad98:	d3e0      	bcc.n	800ad5c <__gethex+0x22c>
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	9901      	ldr	r1, [sp, #4]
 800ad9e:	9307      	str	r3, [sp, #28]
 800ada0:	4652      	mov	r2, sl
 800ada2:	f001 fe5d 	bl	800ca60 <strncmp>
 800ada6:	9b07      	ldr	r3, [sp, #28]
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d1d7      	bne.n	800ad5c <__gethex+0x22c>
 800adac:	461e      	mov	r6, r3
 800adae:	e78b      	b.n	800acc8 <__gethex+0x198>
 800adb0:	f04f 0a03 	mov.w	sl, #3
 800adb4:	e7b8      	b.n	800ad28 <__gethex+0x1f8>
 800adb6:	da0a      	bge.n	800adce <__gethex+0x29e>
 800adb8:	1a37      	subs	r7, r6, r0
 800adba:	4621      	mov	r1, r4
 800adbc:	ee18 0a10 	vmov	r0, s16
 800adc0:	463a      	mov	r2, r7
 800adc2:	f000 fcb3 	bl	800b72c <__lshift>
 800adc6:	1bed      	subs	r5, r5, r7
 800adc8:	4604      	mov	r4, r0
 800adca:	f100 0914 	add.w	r9, r0, #20
 800adce:	f04f 0a00 	mov.w	sl, #0
 800add2:	e7ae      	b.n	800ad32 <__gethex+0x202>
 800add4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800add8:	42a8      	cmp	r0, r5
 800adda:	dd72      	ble.n	800aec2 <__gethex+0x392>
 800addc:	1b45      	subs	r5, r0, r5
 800adde:	42ae      	cmp	r6, r5
 800ade0:	dc36      	bgt.n	800ae50 <__gethex+0x320>
 800ade2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d02a      	beq.n	800ae40 <__gethex+0x310>
 800adea:	2b03      	cmp	r3, #3
 800adec:	d02c      	beq.n	800ae48 <__gethex+0x318>
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d11c      	bne.n	800ae2c <__gethex+0x2fc>
 800adf2:	42ae      	cmp	r6, r5
 800adf4:	d11a      	bne.n	800ae2c <__gethex+0x2fc>
 800adf6:	2e01      	cmp	r6, #1
 800adf8:	d112      	bne.n	800ae20 <__gethex+0x2f0>
 800adfa:	9a04      	ldr	r2, [sp, #16]
 800adfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	2301      	movs	r3, #1
 800ae04:	6123      	str	r3, [r4, #16]
 800ae06:	f8c9 3000 	str.w	r3, [r9]
 800ae0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae0c:	2762      	movs	r7, #98	; 0x62
 800ae0e:	601c      	str	r4, [r3, #0]
 800ae10:	e723      	b.n	800ac5a <__gethex+0x12a>
 800ae12:	bf00      	nop
 800ae14:	0800d2a4 	.word	0x0800d2a4
 800ae18:	0800d1c8 	.word	0x0800d1c8
 800ae1c:	0800d23c 	.word	0x0800d23c
 800ae20:	1e71      	subs	r1, r6, #1
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 fec6 	bl	800bbb4 <__any_on>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d1e6      	bne.n	800adfa <__gethex+0x2ca>
 800ae2c:	ee18 0a10 	vmov	r0, s16
 800ae30:	4621      	mov	r1, r4
 800ae32:	f000 fa5f 	bl	800b2f4 <_Bfree>
 800ae36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae38:	2300      	movs	r3, #0
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	2750      	movs	r7, #80	; 0x50
 800ae3e:	e70c      	b.n	800ac5a <__gethex+0x12a>
 800ae40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1f2      	bne.n	800ae2c <__gethex+0x2fc>
 800ae46:	e7d8      	b.n	800adfa <__gethex+0x2ca>
 800ae48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1d5      	bne.n	800adfa <__gethex+0x2ca>
 800ae4e:	e7ed      	b.n	800ae2c <__gethex+0x2fc>
 800ae50:	1e6f      	subs	r7, r5, #1
 800ae52:	f1ba 0f00 	cmp.w	sl, #0
 800ae56:	d131      	bne.n	800aebc <__gethex+0x38c>
 800ae58:	b127      	cbz	r7, 800ae64 <__gethex+0x334>
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 fea9 	bl	800bbb4 <__any_on>
 800ae62:	4682      	mov	sl, r0
 800ae64:	117b      	asrs	r3, r7, #5
 800ae66:	2101      	movs	r1, #1
 800ae68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ae6c:	f007 071f 	and.w	r7, r7, #31
 800ae70:	fa01 f707 	lsl.w	r7, r1, r7
 800ae74:	421f      	tst	r7, r3
 800ae76:	4629      	mov	r1, r5
 800ae78:	4620      	mov	r0, r4
 800ae7a:	bf18      	it	ne
 800ae7c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ae80:	1b76      	subs	r6, r6, r5
 800ae82:	f7ff fdee 	bl	800aa62 <rshift>
 800ae86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae8a:	2702      	movs	r7, #2
 800ae8c:	f1ba 0f00 	cmp.w	sl, #0
 800ae90:	d048      	beq.n	800af24 <__gethex+0x3f4>
 800ae92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d015      	beq.n	800aec6 <__gethex+0x396>
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d017      	beq.n	800aece <__gethex+0x39e>
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d109      	bne.n	800aeb6 <__gethex+0x386>
 800aea2:	f01a 0f02 	tst.w	sl, #2
 800aea6:	d006      	beq.n	800aeb6 <__gethex+0x386>
 800aea8:	f8d9 0000 	ldr.w	r0, [r9]
 800aeac:	ea4a 0a00 	orr.w	sl, sl, r0
 800aeb0:	f01a 0f01 	tst.w	sl, #1
 800aeb4:	d10e      	bne.n	800aed4 <__gethex+0x3a4>
 800aeb6:	f047 0710 	orr.w	r7, r7, #16
 800aeba:	e033      	b.n	800af24 <__gethex+0x3f4>
 800aebc:	f04f 0a01 	mov.w	sl, #1
 800aec0:	e7d0      	b.n	800ae64 <__gethex+0x334>
 800aec2:	2701      	movs	r7, #1
 800aec4:	e7e2      	b.n	800ae8c <__gethex+0x35c>
 800aec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec8:	f1c3 0301 	rsb	r3, r3, #1
 800aecc:	9315      	str	r3, [sp, #84]	; 0x54
 800aece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0f0      	beq.n	800aeb6 <__gethex+0x386>
 800aed4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aed8:	f104 0314 	add.w	r3, r4, #20
 800aedc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aee0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aee4:	f04f 0c00 	mov.w	ip, #0
 800aee8:	4618      	mov	r0, r3
 800aeea:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aef2:	d01c      	beq.n	800af2e <__gethex+0x3fe>
 800aef4:	3201      	adds	r2, #1
 800aef6:	6002      	str	r2, [r0, #0]
 800aef8:	2f02      	cmp	r7, #2
 800aefa:	f104 0314 	add.w	r3, r4, #20
 800aefe:	d13f      	bne.n	800af80 <__gethex+0x450>
 800af00:	f8d8 2000 	ldr.w	r2, [r8]
 800af04:	3a01      	subs	r2, #1
 800af06:	42b2      	cmp	r2, r6
 800af08:	d10a      	bne.n	800af20 <__gethex+0x3f0>
 800af0a:	1171      	asrs	r1, r6, #5
 800af0c:	2201      	movs	r2, #1
 800af0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af12:	f006 061f 	and.w	r6, r6, #31
 800af16:	fa02 f606 	lsl.w	r6, r2, r6
 800af1a:	421e      	tst	r6, r3
 800af1c:	bf18      	it	ne
 800af1e:	4617      	movne	r7, r2
 800af20:	f047 0720 	orr.w	r7, r7, #32
 800af24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af26:	601c      	str	r4, [r3, #0]
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	601d      	str	r5, [r3, #0]
 800af2c:	e695      	b.n	800ac5a <__gethex+0x12a>
 800af2e:	4299      	cmp	r1, r3
 800af30:	f843 cc04 	str.w	ip, [r3, #-4]
 800af34:	d8d8      	bhi.n	800aee8 <__gethex+0x3b8>
 800af36:	68a3      	ldr	r3, [r4, #8]
 800af38:	459b      	cmp	fp, r3
 800af3a:	db19      	blt.n	800af70 <__gethex+0x440>
 800af3c:	6861      	ldr	r1, [r4, #4]
 800af3e:	ee18 0a10 	vmov	r0, s16
 800af42:	3101      	adds	r1, #1
 800af44:	f000 f996 	bl	800b274 <_Balloc>
 800af48:	4681      	mov	r9, r0
 800af4a:	b918      	cbnz	r0, 800af54 <__gethex+0x424>
 800af4c:	4b1a      	ldr	r3, [pc, #104]	; (800afb8 <__gethex+0x488>)
 800af4e:	4602      	mov	r2, r0
 800af50:	2184      	movs	r1, #132	; 0x84
 800af52:	e6a8      	b.n	800aca6 <__gethex+0x176>
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	3202      	adds	r2, #2
 800af58:	f104 010c 	add.w	r1, r4, #12
 800af5c:	0092      	lsls	r2, r2, #2
 800af5e:	300c      	adds	r0, #12
 800af60:	f7fc fe06 	bl	8007b70 <memcpy>
 800af64:	4621      	mov	r1, r4
 800af66:	ee18 0a10 	vmov	r0, s16
 800af6a:	f000 f9c3 	bl	800b2f4 <_Bfree>
 800af6e:	464c      	mov	r4, r9
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	1c5a      	adds	r2, r3, #1
 800af74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af78:	6122      	str	r2, [r4, #16]
 800af7a:	2201      	movs	r2, #1
 800af7c:	615a      	str	r2, [r3, #20]
 800af7e:	e7bb      	b.n	800aef8 <__gethex+0x3c8>
 800af80:	6922      	ldr	r2, [r4, #16]
 800af82:	455a      	cmp	r2, fp
 800af84:	dd0b      	ble.n	800af9e <__gethex+0x46e>
 800af86:	2101      	movs	r1, #1
 800af88:	4620      	mov	r0, r4
 800af8a:	f7ff fd6a 	bl	800aa62 <rshift>
 800af8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af92:	3501      	adds	r5, #1
 800af94:	42ab      	cmp	r3, r5
 800af96:	f6ff aed0 	blt.w	800ad3a <__gethex+0x20a>
 800af9a:	2701      	movs	r7, #1
 800af9c:	e7c0      	b.n	800af20 <__gethex+0x3f0>
 800af9e:	f016 061f 	ands.w	r6, r6, #31
 800afa2:	d0fa      	beq.n	800af9a <__gethex+0x46a>
 800afa4:	4453      	add	r3, sl
 800afa6:	f1c6 0620 	rsb	r6, r6, #32
 800afaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800afae:	f000 fa53 	bl	800b458 <__hi0bits>
 800afb2:	42b0      	cmp	r0, r6
 800afb4:	dbe7      	blt.n	800af86 <__gethex+0x456>
 800afb6:	e7f0      	b.n	800af9a <__gethex+0x46a>
 800afb8:	0800d1c8 	.word	0x0800d1c8

0800afbc <L_shift>:
 800afbc:	f1c2 0208 	rsb	r2, r2, #8
 800afc0:	0092      	lsls	r2, r2, #2
 800afc2:	b570      	push	{r4, r5, r6, lr}
 800afc4:	f1c2 0620 	rsb	r6, r2, #32
 800afc8:	6843      	ldr	r3, [r0, #4]
 800afca:	6804      	ldr	r4, [r0, #0]
 800afcc:	fa03 f506 	lsl.w	r5, r3, r6
 800afd0:	432c      	orrs	r4, r5
 800afd2:	40d3      	lsrs	r3, r2
 800afd4:	6004      	str	r4, [r0, #0]
 800afd6:	f840 3f04 	str.w	r3, [r0, #4]!
 800afda:	4288      	cmp	r0, r1
 800afdc:	d3f4      	bcc.n	800afc8 <L_shift+0xc>
 800afde:	bd70      	pop	{r4, r5, r6, pc}

0800afe0 <__match>:
 800afe0:	b530      	push	{r4, r5, lr}
 800afe2:	6803      	ldr	r3, [r0, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afea:	b914      	cbnz	r4, 800aff2 <__match+0x12>
 800afec:	6003      	str	r3, [r0, #0]
 800afee:	2001      	movs	r0, #1
 800aff0:	bd30      	pop	{r4, r5, pc}
 800aff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aff6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800affa:	2d19      	cmp	r5, #25
 800affc:	bf98      	it	ls
 800affe:	3220      	addls	r2, #32
 800b000:	42a2      	cmp	r2, r4
 800b002:	d0f0      	beq.n	800afe6 <__match+0x6>
 800b004:	2000      	movs	r0, #0
 800b006:	e7f3      	b.n	800aff0 <__match+0x10>

0800b008 <__hexnan>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	680b      	ldr	r3, [r1, #0]
 800b00e:	115e      	asrs	r6, r3, #5
 800b010:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b014:	f013 031f 	ands.w	r3, r3, #31
 800b018:	b087      	sub	sp, #28
 800b01a:	bf18      	it	ne
 800b01c:	3604      	addne	r6, #4
 800b01e:	2500      	movs	r5, #0
 800b020:	1f37      	subs	r7, r6, #4
 800b022:	4690      	mov	r8, r2
 800b024:	6802      	ldr	r2, [r0, #0]
 800b026:	9301      	str	r3, [sp, #4]
 800b028:	4682      	mov	sl, r0
 800b02a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b02e:	46b9      	mov	r9, r7
 800b030:	463c      	mov	r4, r7
 800b032:	9502      	str	r5, [sp, #8]
 800b034:	46ab      	mov	fp, r5
 800b036:	7851      	ldrb	r1, [r2, #1]
 800b038:	1c53      	adds	r3, r2, #1
 800b03a:	9303      	str	r3, [sp, #12]
 800b03c:	b341      	cbz	r1, 800b090 <__hexnan+0x88>
 800b03e:	4608      	mov	r0, r1
 800b040:	9205      	str	r2, [sp, #20]
 800b042:	9104      	str	r1, [sp, #16]
 800b044:	f7ff fd5f 	bl	800ab06 <__hexdig_fun>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d14f      	bne.n	800b0ec <__hexnan+0xe4>
 800b04c:	9904      	ldr	r1, [sp, #16]
 800b04e:	9a05      	ldr	r2, [sp, #20]
 800b050:	2920      	cmp	r1, #32
 800b052:	d818      	bhi.n	800b086 <__hexnan+0x7e>
 800b054:	9b02      	ldr	r3, [sp, #8]
 800b056:	459b      	cmp	fp, r3
 800b058:	dd13      	ble.n	800b082 <__hexnan+0x7a>
 800b05a:	454c      	cmp	r4, r9
 800b05c:	d206      	bcs.n	800b06c <__hexnan+0x64>
 800b05e:	2d07      	cmp	r5, #7
 800b060:	dc04      	bgt.n	800b06c <__hexnan+0x64>
 800b062:	462a      	mov	r2, r5
 800b064:	4649      	mov	r1, r9
 800b066:	4620      	mov	r0, r4
 800b068:	f7ff ffa8 	bl	800afbc <L_shift>
 800b06c:	4544      	cmp	r4, r8
 800b06e:	d950      	bls.n	800b112 <__hexnan+0x10a>
 800b070:	2300      	movs	r3, #0
 800b072:	f1a4 0904 	sub.w	r9, r4, #4
 800b076:	f844 3c04 	str.w	r3, [r4, #-4]
 800b07a:	f8cd b008 	str.w	fp, [sp, #8]
 800b07e:	464c      	mov	r4, r9
 800b080:	461d      	mov	r5, r3
 800b082:	9a03      	ldr	r2, [sp, #12]
 800b084:	e7d7      	b.n	800b036 <__hexnan+0x2e>
 800b086:	2929      	cmp	r1, #41	; 0x29
 800b088:	d156      	bne.n	800b138 <__hexnan+0x130>
 800b08a:	3202      	adds	r2, #2
 800b08c:	f8ca 2000 	str.w	r2, [sl]
 800b090:	f1bb 0f00 	cmp.w	fp, #0
 800b094:	d050      	beq.n	800b138 <__hexnan+0x130>
 800b096:	454c      	cmp	r4, r9
 800b098:	d206      	bcs.n	800b0a8 <__hexnan+0xa0>
 800b09a:	2d07      	cmp	r5, #7
 800b09c:	dc04      	bgt.n	800b0a8 <__hexnan+0xa0>
 800b09e:	462a      	mov	r2, r5
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7ff ff8a 	bl	800afbc <L_shift>
 800b0a8:	4544      	cmp	r4, r8
 800b0aa:	d934      	bls.n	800b116 <__hexnan+0x10e>
 800b0ac:	f1a8 0204 	sub.w	r2, r8, #4
 800b0b0:	4623      	mov	r3, r4
 800b0b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b0ba:	429f      	cmp	r7, r3
 800b0bc:	d2f9      	bcs.n	800b0b2 <__hexnan+0xaa>
 800b0be:	1b3b      	subs	r3, r7, r4
 800b0c0:	f023 0303 	bic.w	r3, r3, #3
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	3401      	adds	r4, #1
 800b0c8:	3e03      	subs	r6, #3
 800b0ca:	42b4      	cmp	r4, r6
 800b0cc:	bf88      	it	hi
 800b0ce:	2304      	movhi	r3, #4
 800b0d0:	4443      	add	r3, r8
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f843 2b04 	str.w	r2, [r3], #4
 800b0d8:	429f      	cmp	r7, r3
 800b0da:	d2fb      	bcs.n	800b0d4 <__hexnan+0xcc>
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	b91b      	cbnz	r3, 800b0e8 <__hexnan+0xe0>
 800b0e0:	4547      	cmp	r7, r8
 800b0e2:	d127      	bne.n	800b134 <__hexnan+0x12c>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	2005      	movs	r0, #5
 800b0ea:	e026      	b.n	800b13a <__hexnan+0x132>
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	2d08      	cmp	r5, #8
 800b0f0:	f10b 0b01 	add.w	fp, fp, #1
 800b0f4:	dd06      	ble.n	800b104 <__hexnan+0xfc>
 800b0f6:	4544      	cmp	r4, r8
 800b0f8:	d9c3      	bls.n	800b082 <__hexnan+0x7a>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b100:	2501      	movs	r5, #1
 800b102:	3c04      	subs	r4, #4
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	f000 000f 	and.w	r0, r0, #15
 800b10a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b10e:	6022      	str	r2, [r4, #0]
 800b110:	e7b7      	b.n	800b082 <__hexnan+0x7a>
 800b112:	2508      	movs	r5, #8
 800b114:	e7b5      	b.n	800b082 <__hexnan+0x7a>
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d0df      	beq.n	800b0dc <__hexnan+0xd4>
 800b11c:	f04f 32ff 	mov.w	r2, #4294967295
 800b120:	f1c3 0320 	rsb	r3, r3, #32
 800b124:	fa22 f303 	lsr.w	r3, r2, r3
 800b128:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b12c:	401a      	ands	r2, r3
 800b12e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b132:	e7d3      	b.n	800b0dc <__hexnan+0xd4>
 800b134:	3f04      	subs	r7, #4
 800b136:	e7d1      	b.n	800b0dc <__hexnan+0xd4>
 800b138:	2004      	movs	r0, #4
 800b13a:	b007      	add	sp, #28
 800b13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b140 <_localeconv_r>:
 800b140:	4800      	ldr	r0, [pc, #0]	; (800b144 <_localeconv_r+0x4>)
 800b142:	4770      	bx	lr
 800b144:	20000164 	.word	0x20000164

0800b148 <__retarget_lock_init_recursive>:
 800b148:	4770      	bx	lr

0800b14a <__retarget_lock_acquire_recursive>:
 800b14a:	4770      	bx	lr

0800b14c <__retarget_lock_release_recursive>:
 800b14c:	4770      	bx	lr
	...

0800b150 <_lseek_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	4d07      	ldr	r5, [pc, #28]	; (800b170 <_lseek_r+0x20>)
 800b154:	4604      	mov	r4, r0
 800b156:	4608      	mov	r0, r1
 800b158:	4611      	mov	r1, r2
 800b15a:	2200      	movs	r2, #0
 800b15c:	602a      	str	r2, [r5, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	f7f6 fc3c 	bl	80019dc <_lseek>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d102      	bne.n	800b16e <_lseek_r+0x1e>
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	b103      	cbz	r3, 800b16e <_lseek_r+0x1e>
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	20000804 	.word	0x20000804

0800b174 <__swhatbuf_r>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	460e      	mov	r6, r1
 800b178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17c:	2900      	cmp	r1, #0
 800b17e:	b096      	sub	sp, #88	; 0x58
 800b180:	4614      	mov	r4, r2
 800b182:	461d      	mov	r5, r3
 800b184:	da08      	bge.n	800b198 <__swhatbuf_r+0x24>
 800b186:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	602a      	str	r2, [r5, #0]
 800b18e:	061a      	lsls	r2, r3, #24
 800b190:	d410      	bmi.n	800b1b4 <__swhatbuf_r+0x40>
 800b192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b196:	e00e      	b.n	800b1b6 <__swhatbuf_r+0x42>
 800b198:	466a      	mov	r2, sp
 800b19a:	f001 fd61 	bl	800cc60 <_fstat_r>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	dbf1      	blt.n	800b186 <__swhatbuf_r+0x12>
 800b1a2:	9a01      	ldr	r2, [sp, #4]
 800b1a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1ac:	425a      	negs	r2, r3
 800b1ae:	415a      	adcs	r2, r3
 800b1b0:	602a      	str	r2, [r5, #0]
 800b1b2:	e7ee      	b.n	800b192 <__swhatbuf_r+0x1e>
 800b1b4:	2340      	movs	r3, #64	; 0x40
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	b016      	add	sp, #88	; 0x58
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1c0 <__smakebuf_r>:
 800b1c0:	898b      	ldrh	r3, [r1, #12]
 800b1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1c4:	079d      	lsls	r5, r3, #30
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	d507      	bpl.n	800b1dc <__smakebuf_r+0x1c>
 800b1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	6123      	str	r3, [r4, #16]
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	6163      	str	r3, [r4, #20]
 800b1d8:	b002      	add	sp, #8
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	ab01      	add	r3, sp, #4
 800b1de:	466a      	mov	r2, sp
 800b1e0:	f7ff ffc8 	bl	800b174 <__swhatbuf_r>
 800b1e4:	9900      	ldr	r1, [sp, #0]
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 fd87 	bl	800bcfc <_malloc_r>
 800b1ee:	b948      	cbnz	r0, 800b204 <__smakebuf_r+0x44>
 800b1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1f4:	059a      	lsls	r2, r3, #22
 800b1f6:	d4ef      	bmi.n	800b1d8 <__smakebuf_r+0x18>
 800b1f8:	f023 0303 	bic.w	r3, r3, #3
 800b1fc:	f043 0302 	orr.w	r3, r3, #2
 800b200:	81a3      	strh	r3, [r4, #12]
 800b202:	e7e3      	b.n	800b1cc <__smakebuf_r+0xc>
 800b204:	4b0d      	ldr	r3, [pc, #52]	; (800b23c <__smakebuf_r+0x7c>)
 800b206:	62b3      	str	r3, [r6, #40]	; 0x28
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	6020      	str	r0, [r4, #0]
 800b20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b210:	81a3      	strh	r3, [r4, #12]
 800b212:	9b00      	ldr	r3, [sp, #0]
 800b214:	6163      	str	r3, [r4, #20]
 800b216:	9b01      	ldr	r3, [sp, #4]
 800b218:	6120      	str	r0, [r4, #16]
 800b21a:	b15b      	cbz	r3, 800b234 <__smakebuf_r+0x74>
 800b21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b220:	4630      	mov	r0, r6
 800b222:	f001 fd2f 	bl	800cc84 <_isatty_r>
 800b226:	b128      	cbz	r0, 800b234 <__smakebuf_r+0x74>
 800b228:	89a3      	ldrh	r3, [r4, #12]
 800b22a:	f023 0303 	bic.w	r3, r3, #3
 800b22e:	f043 0301 	orr.w	r3, r3, #1
 800b232:	81a3      	strh	r3, [r4, #12]
 800b234:	89a0      	ldrh	r0, [r4, #12]
 800b236:	4305      	orrs	r5, r0
 800b238:	81a5      	strh	r5, [r4, #12]
 800b23a:	e7cd      	b.n	800b1d8 <__smakebuf_r+0x18>
 800b23c:	0800a8c1 	.word	0x0800a8c1

0800b240 <malloc>:
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <malloc+0xc>)
 800b242:	4601      	mov	r1, r0
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	f000 bd59 	b.w	800bcfc <_malloc_r>
 800b24a:	bf00      	nop
 800b24c:	2000000c 	.word	0x2000000c

0800b250 <__ascii_mbtowc>:
 800b250:	b082      	sub	sp, #8
 800b252:	b901      	cbnz	r1, 800b256 <__ascii_mbtowc+0x6>
 800b254:	a901      	add	r1, sp, #4
 800b256:	b142      	cbz	r2, 800b26a <__ascii_mbtowc+0x1a>
 800b258:	b14b      	cbz	r3, 800b26e <__ascii_mbtowc+0x1e>
 800b25a:	7813      	ldrb	r3, [r2, #0]
 800b25c:	600b      	str	r3, [r1, #0]
 800b25e:	7812      	ldrb	r2, [r2, #0]
 800b260:	1e10      	subs	r0, r2, #0
 800b262:	bf18      	it	ne
 800b264:	2001      	movne	r0, #1
 800b266:	b002      	add	sp, #8
 800b268:	4770      	bx	lr
 800b26a:	4610      	mov	r0, r2
 800b26c:	e7fb      	b.n	800b266 <__ascii_mbtowc+0x16>
 800b26e:	f06f 0001 	mvn.w	r0, #1
 800b272:	e7f8      	b.n	800b266 <__ascii_mbtowc+0x16>

0800b274 <_Balloc>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b278:	4604      	mov	r4, r0
 800b27a:	460d      	mov	r5, r1
 800b27c:	b976      	cbnz	r6, 800b29c <_Balloc+0x28>
 800b27e:	2010      	movs	r0, #16
 800b280:	f7ff ffde 	bl	800b240 <malloc>
 800b284:	4602      	mov	r2, r0
 800b286:	6260      	str	r0, [r4, #36]	; 0x24
 800b288:	b920      	cbnz	r0, 800b294 <_Balloc+0x20>
 800b28a:	4b18      	ldr	r3, [pc, #96]	; (800b2ec <_Balloc+0x78>)
 800b28c:	4818      	ldr	r0, [pc, #96]	; (800b2f0 <_Balloc+0x7c>)
 800b28e:	2166      	movs	r1, #102	; 0x66
 800b290:	f001 fcb6 	bl	800cc00 <__assert_func>
 800b294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b298:	6006      	str	r6, [r0, #0]
 800b29a:	60c6      	str	r6, [r0, #12]
 800b29c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b29e:	68f3      	ldr	r3, [r6, #12]
 800b2a0:	b183      	cbz	r3, 800b2c4 <_Balloc+0x50>
 800b2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2aa:	b9b8      	cbnz	r0, 800b2dc <_Balloc+0x68>
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b2b2:	1d72      	adds	r2, r6, #5
 800b2b4:	0092      	lsls	r2, r2, #2
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 fc9d 	bl	800bbf6 <_calloc_r>
 800b2bc:	b160      	cbz	r0, 800b2d8 <_Balloc+0x64>
 800b2be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2c2:	e00e      	b.n	800b2e2 <_Balloc+0x6e>
 800b2c4:	2221      	movs	r2, #33	; 0x21
 800b2c6:	2104      	movs	r1, #4
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 fc94 	bl	800bbf6 <_calloc_r>
 800b2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d0:	60f0      	str	r0, [r6, #12]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e4      	bne.n	800b2a2 <_Balloc+0x2e>
 800b2d8:	2000      	movs	r0, #0
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	6802      	ldr	r2, [r0, #0]
 800b2de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2e8:	e7f7      	b.n	800b2da <_Balloc+0x66>
 800b2ea:	bf00      	nop
 800b2ec:	0800d156 	.word	0x0800d156
 800b2f0:	0800d2b8 	.word	0x0800d2b8

0800b2f4 <_Bfree>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	b976      	cbnz	r6, 800b31c <_Bfree+0x28>
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7ff ff9e 	bl	800b240 <malloc>
 800b304:	4602      	mov	r2, r0
 800b306:	6268      	str	r0, [r5, #36]	; 0x24
 800b308:	b920      	cbnz	r0, 800b314 <_Bfree+0x20>
 800b30a:	4b09      	ldr	r3, [pc, #36]	; (800b330 <_Bfree+0x3c>)
 800b30c:	4809      	ldr	r0, [pc, #36]	; (800b334 <_Bfree+0x40>)
 800b30e:	218a      	movs	r1, #138	; 0x8a
 800b310:	f001 fc76 	bl	800cc00 <__assert_func>
 800b314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b318:	6006      	str	r6, [r0, #0]
 800b31a:	60c6      	str	r6, [r0, #12]
 800b31c:	b13c      	cbz	r4, 800b32e <_Bfree+0x3a>
 800b31e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b320:	6862      	ldr	r2, [r4, #4]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b328:	6021      	str	r1, [r4, #0]
 800b32a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
 800b330:	0800d156 	.word	0x0800d156
 800b334:	0800d2b8 	.word	0x0800d2b8

0800b338 <__multadd>:
 800b338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33c:	690d      	ldr	r5, [r1, #16]
 800b33e:	4607      	mov	r7, r0
 800b340:	460c      	mov	r4, r1
 800b342:	461e      	mov	r6, r3
 800b344:	f101 0c14 	add.w	ip, r1, #20
 800b348:	2000      	movs	r0, #0
 800b34a:	f8dc 3000 	ldr.w	r3, [ip]
 800b34e:	b299      	uxth	r1, r3
 800b350:	fb02 6101 	mla	r1, r2, r1, r6
 800b354:	0c1e      	lsrs	r6, r3, #16
 800b356:	0c0b      	lsrs	r3, r1, #16
 800b358:	fb02 3306 	mla	r3, r2, r6, r3
 800b35c:	b289      	uxth	r1, r1
 800b35e:	3001      	adds	r0, #1
 800b360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b364:	4285      	cmp	r5, r0
 800b366:	f84c 1b04 	str.w	r1, [ip], #4
 800b36a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b36e:	dcec      	bgt.n	800b34a <__multadd+0x12>
 800b370:	b30e      	cbz	r6, 800b3b6 <__multadd+0x7e>
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	42ab      	cmp	r3, r5
 800b376:	dc19      	bgt.n	800b3ac <__multadd+0x74>
 800b378:	6861      	ldr	r1, [r4, #4]
 800b37a:	4638      	mov	r0, r7
 800b37c:	3101      	adds	r1, #1
 800b37e:	f7ff ff79 	bl	800b274 <_Balloc>
 800b382:	4680      	mov	r8, r0
 800b384:	b928      	cbnz	r0, 800b392 <__multadd+0x5a>
 800b386:	4602      	mov	r2, r0
 800b388:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <__multadd+0x84>)
 800b38a:	480d      	ldr	r0, [pc, #52]	; (800b3c0 <__multadd+0x88>)
 800b38c:	21b5      	movs	r1, #181	; 0xb5
 800b38e:	f001 fc37 	bl	800cc00 <__assert_func>
 800b392:	6922      	ldr	r2, [r4, #16]
 800b394:	3202      	adds	r2, #2
 800b396:	f104 010c 	add.w	r1, r4, #12
 800b39a:	0092      	lsls	r2, r2, #2
 800b39c:	300c      	adds	r0, #12
 800b39e:	f7fc fbe7 	bl	8007b70 <memcpy>
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7ff ffa5 	bl	800b2f4 <_Bfree>
 800b3aa:	4644      	mov	r4, r8
 800b3ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	615e      	str	r6, [r3, #20]
 800b3b4:	6125      	str	r5, [r4, #16]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3bc:	0800d1c8 	.word	0x0800d1c8
 800b3c0:	0800d2b8 	.word	0x0800d2b8

0800b3c4 <__s2b>:
 800b3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	4615      	mov	r5, r2
 800b3cc:	461f      	mov	r7, r3
 800b3ce:	2209      	movs	r2, #9
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3d8:	2100      	movs	r1, #0
 800b3da:	2201      	movs	r2, #1
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	db09      	blt.n	800b3f4 <__s2b+0x30>
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7ff ff47 	bl	800b274 <_Balloc>
 800b3e6:	b940      	cbnz	r0, 800b3fa <__s2b+0x36>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	4b19      	ldr	r3, [pc, #100]	; (800b450 <__s2b+0x8c>)
 800b3ec:	4819      	ldr	r0, [pc, #100]	; (800b454 <__s2b+0x90>)
 800b3ee:	21ce      	movs	r1, #206	; 0xce
 800b3f0:	f001 fc06 	bl	800cc00 <__assert_func>
 800b3f4:	0052      	lsls	r2, r2, #1
 800b3f6:	3101      	adds	r1, #1
 800b3f8:	e7f0      	b.n	800b3dc <__s2b+0x18>
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	6143      	str	r3, [r0, #20]
 800b3fe:	2d09      	cmp	r5, #9
 800b400:	f04f 0301 	mov.w	r3, #1
 800b404:	6103      	str	r3, [r0, #16]
 800b406:	dd16      	ble.n	800b436 <__s2b+0x72>
 800b408:	f104 0909 	add.w	r9, r4, #9
 800b40c:	46c8      	mov	r8, r9
 800b40e:	442c      	add	r4, r5
 800b410:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b414:	4601      	mov	r1, r0
 800b416:	3b30      	subs	r3, #48	; 0x30
 800b418:	220a      	movs	r2, #10
 800b41a:	4630      	mov	r0, r6
 800b41c:	f7ff ff8c 	bl	800b338 <__multadd>
 800b420:	45a0      	cmp	r8, r4
 800b422:	d1f5      	bne.n	800b410 <__s2b+0x4c>
 800b424:	f1a5 0408 	sub.w	r4, r5, #8
 800b428:	444c      	add	r4, r9
 800b42a:	1b2d      	subs	r5, r5, r4
 800b42c:	1963      	adds	r3, r4, r5
 800b42e:	42bb      	cmp	r3, r7
 800b430:	db04      	blt.n	800b43c <__s2b+0x78>
 800b432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b436:	340a      	adds	r4, #10
 800b438:	2509      	movs	r5, #9
 800b43a:	e7f6      	b.n	800b42a <__s2b+0x66>
 800b43c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b440:	4601      	mov	r1, r0
 800b442:	3b30      	subs	r3, #48	; 0x30
 800b444:	220a      	movs	r2, #10
 800b446:	4630      	mov	r0, r6
 800b448:	f7ff ff76 	bl	800b338 <__multadd>
 800b44c:	e7ee      	b.n	800b42c <__s2b+0x68>
 800b44e:	bf00      	nop
 800b450:	0800d1c8 	.word	0x0800d1c8
 800b454:	0800d2b8 	.word	0x0800d2b8

0800b458 <__hi0bits>:
 800b458:	0c03      	lsrs	r3, r0, #16
 800b45a:	041b      	lsls	r3, r3, #16
 800b45c:	b9d3      	cbnz	r3, 800b494 <__hi0bits+0x3c>
 800b45e:	0400      	lsls	r0, r0, #16
 800b460:	2310      	movs	r3, #16
 800b462:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b466:	bf04      	itt	eq
 800b468:	0200      	lsleq	r0, r0, #8
 800b46a:	3308      	addeq	r3, #8
 800b46c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b470:	bf04      	itt	eq
 800b472:	0100      	lsleq	r0, r0, #4
 800b474:	3304      	addeq	r3, #4
 800b476:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b47a:	bf04      	itt	eq
 800b47c:	0080      	lsleq	r0, r0, #2
 800b47e:	3302      	addeq	r3, #2
 800b480:	2800      	cmp	r0, #0
 800b482:	db05      	blt.n	800b490 <__hi0bits+0x38>
 800b484:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b488:	f103 0301 	add.w	r3, r3, #1
 800b48c:	bf08      	it	eq
 800b48e:	2320      	moveq	r3, #32
 800b490:	4618      	mov	r0, r3
 800b492:	4770      	bx	lr
 800b494:	2300      	movs	r3, #0
 800b496:	e7e4      	b.n	800b462 <__hi0bits+0xa>

0800b498 <__lo0bits>:
 800b498:	6803      	ldr	r3, [r0, #0]
 800b49a:	f013 0207 	ands.w	r2, r3, #7
 800b49e:	4601      	mov	r1, r0
 800b4a0:	d00b      	beq.n	800b4ba <__lo0bits+0x22>
 800b4a2:	07da      	lsls	r2, r3, #31
 800b4a4:	d423      	bmi.n	800b4ee <__lo0bits+0x56>
 800b4a6:	0798      	lsls	r0, r3, #30
 800b4a8:	bf49      	itett	mi
 800b4aa:	085b      	lsrmi	r3, r3, #1
 800b4ac:	089b      	lsrpl	r3, r3, #2
 800b4ae:	2001      	movmi	r0, #1
 800b4b0:	600b      	strmi	r3, [r1, #0]
 800b4b2:	bf5c      	itt	pl
 800b4b4:	600b      	strpl	r3, [r1, #0]
 800b4b6:	2002      	movpl	r0, #2
 800b4b8:	4770      	bx	lr
 800b4ba:	b298      	uxth	r0, r3
 800b4bc:	b9a8      	cbnz	r0, 800b4ea <__lo0bits+0x52>
 800b4be:	0c1b      	lsrs	r3, r3, #16
 800b4c0:	2010      	movs	r0, #16
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	b90a      	cbnz	r2, 800b4ca <__lo0bits+0x32>
 800b4c6:	3008      	adds	r0, #8
 800b4c8:	0a1b      	lsrs	r3, r3, #8
 800b4ca:	071a      	lsls	r2, r3, #28
 800b4cc:	bf04      	itt	eq
 800b4ce:	091b      	lsreq	r3, r3, #4
 800b4d0:	3004      	addeq	r0, #4
 800b4d2:	079a      	lsls	r2, r3, #30
 800b4d4:	bf04      	itt	eq
 800b4d6:	089b      	lsreq	r3, r3, #2
 800b4d8:	3002      	addeq	r0, #2
 800b4da:	07da      	lsls	r2, r3, #31
 800b4dc:	d403      	bmi.n	800b4e6 <__lo0bits+0x4e>
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	f100 0001 	add.w	r0, r0, #1
 800b4e4:	d005      	beq.n	800b4f2 <__lo0bits+0x5a>
 800b4e6:	600b      	str	r3, [r1, #0]
 800b4e8:	4770      	bx	lr
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	e7e9      	b.n	800b4c2 <__lo0bits+0x2a>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	4770      	bx	lr
 800b4f2:	2020      	movs	r0, #32
 800b4f4:	4770      	bx	lr
	...

0800b4f8 <__i2b>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	f7ff feb9 	bl	800b274 <_Balloc>
 800b502:	4602      	mov	r2, r0
 800b504:	b928      	cbnz	r0, 800b512 <__i2b+0x1a>
 800b506:	4b05      	ldr	r3, [pc, #20]	; (800b51c <__i2b+0x24>)
 800b508:	4805      	ldr	r0, [pc, #20]	; (800b520 <__i2b+0x28>)
 800b50a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b50e:	f001 fb77 	bl	800cc00 <__assert_func>
 800b512:	2301      	movs	r3, #1
 800b514:	6144      	str	r4, [r0, #20]
 800b516:	6103      	str	r3, [r0, #16]
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	bf00      	nop
 800b51c:	0800d1c8 	.word	0x0800d1c8
 800b520:	0800d2b8 	.word	0x0800d2b8

0800b524 <__multiply>:
 800b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	4691      	mov	r9, r2
 800b52a:	690a      	ldr	r2, [r1, #16]
 800b52c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b530:	429a      	cmp	r2, r3
 800b532:	bfb8      	it	lt
 800b534:	460b      	movlt	r3, r1
 800b536:	460c      	mov	r4, r1
 800b538:	bfbc      	itt	lt
 800b53a:	464c      	movlt	r4, r9
 800b53c:	4699      	movlt	r9, r3
 800b53e:	6927      	ldr	r7, [r4, #16]
 800b540:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b544:	68a3      	ldr	r3, [r4, #8]
 800b546:	6861      	ldr	r1, [r4, #4]
 800b548:	eb07 060a 	add.w	r6, r7, sl
 800b54c:	42b3      	cmp	r3, r6
 800b54e:	b085      	sub	sp, #20
 800b550:	bfb8      	it	lt
 800b552:	3101      	addlt	r1, #1
 800b554:	f7ff fe8e 	bl	800b274 <_Balloc>
 800b558:	b930      	cbnz	r0, 800b568 <__multiply+0x44>
 800b55a:	4602      	mov	r2, r0
 800b55c:	4b44      	ldr	r3, [pc, #272]	; (800b670 <__multiply+0x14c>)
 800b55e:	4845      	ldr	r0, [pc, #276]	; (800b674 <__multiply+0x150>)
 800b560:	f240 115d 	movw	r1, #349	; 0x15d
 800b564:	f001 fb4c 	bl	800cc00 <__assert_func>
 800b568:	f100 0514 	add.w	r5, r0, #20
 800b56c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b570:	462b      	mov	r3, r5
 800b572:	2200      	movs	r2, #0
 800b574:	4543      	cmp	r3, r8
 800b576:	d321      	bcc.n	800b5bc <__multiply+0x98>
 800b578:	f104 0314 	add.w	r3, r4, #20
 800b57c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b580:	f109 0314 	add.w	r3, r9, #20
 800b584:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b588:	9202      	str	r2, [sp, #8]
 800b58a:	1b3a      	subs	r2, r7, r4
 800b58c:	3a15      	subs	r2, #21
 800b58e:	f022 0203 	bic.w	r2, r2, #3
 800b592:	3204      	adds	r2, #4
 800b594:	f104 0115 	add.w	r1, r4, #21
 800b598:	428f      	cmp	r7, r1
 800b59a:	bf38      	it	cc
 800b59c:	2204      	movcc	r2, #4
 800b59e:	9201      	str	r2, [sp, #4]
 800b5a0:	9a02      	ldr	r2, [sp, #8]
 800b5a2:	9303      	str	r3, [sp, #12]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d80c      	bhi.n	800b5c2 <__multiply+0x9e>
 800b5a8:	2e00      	cmp	r6, #0
 800b5aa:	dd03      	ble.n	800b5b4 <__multiply+0x90>
 800b5ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d05a      	beq.n	800b66a <__multiply+0x146>
 800b5b4:	6106      	str	r6, [r0, #16]
 800b5b6:	b005      	add	sp, #20
 800b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	f843 2b04 	str.w	r2, [r3], #4
 800b5c0:	e7d8      	b.n	800b574 <__multiply+0x50>
 800b5c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5c6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ca:	d024      	beq.n	800b616 <__multiply+0xf2>
 800b5cc:	f104 0e14 	add.w	lr, r4, #20
 800b5d0:	46a9      	mov	r9, r5
 800b5d2:	f04f 0c00 	mov.w	ip, #0
 800b5d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5da:	f8d9 1000 	ldr.w	r1, [r9]
 800b5de:	fa1f fb82 	uxth.w	fp, r2
 800b5e2:	b289      	uxth	r1, r1
 800b5e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b5f0:	4461      	add	r1, ip
 800b5f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5fe:	b289      	uxth	r1, r1
 800b600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b604:	4577      	cmp	r7, lr
 800b606:	f849 1b04 	str.w	r1, [r9], #4
 800b60a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b60e:	d8e2      	bhi.n	800b5d6 <__multiply+0xb2>
 800b610:	9a01      	ldr	r2, [sp, #4]
 800b612:	f845 c002 	str.w	ip, [r5, r2]
 800b616:	9a03      	ldr	r2, [sp, #12]
 800b618:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b61c:	3304      	adds	r3, #4
 800b61e:	f1b9 0f00 	cmp.w	r9, #0
 800b622:	d020      	beq.n	800b666 <__multiply+0x142>
 800b624:	6829      	ldr	r1, [r5, #0]
 800b626:	f104 0c14 	add.w	ip, r4, #20
 800b62a:	46ae      	mov	lr, r5
 800b62c:	f04f 0a00 	mov.w	sl, #0
 800b630:	f8bc b000 	ldrh.w	fp, [ip]
 800b634:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b638:	fb09 220b 	mla	r2, r9, fp, r2
 800b63c:	4492      	add	sl, r2
 800b63e:	b289      	uxth	r1, r1
 800b640:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b644:	f84e 1b04 	str.w	r1, [lr], #4
 800b648:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b64c:	f8be 1000 	ldrh.w	r1, [lr]
 800b650:	0c12      	lsrs	r2, r2, #16
 800b652:	fb09 1102 	mla	r1, r9, r2, r1
 800b656:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b65a:	4567      	cmp	r7, ip
 800b65c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b660:	d8e6      	bhi.n	800b630 <__multiply+0x10c>
 800b662:	9a01      	ldr	r2, [sp, #4]
 800b664:	50a9      	str	r1, [r5, r2]
 800b666:	3504      	adds	r5, #4
 800b668:	e79a      	b.n	800b5a0 <__multiply+0x7c>
 800b66a:	3e01      	subs	r6, #1
 800b66c:	e79c      	b.n	800b5a8 <__multiply+0x84>
 800b66e:	bf00      	nop
 800b670:	0800d1c8 	.word	0x0800d1c8
 800b674:	0800d2b8 	.word	0x0800d2b8

0800b678 <__pow5mult>:
 800b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b67c:	4615      	mov	r5, r2
 800b67e:	f012 0203 	ands.w	r2, r2, #3
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	d007      	beq.n	800b698 <__pow5mult+0x20>
 800b688:	4c25      	ldr	r4, [pc, #148]	; (800b720 <__pow5mult+0xa8>)
 800b68a:	3a01      	subs	r2, #1
 800b68c:	2300      	movs	r3, #0
 800b68e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b692:	f7ff fe51 	bl	800b338 <__multadd>
 800b696:	4607      	mov	r7, r0
 800b698:	10ad      	asrs	r5, r5, #2
 800b69a:	d03d      	beq.n	800b718 <__pow5mult+0xa0>
 800b69c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b69e:	b97c      	cbnz	r4, 800b6c0 <__pow5mult+0x48>
 800b6a0:	2010      	movs	r0, #16
 800b6a2:	f7ff fdcd 	bl	800b240 <malloc>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b6aa:	b928      	cbnz	r0, 800b6b8 <__pow5mult+0x40>
 800b6ac:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <__pow5mult+0xac>)
 800b6ae:	481e      	ldr	r0, [pc, #120]	; (800b728 <__pow5mult+0xb0>)
 800b6b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6b4:	f001 faa4 	bl	800cc00 <__assert_func>
 800b6b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6bc:	6004      	str	r4, [r0, #0]
 800b6be:	60c4      	str	r4, [r0, #12]
 800b6c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6c8:	b94c      	cbnz	r4, 800b6de <__pow5mult+0x66>
 800b6ca:	f240 2171 	movw	r1, #625	; 0x271
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f7ff ff12 	bl	800b4f8 <__i2b>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6da:	4604      	mov	r4, r0
 800b6dc:	6003      	str	r3, [r0, #0]
 800b6de:	f04f 0900 	mov.w	r9, #0
 800b6e2:	07eb      	lsls	r3, r5, #31
 800b6e4:	d50a      	bpl.n	800b6fc <__pow5mult+0x84>
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7ff ff1a 	bl	800b524 <__multiply>
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff fdfd 	bl	800b2f4 <_Bfree>
 800b6fa:	4647      	mov	r7, r8
 800b6fc:	106d      	asrs	r5, r5, #1
 800b6fe:	d00b      	beq.n	800b718 <__pow5mult+0xa0>
 800b700:	6820      	ldr	r0, [r4, #0]
 800b702:	b938      	cbnz	r0, 800b714 <__pow5mult+0x9c>
 800b704:	4622      	mov	r2, r4
 800b706:	4621      	mov	r1, r4
 800b708:	4630      	mov	r0, r6
 800b70a:	f7ff ff0b 	bl	800b524 <__multiply>
 800b70e:	6020      	str	r0, [r4, #0]
 800b710:	f8c0 9000 	str.w	r9, [r0]
 800b714:	4604      	mov	r4, r0
 800b716:	e7e4      	b.n	800b6e2 <__pow5mult+0x6a>
 800b718:	4638      	mov	r0, r7
 800b71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71e:	bf00      	nop
 800b720:	0800d408 	.word	0x0800d408
 800b724:	0800d156 	.word	0x0800d156
 800b728:	0800d2b8 	.word	0x0800d2b8

0800b72c <__lshift>:
 800b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	460c      	mov	r4, r1
 800b732:	6849      	ldr	r1, [r1, #4]
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b73a:	68a3      	ldr	r3, [r4, #8]
 800b73c:	4607      	mov	r7, r0
 800b73e:	4691      	mov	r9, r2
 800b740:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b744:	f108 0601 	add.w	r6, r8, #1
 800b748:	42b3      	cmp	r3, r6
 800b74a:	db0b      	blt.n	800b764 <__lshift+0x38>
 800b74c:	4638      	mov	r0, r7
 800b74e:	f7ff fd91 	bl	800b274 <_Balloc>
 800b752:	4605      	mov	r5, r0
 800b754:	b948      	cbnz	r0, 800b76a <__lshift+0x3e>
 800b756:	4602      	mov	r2, r0
 800b758:	4b2a      	ldr	r3, [pc, #168]	; (800b804 <__lshift+0xd8>)
 800b75a:	482b      	ldr	r0, [pc, #172]	; (800b808 <__lshift+0xdc>)
 800b75c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b760:	f001 fa4e 	bl	800cc00 <__assert_func>
 800b764:	3101      	adds	r1, #1
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	e7ee      	b.n	800b748 <__lshift+0x1c>
 800b76a:	2300      	movs	r3, #0
 800b76c:	f100 0114 	add.w	r1, r0, #20
 800b770:	f100 0210 	add.w	r2, r0, #16
 800b774:	4618      	mov	r0, r3
 800b776:	4553      	cmp	r3, sl
 800b778:	db37      	blt.n	800b7ea <__lshift+0xbe>
 800b77a:	6920      	ldr	r0, [r4, #16]
 800b77c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b780:	f104 0314 	add.w	r3, r4, #20
 800b784:	f019 091f 	ands.w	r9, r9, #31
 800b788:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b78c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b790:	d02f      	beq.n	800b7f2 <__lshift+0xc6>
 800b792:	f1c9 0e20 	rsb	lr, r9, #32
 800b796:	468a      	mov	sl, r1
 800b798:	f04f 0c00 	mov.w	ip, #0
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	fa02 f209 	lsl.w	r2, r2, r9
 800b7a2:	ea42 020c 	orr.w	r2, r2, ip
 800b7a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ae:	4298      	cmp	r0, r3
 800b7b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b7b4:	d8f2      	bhi.n	800b79c <__lshift+0x70>
 800b7b6:	1b03      	subs	r3, r0, r4
 800b7b8:	3b15      	subs	r3, #21
 800b7ba:	f023 0303 	bic.w	r3, r3, #3
 800b7be:	3304      	adds	r3, #4
 800b7c0:	f104 0215 	add.w	r2, r4, #21
 800b7c4:	4290      	cmp	r0, r2
 800b7c6:	bf38      	it	cc
 800b7c8:	2304      	movcc	r3, #4
 800b7ca:	f841 c003 	str.w	ip, [r1, r3]
 800b7ce:	f1bc 0f00 	cmp.w	ip, #0
 800b7d2:	d001      	beq.n	800b7d8 <__lshift+0xac>
 800b7d4:	f108 0602 	add.w	r6, r8, #2
 800b7d8:	3e01      	subs	r6, #1
 800b7da:	4638      	mov	r0, r7
 800b7dc:	612e      	str	r6, [r5, #16]
 800b7de:	4621      	mov	r1, r4
 800b7e0:	f7ff fd88 	bl	800b2f4 <_Bfree>
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	e7c1      	b.n	800b776 <__lshift+0x4a>
 800b7f2:	3904      	subs	r1, #4
 800b7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7fc:	4298      	cmp	r0, r3
 800b7fe:	d8f9      	bhi.n	800b7f4 <__lshift+0xc8>
 800b800:	e7ea      	b.n	800b7d8 <__lshift+0xac>
 800b802:	bf00      	nop
 800b804:	0800d1c8 	.word	0x0800d1c8
 800b808:	0800d2b8 	.word	0x0800d2b8

0800b80c <__mcmp>:
 800b80c:	b530      	push	{r4, r5, lr}
 800b80e:	6902      	ldr	r2, [r0, #16]
 800b810:	690c      	ldr	r4, [r1, #16]
 800b812:	1b12      	subs	r2, r2, r4
 800b814:	d10e      	bne.n	800b834 <__mcmp+0x28>
 800b816:	f100 0314 	add.w	r3, r0, #20
 800b81a:	3114      	adds	r1, #20
 800b81c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b82c:	42a5      	cmp	r5, r4
 800b82e:	d003      	beq.n	800b838 <__mcmp+0x2c>
 800b830:	d305      	bcc.n	800b83e <__mcmp+0x32>
 800b832:	2201      	movs	r2, #1
 800b834:	4610      	mov	r0, r2
 800b836:	bd30      	pop	{r4, r5, pc}
 800b838:	4283      	cmp	r3, r0
 800b83a:	d3f3      	bcc.n	800b824 <__mcmp+0x18>
 800b83c:	e7fa      	b.n	800b834 <__mcmp+0x28>
 800b83e:	f04f 32ff 	mov.w	r2, #4294967295
 800b842:	e7f7      	b.n	800b834 <__mcmp+0x28>

0800b844 <__mdiff>:
 800b844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	460c      	mov	r4, r1
 800b84a:	4606      	mov	r6, r0
 800b84c:	4611      	mov	r1, r2
 800b84e:	4620      	mov	r0, r4
 800b850:	4690      	mov	r8, r2
 800b852:	f7ff ffdb 	bl	800b80c <__mcmp>
 800b856:	1e05      	subs	r5, r0, #0
 800b858:	d110      	bne.n	800b87c <__mdiff+0x38>
 800b85a:	4629      	mov	r1, r5
 800b85c:	4630      	mov	r0, r6
 800b85e:	f7ff fd09 	bl	800b274 <_Balloc>
 800b862:	b930      	cbnz	r0, 800b872 <__mdiff+0x2e>
 800b864:	4b3a      	ldr	r3, [pc, #232]	; (800b950 <__mdiff+0x10c>)
 800b866:	4602      	mov	r2, r0
 800b868:	f240 2132 	movw	r1, #562	; 0x232
 800b86c:	4839      	ldr	r0, [pc, #228]	; (800b954 <__mdiff+0x110>)
 800b86e:	f001 f9c7 	bl	800cc00 <__assert_func>
 800b872:	2301      	movs	r3, #1
 800b874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	bfa4      	itt	ge
 800b87e:	4643      	movge	r3, r8
 800b880:	46a0      	movge	r8, r4
 800b882:	4630      	mov	r0, r6
 800b884:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b888:	bfa6      	itte	ge
 800b88a:	461c      	movge	r4, r3
 800b88c:	2500      	movge	r5, #0
 800b88e:	2501      	movlt	r5, #1
 800b890:	f7ff fcf0 	bl	800b274 <_Balloc>
 800b894:	b920      	cbnz	r0, 800b8a0 <__mdiff+0x5c>
 800b896:	4b2e      	ldr	r3, [pc, #184]	; (800b950 <__mdiff+0x10c>)
 800b898:	4602      	mov	r2, r0
 800b89a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b89e:	e7e5      	b.n	800b86c <__mdiff+0x28>
 800b8a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8a4:	6926      	ldr	r6, [r4, #16]
 800b8a6:	60c5      	str	r5, [r0, #12]
 800b8a8:	f104 0914 	add.w	r9, r4, #20
 800b8ac:	f108 0514 	add.w	r5, r8, #20
 800b8b0:	f100 0e14 	add.w	lr, r0, #20
 800b8b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8bc:	f108 0210 	add.w	r2, r8, #16
 800b8c0:	46f2      	mov	sl, lr
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8cc:	fa1f f883 	uxth.w	r8, r3
 800b8d0:	fa11 f18b 	uxtah	r1, r1, fp
 800b8d4:	0c1b      	lsrs	r3, r3, #16
 800b8d6:	eba1 0808 	sub.w	r8, r1, r8
 800b8da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8e2:	fa1f f888 	uxth.w	r8, r8
 800b8e6:	1419      	asrs	r1, r3, #16
 800b8e8:	454e      	cmp	r6, r9
 800b8ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8ee:	f84a 3b04 	str.w	r3, [sl], #4
 800b8f2:	d8e7      	bhi.n	800b8c4 <__mdiff+0x80>
 800b8f4:	1b33      	subs	r3, r6, r4
 800b8f6:	3b15      	subs	r3, #21
 800b8f8:	f023 0303 	bic.w	r3, r3, #3
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	3415      	adds	r4, #21
 800b900:	42a6      	cmp	r6, r4
 800b902:	bf38      	it	cc
 800b904:	2304      	movcc	r3, #4
 800b906:	441d      	add	r5, r3
 800b908:	4473      	add	r3, lr
 800b90a:	469e      	mov	lr, r3
 800b90c:	462e      	mov	r6, r5
 800b90e:	4566      	cmp	r6, ip
 800b910:	d30e      	bcc.n	800b930 <__mdiff+0xec>
 800b912:	f10c 0203 	add.w	r2, ip, #3
 800b916:	1b52      	subs	r2, r2, r5
 800b918:	f022 0203 	bic.w	r2, r2, #3
 800b91c:	3d03      	subs	r5, #3
 800b91e:	45ac      	cmp	ip, r5
 800b920:	bf38      	it	cc
 800b922:	2200      	movcc	r2, #0
 800b924:	441a      	add	r2, r3
 800b926:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b92a:	b17b      	cbz	r3, 800b94c <__mdiff+0x108>
 800b92c:	6107      	str	r7, [r0, #16]
 800b92e:	e7a3      	b.n	800b878 <__mdiff+0x34>
 800b930:	f856 8b04 	ldr.w	r8, [r6], #4
 800b934:	fa11 f288 	uxtah	r2, r1, r8
 800b938:	1414      	asrs	r4, r2, #16
 800b93a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b93e:	b292      	uxth	r2, r2
 800b940:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b944:	f84e 2b04 	str.w	r2, [lr], #4
 800b948:	1421      	asrs	r1, r4, #16
 800b94a:	e7e0      	b.n	800b90e <__mdiff+0xca>
 800b94c:	3f01      	subs	r7, #1
 800b94e:	e7ea      	b.n	800b926 <__mdiff+0xe2>
 800b950:	0800d1c8 	.word	0x0800d1c8
 800b954:	0800d2b8 	.word	0x0800d2b8

0800b958 <__ulp>:
 800b958:	b082      	sub	sp, #8
 800b95a:	ed8d 0b00 	vstr	d0, [sp]
 800b95e:	9b01      	ldr	r3, [sp, #4]
 800b960:	4912      	ldr	r1, [pc, #72]	; (800b9ac <__ulp+0x54>)
 800b962:	4019      	ands	r1, r3
 800b964:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b968:	2900      	cmp	r1, #0
 800b96a:	dd05      	ble.n	800b978 <__ulp+0x20>
 800b96c:	2200      	movs	r2, #0
 800b96e:	460b      	mov	r3, r1
 800b970:	ec43 2b10 	vmov	d0, r2, r3
 800b974:	b002      	add	sp, #8
 800b976:	4770      	bx	lr
 800b978:	4249      	negs	r1, r1
 800b97a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b97e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b982:	f04f 0200 	mov.w	r2, #0
 800b986:	f04f 0300 	mov.w	r3, #0
 800b98a:	da04      	bge.n	800b996 <__ulp+0x3e>
 800b98c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b990:	fa41 f300 	asr.w	r3, r1, r0
 800b994:	e7ec      	b.n	800b970 <__ulp+0x18>
 800b996:	f1a0 0114 	sub.w	r1, r0, #20
 800b99a:	291e      	cmp	r1, #30
 800b99c:	bfda      	itte	le
 800b99e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b9a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b9a6:	2101      	movgt	r1, #1
 800b9a8:	460a      	mov	r2, r1
 800b9aa:	e7e1      	b.n	800b970 <__ulp+0x18>
 800b9ac:	7ff00000 	.word	0x7ff00000

0800b9b0 <__b2d>:
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	6905      	ldr	r5, [r0, #16]
 800b9b4:	f100 0714 	add.w	r7, r0, #20
 800b9b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b9bc:	1f2e      	subs	r6, r5, #4
 800b9be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f7ff fd48 	bl	800b458 <__hi0bits>
 800b9c8:	f1c0 0320 	rsb	r3, r0, #32
 800b9cc:	280a      	cmp	r0, #10
 800b9ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ba4c <__b2d+0x9c>
 800b9d2:	600b      	str	r3, [r1, #0]
 800b9d4:	dc14      	bgt.n	800ba00 <__b2d+0x50>
 800b9d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b9da:	fa24 f10e 	lsr.w	r1, r4, lr
 800b9de:	42b7      	cmp	r7, r6
 800b9e0:	ea41 030c 	orr.w	r3, r1, ip
 800b9e4:	bf34      	ite	cc
 800b9e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b9ea:	2100      	movcs	r1, #0
 800b9ec:	3015      	adds	r0, #21
 800b9ee:	fa04 f000 	lsl.w	r0, r4, r0
 800b9f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b9f6:	ea40 0201 	orr.w	r2, r0, r1
 800b9fa:	ec43 2b10 	vmov	d0, r2, r3
 800b9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba00:	42b7      	cmp	r7, r6
 800ba02:	bf3a      	itte	cc
 800ba04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba08:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba0c:	2100      	movcs	r1, #0
 800ba0e:	380b      	subs	r0, #11
 800ba10:	d017      	beq.n	800ba42 <__b2d+0x92>
 800ba12:	f1c0 0c20 	rsb	ip, r0, #32
 800ba16:	fa04 f500 	lsl.w	r5, r4, r0
 800ba1a:	42be      	cmp	r6, r7
 800ba1c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ba20:	ea45 0504 	orr.w	r5, r5, r4
 800ba24:	bf8c      	ite	hi
 800ba26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ba2a:	2400      	movls	r4, #0
 800ba2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ba30:	fa01 f000 	lsl.w	r0, r1, r0
 800ba34:	fa24 f40c 	lsr.w	r4, r4, ip
 800ba38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba3c:	ea40 0204 	orr.w	r2, r0, r4
 800ba40:	e7db      	b.n	800b9fa <__b2d+0x4a>
 800ba42:	ea44 030c 	orr.w	r3, r4, ip
 800ba46:	460a      	mov	r2, r1
 800ba48:	e7d7      	b.n	800b9fa <__b2d+0x4a>
 800ba4a:	bf00      	nop
 800ba4c:	3ff00000 	.word	0x3ff00000

0800ba50 <__d2b>:
 800ba50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba54:	4689      	mov	r9, r1
 800ba56:	2101      	movs	r1, #1
 800ba58:	ec57 6b10 	vmov	r6, r7, d0
 800ba5c:	4690      	mov	r8, r2
 800ba5e:	f7ff fc09 	bl	800b274 <_Balloc>
 800ba62:	4604      	mov	r4, r0
 800ba64:	b930      	cbnz	r0, 800ba74 <__d2b+0x24>
 800ba66:	4602      	mov	r2, r0
 800ba68:	4b25      	ldr	r3, [pc, #148]	; (800bb00 <__d2b+0xb0>)
 800ba6a:	4826      	ldr	r0, [pc, #152]	; (800bb04 <__d2b+0xb4>)
 800ba6c:	f240 310a 	movw	r1, #778	; 0x30a
 800ba70:	f001 f8c6 	bl	800cc00 <__assert_func>
 800ba74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba7c:	bb35      	cbnz	r5, 800bacc <__d2b+0x7c>
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	d028      	beq.n	800bad6 <__d2b+0x86>
 800ba84:	4668      	mov	r0, sp
 800ba86:	9600      	str	r6, [sp, #0]
 800ba88:	f7ff fd06 	bl	800b498 <__lo0bits>
 800ba8c:	9900      	ldr	r1, [sp, #0]
 800ba8e:	b300      	cbz	r0, 800bad2 <__d2b+0x82>
 800ba90:	9a01      	ldr	r2, [sp, #4]
 800ba92:	f1c0 0320 	rsb	r3, r0, #32
 800ba96:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9a:	430b      	orrs	r3, r1
 800ba9c:	40c2      	lsrs	r2, r0
 800ba9e:	6163      	str	r3, [r4, #20]
 800baa0:	9201      	str	r2, [sp, #4]
 800baa2:	9b01      	ldr	r3, [sp, #4]
 800baa4:	61a3      	str	r3, [r4, #24]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	bf14      	ite	ne
 800baaa:	2202      	movne	r2, #2
 800baac:	2201      	moveq	r2, #1
 800baae:	6122      	str	r2, [r4, #16]
 800bab0:	b1d5      	cbz	r5, 800bae8 <__d2b+0x98>
 800bab2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bab6:	4405      	add	r5, r0
 800bab8:	f8c9 5000 	str.w	r5, [r9]
 800babc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bac0:	f8c8 0000 	str.w	r0, [r8]
 800bac4:	4620      	mov	r0, r4
 800bac6:	b003      	add	sp, #12
 800bac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bacc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bad0:	e7d5      	b.n	800ba7e <__d2b+0x2e>
 800bad2:	6161      	str	r1, [r4, #20]
 800bad4:	e7e5      	b.n	800baa2 <__d2b+0x52>
 800bad6:	a801      	add	r0, sp, #4
 800bad8:	f7ff fcde 	bl	800b498 <__lo0bits>
 800badc:	9b01      	ldr	r3, [sp, #4]
 800bade:	6163      	str	r3, [r4, #20]
 800bae0:	2201      	movs	r2, #1
 800bae2:	6122      	str	r2, [r4, #16]
 800bae4:	3020      	adds	r0, #32
 800bae6:	e7e3      	b.n	800bab0 <__d2b+0x60>
 800bae8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800baec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800baf0:	f8c9 0000 	str.w	r0, [r9]
 800baf4:	6918      	ldr	r0, [r3, #16]
 800baf6:	f7ff fcaf 	bl	800b458 <__hi0bits>
 800bafa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bafe:	e7df      	b.n	800bac0 <__d2b+0x70>
 800bb00:	0800d1c8 	.word	0x0800d1c8
 800bb04:	0800d2b8 	.word	0x0800d2b8

0800bb08 <__ratio>:
 800bb08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0c:	4688      	mov	r8, r1
 800bb0e:	4669      	mov	r1, sp
 800bb10:	4681      	mov	r9, r0
 800bb12:	f7ff ff4d 	bl	800b9b0 <__b2d>
 800bb16:	a901      	add	r1, sp, #4
 800bb18:	4640      	mov	r0, r8
 800bb1a:	ec55 4b10 	vmov	r4, r5, d0
 800bb1e:	f7ff ff47 	bl	800b9b0 <__b2d>
 800bb22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb2a:	eba3 0c02 	sub.w	ip, r3, r2
 800bb2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb38:	ec51 0b10 	vmov	r0, r1, d0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	bfd6      	itet	le
 800bb40:	460a      	movle	r2, r1
 800bb42:	462a      	movgt	r2, r5
 800bb44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb48:	468b      	mov	fp, r1
 800bb4a:	462f      	mov	r7, r5
 800bb4c:	bfd4      	ite	le
 800bb4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bb52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb56:	4620      	mov	r0, r4
 800bb58:	ee10 2a10 	vmov	r2, s0
 800bb5c:	465b      	mov	r3, fp
 800bb5e:	4639      	mov	r1, r7
 800bb60:	f7f4 fe84 	bl	800086c <__aeabi_ddiv>
 800bb64:	ec41 0b10 	vmov	d0, r0, r1
 800bb68:	b003      	add	sp, #12
 800bb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb6e <__copybits>:
 800bb6e:	3901      	subs	r1, #1
 800bb70:	b570      	push	{r4, r5, r6, lr}
 800bb72:	1149      	asrs	r1, r1, #5
 800bb74:	6914      	ldr	r4, [r2, #16]
 800bb76:	3101      	adds	r1, #1
 800bb78:	f102 0314 	add.w	r3, r2, #20
 800bb7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb84:	1f05      	subs	r5, r0, #4
 800bb86:	42a3      	cmp	r3, r4
 800bb88:	d30c      	bcc.n	800bba4 <__copybits+0x36>
 800bb8a:	1aa3      	subs	r3, r4, r2
 800bb8c:	3b11      	subs	r3, #17
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	3211      	adds	r2, #17
 800bb94:	42a2      	cmp	r2, r4
 800bb96:	bf88      	it	hi
 800bb98:	2300      	movhi	r3, #0
 800bb9a:	4418      	add	r0, r3
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4288      	cmp	r0, r1
 800bba0:	d305      	bcc.n	800bbae <__copybits+0x40>
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bba8:	f845 6f04 	str.w	r6, [r5, #4]!
 800bbac:	e7eb      	b.n	800bb86 <__copybits+0x18>
 800bbae:	f840 3b04 	str.w	r3, [r0], #4
 800bbb2:	e7f4      	b.n	800bb9e <__copybits+0x30>

0800bbb4 <__any_on>:
 800bbb4:	f100 0214 	add.w	r2, r0, #20
 800bbb8:	6900      	ldr	r0, [r0, #16]
 800bbba:	114b      	asrs	r3, r1, #5
 800bbbc:	4298      	cmp	r0, r3
 800bbbe:	b510      	push	{r4, lr}
 800bbc0:	db11      	blt.n	800bbe6 <__any_on+0x32>
 800bbc2:	dd0a      	ble.n	800bbda <__any_on+0x26>
 800bbc4:	f011 011f 	ands.w	r1, r1, #31
 800bbc8:	d007      	beq.n	800bbda <__any_on+0x26>
 800bbca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbce:	fa24 f001 	lsr.w	r0, r4, r1
 800bbd2:	fa00 f101 	lsl.w	r1, r0, r1
 800bbd6:	428c      	cmp	r4, r1
 800bbd8:	d10b      	bne.n	800bbf2 <__any_on+0x3e>
 800bbda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d803      	bhi.n	800bbea <__any_on+0x36>
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	bd10      	pop	{r4, pc}
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	e7f7      	b.n	800bbda <__any_on+0x26>
 800bbea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbee:	2900      	cmp	r1, #0
 800bbf0:	d0f5      	beq.n	800bbde <__any_on+0x2a>
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	e7f6      	b.n	800bbe4 <__any_on+0x30>

0800bbf6 <_calloc_r>:
 800bbf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbf8:	fba1 2402 	umull	r2, r4, r1, r2
 800bbfc:	b94c      	cbnz	r4, 800bc12 <_calloc_r+0x1c>
 800bbfe:	4611      	mov	r1, r2
 800bc00:	9201      	str	r2, [sp, #4]
 800bc02:	f000 f87b 	bl	800bcfc <_malloc_r>
 800bc06:	9a01      	ldr	r2, [sp, #4]
 800bc08:	4605      	mov	r5, r0
 800bc0a:	b930      	cbnz	r0, 800bc1a <_calloc_r+0x24>
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	b003      	add	sp, #12
 800bc10:	bd30      	pop	{r4, r5, pc}
 800bc12:	220c      	movs	r2, #12
 800bc14:	6002      	str	r2, [r0, #0]
 800bc16:	2500      	movs	r5, #0
 800bc18:	e7f8      	b.n	800bc0c <_calloc_r+0x16>
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	f7fb ffb6 	bl	8007b8c <memset>
 800bc20:	e7f4      	b.n	800bc0c <_calloc_r+0x16>
	...

0800bc24 <_free_r>:
 800bc24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc26:	2900      	cmp	r1, #0
 800bc28:	d044      	beq.n	800bcb4 <_free_r+0x90>
 800bc2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2e:	9001      	str	r0, [sp, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f1a1 0404 	sub.w	r4, r1, #4
 800bc36:	bfb8      	it	lt
 800bc38:	18e4      	addlt	r4, r4, r3
 800bc3a:	f001 f84d 	bl	800ccd8 <__malloc_lock>
 800bc3e:	4a1e      	ldr	r2, [pc, #120]	; (800bcb8 <_free_r+0x94>)
 800bc40:	9801      	ldr	r0, [sp, #4]
 800bc42:	6813      	ldr	r3, [r2, #0]
 800bc44:	b933      	cbnz	r3, 800bc54 <_free_r+0x30>
 800bc46:	6063      	str	r3, [r4, #4]
 800bc48:	6014      	str	r4, [r2, #0]
 800bc4a:	b003      	add	sp, #12
 800bc4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc50:	f001 b848 	b.w	800cce4 <__malloc_unlock>
 800bc54:	42a3      	cmp	r3, r4
 800bc56:	d908      	bls.n	800bc6a <_free_r+0x46>
 800bc58:	6825      	ldr	r5, [r4, #0]
 800bc5a:	1961      	adds	r1, r4, r5
 800bc5c:	428b      	cmp	r3, r1
 800bc5e:	bf01      	itttt	eq
 800bc60:	6819      	ldreq	r1, [r3, #0]
 800bc62:	685b      	ldreq	r3, [r3, #4]
 800bc64:	1949      	addeq	r1, r1, r5
 800bc66:	6021      	streq	r1, [r4, #0]
 800bc68:	e7ed      	b.n	800bc46 <_free_r+0x22>
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	b10b      	cbz	r3, 800bc74 <_free_r+0x50>
 800bc70:	42a3      	cmp	r3, r4
 800bc72:	d9fa      	bls.n	800bc6a <_free_r+0x46>
 800bc74:	6811      	ldr	r1, [r2, #0]
 800bc76:	1855      	adds	r5, r2, r1
 800bc78:	42a5      	cmp	r5, r4
 800bc7a:	d10b      	bne.n	800bc94 <_free_r+0x70>
 800bc7c:	6824      	ldr	r4, [r4, #0]
 800bc7e:	4421      	add	r1, r4
 800bc80:	1854      	adds	r4, r2, r1
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	6011      	str	r1, [r2, #0]
 800bc86:	d1e0      	bne.n	800bc4a <_free_r+0x26>
 800bc88:	681c      	ldr	r4, [r3, #0]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	6053      	str	r3, [r2, #4]
 800bc8e:	4421      	add	r1, r4
 800bc90:	6011      	str	r1, [r2, #0]
 800bc92:	e7da      	b.n	800bc4a <_free_r+0x26>
 800bc94:	d902      	bls.n	800bc9c <_free_r+0x78>
 800bc96:	230c      	movs	r3, #12
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	e7d6      	b.n	800bc4a <_free_r+0x26>
 800bc9c:	6825      	ldr	r5, [r4, #0]
 800bc9e:	1961      	adds	r1, r4, r5
 800bca0:	428b      	cmp	r3, r1
 800bca2:	bf04      	itt	eq
 800bca4:	6819      	ldreq	r1, [r3, #0]
 800bca6:	685b      	ldreq	r3, [r3, #4]
 800bca8:	6063      	str	r3, [r4, #4]
 800bcaa:	bf04      	itt	eq
 800bcac:	1949      	addeq	r1, r1, r5
 800bcae:	6021      	streq	r1, [r4, #0]
 800bcb0:	6054      	str	r4, [r2, #4]
 800bcb2:	e7ca      	b.n	800bc4a <_free_r+0x26>
 800bcb4:	b003      	add	sp, #12
 800bcb6:	bd30      	pop	{r4, r5, pc}
 800bcb8:	200007fc 	.word	0x200007fc

0800bcbc <sbrk_aligned>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	4e0e      	ldr	r6, [pc, #56]	; (800bcf8 <sbrk_aligned+0x3c>)
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	6831      	ldr	r1, [r6, #0]
 800bcc4:	4605      	mov	r5, r0
 800bcc6:	b911      	cbnz	r1, 800bcce <sbrk_aligned+0x12>
 800bcc8:	f000 fe82 	bl	800c9d0 <_sbrk_r>
 800bccc:	6030      	str	r0, [r6, #0]
 800bcce:	4621      	mov	r1, r4
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	f000 fe7d 	bl	800c9d0 <_sbrk_r>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	d00a      	beq.n	800bcf0 <sbrk_aligned+0x34>
 800bcda:	1cc4      	adds	r4, r0, #3
 800bcdc:	f024 0403 	bic.w	r4, r4, #3
 800bce0:	42a0      	cmp	r0, r4
 800bce2:	d007      	beq.n	800bcf4 <sbrk_aligned+0x38>
 800bce4:	1a21      	subs	r1, r4, r0
 800bce6:	4628      	mov	r0, r5
 800bce8:	f000 fe72 	bl	800c9d0 <_sbrk_r>
 800bcec:	3001      	adds	r0, #1
 800bcee:	d101      	bne.n	800bcf4 <sbrk_aligned+0x38>
 800bcf0:	f04f 34ff 	mov.w	r4, #4294967295
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	20000800 	.word	0x20000800

0800bcfc <_malloc_r>:
 800bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd00:	1ccd      	adds	r5, r1, #3
 800bd02:	f025 0503 	bic.w	r5, r5, #3
 800bd06:	3508      	adds	r5, #8
 800bd08:	2d0c      	cmp	r5, #12
 800bd0a:	bf38      	it	cc
 800bd0c:	250c      	movcc	r5, #12
 800bd0e:	2d00      	cmp	r5, #0
 800bd10:	4607      	mov	r7, r0
 800bd12:	db01      	blt.n	800bd18 <_malloc_r+0x1c>
 800bd14:	42a9      	cmp	r1, r5
 800bd16:	d905      	bls.n	800bd24 <_malloc_r+0x28>
 800bd18:	230c      	movs	r3, #12
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	2600      	movs	r6, #0
 800bd1e:	4630      	mov	r0, r6
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	4e2e      	ldr	r6, [pc, #184]	; (800bde0 <_malloc_r+0xe4>)
 800bd26:	f000 ffd7 	bl	800ccd8 <__malloc_lock>
 800bd2a:	6833      	ldr	r3, [r6, #0]
 800bd2c:	461c      	mov	r4, r3
 800bd2e:	bb34      	cbnz	r4, 800bd7e <_malloc_r+0x82>
 800bd30:	4629      	mov	r1, r5
 800bd32:	4638      	mov	r0, r7
 800bd34:	f7ff ffc2 	bl	800bcbc <sbrk_aligned>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	d14d      	bne.n	800bdda <_malloc_r+0xde>
 800bd3e:	6834      	ldr	r4, [r6, #0]
 800bd40:	4626      	mov	r6, r4
 800bd42:	2e00      	cmp	r6, #0
 800bd44:	d140      	bne.n	800bdc8 <_malloc_r+0xcc>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	eb04 0803 	add.w	r8, r4, r3
 800bd50:	f000 fe3e 	bl	800c9d0 <_sbrk_r>
 800bd54:	4580      	cmp	r8, r0
 800bd56:	d13a      	bne.n	800bdce <_malloc_r+0xd2>
 800bd58:	6821      	ldr	r1, [r4, #0]
 800bd5a:	3503      	adds	r5, #3
 800bd5c:	1a6d      	subs	r5, r5, r1
 800bd5e:	f025 0503 	bic.w	r5, r5, #3
 800bd62:	3508      	adds	r5, #8
 800bd64:	2d0c      	cmp	r5, #12
 800bd66:	bf38      	it	cc
 800bd68:	250c      	movcc	r5, #12
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	f7ff ffa5 	bl	800bcbc <sbrk_aligned>
 800bd72:	3001      	adds	r0, #1
 800bd74:	d02b      	beq.n	800bdce <_malloc_r+0xd2>
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	442b      	add	r3, r5
 800bd7a:	6023      	str	r3, [r4, #0]
 800bd7c:	e00e      	b.n	800bd9c <_malloc_r+0xa0>
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	1b52      	subs	r2, r2, r5
 800bd82:	d41e      	bmi.n	800bdc2 <_malloc_r+0xc6>
 800bd84:	2a0b      	cmp	r2, #11
 800bd86:	d916      	bls.n	800bdb6 <_malloc_r+0xba>
 800bd88:	1961      	adds	r1, r4, r5
 800bd8a:	42a3      	cmp	r3, r4
 800bd8c:	6025      	str	r5, [r4, #0]
 800bd8e:	bf18      	it	ne
 800bd90:	6059      	strne	r1, [r3, #4]
 800bd92:	6863      	ldr	r3, [r4, #4]
 800bd94:	bf08      	it	eq
 800bd96:	6031      	streq	r1, [r6, #0]
 800bd98:	5162      	str	r2, [r4, r5]
 800bd9a:	604b      	str	r3, [r1, #4]
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	f104 060b 	add.w	r6, r4, #11
 800bda2:	f000 ff9f 	bl	800cce4 <__malloc_unlock>
 800bda6:	f026 0607 	bic.w	r6, r6, #7
 800bdaa:	1d23      	adds	r3, r4, #4
 800bdac:	1af2      	subs	r2, r6, r3
 800bdae:	d0b6      	beq.n	800bd1e <_malloc_r+0x22>
 800bdb0:	1b9b      	subs	r3, r3, r6
 800bdb2:	50a3      	str	r3, [r4, r2]
 800bdb4:	e7b3      	b.n	800bd1e <_malloc_r+0x22>
 800bdb6:	6862      	ldr	r2, [r4, #4]
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	bf0c      	ite	eq
 800bdbc:	6032      	streq	r2, [r6, #0]
 800bdbe:	605a      	strne	r2, [r3, #4]
 800bdc0:	e7ec      	b.n	800bd9c <_malloc_r+0xa0>
 800bdc2:	4623      	mov	r3, r4
 800bdc4:	6864      	ldr	r4, [r4, #4]
 800bdc6:	e7b2      	b.n	800bd2e <_malloc_r+0x32>
 800bdc8:	4634      	mov	r4, r6
 800bdca:	6876      	ldr	r6, [r6, #4]
 800bdcc:	e7b9      	b.n	800bd42 <_malloc_r+0x46>
 800bdce:	230c      	movs	r3, #12
 800bdd0:	603b      	str	r3, [r7, #0]
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	f000 ff86 	bl	800cce4 <__malloc_unlock>
 800bdd8:	e7a1      	b.n	800bd1e <_malloc_r+0x22>
 800bdda:	6025      	str	r5, [r4, #0]
 800bddc:	e7de      	b.n	800bd9c <_malloc_r+0xa0>
 800bdde:	bf00      	nop
 800bde0:	200007fc 	.word	0x200007fc

0800bde4 <__ssputs_r>:
 800bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	688e      	ldr	r6, [r1, #8]
 800bdea:	429e      	cmp	r6, r3
 800bdec:	4682      	mov	sl, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4690      	mov	r8, r2
 800bdf2:	461f      	mov	r7, r3
 800bdf4:	d838      	bhi.n	800be68 <__ssputs_r+0x84>
 800bdf6:	898a      	ldrh	r2, [r1, #12]
 800bdf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdfc:	d032      	beq.n	800be64 <__ssputs_r+0x80>
 800bdfe:	6825      	ldr	r5, [r4, #0]
 800be00:	6909      	ldr	r1, [r1, #16]
 800be02:	eba5 0901 	sub.w	r9, r5, r1
 800be06:	6965      	ldr	r5, [r4, #20]
 800be08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be10:	3301      	adds	r3, #1
 800be12:	444b      	add	r3, r9
 800be14:	106d      	asrs	r5, r5, #1
 800be16:	429d      	cmp	r5, r3
 800be18:	bf38      	it	cc
 800be1a:	461d      	movcc	r5, r3
 800be1c:	0553      	lsls	r3, r2, #21
 800be1e:	d531      	bpl.n	800be84 <__ssputs_r+0xa0>
 800be20:	4629      	mov	r1, r5
 800be22:	f7ff ff6b 	bl	800bcfc <_malloc_r>
 800be26:	4606      	mov	r6, r0
 800be28:	b950      	cbnz	r0, 800be40 <__ssputs_r+0x5c>
 800be2a:	230c      	movs	r3, #12
 800be2c:	f8ca 3000 	str.w	r3, [sl]
 800be30:	89a3      	ldrh	r3, [r4, #12]
 800be32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be36:	81a3      	strh	r3, [r4, #12]
 800be38:	f04f 30ff 	mov.w	r0, #4294967295
 800be3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be40:	6921      	ldr	r1, [r4, #16]
 800be42:	464a      	mov	r2, r9
 800be44:	f7fb fe94 	bl	8007b70 <memcpy>
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	6126      	str	r6, [r4, #16]
 800be56:	6165      	str	r5, [r4, #20]
 800be58:	444e      	add	r6, r9
 800be5a:	eba5 0509 	sub.w	r5, r5, r9
 800be5e:	6026      	str	r6, [r4, #0]
 800be60:	60a5      	str	r5, [r4, #8]
 800be62:	463e      	mov	r6, r7
 800be64:	42be      	cmp	r6, r7
 800be66:	d900      	bls.n	800be6a <__ssputs_r+0x86>
 800be68:	463e      	mov	r6, r7
 800be6a:	6820      	ldr	r0, [r4, #0]
 800be6c:	4632      	mov	r2, r6
 800be6e:	4641      	mov	r1, r8
 800be70:	f000 ff18 	bl	800cca4 <memmove>
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	1b9b      	subs	r3, r3, r6
 800be78:	60a3      	str	r3, [r4, #8]
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	4433      	add	r3, r6
 800be7e:	6023      	str	r3, [r4, #0]
 800be80:	2000      	movs	r0, #0
 800be82:	e7db      	b.n	800be3c <__ssputs_r+0x58>
 800be84:	462a      	mov	r2, r5
 800be86:	f000 ff33 	bl	800ccf0 <_realloc_r>
 800be8a:	4606      	mov	r6, r0
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d1e1      	bne.n	800be54 <__ssputs_r+0x70>
 800be90:	6921      	ldr	r1, [r4, #16]
 800be92:	4650      	mov	r0, sl
 800be94:	f7ff fec6 	bl	800bc24 <_free_r>
 800be98:	e7c7      	b.n	800be2a <__ssputs_r+0x46>
	...

0800be9c <_svfiprintf_r>:
 800be9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea0:	4698      	mov	r8, r3
 800bea2:	898b      	ldrh	r3, [r1, #12]
 800bea4:	061b      	lsls	r3, r3, #24
 800bea6:	b09d      	sub	sp, #116	; 0x74
 800bea8:	4607      	mov	r7, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	4614      	mov	r4, r2
 800beae:	d50e      	bpl.n	800bece <_svfiprintf_r+0x32>
 800beb0:	690b      	ldr	r3, [r1, #16]
 800beb2:	b963      	cbnz	r3, 800bece <_svfiprintf_r+0x32>
 800beb4:	2140      	movs	r1, #64	; 0x40
 800beb6:	f7ff ff21 	bl	800bcfc <_malloc_r>
 800beba:	6028      	str	r0, [r5, #0]
 800bebc:	6128      	str	r0, [r5, #16]
 800bebe:	b920      	cbnz	r0, 800beca <_svfiprintf_r+0x2e>
 800bec0:	230c      	movs	r3, #12
 800bec2:	603b      	str	r3, [r7, #0]
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	e0d1      	b.n	800c06e <_svfiprintf_r+0x1d2>
 800beca:	2340      	movs	r3, #64	; 0x40
 800becc:	616b      	str	r3, [r5, #20]
 800bece:	2300      	movs	r3, #0
 800bed0:	9309      	str	r3, [sp, #36]	; 0x24
 800bed2:	2320      	movs	r3, #32
 800bed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bed8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bedc:	2330      	movs	r3, #48	; 0x30
 800bede:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c088 <_svfiprintf_r+0x1ec>
 800bee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bee6:	f04f 0901 	mov.w	r9, #1
 800beea:	4623      	mov	r3, r4
 800beec:	469a      	mov	sl, r3
 800beee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bef2:	b10a      	cbz	r2, 800bef8 <_svfiprintf_r+0x5c>
 800bef4:	2a25      	cmp	r2, #37	; 0x25
 800bef6:	d1f9      	bne.n	800beec <_svfiprintf_r+0x50>
 800bef8:	ebba 0b04 	subs.w	fp, sl, r4
 800befc:	d00b      	beq.n	800bf16 <_svfiprintf_r+0x7a>
 800befe:	465b      	mov	r3, fp
 800bf00:	4622      	mov	r2, r4
 800bf02:	4629      	mov	r1, r5
 800bf04:	4638      	mov	r0, r7
 800bf06:	f7ff ff6d 	bl	800bde4 <__ssputs_r>
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	f000 80aa 	beq.w	800c064 <_svfiprintf_r+0x1c8>
 800bf10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf12:	445a      	add	r2, fp
 800bf14:	9209      	str	r2, [sp, #36]	; 0x24
 800bf16:	f89a 3000 	ldrb.w	r3, [sl]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 80a2 	beq.w	800c064 <_svfiprintf_r+0x1c8>
 800bf20:	2300      	movs	r3, #0
 800bf22:	f04f 32ff 	mov.w	r2, #4294967295
 800bf26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf2a:	f10a 0a01 	add.w	sl, sl, #1
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	9307      	str	r3, [sp, #28]
 800bf32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf36:	931a      	str	r3, [sp, #104]	; 0x68
 800bf38:	4654      	mov	r4, sl
 800bf3a:	2205      	movs	r2, #5
 800bf3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf40:	4851      	ldr	r0, [pc, #324]	; (800c088 <_svfiprintf_r+0x1ec>)
 800bf42:	f7f4 f95d 	bl	8000200 <memchr>
 800bf46:	9a04      	ldr	r2, [sp, #16]
 800bf48:	b9d8      	cbnz	r0, 800bf82 <_svfiprintf_r+0xe6>
 800bf4a:	06d0      	lsls	r0, r2, #27
 800bf4c:	bf44      	itt	mi
 800bf4e:	2320      	movmi	r3, #32
 800bf50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf54:	0711      	lsls	r1, r2, #28
 800bf56:	bf44      	itt	mi
 800bf58:	232b      	movmi	r3, #43	; 0x2b
 800bf5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf5e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf62:	2b2a      	cmp	r3, #42	; 0x2a
 800bf64:	d015      	beq.n	800bf92 <_svfiprintf_r+0xf6>
 800bf66:	9a07      	ldr	r2, [sp, #28]
 800bf68:	4654      	mov	r4, sl
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	f04f 0c0a 	mov.w	ip, #10
 800bf70:	4621      	mov	r1, r4
 800bf72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf76:	3b30      	subs	r3, #48	; 0x30
 800bf78:	2b09      	cmp	r3, #9
 800bf7a:	d94e      	bls.n	800c01a <_svfiprintf_r+0x17e>
 800bf7c:	b1b0      	cbz	r0, 800bfac <_svfiprintf_r+0x110>
 800bf7e:	9207      	str	r2, [sp, #28]
 800bf80:	e014      	b.n	800bfac <_svfiprintf_r+0x110>
 800bf82:	eba0 0308 	sub.w	r3, r0, r8
 800bf86:	fa09 f303 	lsl.w	r3, r9, r3
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	9304      	str	r3, [sp, #16]
 800bf8e:	46a2      	mov	sl, r4
 800bf90:	e7d2      	b.n	800bf38 <_svfiprintf_r+0x9c>
 800bf92:	9b03      	ldr	r3, [sp, #12]
 800bf94:	1d19      	adds	r1, r3, #4
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	9103      	str	r1, [sp, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bfbb      	ittet	lt
 800bf9e:	425b      	neglt	r3, r3
 800bfa0:	f042 0202 	orrlt.w	r2, r2, #2
 800bfa4:	9307      	strge	r3, [sp, #28]
 800bfa6:	9307      	strlt	r3, [sp, #28]
 800bfa8:	bfb8      	it	lt
 800bfaa:	9204      	strlt	r2, [sp, #16]
 800bfac:	7823      	ldrb	r3, [r4, #0]
 800bfae:	2b2e      	cmp	r3, #46	; 0x2e
 800bfb0:	d10c      	bne.n	800bfcc <_svfiprintf_r+0x130>
 800bfb2:	7863      	ldrb	r3, [r4, #1]
 800bfb4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfb6:	d135      	bne.n	800c024 <_svfiprintf_r+0x188>
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	1d1a      	adds	r2, r3, #4
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	9203      	str	r2, [sp, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	bfb8      	it	lt
 800bfc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfc8:	3402      	adds	r4, #2
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c098 <_svfiprintf_r+0x1fc>
 800bfd0:	7821      	ldrb	r1, [r4, #0]
 800bfd2:	2203      	movs	r2, #3
 800bfd4:	4650      	mov	r0, sl
 800bfd6:	f7f4 f913 	bl	8000200 <memchr>
 800bfda:	b140      	cbz	r0, 800bfee <_svfiprintf_r+0x152>
 800bfdc:	2340      	movs	r3, #64	; 0x40
 800bfde:	eba0 000a 	sub.w	r0, r0, sl
 800bfe2:	fa03 f000 	lsl.w	r0, r3, r0
 800bfe6:	9b04      	ldr	r3, [sp, #16]
 800bfe8:	4303      	orrs	r3, r0
 800bfea:	3401      	adds	r4, #1
 800bfec:	9304      	str	r3, [sp, #16]
 800bfee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff2:	4826      	ldr	r0, [pc, #152]	; (800c08c <_svfiprintf_r+0x1f0>)
 800bff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bff8:	2206      	movs	r2, #6
 800bffa:	f7f4 f901 	bl	8000200 <memchr>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d038      	beq.n	800c074 <_svfiprintf_r+0x1d8>
 800c002:	4b23      	ldr	r3, [pc, #140]	; (800c090 <_svfiprintf_r+0x1f4>)
 800c004:	bb1b      	cbnz	r3, 800c04e <_svfiprintf_r+0x1b2>
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	3307      	adds	r3, #7
 800c00a:	f023 0307 	bic.w	r3, r3, #7
 800c00e:	3308      	adds	r3, #8
 800c010:	9303      	str	r3, [sp, #12]
 800c012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c014:	4433      	add	r3, r6
 800c016:	9309      	str	r3, [sp, #36]	; 0x24
 800c018:	e767      	b.n	800beea <_svfiprintf_r+0x4e>
 800c01a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c01e:	460c      	mov	r4, r1
 800c020:	2001      	movs	r0, #1
 800c022:	e7a5      	b.n	800bf70 <_svfiprintf_r+0xd4>
 800c024:	2300      	movs	r3, #0
 800c026:	3401      	adds	r4, #1
 800c028:	9305      	str	r3, [sp, #20]
 800c02a:	4619      	mov	r1, r3
 800c02c:	f04f 0c0a 	mov.w	ip, #10
 800c030:	4620      	mov	r0, r4
 800c032:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c036:	3a30      	subs	r2, #48	; 0x30
 800c038:	2a09      	cmp	r2, #9
 800c03a:	d903      	bls.n	800c044 <_svfiprintf_r+0x1a8>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d0c5      	beq.n	800bfcc <_svfiprintf_r+0x130>
 800c040:	9105      	str	r1, [sp, #20]
 800c042:	e7c3      	b.n	800bfcc <_svfiprintf_r+0x130>
 800c044:	fb0c 2101 	mla	r1, ip, r1, r2
 800c048:	4604      	mov	r4, r0
 800c04a:	2301      	movs	r3, #1
 800c04c:	e7f0      	b.n	800c030 <_svfiprintf_r+0x194>
 800c04e:	ab03      	add	r3, sp, #12
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462a      	mov	r2, r5
 800c054:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <_svfiprintf_r+0x1f8>)
 800c056:	a904      	add	r1, sp, #16
 800c058:	4638      	mov	r0, r7
 800c05a:	f7fb fe3f 	bl	8007cdc <_printf_float>
 800c05e:	1c42      	adds	r2, r0, #1
 800c060:	4606      	mov	r6, r0
 800c062:	d1d6      	bne.n	800c012 <_svfiprintf_r+0x176>
 800c064:	89ab      	ldrh	r3, [r5, #12]
 800c066:	065b      	lsls	r3, r3, #25
 800c068:	f53f af2c 	bmi.w	800bec4 <_svfiprintf_r+0x28>
 800c06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c06e:	b01d      	add	sp, #116	; 0x74
 800c070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c074:	ab03      	add	r3, sp, #12
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	462a      	mov	r2, r5
 800c07a:	4b06      	ldr	r3, [pc, #24]	; (800c094 <_svfiprintf_r+0x1f8>)
 800c07c:	a904      	add	r1, sp, #16
 800c07e:	4638      	mov	r0, r7
 800c080:	f7fc f8d0 	bl	8008224 <_printf_i>
 800c084:	e7eb      	b.n	800c05e <_svfiprintf_r+0x1c2>
 800c086:	bf00      	nop
 800c088:	0800d414 	.word	0x0800d414
 800c08c:	0800d41e 	.word	0x0800d41e
 800c090:	08007cdd 	.word	0x08007cdd
 800c094:	0800bde5 	.word	0x0800bde5
 800c098:	0800d41a 	.word	0x0800d41a

0800c09c <_sungetc_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	1c4b      	adds	r3, r1, #1
 800c0a0:	4614      	mov	r4, r2
 800c0a2:	d103      	bne.n	800c0ac <_sungetc_r+0x10>
 800c0a4:	f04f 35ff 	mov.w	r5, #4294967295
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	8993      	ldrh	r3, [r2, #12]
 800c0ae:	f023 0320 	bic.w	r3, r3, #32
 800c0b2:	8193      	strh	r3, [r2, #12]
 800c0b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0b6:	6852      	ldr	r2, [r2, #4]
 800c0b8:	b2cd      	uxtb	r5, r1
 800c0ba:	b18b      	cbz	r3, 800c0e0 <_sungetc_r+0x44>
 800c0bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	dd08      	ble.n	800c0d4 <_sungetc_r+0x38>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	1e5a      	subs	r2, r3, #1
 800c0c6:	6022      	str	r2, [r4, #0]
 800c0c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c0cc:	6863      	ldr	r3, [r4, #4]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	6063      	str	r3, [r4, #4]
 800c0d2:	e7e9      	b.n	800c0a8 <_sungetc_r+0xc>
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	f000 fd4b 	bl	800cb70 <__submore>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d0f1      	beq.n	800c0c2 <_sungetc_r+0x26>
 800c0de:	e7e1      	b.n	800c0a4 <_sungetc_r+0x8>
 800c0e0:	6921      	ldr	r1, [r4, #16]
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	b151      	cbz	r1, 800c0fc <_sungetc_r+0x60>
 800c0e6:	4299      	cmp	r1, r3
 800c0e8:	d208      	bcs.n	800c0fc <_sungetc_r+0x60>
 800c0ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c0ee:	42a9      	cmp	r1, r5
 800c0f0:	d104      	bne.n	800c0fc <_sungetc_r+0x60>
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	3201      	adds	r2, #1
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	6062      	str	r2, [r4, #4]
 800c0fa:	e7d5      	b.n	800c0a8 <_sungetc_r+0xc>
 800c0fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c104:	6363      	str	r3, [r4, #52]	; 0x34
 800c106:	2303      	movs	r3, #3
 800c108:	63a3      	str	r3, [r4, #56]	; 0x38
 800c10a:	4623      	mov	r3, r4
 800c10c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	2301      	movs	r3, #1
 800c114:	e7dc      	b.n	800c0d0 <_sungetc_r+0x34>

0800c116 <__ssrefill_r>:
 800c116:	b510      	push	{r4, lr}
 800c118:	460c      	mov	r4, r1
 800c11a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c11c:	b169      	cbz	r1, 800c13a <__ssrefill_r+0x24>
 800c11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c122:	4299      	cmp	r1, r3
 800c124:	d001      	beq.n	800c12a <__ssrefill_r+0x14>
 800c126:	f7ff fd7d 	bl	800bc24 <_free_r>
 800c12a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c12c:	6063      	str	r3, [r4, #4]
 800c12e:	2000      	movs	r0, #0
 800c130:	6360      	str	r0, [r4, #52]	; 0x34
 800c132:	b113      	cbz	r3, 800c13a <__ssrefill_r+0x24>
 800c134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	2300      	movs	r3, #0
 800c140:	6063      	str	r3, [r4, #4]
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0320 	orr.w	r3, r3, #32
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	e7f3      	b.n	800c138 <__ssrefill_r+0x22>

0800c150 <__ssvfiscanf_r>:
 800c150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c154:	460c      	mov	r4, r1
 800c156:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c15a:	2100      	movs	r1, #0
 800c15c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c160:	49a6      	ldr	r1, [pc, #664]	; (800c3fc <__ssvfiscanf_r+0x2ac>)
 800c162:	91a0      	str	r1, [sp, #640]	; 0x280
 800c164:	f10d 0804 	add.w	r8, sp, #4
 800c168:	49a5      	ldr	r1, [pc, #660]	; (800c400 <__ssvfiscanf_r+0x2b0>)
 800c16a:	4fa6      	ldr	r7, [pc, #664]	; (800c404 <__ssvfiscanf_r+0x2b4>)
 800c16c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c408 <__ssvfiscanf_r+0x2b8>
 800c170:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c174:	4606      	mov	r6, r0
 800c176:	91a1      	str	r1, [sp, #644]	; 0x284
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	7813      	ldrb	r3, [r2, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 815a 	beq.w	800c436 <__ssvfiscanf_r+0x2e6>
 800c182:	5dd9      	ldrb	r1, [r3, r7]
 800c184:	f011 0108 	ands.w	r1, r1, #8
 800c188:	f102 0501 	add.w	r5, r2, #1
 800c18c:	d019      	beq.n	800c1c2 <__ssvfiscanf_r+0x72>
 800c18e:	6863      	ldr	r3, [r4, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	dd0f      	ble.n	800c1b4 <__ssvfiscanf_r+0x64>
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	781a      	ldrb	r2, [r3, #0]
 800c198:	5cba      	ldrb	r2, [r7, r2]
 800c19a:	0712      	lsls	r2, r2, #28
 800c19c:	d401      	bmi.n	800c1a2 <__ssvfiscanf_r+0x52>
 800c19e:	462a      	mov	r2, r5
 800c1a0:	e7eb      	b.n	800c17a <__ssvfiscanf_r+0x2a>
 800c1a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1a4:	3201      	adds	r2, #1
 800c1a6:	9245      	str	r2, [sp, #276]	; 0x114
 800c1a8:	6862      	ldr	r2, [r4, #4]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	3a01      	subs	r2, #1
 800c1ae:	6062      	str	r2, [r4, #4]
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	e7ec      	b.n	800c18e <__ssvfiscanf_r+0x3e>
 800c1b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	4798      	blx	r3
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d0e9      	beq.n	800c194 <__ssvfiscanf_r+0x44>
 800c1c0:	e7ed      	b.n	800c19e <__ssvfiscanf_r+0x4e>
 800c1c2:	2b25      	cmp	r3, #37	; 0x25
 800c1c4:	d012      	beq.n	800c1ec <__ssvfiscanf_r+0x9c>
 800c1c6:	469a      	mov	sl, r3
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f340 8091 	ble.w	800c2f2 <__ssvfiscanf_r+0x1a2>
 800c1d0:	6822      	ldr	r2, [r4, #0]
 800c1d2:	7813      	ldrb	r3, [r2, #0]
 800c1d4:	4553      	cmp	r3, sl
 800c1d6:	f040 812e 	bne.w	800c436 <__ssvfiscanf_r+0x2e6>
 800c1da:	6863      	ldr	r3, [r4, #4]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	6063      	str	r3, [r4, #4]
 800c1e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c1e2:	3201      	adds	r2, #1
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	6022      	str	r2, [r4, #0]
 800c1e8:	9345      	str	r3, [sp, #276]	; 0x114
 800c1ea:	e7d8      	b.n	800c19e <__ssvfiscanf_r+0x4e>
 800c1ec:	9141      	str	r1, [sp, #260]	; 0x104
 800c1ee:	9143      	str	r1, [sp, #268]	; 0x10c
 800c1f0:	7853      	ldrb	r3, [r2, #1]
 800c1f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1f4:	bf02      	ittt	eq
 800c1f6:	2310      	moveq	r3, #16
 800c1f8:	1c95      	addeq	r5, r2, #2
 800c1fa:	9341      	streq	r3, [sp, #260]	; 0x104
 800c1fc:	220a      	movs	r2, #10
 800c1fe:	46aa      	mov	sl, r5
 800c200:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c204:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c208:	2b09      	cmp	r3, #9
 800c20a:	d91d      	bls.n	800c248 <__ssvfiscanf_r+0xf8>
 800c20c:	487e      	ldr	r0, [pc, #504]	; (800c408 <__ssvfiscanf_r+0x2b8>)
 800c20e:	2203      	movs	r2, #3
 800c210:	f7f3 fff6 	bl	8000200 <memchr>
 800c214:	b140      	cbz	r0, 800c228 <__ssvfiscanf_r+0xd8>
 800c216:	2301      	movs	r3, #1
 800c218:	eba0 0009 	sub.w	r0, r0, r9
 800c21c:	fa03 f000 	lsl.w	r0, r3, r0
 800c220:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c222:	4318      	orrs	r0, r3
 800c224:	9041      	str	r0, [sp, #260]	; 0x104
 800c226:	4655      	mov	r5, sl
 800c228:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c22c:	2b78      	cmp	r3, #120	; 0x78
 800c22e:	d806      	bhi.n	800c23e <__ssvfiscanf_r+0xee>
 800c230:	2b57      	cmp	r3, #87	; 0x57
 800c232:	d810      	bhi.n	800c256 <__ssvfiscanf_r+0x106>
 800c234:	2b25      	cmp	r3, #37	; 0x25
 800c236:	d0c6      	beq.n	800c1c6 <__ssvfiscanf_r+0x76>
 800c238:	d856      	bhi.n	800c2e8 <__ssvfiscanf_r+0x198>
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d064      	beq.n	800c308 <__ssvfiscanf_r+0x1b8>
 800c23e:	2303      	movs	r3, #3
 800c240:	9347      	str	r3, [sp, #284]	; 0x11c
 800c242:	230a      	movs	r3, #10
 800c244:	9342      	str	r3, [sp, #264]	; 0x108
 800c246:	e071      	b.n	800c32c <__ssvfiscanf_r+0x1dc>
 800c248:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c24a:	fb02 1103 	mla	r1, r2, r3, r1
 800c24e:	3930      	subs	r1, #48	; 0x30
 800c250:	9143      	str	r1, [sp, #268]	; 0x10c
 800c252:	4655      	mov	r5, sl
 800c254:	e7d3      	b.n	800c1fe <__ssvfiscanf_r+0xae>
 800c256:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c25a:	2a20      	cmp	r2, #32
 800c25c:	d8ef      	bhi.n	800c23e <__ssvfiscanf_r+0xee>
 800c25e:	a101      	add	r1, pc, #4	; (adr r1, 800c264 <__ssvfiscanf_r+0x114>)
 800c260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c264:	0800c317 	.word	0x0800c317
 800c268:	0800c23f 	.word	0x0800c23f
 800c26c:	0800c23f 	.word	0x0800c23f
 800c270:	0800c375 	.word	0x0800c375
 800c274:	0800c23f 	.word	0x0800c23f
 800c278:	0800c23f 	.word	0x0800c23f
 800c27c:	0800c23f 	.word	0x0800c23f
 800c280:	0800c23f 	.word	0x0800c23f
 800c284:	0800c23f 	.word	0x0800c23f
 800c288:	0800c23f 	.word	0x0800c23f
 800c28c:	0800c23f 	.word	0x0800c23f
 800c290:	0800c38b 	.word	0x0800c38b
 800c294:	0800c361 	.word	0x0800c361
 800c298:	0800c2ef 	.word	0x0800c2ef
 800c29c:	0800c2ef 	.word	0x0800c2ef
 800c2a0:	0800c2ef 	.word	0x0800c2ef
 800c2a4:	0800c23f 	.word	0x0800c23f
 800c2a8:	0800c365 	.word	0x0800c365
 800c2ac:	0800c23f 	.word	0x0800c23f
 800c2b0:	0800c23f 	.word	0x0800c23f
 800c2b4:	0800c23f 	.word	0x0800c23f
 800c2b8:	0800c23f 	.word	0x0800c23f
 800c2bc:	0800c39b 	.word	0x0800c39b
 800c2c0:	0800c36d 	.word	0x0800c36d
 800c2c4:	0800c30f 	.word	0x0800c30f
 800c2c8:	0800c23f 	.word	0x0800c23f
 800c2cc:	0800c23f 	.word	0x0800c23f
 800c2d0:	0800c397 	.word	0x0800c397
 800c2d4:	0800c23f 	.word	0x0800c23f
 800c2d8:	0800c361 	.word	0x0800c361
 800c2dc:	0800c23f 	.word	0x0800c23f
 800c2e0:	0800c23f 	.word	0x0800c23f
 800c2e4:	0800c317 	.word	0x0800c317
 800c2e8:	3b45      	subs	r3, #69	; 0x45
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d8a7      	bhi.n	800c23e <__ssvfiscanf_r+0xee>
 800c2ee:	2305      	movs	r3, #5
 800c2f0:	e01b      	b.n	800c32a <__ssvfiscanf_r+0x1da>
 800c2f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	4798      	blx	r3
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	f43f af68 	beq.w	800c1d0 <__ssvfiscanf_r+0x80>
 800c300:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c302:	2800      	cmp	r0, #0
 800c304:	f040 808d 	bne.w	800c422 <__ssvfiscanf_r+0x2d2>
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	e08f      	b.n	800c42e <__ssvfiscanf_r+0x2de>
 800c30e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c310:	f042 0220 	orr.w	r2, r2, #32
 800c314:	9241      	str	r2, [sp, #260]	; 0x104
 800c316:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c31c:	9241      	str	r2, [sp, #260]	; 0x104
 800c31e:	2210      	movs	r2, #16
 800c320:	2b6f      	cmp	r3, #111	; 0x6f
 800c322:	9242      	str	r2, [sp, #264]	; 0x108
 800c324:	bf34      	ite	cc
 800c326:	2303      	movcc	r3, #3
 800c328:	2304      	movcs	r3, #4
 800c32a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c32c:	6863      	ldr	r3, [r4, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	dd42      	ble.n	800c3b8 <__ssvfiscanf_r+0x268>
 800c332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c334:	0659      	lsls	r1, r3, #25
 800c336:	d404      	bmi.n	800c342 <__ssvfiscanf_r+0x1f2>
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	781a      	ldrb	r2, [r3, #0]
 800c33c:	5cba      	ldrb	r2, [r7, r2]
 800c33e:	0712      	lsls	r2, r2, #28
 800c340:	d441      	bmi.n	800c3c6 <__ssvfiscanf_r+0x276>
 800c342:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c344:	2b02      	cmp	r3, #2
 800c346:	dc50      	bgt.n	800c3ea <__ssvfiscanf_r+0x29a>
 800c348:	466b      	mov	r3, sp
 800c34a:	4622      	mov	r2, r4
 800c34c:	a941      	add	r1, sp, #260	; 0x104
 800c34e:	4630      	mov	r0, r6
 800c350:	f000 f9d0 	bl	800c6f4 <_scanf_chars>
 800c354:	2801      	cmp	r0, #1
 800c356:	d06e      	beq.n	800c436 <__ssvfiscanf_r+0x2e6>
 800c358:	2802      	cmp	r0, #2
 800c35a:	f47f af20 	bne.w	800c19e <__ssvfiscanf_r+0x4e>
 800c35e:	e7cf      	b.n	800c300 <__ssvfiscanf_r+0x1b0>
 800c360:	220a      	movs	r2, #10
 800c362:	e7dd      	b.n	800c320 <__ssvfiscanf_r+0x1d0>
 800c364:	2300      	movs	r3, #0
 800c366:	9342      	str	r3, [sp, #264]	; 0x108
 800c368:	2303      	movs	r3, #3
 800c36a:	e7de      	b.n	800c32a <__ssvfiscanf_r+0x1da>
 800c36c:	2308      	movs	r3, #8
 800c36e:	9342      	str	r3, [sp, #264]	; 0x108
 800c370:	2304      	movs	r3, #4
 800c372:	e7da      	b.n	800c32a <__ssvfiscanf_r+0x1da>
 800c374:	4629      	mov	r1, r5
 800c376:	4640      	mov	r0, r8
 800c378:	f000 fb3a 	bl	800c9f0 <__sccl>
 800c37c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c382:	9341      	str	r3, [sp, #260]	; 0x104
 800c384:	4605      	mov	r5, r0
 800c386:	2301      	movs	r3, #1
 800c388:	e7cf      	b.n	800c32a <__ssvfiscanf_r+0x1da>
 800c38a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c390:	9341      	str	r3, [sp, #260]	; 0x104
 800c392:	2300      	movs	r3, #0
 800c394:	e7c9      	b.n	800c32a <__ssvfiscanf_r+0x1da>
 800c396:	2302      	movs	r3, #2
 800c398:	e7c7      	b.n	800c32a <__ssvfiscanf_r+0x1da>
 800c39a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c39c:	06c3      	lsls	r3, r0, #27
 800c39e:	f53f aefe 	bmi.w	800c19e <__ssvfiscanf_r+0x4e>
 800c3a2:	9b00      	ldr	r3, [sp, #0]
 800c3a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3a6:	1d19      	adds	r1, r3, #4
 800c3a8:	9100      	str	r1, [sp, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f010 0f01 	tst.w	r0, #1
 800c3b0:	bf14      	ite	ne
 800c3b2:	801a      	strhne	r2, [r3, #0]
 800c3b4:	601a      	streq	r2, [r3, #0]
 800c3b6:	e6f2      	b.n	800c19e <__ssvfiscanf_r+0x4e>
 800c3b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4630      	mov	r0, r6
 800c3be:	4798      	blx	r3
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d0b6      	beq.n	800c332 <__ssvfiscanf_r+0x1e2>
 800c3c4:	e79c      	b.n	800c300 <__ssvfiscanf_r+0x1b0>
 800c3c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3c8:	3201      	adds	r2, #1
 800c3ca:	9245      	str	r2, [sp, #276]	; 0x114
 800c3cc:	6862      	ldr	r2, [r4, #4]
 800c3ce:	3a01      	subs	r2, #1
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	6062      	str	r2, [r4, #4]
 800c3d4:	dd02      	ble.n	800c3dc <__ssvfiscanf_r+0x28c>
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	e7ad      	b.n	800c338 <__ssvfiscanf_r+0x1e8>
 800c3dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	4798      	blx	r3
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d0a7      	beq.n	800c338 <__ssvfiscanf_r+0x1e8>
 800c3e8:	e78a      	b.n	800c300 <__ssvfiscanf_r+0x1b0>
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	dc0e      	bgt.n	800c40c <__ssvfiscanf_r+0x2bc>
 800c3ee:	466b      	mov	r3, sp
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	a941      	add	r1, sp, #260	; 0x104
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f000 f9d7 	bl	800c7a8 <_scanf_i>
 800c3fa:	e7ab      	b.n	800c354 <__ssvfiscanf_r+0x204>
 800c3fc:	0800c09d 	.word	0x0800c09d
 800c400:	0800c117 	.word	0x0800c117
 800c404:	0800d049 	.word	0x0800d049
 800c408:	0800d41a 	.word	0x0800d41a
 800c40c:	4b0b      	ldr	r3, [pc, #44]	; (800c43c <__ssvfiscanf_r+0x2ec>)
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f43f aec5 	beq.w	800c19e <__ssvfiscanf_r+0x4e>
 800c414:	466b      	mov	r3, sp
 800c416:	4622      	mov	r2, r4
 800c418:	a941      	add	r1, sp, #260	; 0x104
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7fc f828 	bl	8008470 <_scanf_float>
 800c420:	e798      	b.n	800c354 <__ssvfiscanf_r+0x204>
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c428:	bf18      	it	ne
 800c42a:	f04f 30ff 	movne.w	r0, #4294967295
 800c42e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c436:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c438:	e7f9      	b.n	800c42e <__ssvfiscanf_r+0x2de>
 800c43a:	bf00      	nop
 800c43c:	08008471 	.word	0x08008471

0800c440 <__sfputc_r>:
 800c440:	6893      	ldr	r3, [r2, #8]
 800c442:	3b01      	subs	r3, #1
 800c444:	2b00      	cmp	r3, #0
 800c446:	b410      	push	{r4}
 800c448:	6093      	str	r3, [r2, #8]
 800c44a:	da08      	bge.n	800c45e <__sfputc_r+0x1e>
 800c44c:	6994      	ldr	r4, [r2, #24]
 800c44e:	42a3      	cmp	r3, r4
 800c450:	db01      	blt.n	800c456 <__sfputc_r+0x16>
 800c452:	290a      	cmp	r1, #10
 800c454:	d103      	bne.n	800c45e <__sfputc_r+0x1e>
 800c456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c45a:	f7fd b9ed 	b.w	8009838 <__swbuf_r>
 800c45e:	6813      	ldr	r3, [r2, #0]
 800c460:	1c58      	adds	r0, r3, #1
 800c462:	6010      	str	r0, [r2, #0]
 800c464:	7019      	strb	r1, [r3, #0]
 800c466:	4608      	mov	r0, r1
 800c468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <__sfputs_r>:
 800c46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c470:	4606      	mov	r6, r0
 800c472:	460f      	mov	r7, r1
 800c474:	4614      	mov	r4, r2
 800c476:	18d5      	adds	r5, r2, r3
 800c478:	42ac      	cmp	r4, r5
 800c47a:	d101      	bne.n	800c480 <__sfputs_r+0x12>
 800c47c:	2000      	movs	r0, #0
 800c47e:	e007      	b.n	800c490 <__sfputs_r+0x22>
 800c480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c484:	463a      	mov	r2, r7
 800c486:	4630      	mov	r0, r6
 800c488:	f7ff ffda 	bl	800c440 <__sfputc_r>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d1f3      	bne.n	800c478 <__sfputs_r+0xa>
 800c490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c494 <_vfiprintf_r>:
 800c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	460d      	mov	r5, r1
 800c49a:	b09d      	sub	sp, #116	; 0x74
 800c49c:	4614      	mov	r4, r2
 800c49e:	4698      	mov	r8, r3
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	b118      	cbz	r0, 800c4ac <_vfiprintf_r+0x18>
 800c4a4:	6983      	ldr	r3, [r0, #24]
 800c4a6:	b90b      	cbnz	r3, 800c4ac <_vfiprintf_r+0x18>
 800c4a8:	f7fe fa3e 	bl	800a928 <__sinit>
 800c4ac:	4b89      	ldr	r3, [pc, #548]	; (800c6d4 <_vfiprintf_r+0x240>)
 800c4ae:	429d      	cmp	r5, r3
 800c4b0:	d11b      	bne.n	800c4ea <_vfiprintf_r+0x56>
 800c4b2:	6875      	ldr	r5, [r6, #4]
 800c4b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4b6:	07d9      	lsls	r1, r3, #31
 800c4b8:	d405      	bmi.n	800c4c6 <_vfiprintf_r+0x32>
 800c4ba:	89ab      	ldrh	r3, [r5, #12]
 800c4bc:	059a      	lsls	r2, r3, #22
 800c4be:	d402      	bmi.n	800c4c6 <_vfiprintf_r+0x32>
 800c4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4c2:	f7fe fe42 	bl	800b14a <__retarget_lock_acquire_recursive>
 800c4c6:	89ab      	ldrh	r3, [r5, #12]
 800c4c8:	071b      	lsls	r3, r3, #28
 800c4ca:	d501      	bpl.n	800c4d0 <_vfiprintf_r+0x3c>
 800c4cc:	692b      	ldr	r3, [r5, #16]
 800c4ce:	b9eb      	cbnz	r3, 800c50c <_vfiprintf_r+0x78>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7fd fa14 	bl	8009900 <__swsetup_r>
 800c4d8:	b1c0      	cbz	r0, 800c50c <_vfiprintf_r+0x78>
 800c4da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4dc:	07dc      	lsls	r4, r3, #31
 800c4de:	d50e      	bpl.n	800c4fe <_vfiprintf_r+0x6a>
 800c4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e4:	b01d      	add	sp, #116	; 0x74
 800c4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ea:	4b7b      	ldr	r3, [pc, #492]	; (800c6d8 <_vfiprintf_r+0x244>)
 800c4ec:	429d      	cmp	r5, r3
 800c4ee:	d101      	bne.n	800c4f4 <_vfiprintf_r+0x60>
 800c4f0:	68b5      	ldr	r5, [r6, #8]
 800c4f2:	e7df      	b.n	800c4b4 <_vfiprintf_r+0x20>
 800c4f4:	4b79      	ldr	r3, [pc, #484]	; (800c6dc <_vfiprintf_r+0x248>)
 800c4f6:	429d      	cmp	r5, r3
 800c4f8:	bf08      	it	eq
 800c4fa:	68f5      	ldreq	r5, [r6, #12]
 800c4fc:	e7da      	b.n	800c4b4 <_vfiprintf_r+0x20>
 800c4fe:	89ab      	ldrh	r3, [r5, #12]
 800c500:	0598      	lsls	r0, r3, #22
 800c502:	d4ed      	bmi.n	800c4e0 <_vfiprintf_r+0x4c>
 800c504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c506:	f7fe fe21 	bl	800b14c <__retarget_lock_release_recursive>
 800c50a:	e7e9      	b.n	800c4e0 <_vfiprintf_r+0x4c>
 800c50c:	2300      	movs	r3, #0
 800c50e:	9309      	str	r3, [sp, #36]	; 0x24
 800c510:	2320      	movs	r3, #32
 800c512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c516:	f8cd 800c 	str.w	r8, [sp, #12]
 800c51a:	2330      	movs	r3, #48	; 0x30
 800c51c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6e0 <_vfiprintf_r+0x24c>
 800c520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c524:	f04f 0901 	mov.w	r9, #1
 800c528:	4623      	mov	r3, r4
 800c52a:	469a      	mov	sl, r3
 800c52c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c530:	b10a      	cbz	r2, 800c536 <_vfiprintf_r+0xa2>
 800c532:	2a25      	cmp	r2, #37	; 0x25
 800c534:	d1f9      	bne.n	800c52a <_vfiprintf_r+0x96>
 800c536:	ebba 0b04 	subs.w	fp, sl, r4
 800c53a:	d00b      	beq.n	800c554 <_vfiprintf_r+0xc0>
 800c53c:	465b      	mov	r3, fp
 800c53e:	4622      	mov	r2, r4
 800c540:	4629      	mov	r1, r5
 800c542:	4630      	mov	r0, r6
 800c544:	f7ff ff93 	bl	800c46e <__sfputs_r>
 800c548:	3001      	adds	r0, #1
 800c54a:	f000 80aa 	beq.w	800c6a2 <_vfiprintf_r+0x20e>
 800c54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c550:	445a      	add	r2, fp
 800c552:	9209      	str	r2, [sp, #36]	; 0x24
 800c554:	f89a 3000 	ldrb.w	r3, [sl]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 80a2 	beq.w	800c6a2 <_vfiprintf_r+0x20e>
 800c55e:	2300      	movs	r3, #0
 800c560:	f04f 32ff 	mov.w	r2, #4294967295
 800c564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c568:	f10a 0a01 	add.w	sl, sl, #1
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	9307      	str	r3, [sp, #28]
 800c570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c574:	931a      	str	r3, [sp, #104]	; 0x68
 800c576:	4654      	mov	r4, sl
 800c578:	2205      	movs	r2, #5
 800c57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c57e:	4858      	ldr	r0, [pc, #352]	; (800c6e0 <_vfiprintf_r+0x24c>)
 800c580:	f7f3 fe3e 	bl	8000200 <memchr>
 800c584:	9a04      	ldr	r2, [sp, #16]
 800c586:	b9d8      	cbnz	r0, 800c5c0 <_vfiprintf_r+0x12c>
 800c588:	06d1      	lsls	r1, r2, #27
 800c58a:	bf44      	itt	mi
 800c58c:	2320      	movmi	r3, #32
 800c58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c592:	0713      	lsls	r3, r2, #28
 800c594:	bf44      	itt	mi
 800c596:	232b      	movmi	r3, #43	; 0x2b
 800c598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c59c:	f89a 3000 	ldrb.w	r3, [sl]
 800c5a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5a2:	d015      	beq.n	800c5d0 <_vfiprintf_r+0x13c>
 800c5a4:	9a07      	ldr	r2, [sp, #28]
 800c5a6:	4654      	mov	r4, sl
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	f04f 0c0a 	mov.w	ip, #10
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5b4:	3b30      	subs	r3, #48	; 0x30
 800c5b6:	2b09      	cmp	r3, #9
 800c5b8:	d94e      	bls.n	800c658 <_vfiprintf_r+0x1c4>
 800c5ba:	b1b0      	cbz	r0, 800c5ea <_vfiprintf_r+0x156>
 800c5bc:	9207      	str	r2, [sp, #28]
 800c5be:	e014      	b.n	800c5ea <_vfiprintf_r+0x156>
 800c5c0:	eba0 0308 	sub.w	r3, r0, r8
 800c5c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	9304      	str	r3, [sp, #16]
 800c5cc:	46a2      	mov	sl, r4
 800c5ce:	e7d2      	b.n	800c576 <_vfiprintf_r+0xe2>
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	1d19      	adds	r1, r3, #4
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	9103      	str	r1, [sp, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	bfbb      	ittet	lt
 800c5dc:	425b      	neglt	r3, r3
 800c5de:	f042 0202 	orrlt.w	r2, r2, #2
 800c5e2:	9307      	strge	r3, [sp, #28]
 800c5e4:	9307      	strlt	r3, [sp, #28]
 800c5e6:	bfb8      	it	lt
 800c5e8:	9204      	strlt	r2, [sp, #16]
 800c5ea:	7823      	ldrb	r3, [r4, #0]
 800c5ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ee:	d10c      	bne.n	800c60a <_vfiprintf_r+0x176>
 800c5f0:	7863      	ldrb	r3, [r4, #1]
 800c5f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c5f4:	d135      	bne.n	800c662 <_vfiprintf_r+0x1ce>
 800c5f6:	9b03      	ldr	r3, [sp, #12]
 800c5f8:	1d1a      	adds	r2, r3, #4
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	9203      	str	r2, [sp, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bfb8      	it	lt
 800c602:	f04f 33ff 	movlt.w	r3, #4294967295
 800c606:	3402      	adds	r4, #2
 800c608:	9305      	str	r3, [sp, #20]
 800c60a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6f0 <_vfiprintf_r+0x25c>
 800c60e:	7821      	ldrb	r1, [r4, #0]
 800c610:	2203      	movs	r2, #3
 800c612:	4650      	mov	r0, sl
 800c614:	f7f3 fdf4 	bl	8000200 <memchr>
 800c618:	b140      	cbz	r0, 800c62c <_vfiprintf_r+0x198>
 800c61a:	2340      	movs	r3, #64	; 0x40
 800c61c:	eba0 000a 	sub.w	r0, r0, sl
 800c620:	fa03 f000 	lsl.w	r0, r3, r0
 800c624:	9b04      	ldr	r3, [sp, #16]
 800c626:	4303      	orrs	r3, r0
 800c628:	3401      	adds	r4, #1
 800c62a:	9304      	str	r3, [sp, #16]
 800c62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c630:	482c      	ldr	r0, [pc, #176]	; (800c6e4 <_vfiprintf_r+0x250>)
 800c632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c636:	2206      	movs	r2, #6
 800c638:	f7f3 fde2 	bl	8000200 <memchr>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d03f      	beq.n	800c6c0 <_vfiprintf_r+0x22c>
 800c640:	4b29      	ldr	r3, [pc, #164]	; (800c6e8 <_vfiprintf_r+0x254>)
 800c642:	bb1b      	cbnz	r3, 800c68c <_vfiprintf_r+0x1f8>
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	3307      	adds	r3, #7
 800c648:	f023 0307 	bic.w	r3, r3, #7
 800c64c:	3308      	adds	r3, #8
 800c64e:	9303      	str	r3, [sp, #12]
 800c650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c652:	443b      	add	r3, r7
 800c654:	9309      	str	r3, [sp, #36]	; 0x24
 800c656:	e767      	b.n	800c528 <_vfiprintf_r+0x94>
 800c658:	fb0c 3202 	mla	r2, ip, r2, r3
 800c65c:	460c      	mov	r4, r1
 800c65e:	2001      	movs	r0, #1
 800c660:	e7a5      	b.n	800c5ae <_vfiprintf_r+0x11a>
 800c662:	2300      	movs	r3, #0
 800c664:	3401      	adds	r4, #1
 800c666:	9305      	str	r3, [sp, #20]
 800c668:	4619      	mov	r1, r3
 800c66a:	f04f 0c0a 	mov.w	ip, #10
 800c66e:	4620      	mov	r0, r4
 800c670:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c674:	3a30      	subs	r2, #48	; 0x30
 800c676:	2a09      	cmp	r2, #9
 800c678:	d903      	bls.n	800c682 <_vfiprintf_r+0x1ee>
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0c5      	beq.n	800c60a <_vfiprintf_r+0x176>
 800c67e:	9105      	str	r1, [sp, #20]
 800c680:	e7c3      	b.n	800c60a <_vfiprintf_r+0x176>
 800c682:	fb0c 2101 	mla	r1, ip, r1, r2
 800c686:	4604      	mov	r4, r0
 800c688:	2301      	movs	r3, #1
 800c68a:	e7f0      	b.n	800c66e <_vfiprintf_r+0x1da>
 800c68c:	ab03      	add	r3, sp, #12
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	462a      	mov	r2, r5
 800c692:	4b16      	ldr	r3, [pc, #88]	; (800c6ec <_vfiprintf_r+0x258>)
 800c694:	a904      	add	r1, sp, #16
 800c696:	4630      	mov	r0, r6
 800c698:	f7fb fb20 	bl	8007cdc <_printf_float>
 800c69c:	4607      	mov	r7, r0
 800c69e:	1c78      	adds	r0, r7, #1
 800c6a0:	d1d6      	bne.n	800c650 <_vfiprintf_r+0x1bc>
 800c6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6a4:	07d9      	lsls	r1, r3, #31
 800c6a6:	d405      	bmi.n	800c6b4 <_vfiprintf_r+0x220>
 800c6a8:	89ab      	ldrh	r3, [r5, #12]
 800c6aa:	059a      	lsls	r2, r3, #22
 800c6ac:	d402      	bmi.n	800c6b4 <_vfiprintf_r+0x220>
 800c6ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6b0:	f7fe fd4c 	bl	800b14c <__retarget_lock_release_recursive>
 800c6b4:	89ab      	ldrh	r3, [r5, #12]
 800c6b6:	065b      	lsls	r3, r3, #25
 800c6b8:	f53f af12 	bmi.w	800c4e0 <_vfiprintf_r+0x4c>
 800c6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6be:	e711      	b.n	800c4e4 <_vfiprintf_r+0x50>
 800c6c0:	ab03      	add	r3, sp, #12
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	462a      	mov	r2, r5
 800c6c6:	4b09      	ldr	r3, [pc, #36]	; (800c6ec <_vfiprintf_r+0x258>)
 800c6c8:	a904      	add	r1, sp, #16
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7fb fdaa 	bl	8008224 <_printf_i>
 800c6d0:	e7e4      	b.n	800c69c <_vfiprintf_r+0x208>
 800c6d2:	bf00      	nop
 800c6d4:	0800d1fc 	.word	0x0800d1fc
 800c6d8:	0800d21c 	.word	0x0800d21c
 800c6dc:	0800d1dc 	.word	0x0800d1dc
 800c6e0:	0800d414 	.word	0x0800d414
 800c6e4:	0800d41e 	.word	0x0800d41e
 800c6e8:	08007cdd 	.word	0x08007cdd
 800c6ec:	0800c46f 	.word	0x0800c46f
 800c6f0:	0800d41a 	.word	0x0800d41a

0800c6f4 <_scanf_chars>:
 800c6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f8:	4615      	mov	r5, r2
 800c6fa:	688a      	ldr	r2, [r1, #8]
 800c6fc:	4680      	mov	r8, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	b932      	cbnz	r2, 800c710 <_scanf_chars+0x1c>
 800c702:	698a      	ldr	r2, [r1, #24]
 800c704:	2a00      	cmp	r2, #0
 800c706:	bf0c      	ite	eq
 800c708:	2201      	moveq	r2, #1
 800c70a:	f04f 32ff 	movne.w	r2, #4294967295
 800c70e:	608a      	str	r2, [r1, #8]
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c7a4 <_scanf_chars+0xb0>
 800c716:	06d1      	lsls	r1, r2, #27
 800c718:	bf5f      	itttt	pl
 800c71a:	681a      	ldrpl	r2, [r3, #0]
 800c71c:	1d11      	addpl	r1, r2, #4
 800c71e:	6019      	strpl	r1, [r3, #0]
 800c720:	6816      	ldrpl	r6, [r2, #0]
 800c722:	2700      	movs	r7, #0
 800c724:	69a0      	ldr	r0, [r4, #24]
 800c726:	b188      	cbz	r0, 800c74c <_scanf_chars+0x58>
 800c728:	2801      	cmp	r0, #1
 800c72a:	d107      	bne.n	800c73c <_scanf_chars+0x48>
 800c72c:	682a      	ldr	r2, [r5, #0]
 800c72e:	7811      	ldrb	r1, [r2, #0]
 800c730:	6962      	ldr	r2, [r4, #20]
 800c732:	5c52      	ldrb	r2, [r2, r1]
 800c734:	b952      	cbnz	r2, 800c74c <_scanf_chars+0x58>
 800c736:	2f00      	cmp	r7, #0
 800c738:	d031      	beq.n	800c79e <_scanf_chars+0xaa>
 800c73a:	e022      	b.n	800c782 <_scanf_chars+0x8e>
 800c73c:	2802      	cmp	r0, #2
 800c73e:	d120      	bne.n	800c782 <_scanf_chars+0x8e>
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c748:	071b      	lsls	r3, r3, #28
 800c74a:	d41a      	bmi.n	800c782 <_scanf_chars+0x8e>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	06da      	lsls	r2, r3, #27
 800c750:	bf5e      	ittt	pl
 800c752:	682b      	ldrpl	r3, [r5, #0]
 800c754:	781b      	ldrbpl	r3, [r3, #0]
 800c756:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c75a:	682a      	ldr	r2, [r5, #0]
 800c75c:	686b      	ldr	r3, [r5, #4]
 800c75e:	3201      	adds	r2, #1
 800c760:	602a      	str	r2, [r5, #0]
 800c762:	68a2      	ldr	r2, [r4, #8]
 800c764:	3b01      	subs	r3, #1
 800c766:	3a01      	subs	r2, #1
 800c768:	606b      	str	r3, [r5, #4]
 800c76a:	3701      	adds	r7, #1
 800c76c:	60a2      	str	r2, [r4, #8]
 800c76e:	b142      	cbz	r2, 800c782 <_scanf_chars+0x8e>
 800c770:	2b00      	cmp	r3, #0
 800c772:	dcd7      	bgt.n	800c724 <_scanf_chars+0x30>
 800c774:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c778:	4629      	mov	r1, r5
 800c77a:	4640      	mov	r0, r8
 800c77c:	4798      	blx	r3
 800c77e:	2800      	cmp	r0, #0
 800c780:	d0d0      	beq.n	800c724 <_scanf_chars+0x30>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	f013 0310 	ands.w	r3, r3, #16
 800c788:	d105      	bne.n	800c796 <_scanf_chars+0xa2>
 800c78a:	68e2      	ldr	r2, [r4, #12]
 800c78c:	3201      	adds	r2, #1
 800c78e:	60e2      	str	r2, [r4, #12]
 800c790:	69a2      	ldr	r2, [r4, #24]
 800c792:	b102      	cbz	r2, 800c796 <_scanf_chars+0xa2>
 800c794:	7033      	strb	r3, [r6, #0]
 800c796:	6923      	ldr	r3, [r4, #16]
 800c798:	443b      	add	r3, r7
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	2000      	movs	r0, #0
 800c79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a2:	bf00      	nop
 800c7a4:	0800d049 	.word	0x0800d049

0800c7a8 <_scanf_i>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	4698      	mov	r8, r3
 800c7ae:	4b76      	ldr	r3, [pc, #472]	; (800c988 <_scanf_i+0x1e0>)
 800c7b0:	460c      	mov	r4, r1
 800c7b2:	4682      	mov	sl, r0
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7ba:	b087      	sub	sp, #28
 800c7bc:	ab03      	add	r3, sp, #12
 800c7be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c7c2:	4b72      	ldr	r3, [pc, #456]	; (800c98c <_scanf_i+0x1e4>)
 800c7c4:	69a1      	ldr	r1, [r4, #24]
 800c7c6:	4a72      	ldr	r2, [pc, #456]	; (800c990 <_scanf_i+0x1e8>)
 800c7c8:	2903      	cmp	r1, #3
 800c7ca:	bf18      	it	ne
 800c7cc:	461a      	movne	r2, r3
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	9201      	str	r2, [sp, #4]
 800c7d2:	1e5a      	subs	r2, r3, #1
 800c7d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c7d8:	bf88      	it	hi
 800c7da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c7de:	4627      	mov	r7, r4
 800c7e0:	bf82      	ittt	hi
 800c7e2:	eb03 0905 	addhi.w	r9, r3, r5
 800c7e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c7ea:	60a3      	strhi	r3, [r4, #8]
 800c7ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c7f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c7f4:	bf98      	it	ls
 800c7f6:	f04f 0900 	movls.w	r9, #0
 800c7fa:	6023      	str	r3, [r4, #0]
 800c7fc:	463d      	mov	r5, r7
 800c7fe:	f04f 0b00 	mov.w	fp, #0
 800c802:	6831      	ldr	r1, [r6, #0]
 800c804:	ab03      	add	r3, sp, #12
 800c806:	7809      	ldrb	r1, [r1, #0]
 800c808:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c80c:	2202      	movs	r2, #2
 800c80e:	f7f3 fcf7 	bl	8000200 <memchr>
 800c812:	b328      	cbz	r0, 800c860 <_scanf_i+0xb8>
 800c814:	f1bb 0f01 	cmp.w	fp, #1
 800c818:	d159      	bne.n	800c8ce <_scanf_i+0x126>
 800c81a:	6862      	ldr	r2, [r4, #4]
 800c81c:	b92a      	cbnz	r2, 800c82a <_scanf_i+0x82>
 800c81e:	6822      	ldr	r2, [r4, #0]
 800c820:	2308      	movs	r3, #8
 800c822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c826:	6063      	str	r3, [r4, #4]
 800c828:	6022      	str	r2, [r4, #0]
 800c82a:	6822      	ldr	r2, [r4, #0]
 800c82c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c830:	6022      	str	r2, [r4, #0]
 800c832:	68a2      	ldr	r2, [r4, #8]
 800c834:	1e51      	subs	r1, r2, #1
 800c836:	60a1      	str	r1, [r4, #8]
 800c838:	b192      	cbz	r2, 800c860 <_scanf_i+0xb8>
 800c83a:	6832      	ldr	r2, [r6, #0]
 800c83c:	1c51      	adds	r1, r2, #1
 800c83e:	6031      	str	r1, [r6, #0]
 800c840:	7812      	ldrb	r2, [r2, #0]
 800c842:	f805 2b01 	strb.w	r2, [r5], #1
 800c846:	6872      	ldr	r2, [r6, #4]
 800c848:	3a01      	subs	r2, #1
 800c84a:	2a00      	cmp	r2, #0
 800c84c:	6072      	str	r2, [r6, #4]
 800c84e:	dc07      	bgt.n	800c860 <_scanf_i+0xb8>
 800c850:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c854:	4631      	mov	r1, r6
 800c856:	4650      	mov	r0, sl
 800c858:	4790      	blx	r2
 800c85a:	2800      	cmp	r0, #0
 800c85c:	f040 8085 	bne.w	800c96a <_scanf_i+0x1c2>
 800c860:	f10b 0b01 	add.w	fp, fp, #1
 800c864:	f1bb 0f03 	cmp.w	fp, #3
 800c868:	d1cb      	bne.n	800c802 <_scanf_i+0x5a>
 800c86a:	6863      	ldr	r3, [r4, #4]
 800c86c:	b90b      	cbnz	r3, 800c872 <_scanf_i+0xca>
 800c86e:	230a      	movs	r3, #10
 800c870:	6063      	str	r3, [r4, #4]
 800c872:	6863      	ldr	r3, [r4, #4]
 800c874:	4947      	ldr	r1, [pc, #284]	; (800c994 <_scanf_i+0x1ec>)
 800c876:	6960      	ldr	r0, [r4, #20]
 800c878:	1ac9      	subs	r1, r1, r3
 800c87a:	f000 f8b9 	bl	800c9f0 <__sccl>
 800c87e:	f04f 0b00 	mov.w	fp, #0
 800c882:	68a3      	ldr	r3, [r4, #8]
 800c884:	6822      	ldr	r2, [r4, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d03d      	beq.n	800c906 <_scanf_i+0x15e>
 800c88a:	6831      	ldr	r1, [r6, #0]
 800c88c:	6960      	ldr	r0, [r4, #20]
 800c88e:	f891 c000 	ldrb.w	ip, [r1]
 800c892:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c896:	2800      	cmp	r0, #0
 800c898:	d035      	beq.n	800c906 <_scanf_i+0x15e>
 800c89a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c89e:	d124      	bne.n	800c8ea <_scanf_i+0x142>
 800c8a0:	0510      	lsls	r0, r2, #20
 800c8a2:	d522      	bpl.n	800c8ea <_scanf_i+0x142>
 800c8a4:	f10b 0b01 	add.w	fp, fp, #1
 800c8a8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ac:	d003      	beq.n	800c8b6 <_scanf_i+0x10e>
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c8b4:	60a3      	str	r3, [r4, #8]
 800c8b6:	6873      	ldr	r3, [r6, #4]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	6073      	str	r3, [r6, #4]
 800c8be:	dd1b      	ble.n	800c8f8 <_scanf_i+0x150>
 800c8c0:	6833      	ldr	r3, [r6, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	68a3      	ldr	r3, [r4, #8]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	60a3      	str	r3, [r4, #8]
 800c8cc:	e7d9      	b.n	800c882 <_scanf_i+0xda>
 800c8ce:	f1bb 0f02 	cmp.w	fp, #2
 800c8d2:	d1ae      	bne.n	800c832 <_scanf_i+0x8a>
 800c8d4:	6822      	ldr	r2, [r4, #0]
 800c8d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c8da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c8de:	d1bf      	bne.n	800c860 <_scanf_i+0xb8>
 800c8e0:	2310      	movs	r3, #16
 800c8e2:	6063      	str	r3, [r4, #4]
 800c8e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c8e8:	e7a2      	b.n	800c830 <_scanf_i+0x88>
 800c8ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c8ee:	6022      	str	r2, [r4, #0]
 800c8f0:	780b      	ldrb	r3, [r1, #0]
 800c8f2:	f805 3b01 	strb.w	r3, [r5], #1
 800c8f6:	e7de      	b.n	800c8b6 <_scanf_i+0x10e>
 800c8f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	4650      	mov	r0, sl
 800c900:	4798      	blx	r3
 800c902:	2800      	cmp	r0, #0
 800c904:	d0df      	beq.n	800c8c6 <_scanf_i+0x11e>
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	05db      	lsls	r3, r3, #23
 800c90a:	d50d      	bpl.n	800c928 <_scanf_i+0x180>
 800c90c:	42bd      	cmp	r5, r7
 800c90e:	d909      	bls.n	800c924 <_scanf_i+0x17c>
 800c910:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c918:	4632      	mov	r2, r6
 800c91a:	4650      	mov	r0, sl
 800c91c:	4798      	blx	r3
 800c91e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c922:	464d      	mov	r5, r9
 800c924:	42bd      	cmp	r5, r7
 800c926:	d02d      	beq.n	800c984 <_scanf_i+0x1dc>
 800c928:	6822      	ldr	r2, [r4, #0]
 800c92a:	f012 0210 	ands.w	r2, r2, #16
 800c92e:	d113      	bne.n	800c958 <_scanf_i+0x1b0>
 800c930:	702a      	strb	r2, [r5, #0]
 800c932:	6863      	ldr	r3, [r4, #4]
 800c934:	9e01      	ldr	r6, [sp, #4]
 800c936:	4639      	mov	r1, r7
 800c938:	4650      	mov	r0, sl
 800c93a:	47b0      	blx	r6
 800c93c:	6821      	ldr	r1, [r4, #0]
 800c93e:	f8d8 3000 	ldr.w	r3, [r8]
 800c942:	f011 0f20 	tst.w	r1, #32
 800c946:	d013      	beq.n	800c970 <_scanf_i+0x1c8>
 800c948:	1d1a      	adds	r2, r3, #4
 800c94a:	f8c8 2000 	str.w	r2, [r8]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6018      	str	r0, [r3, #0]
 800c952:	68e3      	ldr	r3, [r4, #12]
 800c954:	3301      	adds	r3, #1
 800c956:	60e3      	str	r3, [r4, #12]
 800c958:	1bed      	subs	r5, r5, r7
 800c95a:	44ab      	add	fp, r5
 800c95c:	6925      	ldr	r5, [r4, #16]
 800c95e:	445d      	add	r5, fp
 800c960:	6125      	str	r5, [r4, #16]
 800c962:	2000      	movs	r0, #0
 800c964:	b007      	add	sp, #28
 800c966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96a:	f04f 0b00 	mov.w	fp, #0
 800c96e:	e7ca      	b.n	800c906 <_scanf_i+0x15e>
 800c970:	1d1a      	adds	r2, r3, #4
 800c972:	f8c8 2000 	str.w	r2, [r8]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f011 0f01 	tst.w	r1, #1
 800c97c:	bf14      	ite	ne
 800c97e:	8018      	strhne	r0, [r3, #0]
 800c980:	6018      	streq	r0, [r3, #0]
 800c982:	e7e6      	b.n	800c952 <_scanf_i+0x1aa>
 800c984:	2001      	movs	r0, #1
 800c986:	e7ed      	b.n	800c964 <_scanf_i+0x1bc>
 800c988:	0800cf64 	.word	0x0800cf64
 800c98c:	0800cb6d 	.word	0x0800cb6d
 800c990:	08009835 	.word	0x08009835
 800c994:	0800d43e 	.word	0x0800d43e

0800c998 <_read_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d07      	ldr	r5, [pc, #28]	; (800c9b8 <_read_r+0x20>)
 800c99c:	4604      	mov	r4, r0
 800c99e:	4608      	mov	r0, r1
 800c9a0:	4611      	mov	r1, r2
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	602a      	str	r2, [r5, #0]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	f7f4 ffb8 	bl	800191c <_read>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d102      	bne.n	800c9b6 <_read_r+0x1e>
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	b103      	cbz	r3, 800c9b6 <_read_r+0x1e>
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	bd38      	pop	{r3, r4, r5, pc}
 800c9b8:	20000804 	.word	0x20000804
 800c9bc:	00000000 	.word	0x00000000

0800c9c0 <nan>:
 800c9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c9c8 <nan+0x8>
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	00000000 	.word	0x00000000
 800c9cc:	7ff80000 	.word	0x7ff80000

0800c9d0 <_sbrk_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	4d06      	ldr	r5, [pc, #24]	; (800c9ec <_sbrk_r+0x1c>)
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	4608      	mov	r0, r1
 800c9da:	602b      	str	r3, [r5, #0]
 800c9dc:	f7f5 f80c 	bl	80019f8 <_sbrk>
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	d102      	bne.n	800c9ea <_sbrk_r+0x1a>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	b103      	cbz	r3, 800c9ea <_sbrk_r+0x1a>
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	20000804 	.word	0x20000804

0800c9f0 <__sccl>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	780b      	ldrb	r3, [r1, #0]
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	2b5e      	cmp	r3, #94	; 0x5e
 800c9f8:	bf0b      	itete	eq
 800c9fa:	784b      	ldrbeq	r3, [r1, #1]
 800c9fc:	1c48      	addne	r0, r1, #1
 800c9fe:	1c88      	addeq	r0, r1, #2
 800ca00:	2200      	movne	r2, #0
 800ca02:	bf08      	it	eq
 800ca04:	2201      	moveq	r2, #1
 800ca06:	1e61      	subs	r1, r4, #1
 800ca08:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ca0c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ca10:	42a9      	cmp	r1, r5
 800ca12:	d1fb      	bne.n	800ca0c <__sccl+0x1c>
 800ca14:	b90b      	cbnz	r3, 800ca1a <__sccl+0x2a>
 800ca16:	3801      	subs	r0, #1
 800ca18:	bd70      	pop	{r4, r5, r6, pc}
 800ca1a:	f082 0201 	eor.w	r2, r2, #1
 800ca1e:	54e2      	strb	r2, [r4, r3]
 800ca20:	4605      	mov	r5, r0
 800ca22:	4628      	mov	r0, r5
 800ca24:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ca28:	292d      	cmp	r1, #45	; 0x2d
 800ca2a:	d006      	beq.n	800ca3a <__sccl+0x4a>
 800ca2c:	295d      	cmp	r1, #93	; 0x5d
 800ca2e:	d0f3      	beq.n	800ca18 <__sccl+0x28>
 800ca30:	b909      	cbnz	r1, 800ca36 <__sccl+0x46>
 800ca32:	4628      	mov	r0, r5
 800ca34:	e7f0      	b.n	800ca18 <__sccl+0x28>
 800ca36:	460b      	mov	r3, r1
 800ca38:	e7f1      	b.n	800ca1e <__sccl+0x2e>
 800ca3a:	786e      	ldrb	r6, [r5, #1]
 800ca3c:	2e5d      	cmp	r6, #93	; 0x5d
 800ca3e:	d0fa      	beq.n	800ca36 <__sccl+0x46>
 800ca40:	42b3      	cmp	r3, r6
 800ca42:	dcf8      	bgt.n	800ca36 <__sccl+0x46>
 800ca44:	3502      	adds	r5, #2
 800ca46:	4619      	mov	r1, r3
 800ca48:	3101      	adds	r1, #1
 800ca4a:	428e      	cmp	r6, r1
 800ca4c:	5462      	strb	r2, [r4, r1]
 800ca4e:	dcfb      	bgt.n	800ca48 <__sccl+0x58>
 800ca50:	1af1      	subs	r1, r6, r3
 800ca52:	3901      	subs	r1, #1
 800ca54:	1c58      	adds	r0, r3, #1
 800ca56:	42b3      	cmp	r3, r6
 800ca58:	bfa8      	it	ge
 800ca5a:	2100      	movge	r1, #0
 800ca5c:	1843      	adds	r3, r0, r1
 800ca5e:	e7e0      	b.n	800ca22 <__sccl+0x32>

0800ca60 <strncmp>:
 800ca60:	b510      	push	{r4, lr}
 800ca62:	b17a      	cbz	r2, 800ca84 <strncmp+0x24>
 800ca64:	4603      	mov	r3, r0
 800ca66:	3901      	subs	r1, #1
 800ca68:	1884      	adds	r4, r0, r2
 800ca6a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ca72:	4290      	cmp	r0, r2
 800ca74:	d101      	bne.n	800ca7a <strncmp+0x1a>
 800ca76:	42a3      	cmp	r3, r4
 800ca78:	d101      	bne.n	800ca7e <strncmp+0x1e>
 800ca7a:	1a80      	subs	r0, r0, r2
 800ca7c:	bd10      	pop	{r4, pc}
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d1f3      	bne.n	800ca6a <strncmp+0xa>
 800ca82:	e7fa      	b.n	800ca7a <strncmp+0x1a>
 800ca84:	4610      	mov	r0, r2
 800ca86:	e7f9      	b.n	800ca7c <strncmp+0x1c>

0800ca88 <_strtoul_l.constprop.0>:
 800ca88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca8c:	4f36      	ldr	r7, [pc, #216]	; (800cb68 <_strtoul_l.constprop.0+0xe0>)
 800ca8e:	4686      	mov	lr, r0
 800ca90:	460d      	mov	r5, r1
 800ca92:	4628      	mov	r0, r5
 800ca94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca98:	5de6      	ldrb	r6, [r4, r7]
 800ca9a:	f016 0608 	ands.w	r6, r6, #8
 800ca9e:	d1f8      	bne.n	800ca92 <_strtoul_l.constprop.0+0xa>
 800caa0:	2c2d      	cmp	r4, #45	; 0x2d
 800caa2:	d12f      	bne.n	800cb04 <_strtoul_l.constprop.0+0x7c>
 800caa4:	782c      	ldrb	r4, [r5, #0]
 800caa6:	2601      	movs	r6, #1
 800caa8:	1c85      	adds	r5, r0, #2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d057      	beq.n	800cb5e <_strtoul_l.constprop.0+0xd6>
 800caae:	2b10      	cmp	r3, #16
 800cab0:	d109      	bne.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cab2:	2c30      	cmp	r4, #48	; 0x30
 800cab4:	d107      	bne.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cab6:	7828      	ldrb	r0, [r5, #0]
 800cab8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cabc:	2858      	cmp	r0, #88	; 0x58
 800cabe:	d149      	bne.n	800cb54 <_strtoul_l.constprop.0+0xcc>
 800cac0:	786c      	ldrb	r4, [r5, #1]
 800cac2:	2310      	movs	r3, #16
 800cac4:	3502      	adds	r5, #2
 800cac6:	f04f 38ff 	mov.w	r8, #4294967295
 800caca:	2700      	movs	r7, #0
 800cacc:	fbb8 f8f3 	udiv	r8, r8, r3
 800cad0:	fb03 f908 	mul.w	r9, r3, r8
 800cad4:	ea6f 0909 	mvn.w	r9, r9
 800cad8:	4638      	mov	r0, r7
 800cada:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cade:	f1bc 0f09 	cmp.w	ip, #9
 800cae2:	d814      	bhi.n	800cb0e <_strtoul_l.constprop.0+0x86>
 800cae4:	4664      	mov	r4, ip
 800cae6:	42a3      	cmp	r3, r4
 800cae8:	dd22      	ble.n	800cb30 <_strtoul_l.constprop.0+0xa8>
 800caea:	2f00      	cmp	r7, #0
 800caec:	db1d      	blt.n	800cb2a <_strtoul_l.constprop.0+0xa2>
 800caee:	4580      	cmp	r8, r0
 800caf0:	d31b      	bcc.n	800cb2a <_strtoul_l.constprop.0+0xa2>
 800caf2:	d101      	bne.n	800caf8 <_strtoul_l.constprop.0+0x70>
 800caf4:	45a1      	cmp	r9, r4
 800caf6:	db18      	blt.n	800cb2a <_strtoul_l.constprop.0+0xa2>
 800caf8:	fb00 4003 	mla	r0, r0, r3, r4
 800cafc:	2701      	movs	r7, #1
 800cafe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb02:	e7ea      	b.n	800cada <_strtoul_l.constprop.0+0x52>
 800cb04:	2c2b      	cmp	r4, #43	; 0x2b
 800cb06:	bf04      	itt	eq
 800cb08:	782c      	ldrbeq	r4, [r5, #0]
 800cb0a:	1c85      	addeq	r5, r0, #2
 800cb0c:	e7cd      	b.n	800caaa <_strtoul_l.constprop.0+0x22>
 800cb0e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb12:	f1bc 0f19 	cmp.w	ip, #25
 800cb16:	d801      	bhi.n	800cb1c <_strtoul_l.constprop.0+0x94>
 800cb18:	3c37      	subs	r4, #55	; 0x37
 800cb1a:	e7e4      	b.n	800cae6 <_strtoul_l.constprop.0+0x5e>
 800cb1c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb20:	f1bc 0f19 	cmp.w	ip, #25
 800cb24:	d804      	bhi.n	800cb30 <_strtoul_l.constprop.0+0xa8>
 800cb26:	3c57      	subs	r4, #87	; 0x57
 800cb28:	e7dd      	b.n	800cae6 <_strtoul_l.constprop.0+0x5e>
 800cb2a:	f04f 37ff 	mov.w	r7, #4294967295
 800cb2e:	e7e6      	b.n	800cafe <_strtoul_l.constprop.0+0x76>
 800cb30:	2f00      	cmp	r7, #0
 800cb32:	da07      	bge.n	800cb44 <_strtoul_l.constprop.0+0xbc>
 800cb34:	2322      	movs	r3, #34	; 0x22
 800cb36:	f8ce 3000 	str.w	r3, [lr]
 800cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3e:	b932      	cbnz	r2, 800cb4e <_strtoul_l.constprop.0+0xc6>
 800cb40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb44:	b106      	cbz	r6, 800cb48 <_strtoul_l.constprop.0+0xc0>
 800cb46:	4240      	negs	r0, r0
 800cb48:	2a00      	cmp	r2, #0
 800cb4a:	d0f9      	beq.n	800cb40 <_strtoul_l.constprop.0+0xb8>
 800cb4c:	b107      	cbz	r7, 800cb50 <_strtoul_l.constprop.0+0xc8>
 800cb4e:	1e69      	subs	r1, r5, #1
 800cb50:	6011      	str	r1, [r2, #0]
 800cb52:	e7f5      	b.n	800cb40 <_strtoul_l.constprop.0+0xb8>
 800cb54:	2430      	movs	r4, #48	; 0x30
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1b5      	bne.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cb5a:	2308      	movs	r3, #8
 800cb5c:	e7b3      	b.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cb5e:	2c30      	cmp	r4, #48	; 0x30
 800cb60:	d0a9      	beq.n	800cab6 <_strtoul_l.constprop.0+0x2e>
 800cb62:	230a      	movs	r3, #10
 800cb64:	e7af      	b.n	800cac6 <_strtoul_l.constprop.0+0x3e>
 800cb66:	bf00      	nop
 800cb68:	0800d049 	.word	0x0800d049

0800cb6c <_strtoul_r>:
 800cb6c:	f7ff bf8c 	b.w	800ca88 <_strtoul_l.constprop.0>

0800cb70 <__submore>:
 800cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb74:	460c      	mov	r4, r1
 800cb76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb7c:	4299      	cmp	r1, r3
 800cb7e:	d11d      	bne.n	800cbbc <__submore+0x4c>
 800cb80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cb84:	f7ff f8ba 	bl	800bcfc <_malloc_r>
 800cb88:	b918      	cbnz	r0, 800cb92 <__submore+0x22>
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb96:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb98:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cb9c:	6360      	str	r0, [r4, #52]	; 0x34
 800cb9e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cba2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cba6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cbaa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cbae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cbb2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cbb6:	6020      	str	r0, [r4, #0]
 800cbb8:	2000      	movs	r0, #0
 800cbba:	e7e8      	b.n	800cb8e <__submore+0x1e>
 800cbbc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cbbe:	0077      	lsls	r7, r6, #1
 800cbc0:	463a      	mov	r2, r7
 800cbc2:	f000 f895 	bl	800ccf0 <_realloc_r>
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d0de      	beq.n	800cb8a <__submore+0x1a>
 800cbcc:	eb00 0806 	add.w	r8, r0, r6
 800cbd0:	4601      	mov	r1, r0
 800cbd2:	4632      	mov	r2, r6
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	f7fa ffcb 	bl	8007b70 <memcpy>
 800cbda:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cbde:	f8c4 8000 	str.w	r8, [r4]
 800cbe2:	e7e9      	b.n	800cbb8 <__submore+0x48>

0800cbe4 <__ascii_wctomb>:
 800cbe4:	b149      	cbz	r1, 800cbfa <__ascii_wctomb+0x16>
 800cbe6:	2aff      	cmp	r2, #255	; 0xff
 800cbe8:	bf85      	ittet	hi
 800cbea:	238a      	movhi	r3, #138	; 0x8a
 800cbec:	6003      	strhi	r3, [r0, #0]
 800cbee:	700a      	strbls	r2, [r1, #0]
 800cbf0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbf4:	bf98      	it	ls
 800cbf6:	2001      	movls	r0, #1
 800cbf8:	4770      	bx	lr
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	4770      	bx	lr
	...

0800cc00 <__assert_func>:
 800cc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc02:	4614      	mov	r4, r2
 800cc04:	461a      	mov	r2, r3
 800cc06:	4b09      	ldr	r3, [pc, #36]	; (800cc2c <__assert_func+0x2c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	68d8      	ldr	r0, [r3, #12]
 800cc0e:	b14c      	cbz	r4, 800cc24 <__assert_func+0x24>
 800cc10:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <__assert_func+0x30>)
 800cc12:	9100      	str	r1, [sp, #0]
 800cc14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc18:	4906      	ldr	r1, [pc, #24]	; (800cc34 <__assert_func+0x34>)
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	f000 f80e 	bl	800cc3c <fiprintf>
 800cc20:	f000 f895 	bl	800cd4e <abort>
 800cc24:	4b04      	ldr	r3, [pc, #16]	; (800cc38 <__assert_func+0x38>)
 800cc26:	461c      	mov	r4, r3
 800cc28:	e7f3      	b.n	800cc12 <__assert_func+0x12>
 800cc2a:	bf00      	nop
 800cc2c:	2000000c 	.word	0x2000000c
 800cc30:	0800d440 	.word	0x0800d440
 800cc34:	0800d44d 	.word	0x0800d44d
 800cc38:	0800d47b 	.word	0x0800d47b

0800cc3c <fiprintf>:
 800cc3c:	b40e      	push	{r1, r2, r3}
 800cc3e:	b503      	push	{r0, r1, lr}
 800cc40:	4601      	mov	r1, r0
 800cc42:	ab03      	add	r3, sp, #12
 800cc44:	4805      	ldr	r0, [pc, #20]	; (800cc5c <fiprintf+0x20>)
 800cc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc4a:	6800      	ldr	r0, [r0, #0]
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	f7ff fc21 	bl	800c494 <_vfiprintf_r>
 800cc52:	b002      	add	sp, #8
 800cc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc58:	b003      	add	sp, #12
 800cc5a:	4770      	bx	lr
 800cc5c:	2000000c 	.word	0x2000000c

0800cc60 <_fstat_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4d07      	ldr	r5, [pc, #28]	; (800cc80 <_fstat_r+0x20>)
 800cc64:	2300      	movs	r3, #0
 800cc66:	4604      	mov	r4, r0
 800cc68:	4608      	mov	r0, r1
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	602b      	str	r3, [r5, #0]
 800cc6e:	f7f4 fe9a 	bl	80019a6 <_fstat>
 800cc72:	1c43      	adds	r3, r0, #1
 800cc74:	d102      	bne.n	800cc7c <_fstat_r+0x1c>
 800cc76:	682b      	ldr	r3, [r5, #0]
 800cc78:	b103      	cbz	r3, 800cc7c <_fstat_r+0x1c>
 800cc7a:	6023      	str	r3, [r4, #0]
 800cc7c:	bd38      	pop	{r3, r4, r5, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000804 	.word	0x20000804

0800cc84 <_isatty_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d06      	ldr	r5, [pc, #24]	; (800cca0 <_isatty_r+0x1c>)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	4608      	mov	r0, r1
 800cc8e:	602b      	str	r3, [r5, #0]
 800cc90:	f7f4 fe99 	bl	80019c6 <_isatty>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_isatty_r+0x1a>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_isatty_r+0x1a>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	20000804 	.word	0x20000804

0800cca4 <memmove>:
 800cca4:	4288      	cmp	r0, r1
 800cca6:	b510      	push	{r4, lr}
 800cca8:	eb01 0402 	add.w	r4, r1, r2
 800ccac:	d902      	bls.n	800ccb4 <memmove+0x10>
 800ccae:	4284      	cmp	r4, r0
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	d807      	bhi.n	800ccc4 <memmove+0x20>
 800ccb4:	1e43      	subs	r3, r0, #1
 800ccb6:	42a1      	cmp	r1, r4
 800ccb8:	d008      	beq.n	800cccc <memmove+0x28>
 800ccba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccc2:	e7f8      	b.n	800ccb6 <memmove+0x12>
 800ccc4:	4402      	add	r2, r0
 800ccc6:	4601      	mov	r1, r0
 800ccc8:	428a      	cmp	r2, r1
 800ccca:	d100      	bne.n	800ccce <memmove+0x2a>
 800cccc:	bd10      	pop	{r4, pc}
 800ccce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccd6:	e7f7      	b.n	800ccc8 <memmove+0x24>

0800ccd8 <__malloc_lock>:
 800ccd8:	4801      	ldr	r0, [pc, #4]	; (800cce0 <__malloc_lock+0x8>)
 800ccda:	f7fe ba36 	b.w	800b14a <__retarget_lock_acquire_recursive>
 800ccde:	bf00      	nop
 800cce0:	200007f8 	.word	0x200007f8

0800cce4 <__malloc_unlock>:
 800cce4:	4801      	ldr	r0, [pc, #4]	; (800ccec <__malloc_unlock+0x8>)
 800cce6:	f7fe ba31 	b.w	800b14c <__retarget_lock_release_recursive>
 800ccea:	bf00      	nop
 800ccec:	200007f8 	.word	0x200007f8

0800ccf0 <_realloc_r>:
 800ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf4:	4680      	mov	r8, r0
 800ccf6:	4614      	mov	r4, r2
 800ccf8:	460e      	mov	r6, r1
 800ccfa:	b921      	cbnz	r1, 800cd06 <_realloc_r+0x16>
 800ccfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd00:	4611      	mov	r1, r2
 800cd02:	f7fe bffb 	b.w	800bcfc <_malloc_r>
 800cd06:	b92a      	cbnz	r2, 800cd14 <_realloc_r+0x24>
 800cd08:	f7fe ff8c 	bl	800bc24 <_free_r>
 800cd0c:	4625      	mov	r5, r4
 800cd0e:	4628      	mov	r0, r5
 800cd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd14:	f000 f822 	bl	800cd5c <_malloc_usable_size_r>
 800cd18:	4284      	cmp	r4, r0
 800cd1a:	4607      	mov	r7, r0
 800cd1c:	d802      	bhi.n	800cd24 <_realloc_r+0x34>
 800cd1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd22:	d812      	bhi.n	800cd4a <_realloc_r+0x5a>
 800cd24:	4621      	mov	r1, r4
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7fe ffe8 	bl	800bcfc <_malloc_r>
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d0ed      	beq.n	800cd0e <_realloc_r+0x1e>
 800cd32:	42bc      	cmp	r4, r7
 800cd34:	4622      	mov	r2, r4
 800cd36:	4631      	mov	r1, r6
 800cd38:	bf28      	it	cs
 800cd3a:	463a      	movcs	r2, r7
 800cd3c:	f7fa ff18 	bl	8007b70 <memcpy>
 800cd40:	4631      	mov	r1, r6
 800cd42:	4640      	mov	r0, r8
 800cd44:	f7fe ff6e 	bl	800bc24 <_free_r>
 800cd48:	e7e1      	b.n	800cd0e <_realloc_r+0x1e>
 800cd4a:	4635      	mov	r5, r6
 800cd4c:	e7df      	b.n	800cd0e <_realloc_r+0x1e>

0800cd4e <abort>:
 800cd4e:	b508      	push	{r3, lr}
 800cd50:	2006      	movs	r0, #6
 800cd52:	f000 f833 	bl	800cdbc <raise>
 800cd56:	2001      	movs	r0, #1
 800cd58:	f7f4 fdd6 	bl	8001908 <_exit>

0800cd5c <_malloc_usable_size_r>:
 800cd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd60:	1f18      	subs	r0, r3, #4
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	bfbc      	itt	lt
 800cd66:	580b      	ldrlt	r3, [r1, r0]
 800cd68:	18c0      	addlt	r0, r0, r3
 800cd6a:	4770      	bx	lr

0800cd6c <_raise_r>:
 800cd6c:	291f      	cmp	r1, #31
 800cd6e:	b538      	push	{r3, r4, r5, lr}
 800cd70:	4604      	mov	r4, r0
 800cd72:	460d      	mov	r5, r1
 800cd74:	d904      	bls.n	800cd80 <_raise_r+0x14>
 800cd76:	2316      	movs	r3, #22
 800cd78:	6003      	str	r3, [r0, #0]
 800cd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd82:	b112      	cbz	r2, 800cd8a <_raise_r+0x1e>
 800cd84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd88:	b94b      	cbnz	r3, 800cd9e <_raise_r+0x32>
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 f830 	bl	800cdf0 <_getpid_r>
 800cd90:	462a      	mov	r2, r5
 800cd92:	4601      	mov	r1, r0
 800cd94:	4620      	mov	r0, r4
 800cd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd9a:	f000 b817 	b.w	800cdcc <_kill_r>
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d00a      	beq.n	800cdb8 <_raise_r+0x4c>
 800cda2:	1c59      	adds	r1, r3, #1
 800cda4:	d103      	bne.n	800cdae <_raise_r+0x42>
 800cda6:	2316      	movs	r3, #22
 800cda8:	6003      	str	r3, [r0, #0]
 800cdaa:	2001      	movs	r0, #1
 800cdac:	e7e7      	b.n	800cd7e <_raise_r+0x12>
 800cdae:	2400      	movs	r4, #0
 800cdb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	4798      	blx	r3
 800cdb8:	2000      	movs	r0, #0
 800cdba:	e7e0      	b.n	800cd7e <_raise_r+0x12>

0800cdbc <raise>:
 800cdbc:	4b02      	ldr	r3, [pc, #8]	; (800cdc8 <raise+0xc>)
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	6818      	ldr	r0, [r3, #0]
 800cdc2:	f7ff bfd3 	b.w	800cd6c <_raise_r>
 800cdc6:	bf00      	nop
 800cdc8:	2000000c 	.word	0x2000000c

0800cdcc <_kill_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d07      	ldr	r5, [pc, #28]	; (800cdec <_kill_r+0x20>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	602b      	str	r3, [r5, #0]
 800cdda:	f7f4 fd85 	bl	80018e8 <_kill>
 800cdde:	1c43      	adds	r3, r0, #1
 800cde0:	d102      	bne.n	800cde8 <_kill_r+0x1c>
 800cde2:	682b      	ldr	r3, [r5, #0]
 800cde4:	b103      	cbz	r3, 800cde8 <_kill_r+0x1c>
 800cde6:	6023      	str	r3, [r4, #0]
 800cde8:	bd38      	pop	{r3, r4, r5, pc}
 800cdea:	bf00      	nop
 800cdec:	20000804 	.word	0x20000804

0800cdf0 <_getpid_r>:
 800cdf0:	f7f4 bd72 	b.w	80018d8 <_getpid>

0800cdf4 <_init>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr

0800ce00 <_fini>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	bf00      	nop
 800ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce06:	bc08      	pop	{r3}
 800ce08:	469e      	mov	lr, r3
 800ce0a:	4770      	bx	lr
