
smart-cows-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c944  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800cad8  0800cad8  0001cad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0bc  0800d0bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c4  0800d0c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c4  0800d0c4  0001d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  200001e0  0800d2ac  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  0800d2ac  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e19  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c7  00000000  00000000  00037029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0003a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002add5  00000000  00000000  0003c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d20  00000000  00000000  000674fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104fa2  00000000  00000000  0007e21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001831bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006370  00000000  00000000  00183210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cabc 	.word	0x0800cabc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cabc 	.word	0x0800cabc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800101c:	4a36      	ldr	r2, [pc, #216]	; (80010f8 <MX_ADC1_Init+0x100>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800103a:	2204      	movs	r2, #4
 800103c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001040:	2200      	movs	r2, #0
 8001042:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001046:	2200      	movs	r2, #0
 8001048:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800104c:	2201      	movs	r2, #1
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800106e:	2200      	movs	r2, #0
 8001070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800107c:	221c      	movs	r2, #28
 800107e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_ADC1_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001090:	2201      	movs	r2, #1
 8001092:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001094:	4817      	ldr	r0, [pc, #92]	; (80010f4 <MX_ADC1_Init+0xfc>)
 8001096:	f001 f895 	bl	80021c4 <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a0:	f000 faa4 	bl	80015ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4811      	ldr	r0, [pc, #68]	; (80010f4 <MX_ADC1_Init+0xfc>)
 80010b0:	f002 f906 	bl	80032c0 <HAL_ADCEx_MultiModeConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010ba:	f000 fa97 	bl	80015ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_ADC1_Init+0x104>)
 80010c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c2:	2306      	movs	r3, #6
 80010c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010c6:	2307      	movs	r3, #7
 80010c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ca:	237f      	movs	r3, #127	; 0x7f
 80010cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ce:	2304      	movs	r3, #4
 80010d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0xfc>)
 80010dc:	f001 fb68 	bl	80027b0 <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80010e6:	f000 fa81 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001fc 	.word	0x200001fc
 80010f8:	50040000 	.word	0x50040000
 80010fc:	04300002 	.word	0x04300002

08001100 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ac      	sub	sp, #176	; 0xb0
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2288      	movs	r2, #136	; 0x88
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f006 fba3 	bl	800786c <memset>
  if(adcHandle->Instance==ADC1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <HAL_ADC_MspInit+0xc8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d146      	bne.n	80011be <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001134:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001136:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800113a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 32;
 8001146:	2320      	movs	r3, #32
 8001148:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800114a:	2307      	movs	r3, #7
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800114e:	2302      	movs	r3, #2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fb87 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800116c:	f000 fa3e 	bl	80015ec <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_ADC_MspInit+0xcc>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_ADC_MspInit+0xcc>)
 8001176:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_ADC_MspInit+0xcc>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_ADC_MspInit+0xcc>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_ADC_MspInit+0xcc>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_ADC_MspInit+0xcc>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011a6:	230b      	movs	r3, #11
 80011a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_ADC_MspInit+0xd0>)
 80011ba:	f002 fac1 	bl	8003740 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	37b0      	adds	r7, #176	; 0xb0
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	50040000 	.word	0x50040000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800

080011d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_GPIO_Init+0x44>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <MX_GPIO_Init+0x44>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_GPIO_Init+0x44>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_GPIO_Init+0x44>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <MX_GPIO_Init+0x44>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_GPIO_Init+0x44>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2201      	movs	r2, #1
 800122a:	4930      	ldr	r1, [pc, #192]	; (80012ec <HAL_UART_RxCpltCallback+0xd0>)
 800122c:	4830      	ldr	r0, [pc, #192]	; (80012f0 <HAL_UART_RxCpltCallback+0xd4>)
 800122e:	f004 f97d 	bl	800552c <HAL_UART_Transmit>

	if(huart == &huart1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_UART_RxCpltCallback+0xd8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d147      	bne.n	80012ca <HAL_UART_RxCpltCallback+0xae>
	{
		if(rxData == '+'){
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <HAL_UART_RxCpltCallback+0xd0>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b2b      	cmp	r3, #43	; 0x2b
 8001240:	d109      	bne.n	8001256 <HAL_UART_RxCpltCallback+0x3a>
			i = 0;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_UART_RxCpltCallback+0xdc>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
			joinData[i] = rxData;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_UART_RxCpltCallback+0xdc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a27      	ldr	r2, [pc, #156]	; (80012ec <HAL_UART_RxCpltCallback+0xd0>)
 800124e:	7811      	ldrb	r1, [r2, #0]
 8001250:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 8001252:	54d1      	strb	r1, [r2, r3]
 8001254:	e00a      	b.n	800126c <HAL_UART_RxCpltCallback+0x50>
		} else {
			i++;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_UART_RxCpltCallback+0xdc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a26      	ldr	r2, [pc, #152]	; (80012f8 <HAL_UART_RxCpltCallback+0xdc>)
 800125e:	6013      	str	r3, [r2, #0]
			joinData[i] = rxData;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_UART_RxCpltCallback+0xdc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a21      	ldr	r2, [pc, #132]	; (80012ec <HAL_UART_RxCpltCallback+0xd0>)
 8001266:	7811      	ldrb	r1, [r2, #0]
 8001268:	4a24      	ldr	r2, [pc, #144]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 800126a:	54d1      	strb	r1, [r2, r3]
		}

		if(i == 10){
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_UART_RxCpltCallback+0xdc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b0a      	cmp	r3, #10
 8001272:	d131      	bne.n	80012d8 <HAL_UART_RxCpltCallback+0xbc>
			if(joinData[0] == '+' && joinData[1] == 'J' && joinData[2] == 'O' && joinData[3] == 'I' && joinData[4] == 'N'
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b2b      	cmp	r3, #43	; 0x2b
 800127a:	d122      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	2b4a      	cmp	r3, #74	; 0x4a
 8001282:	d11e      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	2b4f      	cmp	r3, #79	; 0x4f
 800128a:	d11a      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 800128e:	78db      	ldrb	r3, [r3, #3]
 8001290:	2b49      	cmp	r3, #73	; 0x49
 8001292:	d116      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	2b4e      	cmp	r3, #78	; 0x4e
 800129a:	d112      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
					&& joinData[7] == 'N' && joinData[8] == 'e' && joinData[9] == 't' && joinData[10] == 'w'){
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 800129e:	79db      	ldrb	r3, [r3, #7]
 80012a0:	2b4e      	cmp	r3, #78	; 0x4e
 80012a2:	d10e      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 80012a6:	7a1b      	ldrb	r3, [r3, #8]
 80012a8:	2b65      	cmp	r3, #101	; 0x65
 80012aa:	d10a      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 80012ae:	7a5b      	ldrb	r3, [r3, #9]
 80012b0:	2b74      	cmp	r3, #116	; 0x74
 80012b2:	d106      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_RxCpltCallback+0xe0>)
 80012b6:	7a9b      	ldrb	r3, [r3, #10]
 80012b8:	2b77      	cmp	r3, #119	; 0x77
 80012ba:	d102      	bne.n	80012c2 <HAL_UART_RxCpltCallback+0xa6>
				connectedToNetwork = 1;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_UART_RxCpltCallback+0xe4>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
			}
			i = 0;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_UART_RxCpltCallback+0xdc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e006      	b.n	80012d8 <HAL_UART_RxCpltCallback+0xbc>
		}
	}
	else if (huart == &huart3)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_UART_RxCpltCallback+0xe8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d102      	bne.n	80012d8 <HAL_UART_RxCpltCallback+0xbc>
	{
		GPS_UART_Callback(&rxData);
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <HAL_UART_RxCpltCallback+0xd0>)
 80012d4:	f006 fa0a 	bl	80076ec <GPS_UART_Callback>
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80012d8:	2201      	movs	r2, #1
 80012da:	4904      	ldr	r1, [pc, #16]	; (80012ec <HAL_UART_RxCpltCallback+0xd0>)
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <HAL_UART_RxCpltCallback+0xd8>)
 80012de:	f004 f9b9 	bl	8005654 <HAL_UART_Receive_IT>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000268 	.word	0x20000268
 80012f0:	20000324 	.word	0x20000324
 80012f4:	200002a0 	.word	0x200002a0
 80012f8:	20000264 	.word	0x20000264
 80012fc:	2000026c 	.word	0x2000026c
 8001300:	20000260 	.word	0x20000260
 8001304:	200003a8 	.word	0x200003a8

08001308 <HAL_Delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001310:	f000 fd42 	bl	8001d98 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

	if(wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d00b      	beq.n	800133a <HAL_Delay+0x32>
	{
		wait += (uint32_t)uwTickFreq;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_Delay+0x4c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
	}

	while((HAL_GetTick() - tickstart) < wait)
 800132e:	e004      	b.n	800133a <HAL_Delay+0x32>
	{
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001330:	2101      	movs	r1, #1
 8001332:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001336:	f002 fbbd 	bl	8003ab4 <HAL_PWR_EnterSLEEPMode>
	while((HAL_GetTick() - tickstart) < wait)
 800133a:	f000 fd2d 	bl	8001d98 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	429a      	cmp	r2, r3
 8001348:	d8f2      	bhi.n	8001330 <HAL_Delay+0x28>
	}
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000008 	.word	0x20000008

08001358 <__io_putchar>:

int __io_putchar(int ch)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b0a      	cmp	r3, #10
 8001364:	d110      	bne.n	8001388 <__io_putchar+0x30>
		uint8_t ch2 = '\r';
 8001366:	230d      	movs	r3, #13
 8001368:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);	// 1 - lora / 2 - pc
 800136a:	f107 010f 	add.w	r1, r7, #15
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	2201      	movs	r2, #1
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <__io_putchar+0x58>)
 8001376:	f004 f8d9 	bl	800552c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800137a:	1d39      	adds	r1, r7, #4
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	2201      	movs	r2, #1
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <__io_putchar+0x5c>)
 8001384:	f004 f8d2 	bl	800552c <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // 1 - lora / 2 - pc
 8001388:	1d39      	adds	r1, r7, #4
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	2201      	movs	r2, #1
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <__io_putchar+0x58>)
 8001392:	f004 f8cb 	bl	800552c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001396:	1d39      	adds	r1, r7, #4
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	2201      	movs	r2, #1
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <__io_putchar+0x5c>)
 80013a0:	f004 f8c4 	bl	800552c <HAL_UART_Transmit>
	return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200002a0 	.word	0x200002a0
 80013b4:	20000324 	.word	0x20000324

080013b8 <connect_to_lora>:

void connect_to_lora()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	while(connectedToNetwork == 0){
 80013bc:	e03e      	b.n	800143c <connect_to_lora+0x84>
		printf("AT+ID=DevEui\r\n");
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <connect_to_lora+0x94>)
 80013c0:	f007 fa3c 	bl	800883c <puts>
		HAL_Delay(500);
 80013c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013c8:	f7ff ff9e 	bl	8001308 <HAL_Delay>

		printf("AT+ID=AppEui\r\n");
 80013cc:	4820      	ldr	r0, [pc, #128]	; (8001450 <connect_to_lora+0x98>)
 80013ce:	f007 fa35 	bl	800883c <puts>
		HAL_Delay(500);
 80013d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d6:	f7ff ff97 	bl	8001308 <HAL_Delay>

		printf("AT+DR=EU868\r\n");
 80013da:	481e      	ldr	r0, [pc, #120]	; (8001454 <connect_to_lora+0x9c>)
 80013dc:	f007 fa2e 	bl	800883c <puts>
		HAL_Delay(500);
 80013e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e4:	f7ff ff90 	bl	8001308 <HAL_Delay>

		printf("AT+CH=NUM,0-2\r\n");
 80013e8:	481b      	ldr	r0, [pc, #108]	; (8001458 <connect_to_lora+0xa0>)
 80013ea:	f007 fa27 	bl	800883c <puts>
		HAL_Delay(500);
 80013ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f2:	f7ff ff89 	bl	8001308 <HAL_Delay>

		printf("AT+LW=VER\r\n");
 80013f6:	4819      	ldr	r0, [pc, #100]	; (800145c <connect_to_lora+0xa4>)
 80013f8:	f007 fa20 	bl	800883c <puts>
		HAL_Delay(500);
 80013fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001400:	f7ff ff82 	bl	8001308 <HAL_Delay>

		printf("AT+MODE=LWOTAA\r\n");
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <connect_to_lora+0xa8>)
 8001406:	f007 fa19 	bl	800883c <puts>
		HAL_Delay(500);
 800140a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140e:	f7ff ff7b 	bl	8001308 <HAL_Delay>

		printf("AT+KEY=APPKEY,\"F4D4B405FF7AB3C3DF60C78F399B1E3C\"\r\n");
 8001412:	4814      	ldr	r0, [pc, #80]	; (8001464 <connect_to_lora+0xac>)
 8001414:	f007 fa12 	bl	800883c <puts>
		HAL_Delay(500);
 8001418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141c:	f7ff ff74 	bl	8001308 <HAL_Delay>

		printf("AT+ID\r\n");
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <connect_to_lora+0xb0>)
 8001422:	f007 fa0b 	bl	800883c <puts>
		HAL_Delay(500);
 8001426:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142a:	f7ff ff6d 	bl	8001308 <HAL_Delay>

		printf("AT+JOIN\r\n");
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <connect_to_lora+0xb4>)
 8001430:	f007 fa04 	bl	800883c <puts>
		HAL_Delay(10000);
 8001434:	f242 7010 	movw	r0, #10000	; 0x2710
 8001438:	f7ff ff66 	bl	8001308 <HAL_Delay>
	while(connectedToNetwork == 0){
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <connect_to_lora+0xb8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0bc      	beq.n	80013be <connect_to_lora+0x6>
	}
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	0800cad8 	.word	0x0800cad8
 8001450:	0800cae8 	.word	0x0800cae8
 8001454:	0800caf8 	.word	0x0800caf8
 8001458:	0800cb08 	.word	0x0800cb08
 800145c:	0800cb18 	.word	0x0800cb18
 8001460:	0800cb24 	.word	0x0800cb24
 8001464:	0800cb34 	.word	0x0800cb34
 8001468:	0800cb68 	.word	0x0800cb68
 800146c:	0800cb70 	.word	0x0800cb70
 8001470:	20000260 	.word	0x20000260

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001478:	b08a      	sub	sp, #40	; 0x28
 800147a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f000 fc23 	bl	8001cc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f85e 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f7ff fea6 	bl	80011d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001488:	f000 fa96 	bl	80019b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800148c:	f000 fa64 	bl	8001958 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001490:	f7ff fdb2 	bl	8000ff8 <MX_ADC1_Init>
  MX_RTC_Init();
 8001494:	f000 f8b0 	bl	80015f8 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001498:	f000 fabe 	bl	8001a18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  battery_init(&hadc1, HAL_MAX_DELAY);
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	4820      	ldr	r0, [pc, #128]	; (8001524 <main+0xb0>)
 80014a2:	f006 f80f 	bl	80074c4 <battery_init>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80014a6:	2201      	movs	r2, #1
 80014a8:	491f      	ldr	r1, [pc, #124]	; (8001528 <main+0xb4>)
 80014aa:	4820      	ldr	r0, [pc, #128]	; (800152c <main+0xb8>)
 80014ac:	f004 f8d2 	bl	8005654 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  connect_to_lora();
 80014b0:	f7ff ff82 	bl	80013b8 <connect_to_lora>

	  if(connectedToNetwork)
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <main+0xbc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <main+0x4e>
		  GPS_Init(&rxData);
 80014bc:	481a      	ldr	r0, [pc, #104]	; (8001528 <main+0xb4>)
 80014be:	f006 f8f7 	bl	80076b0 <GPS_Init>

	  if(gpsDataReady)
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <main+0xc0>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f2      	beq.n	80014b0 <main+0x3c>
	  {
		  float voltage = battery_getBatteryVolts();
 80014ca:	f006 f836 	bl	800753a <battery_getBatteryVolts>
 80014ce:	ed87 0a05 	vstr	s0, [r7, #20]
		  int batteryLevel = battery_getBatteryChargeLevel();
 80014d2:	f006 f811 	bl	80074f8 <battery_getBatteryChargeLevel>
 80014d6:	6138      	str	r0, [r7, #16]
		  //printf("Voltage: %.3f, Battery level: %d %\r\n", voltage, batteryLevel);

		  float temperature = 38;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <main+0xc4>)
 80014da:	60fb      	str	r3, [r7, #12]
		  Position currentPosition;
		  GPS_getCurrentPosition(&currentPosition);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f006 f96e 	bl	80077c0 <GPS_getCurrentPosition>
		  //printf("\n Lat: %f \t Lon: %f \r\n", currentPosition.latitude, currentPosition.longitude);
		  printf("AT+MSG=%d_%f_%f_%f\r\n", batteryLevel, temperature, currentPosition.longitude, currentPosition.latitude);
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff f82f 	bl	8000548 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f829 	bl	8000548 <__aeabi_f2d>
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f823 	bl	8000548 <__aeabi_f2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800150a:	e9cd 4500 	strd	r4, r5, [sp]
 800150e:	4642      	mov	r2, r8
 8001510:	464b      	mov	r3, r9
 8001512:	6939      	ldr	r1, [r7, #16]
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <main+0xc8>)
 8001516:	f007 f90b 	bl	8008730 <iprintf>

		  HAL_Delay(10000);
 800151a:	f242 7010 	movw	r0, #10000	; 0x2710
 800151e:	f7ff fef3 	bl	8001308 <HAL_Delay>
	  connect_to_lora();
 8001522:	e7c5      	b.n	80014b0 <main+0x3c>
 8001524:	200001fc 	.word	0x200001fc
 8001528:	20000268 	.word	0x20000268
 800152c:	200002a0 	.word	0x200002a0
 8001530:	20000260 	.word	0x20000260
 8001534:	20000760 	.word	0x20000760
 8001538:	42180000 	.word	0x42180000
 800153c:	0800cb7c 	.word	0x0800cb7c

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b096      	sub	sp, #88	; 0x58
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	2244      	movs	r2, #68	; 0x44
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f006 f98c 	bl	800786c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001566:	f002 fae7 	bl	8003b38 <HAL_PWREx_ControlVoltageScaling>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001570:	f000 f83c 	bl	80015ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001574:	f002 fa8e 	bl	8003a94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <SystemClock_Config+0xa8>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157e:	4a1a      	ldr	r2, [pc, #104]	; (80015e8 <SystemClock_Config+0xa8>)
 8001580:	f023 0318 	bic.w	r3, r3, #24
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001588:	2314      	movs	r3, #20
 800158a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fb65 	bl	8003c74 <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015b0:	f000 f81c 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 ff2d 	bl	800442c <HAL_RCC_ClockConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015d8:	f000 f808 	bl	80015ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015dc:	f003 fc34 	bl	8004e48 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015e0:	bf00      	nop
 80015e2:	3758      	adds	r7, #88	; 0x58
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <Error_Handler+0x8>
	...

080015f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_RTC_Init+0x48>)
 80015fe:	4a11      	ldr	r2, [pc, #68]	; (8001644 <MX_RTC_Init+0x4c>)
 8001600:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_RTC_Init+0x48>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_RTC_Init+0x48>)
 800160a:	227f      	movs	r2, #127	; 0x7f
 800160c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_RTC_Init+0x48>)
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_RTC_Init+0x48>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_RTC_Init+0x48>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_RTC_Init+0x48>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_RTC_Init+0x48>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_RTC_Init+0x48>)
 800162e:	f003 fded 	bl	800520c <HAL_RTC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001638:	f7ff ffd8 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000278 	.word	0x20000278
 8001644:	40002800 	.word	0x40002800

08001648 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0a4      	sub	sp, #144	; 0x90
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	2288      	movs	r2, #136	; 0x88
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f006 f907 	bl	800786c <memset>
  if(rtcHandle->Instance==RTC)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <HAL_RTC_MspInit+0x6c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d120      	bne.n	80016aa <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800166e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	4618      	mov	r0, r3
 800167c:	f003 f8fa 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001686:	f7ff ffb1 	bl	80015ec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RTC_MspInit+0x70>)
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_RTC_MspInit+0x70>)
 8001692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2003      	movs	r0, #3
 80016a0:	f001 ff99 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f001 ffb2 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3790      	adds	r7, #144	; 0x90
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40002800 	.word	0x40002800
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x44>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x44>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x44>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x44>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x44>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6593      	str	r3, [r2, #88]	; 0x58
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x44>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 fb0e 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <RTC_WKUP_IRQHandler+0x10>)
 800175e:	f003 fe67 	bl	8005430 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000278 	.word	0x20000278

0800176c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <USART1_IRQHandler+0x10>)
 8001772:	f003 ffc5 	bl	8005700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002a0 	.word	0x200002a0

08001780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <USART2_IRQHandler+0x10>)
 8001786:	f003 ffbb 	bl	8005700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000324 	.word	0x20000324

08001794 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <USART3_IRQHandler+0x10>)
 800179a:	f003 ffb1 	bl	8005700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200003a8 	.word	0x200003a8

080017a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_kill>:

int _kill(int pid, int sig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c2:	f006 f813 	bl	80077ec <__errno>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2216      	movs	r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
	return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_exit>:

void _exit (int status)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffe7 	bl	80017b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ea:	e7fe      	b.n	80017ea <_exit+0x12>

080017ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
	}

return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fd89 	bl	8001358 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
	}
	return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001886:	605a      	str	r2, [r3, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f005 ff78 	bl	80077ec <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20018000 	.word	0x20018000
 8001928:	00000400 	.word	0x00000400
 800192c:	2000029c 	.word	0x2000029c
 8001930:	200007d0 	.word	0x200007d0

08001934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <MX_USART1_UART_Init+0x5c>)
 8001960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 8001964:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART1_UART_Init+0x58>)
 800199c:	f003 fd78 	bl	8005490 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019a6:	f7ff fe21 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002a0 	.word	0x200002a0
 80019b4:	40013800 	.word	0x40013800

080019b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019be:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <MX_USART2_UART_Init+0x5c>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_USART2_UART_Init+0x58>)
 80019fc:	f003 fd48 	bl	8005490 <HAL_UART_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a06:	f7ff fdf1 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000324 	.word	0x20000324
 8001a14:	40004400 	.word	0x40004400

08001a18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <MX_USART3_UART_Init+0x5c>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_USART3_UART_Init+0x58>)
 8001a5c:	f003 fd18 	bl	8005490 <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a66:	f7ff fdc1 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003a8 	.word	0x200003a8
 8001a74:	40004800 	.word	0x40004800

08001a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0b0      	sub	sp, #192	; 0xc0
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	2288      	movs	r2, #136	; 0x88
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fee7 	bl	800786c <memset>
  if(uartHandle->Instance==USART1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6f      	ldr	r2, [pc, #444]	; (8001c60 <HAL_UART_MspInit+0x1e8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d145      	bne.n	8001b34 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aac:	2300      	movs	r3, #0
 8001aae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fedd 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ac0:	f7ff fd94 	bl	80015ec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac4:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ace:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad0:	4b64      	ldr	r3, [pc, #400]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae0:	4a60      	ldr	r2, [pc, #384]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001af4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f001 fe0f 	bl	8003740 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2025      	movs	r0, #37	; 0x25
 8001b28:	f001 fd55 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b2c:	2025      	movs	r0, #37	; 0x25
 8001b2e:	f001 fd6e 	bl	800360e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b32:	e091      	b.n	8001c58 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_UART_MspInit+0x1f0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d144      	bne.n	8001bc8 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fe92 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001b56:	f7ff fd49 	bl	80015ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	4a41      	ldr	r2, [pc, #260]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	6593      	str	r3, [r2, #88]	; 0x58
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb2:	f001 fdc5 	bl	8003740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2026      	movs	r0, #38	; 0x26
 8001bbc:	f001 fd0b 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bc0:	2026      	movs	r0, #38	; 0x26
 8001bc2:	f001 fd24 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8001bc6:	e047      	b.n	8001c58 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <HAL_UART_MspInit+0x1f4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d142      	bne.n	8001c58 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fe48 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001bea:	f7ff fcff 	bl	80015ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_UART_MspInit+0x1ec>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c1e:	2330      	movs	r3, #48	; 0x30
 8001c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c36:	2307      	movs	r3, #7
 8001c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c40:	4619      	mov	r1, r3
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <HAL_UART_MspInit+0x1f8>)
 8001c44:	f001 fd7c 	bl	8003740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2027      	movs	r0, #39	; 0x27
 8001c4e:	f001 fcc2 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c52:	2027      	movs	r0, #39	; 0x27
 8001c54:	f001 fcdb 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8001c58:	bf00      	nop
 8001c5a:	37c0      	adds	r7, #192	; 0xc0
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	40004800 	.word	0x40004800
 8001c70:	48000800 	.word	0x48000800

08001c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c78:	f7ff fe5c 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <LoopForever+0xe>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	; (8001cc0 <LoopForever+0x16>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f005 fda9 	bl	80077f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ca6:	f7ff fbe5 	bl	8001474 <main>

08001caa <LoopForever>:

LoopForever:
    b LoopForever
 8001caa:	e7fe      	b.n	8001caa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cb8:	0800d0cc 	.word	0x0800d0cc
  ldr r2, =_sbss
 8001cbc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cc0:	200007cc 	.word	0x200007cc

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>

08001cc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f001 fc75 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd6:	200f      	movs	r0, #15
 8001cd8:	f000 f80e 	bl	8001cf8 <HAL_InitTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	71fb      	strb	r3, [r7, #7]
 8001ce6:	e001      	b.n	8001cec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ce8:	f7ff fce8 	bl	80016bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_InitTick+0x6c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d023      	beq.n	8001d54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_InitTick+0x70>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_InitTick+0x6c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fc81 	bl	800362a <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10f      	bne.n	8001d4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d809      	bhi.n	8001d48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f001 fc4b 	bl	80035d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_InitTick+0x74>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e004      	b.n	8001d58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e001      	b.n	8001d58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008
 8001d94:	2000042c 	.word	0x2000042c

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000042c 	.word	0x2000042c

08001db0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3360      	adds	r3, #96	; 0x60
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <LL_ADC_SetOffset+0x44>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	03fff000 	.word	0x03fff000

08001e60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3360      	adds	r3, #96	; 0x60
 8001e6e:	461a      	mov	r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3360      	adds	r3, #96	; 0x60
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3330      	adds	r3, #48	; 0x30
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	211f      	movs	r1, #31
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0e9b      	lsrs	r3, r3, #26
 8001f20:	f003 011f 	and.w	r1, r3, #31
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3314      	adds	r3, #20
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0e5b      	lsrs	r3, r3, #25
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	0d1b      	lsrs	r3, r3, #20
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	2107      	movs	r1, #7
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	401a      	ands	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	0d1b      	lsrs	r3, r3, #20
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	431a      	orrs	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0318 	and.w	r3, r3, #24
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fbc:	40d9      	lsrs	r1, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	0007ffff 	.word	0x0007ffff

08001fe0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 031f 	and.w	r3, r3, #31
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6093      	str	r3, [r2, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800204c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002050:	d101      	bne.n	8002056 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f0:	f043 0202 	orr.w	r2, r3, #2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <LL_ADC_IsEnabled+0x18>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <LL_ADC_IsEnabled+0x1a>
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d101      	bne.n	8002142 <LL_ADC_IsDisableOngoing+0x18>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_IsDisableOngoing+0x1a>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b04      	cmp	r3, #4
 800218a:	d101      	bne.n	8002190 <LL_ADC_REG_IsConversionOngoing+0x18>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e136      	b.n	800244c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7fe ff87 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff19 	bl	800203c <LL_ADC_IsDeepPowerDownEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff feff 	bl	8002018 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff34 	bl	800208c <LL_ADC_IsInternalRegulatorEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d115      	bne.n	8002256 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff18 	bl	8002064 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002234:	4b87      	ldr	r3, [pc, #540]	; (8002454 <HAL_ADC_Init+0x290>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <HAL_ADC_Init+0x294>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002248:	e002      	b.n	8002250 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff16 	bl	800208c <LL_ADC_IsInternalRegulatorEnabled>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff76 	bl	8002178 <LL_ADC_REG_IsConversionOngoing>
 800228c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 80cf 	bne.w	800243a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 80cb 	bne.w	800243a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022ac:	f043 0202 	orr.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff23 	bl	8002104 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d115      	bne.n	80022f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c4:	4865      	ldr	r0, [pc, #404]	; (800245c <HAL_ADC_Init+0x298>)
 80022c6:	f7ff ff1d 	bl	8002104 <LL_ADC_IsEnabled>
 80022ca:	4604      	mov	r4, r0
 80022cc:	4864      	ldr	r0, [pc, #400]	; (8002460 <HAL_ADC_Init+0x29c>)
 80022ce:	f7ff ff19 	bl	8002104 <LL_ADC_IsEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	431c      	orrs	r4, r3
 80022d6:	4863      	ldr	r0, [pc, #396]	; (8002464 <HAL_ADC_Init+0x2a0>)
 80022d8:	f7ff ff14 	bl	8002104 <LL_ADC_IsEnabled>
 80022dc:	4603      	mov	r3, r0
 80022de:	4323      	orrs	r3, r4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4619      	mov	r1, r3
 80022ea:	485f      	ldr	r0, [pc, #380]	; (8002468 <HAL_ADC_Init+0x2a4>)
 80022ec:	f7ff fd60 	bl	8001db0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002300:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002306:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d106      	bne.n	800232c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	3b01      	subs	r3, #1
 8002324:	045b      	lsls	r3, r3, #17
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_ADC_Init+0x2a8>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	69b9      	ldr	r1, [r7, #24]
 8002358:	430b      	orrs	r3, r1
 800235a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff09 	bl	8002178 <LL_ADC_REG_IsConversionOngoing>
 8002366:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff16 	bl	800219e <LL_ADC_INJ_IsConversionOngoing>
 8002372:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d13d      	bne.n	80023f6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d13a      	bne.n	80023f6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002384:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800238c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239c:	f023 0302 	bic.w	r3, r3, #2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	430b      	orrs	r3, r1
 80023a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d118      	bne.n	80023e6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023be:	f023 0304 	bic.w	r3, r3, #4
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023d6:	430a      	orrs	r2, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	611a      	str	r2, [r3, #16]
 80023e4:	e007      	b.n	80023f6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10c      	bne.n	8002418 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f023 010f 	bic.w	r1, r3, #15
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
 8002416:	e007      	b.n	8002428 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 020f 	bic.w	r2, r2, #15
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f023 0303 	bic.w	r3, r3, #3
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
 8002438:	e007      	b.n	800244a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800244a:	7ffb      	ldrb	r3, [r7, #31]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3724      	adds	r7, #36	; 0x24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	20000000 	.word	0x20000000
 8002458:	053e2d63 	.word	0x053e2d63
 800245c:	50040000 	.word	0x50040000
 8002460:	50040100 	.word	0x50040100
 8002464:	50040200 	.word	0x50040200
 8002468:	50040300 	.word	0x50040300
 800246c:	fff0c007 	.word	0xfff0c007

08002470 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002478:	4857      	ldr	r0, [pc, #348]	; (80025d8 <HAL_ADC_Start+0x168>)
 800247a:	f7ff fdb1 	bl	8001fe0 <LL_ADC_GetMultimode>
 800247e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fe77 	bl	8002178 <LL_ADC_REG_IsConversionOngoing>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	f040 809c 	bne.w	80025ca <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_Start+0x30>
 800249c:	2302      	movs	r3, #2
 800249e:	e097      	b.n	80025d0 <HAL_ADC_Start+0x160>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fd71 	bl	8002f90 <ADC_Enable>
 80024ae:	4603      	mov	r3, r0
 80024b0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 8083 	bne.w	80025c0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a42      	ldr	r2, [pc, #264]	; (80025dc <HAL_ADC_Start+0x16c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d002      	beq.n	80024de <HAL_ADC_Start+0x6e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e000      	b.n	80024e0 <HAL_ADC_Start+0x70>
 80024de:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_ADC_Start+0x170>)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d002      	beq.n	80024ee <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002506:	d106      	bne.n	8002516 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f023 0206 	bic.w	r2, r3, #6
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58
 8002514:	e002      	b.n	800251c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	221c      	movs	r2, #28
 8002522:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_ADC_Start+0x16c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d002      	beq.n	800253c <HAL_ADC_Start+0xcc>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e000      	b.n	800253e <HAL_ADC_Start+0xce>
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_ADC_Start+0x170>)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4293      	cmp	r3, r2
 8002544:	d008      	beq.n	8002558 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d002      	beq.n	8002558 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b09      	cmp	r3, #9
 8002556:	d114      	bne.n	8002582 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800256e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fde8 	bl	8002150 <LL_ADC_REG_StartConversion>
 8002580:	e025      	b.n	80025ce <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_ADC_Start+0x16c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d002      	beq.n	800259e <HAL_ADC_Start+0x12e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e000      	b.n	80025a0 <HAL_ADC_Start+0x130>
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_ADC_Start+0x170>)
 80025a0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00f      	beq.n	80025ce <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
 80025be:	e006      	b.n	80025ce <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80025c8:	e001      	b.n	80025ce <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	50040300 	.word	0x50040300
 80025dc:	50040100 	.word	0x50040100
 80025e0:	50040000 	.word	0x50040000

080025e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ee:	4866      	ldr	r0, [pc, #408]	; (8002788 <HAL_ADC_PollForConversion+0x1a4>)
 80025f0:	f7ff fcf6 	bl	8001fe0 <LL_ADC_GetMultimode>
 80025f4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d102      	bne.n	8002604 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025fe:	2308      	movs	r3, #8
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e02a      	b.n	800265a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d002      	beq.n	8002616 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b09      	cmp	r3, #9
 8002614:	d111      	bne.n	800263a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0a4      	b.n	800277e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002634:	2304      	movs	r3, #4
 8002636:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002638:	e00f      	b.n	800265a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800263a:	4853      	ldr	r0, [pc, #332]	; (8002788 <HAL_ADC_PollForConversion+0x1a4>)
 800263c:	f7ff fcde 	bl	8001ffc <LL_ADC_GetMultiDMATransfer>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f043 0220 	orr.w	r2, r3, #32
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e093      	b.n	800277e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002656:	2304      	movs	r3, #4
 8002658:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800265a:	f7ff fb9d 	bl	8001d98 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002660:	e021      	b.n	80026a6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d01d      	beq.n	80026a6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800266a:	f7ff fb95 	bl	8001d98 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <HAL_ADC_PollForConversion+0x9c>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d112      	bne.n	80026a6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10b      	bne.n	80026a6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0204 	orr.w	r2, r3, #4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e06b      	b.n	800277e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0d6      	beq.n	8002662 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fbfc 	bl	8001ec2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01c      	beq.n	800270a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e5b      	ldrb	r3, [r3, #25]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d118      	bne.n	800270a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d111      	bne.n	800270a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1f      	ldr	r2, [pc, #124]	; (800278c <HAL_ADC_PollForConversion+0x1a8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d002      	beq.n	800271a <HAL_ADC_PollForConversion+0x136>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	e000      	b.n	800271c <HAL_ADC_PollForConversion+0x138>
 800271a:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_ADC_PollForConversion+0x1ac>)
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	4293      	cmp	r3, r2
 8002722:	d008      	beq.n	8002736 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d002      	beq.n	8002736 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b09      	cmp	r3, #9
 8002734:	d104      	bne.n	8002740 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e00c      	b.n	800275a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <HAL_ADC_PollForConversion+0x1a8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d002      	beq.n	8002750 <HAL_ADC_PollForConversion+0x16c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e000      	b.n	8002752 <HAL_ADC_PollForConversion+0x16e>
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_ADC_PollForConversion+0x1ac>)
 8002752:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d104      	bne.n	800276a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2208      	movs	r2, #8
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e008      	b.n	800277c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d103      	bne.n	800277c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	220c      	movs	r2, #12
 800277a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	50040300 	.word	0x50040300
 800278c:	50040100 	.word	0x50040100
 8002790:	50040000 	.word	0x50040000

08002794 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0b6      	sub	sp, #216	; 0xd8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x22>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e3c7      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x7b2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fcca 	bl	8002178 <LL_ADC_REG_IsConversionOngoing>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 83a8 	bne.w	8002f3c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d824      	bhi.n	800283e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	3b02      	subs	r3, #2
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d81b      	bhi.n	8002836 <HAL_ADC_ConfigChannel+0x86>
 80027fe:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_ADC_ConfigChannel+0x54>)
 8002800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002804:	08002815 	.word	0x08002815
 8002808:	0800281d 	.word	0x0800281d
 800280c:	08002825 	.word	0x08002825
 8002810:	0800282d 	.word	0x0800282d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	220c      	movs	r2, #12
 8002818:	605a      	str	r2, [r3, #4]
          break;
 800281a:	e011      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2212      	movs	r2, #18
 8002820:	605a      	str	r2, [r3, #4]
          break;
 8002822:	e00d      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2218      	movs	r2, #24
 8002828:	605a      	str	r2, [r3, #4]
          break;
 800282a:	e009      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002832:	605a      	str	r2, [r3, #4]
          break;
 8002834:	e004      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2206      	movs	r2, #6
 800283a:	605a      	str	r2, [r3, #4]
          break;
 800283c:	e000      	b.n	8002840 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800283e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	f7ff fb4b 	bl	8001ee8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc8e 	bl	8002178 <LL_ADC_REG_IsConversionOngoing>
 800285c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fc9a 	bl	800219e <LL_ADC_INJ_IsConversionOngoing>
 800286a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800286e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 81a6 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 81a1 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	461a      	mov	r2, r3
 8002890:	f7ff fb56 	bl	8001f40 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00a      	beq.n	80028cc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6919      	ldr	r1, [r3, #16]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028c6:	f7ff faa7 	bl	8001e18 <LL_ADC_SetOffset>
 80028ca:	e17b      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fac4 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x148>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fab9 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 021f 	and.w	r2, r3, #31
 80028f6:	e01e      	b.n	8002936 <HAL_ADC_ConfigChannel+0x186>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff faae 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800291a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800291e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e004      	b.n	8002934 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800292a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_ConfigChannel+0x19e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	e018      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800296a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e004      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fa7d 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fa61 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <HAL_ADC_ConfigChannel+0x20e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fa56 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	e01e      	b.n	80029fc <HAL_ADC_ConfigChannel+0x24c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fa4b 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80029f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x264>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	e018      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x296>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e004      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fa1a 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f9fe 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x2d4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2102      	movs	r1, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f9f3 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	f003 021f 	and.w	r2, r3, #31
 8002a82:	e01e      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x312>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff f9e8 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e004      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x32a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	e016      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x358>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002aec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e004      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d106      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f9b9 	bl	8001e8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2103      	movs	r1, #3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f99d 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x396>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f992 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	e017      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x3c6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f987 	bl	8001e60 <LL_ADC_GetOffsetChannel>
 8002b52:	4603      	mov	r3, r0
 8002b54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b60:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x3de>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	e011      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x402>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d106      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2103      	movs	r1, #3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f964 	bl	8001e8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fa9b 	bl	8002104 <LL_ADC_IsEnabled>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 813f 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff f9d8 	bl	8001f98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a8e      	ldr	r2, [pc, #568]	; (8002e28 <HAL_ADC_ConfigChannel+0x678>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	f040 8130 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x46c>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e019      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x4a0>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e003      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	bf94      	ite	ls
 8002c4a:	2301      	movls	r3, #1
 8002c4c:	2300      	movhi	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d079      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x4c0>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	069b      	lsls	r3, r3, #26
 8002c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c6e:	e015      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x4ec>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e003      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x50c>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	e017      	b.n	8002cec <HAL_ADC_ConfigChannel+0x53c>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e003      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f003 031f 	and.w	r3, r3, #31
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x562>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	3301      	adds	r3, #1
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	051b      	lsls	r3, r3, #20
 8002d10:	e018      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x594>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	e003      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d44:	430b      	orrs	r3, r1
 8002d46:	e080      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x5b4>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	069b      	lsls	r3, r3, #26
 8002d5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d62:	e015      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x5e0>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	069b      	lsls	r3, r3, #26
 8002d8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x600>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	3301      	adds	r3, #1
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	e017      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x630>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	ea42 0103 	orr.w	r1, r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x65c>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	3301      	adds	r3, #1
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	3b1e      	subs	r3, #30
 8002e04:	051b      	lsls	r3, r3, #20
 8002e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	e01d      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x698>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	613b      	str	r3, [r7, #16]
  return result;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e005      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x684>
 8002e28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b1e      	subs	r3, #30
 8002e42:	051b      	lsls	r3, r3, #20
 8002e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f7ff f876 	bl	8001f40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_ADC_ConfigChannel+0x7bc>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07a      	beq.n	8002f56 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e60:	4843      	ldr	r0, [pc, #268]	; (8002f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e62:	f7fe ffcb 	bl	8001dfc <LL_ADC_GetCommonPathInternalCh>
 8002e66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a41      	ldr	r2, [pc, #260]	; (8002f74 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d12c      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d126      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0x6e4>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d15d      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4834      	ldr	r0, [pc, #208]	; (8002f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ea0:	f7fe ff99 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea4:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	4a36      	ldr	r2, [pc, #216]	; (8002f84 <HAL_ADC_ConfigChannel+0x7d4>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ebe:	e002      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f9      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ecc:	e040      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d118      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x75a>
 8002ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d112      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x748>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <HAL_ADC_ConfigChannel+0x7cc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d12d      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f00:	4619      	mov	r1, r3
 8002f02:	481b      	ldr	r0, [pc, #108]	; (8002f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f04:	f7fe ff67 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f08:	e024      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <HAL_ADC_ConfigChannel+0x7dc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d120      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11a      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d115      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f32:	4619      	mov	r1, r3
 8002f34:	480e      	ldr	r0, [pc, #56]	; (8002f70 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f36:	f7fe ff4e 	bl	8001dd6 <LL_ADC_SetCommonPathInternalCh>
 8002f3a:	e00c      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f4e:	e002      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f50:	bf00      	nop
 8002f52:	e000      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	37d8      	adds	r7, #216	; 0xd8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	80080000 	.word	0x80080000
 8002f70:	50040300 	.word	0x50040300
 8002f74:	c7520000 	.word	0xc7520000
 8002f78:	50040000 	.word	0x50040000
 8002f7c:	50040200 	.word	0x50040200
 8002f80:	20000000 	.word	0x20000000
 8002f84:	053e2d63 	.word	0x053e2d63
 8002f88:	cb840000 	.word	0xcb840000
 8002f8c:	80000001 	.word	0x80000001

08002f90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f8af 	bl	8002104 <LL_ADC_IsEnabled>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d169      	bne.n	8003080 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <ADC_Enable+0xfc>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e055      	b.n	8003082 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f86a 	bl	80020b4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fe0:	482b      	ldr	r0, [pc, #172]	; (8003090 <ADC_Enable+0x100>)
 8002fe2:	f7fe ff0b 	bl	8001dfc <LL_ADC_GetCommonPathInternalCh>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <ADC_Enable+0x104>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	4a28      	ldr	r2, [pc, #160]	; (8003098 <ADC_Enable+0x108>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800300a:	e002      	b.n	8003012 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003018:	f7fe febe 	bl	8001d98 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800301e:	e028      	b.n	8003072 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff f86d 	bl	8002104 <LL_ADC_IsEnabled>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f83d 	bl	80020b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800303a:	f7fe fead 	bl	8001d98 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d914      	bls.n	8003072 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d00d      	beq.n	8003072 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f043 0210 	orr.w	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d1cf      	bne.n	8003020 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	8000003f 	.word	0x8000003f
 8003090:	50040300 	.word	0x50040300
 8003094:	20000000 	.word	0x20000000
 8003098:	053e2d63 	.word	0x053e2d63

0800309c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f83e 	bl	800212a <LL_ADC_IsDisableOngoing>
 80030ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff f825 	bl	8002104 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d047      	beq.n	8003150 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d144      	bne.n	8003150 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030d 	and.w	r3, r3, #13
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10c      	bne.n	80030ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe ffff 	bl	80020dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2203      	movs	r2, #3
 80030e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030e6:	f7fe fe57 	bl	8001d98 <HAL_GetTick>
 80030ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030ec:	e029      	b.n	8003142 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f043 0210 	orr.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e023      	b.n	8003152 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800310a:	f7fe fe45 	bl	8001d98 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d914      	bls.n	8003142 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e007      	b.n	8003152 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1dc      	bne.n	800310a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <LL_ADC_IsEnabled>:
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <LL_ADC_IsEnabled+0x18>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <LL_ADC_IsEnabled+0x1a>
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_StartCalibration>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003192:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800319c:	4313      	orrs	r3, r2
 800319e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_IsCalibrationOnGoing>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031c6:	d101      	bne.n	80031cc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_REG_IsConversionOngoing>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_ADCEx_Calibration_Start+0x1c>
 8003218:	2302      	movs	r3, #2
 800321a:	e04d      	b.n	80032b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff39 	bl	800309c <ADC_Disable>
 800322a:	4603      	mov	r3, r0
 800322c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d136      	bne.n	80032a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800323c:	f023 0302 	bic.w	r3, r3, #2
 8003240:	f043 0202 	orr.w	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff96 	bl	8003180 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003254:	e014      	b.n	8003280 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3301      	adds	r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003262:	d30d      	bcc.n	8003280 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f023 0312 	bic.w	r3, r3, #18
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01b      	b.n	80032b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff94 	bl	80031b2 <LL_ADC_IsCalibrationOnGoing>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e2      	bne.n	8003256 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f023 0303 	bic.w	r3, r3, #3
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
 80032a0:	e005      	b.n	80032ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b09f      	sub	sp, #124	; 0x7c
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032da:	2302      	movs	r3, #2
 80032dc:	e093      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032e6:	2300      	movs	r3, #0
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032ea:	2300      	movs	r3, #0
 80032ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a47      	ldr	r2, [pc, #284]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d102      	bne.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	e001      	b.n	8003302 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e072      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff59 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 8003328:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff53 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d154      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800333a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333c:	2b00      	cmp	r3, #0
 800333e:	d151      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003342:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02c      	beq.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800335e:	035b      	lsls	r3, r3, #13
 8003360:	430b      	orrs	r3, r1
 8003362:	431a      	orrs	r2, r3
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003368:	4829      	ldr	r0, [pc, #164]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800336a:	f7ff fef6 	bl	800315a <LL_ADC_IsEnabled>
 800336e:	4604      	mov	r4, r0
 8003370:	4828      	ldr	r0, [pc, #160]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003372:	f7ff fef2 	bl	800315a <LL_ADC_IsEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	431c      	orrs	r4, r3
 800337a:	4828      	ldr	r0, [pc, #160]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800337c:	f7ff feed 	bl	800315a <LL_ADC_IsEnabled>
 8003380:	4603      	mov	r3, r0
 8003382:	4323      	orrs	r3, r4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d137      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	6811      	ldr	r1, [r2, #0]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	6892      	ldr	r2, [r2, #8]
 800339c:	430a      	orrs	r2, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033a4:	e028      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b2:	4817      	ldr	r0, [pc, #92]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033b4:	f7ff fed1 	bl	800315a <LL_ADC_IsEnabled>
 80033b8:	4604      	mov	r4, r0
 80033ba:	4816      	ldr	r0, [pc, #88]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033bc:	f7ff fecd 	bl	800315a <LL_ADC_IsEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	431c      	orrs	r4, r3
 80033c4:	4815      	ldr	r0, [pc, #84]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033c6:	f7ff fec8 	bl	800315a <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4323      	orrs	r3, r4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d112      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	e009      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033f6:	e000      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003402:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003406:	4618      	mov	r0, r3
 8003408:	377c      	adds	r7, #124	; 0x7c
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	bf00      	nop
 8003410:	50040000 	.word	0x50040000
 8003414:	50040100 	.word	0x50040100
 8003418:	50040300 	.word	0x50040300
 800341c:	50040200 	.word	0x50040200

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff3e 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff31 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa2 	bl	800357c <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d008      	beq.n	800366c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2204      	movs	r2, #4
 800365e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e022      	b.n	80036b2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 020e 	bic.w	r2, r2, #14
 800367a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	f003 021c 	and.w	r2, r3, #28
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d005      	beq.n	80036e2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2204      	movs	r2, #4
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e029      	b.n	8003736 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 020e 	bic.w	r2, r2, #14
 80036f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f003 021c 	and.w	r2, r3, #28
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
    }
  }
  return status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374e:	e17f      	b.n	8003a50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2101      	movs	r1, #1
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8171 	beq.w	8003a4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b01      	cmp	r3, #1
 8003772:	d005      	beq.n	8003780 <HAL_GPIO_Init+0x40>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d130      	bne.n	80037e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037b6:	2201      	movs	r2, #1
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 0201 	and.w	r2, r3, #1
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d118      	bne.n	8003820 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037f4:	2201      	movs	r2, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	08db      	lsrs	r3, r3, #3
 800380a:	f003 0201 	and.w	r2, r3, #1
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	2b03      	cmp	r3, #3
 800382a:	d017      	beq.n	800385c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2203      	movs	r2, #3
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d123      	bne.n	80038b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	08da      	lsrs	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3208      	adds	r2, #8
 8003870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	08da      	lsrs	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3208      	adds	r2, #8
 80038aa:	6939      	ldr	r1, [r7, #16]
 80038ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80ac 	beq.w	8003a4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f2:	4b5f      	ldr	r3, [pc, #380]	; (8003a70 <HAL_GPIO_Init+0x330>)
 80038f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f6:	4a5e      	ldr	r2, [pc, #376]	; (8003a70 <HAL_GPIO_Init+0x330>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6613      	str	r3, [r2, #96]	; 0x60
 80038fe:	4b5c      	ldr	r3, [pc, #368]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800390a:	4a5a      	ldr	r2, [pc, #360]	; (8003a74 <HAL_GPIO_Init+0x334>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	3302      	adds	r3, #2
 8003912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	220f      	movs	r2, #15
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003934:	d025      	beq.n	8003982 <HAL_GPIO_Init+0x242>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4f      	ldr	r2, [pc, #316]	; (8003a78 <HAL_GPIO_Init+0x338>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01f      	beq.n	800397e <HAL_GPIO_Init+0x23e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4e      	ldr	r2, [pc, #312]	; (8003a7c <HAL_GPIO_Init+0x33c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d019      	beq.n	800397a <HAL_GPIO_Init+0x23a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4d      	ldr	r2, [pc, #308]	; (8003a80 <HAL_GPIO_Init+0x340>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <HAL_GPIO_Init+0x236>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4c      	ldr	r2, [pc, #304]	; (8003a84 <HAL_GPIO_Init+0x344>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00d      	beq.n	8003972 <HAL_GPIO_Init+0x232>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4b      	ldr	r2, [pc, #300]	; (8003a88 <HAL_GPIO_Init+0x348>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <HAL_GPIO_Init+0x22e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4a      	ldr	r2, [pc, #296]	; (8003a8c <HAL_GPIO_Init+0x34c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d101      	bne.n	800396a <HAL_GPIO_Init+0x22a>
 8003966:	2306      	movs	r3, #6
 8003968:	e00c      	b.n	8003984 <HAL_GPIO_Init+0x244>
 800396a:	2307      	movs	r3, #7
 800396c:	e00a      	b.n	8003984 <HAL_GPIO_Init+0x244>
 800396e:	2305      	movs	r3, #5
 8003970:	e008      	b.n	8003984 <HAL_GPIO_Init+0x244>
 8003972:	2304      	movs	r3, #4
 8003974:	e006      	b.n	8003984 <HAL_GPIO_Init+0x244>
 8003976:	2303      	movs	r3, #3
 8003978:	e004      	b.n	8003984 <HAL_GPIO_Init+0x244>
 800397a:	2302      	movs	r3, #2
 800397c:	e002      	b.n	8003984 <HAL_GPIO_Init+0x244>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_GPIO_Init+0x244>
 8003982:	2300      	movs	r3, #0
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	f002 0203 	and.w	r2, r2, #3
 800398a:	0092      	lsls	r2, r2, #2
 800398c:	4093      	lsls	r3, r2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003994:	4937      	ldr	r1, [pc, #220]	; (8003a74 <HAL_GPIO_Init+0x334>)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	3302      	adds	r3, #2
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039a2:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_GPIO_Init+0x350>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039c6:	4a32      	ldr	r2, [pc, #200]	; (8003a90 <HAL_GPIO_Init+0x350>)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039cc:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <HAL_GPIO_Init+0x350>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039f0:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <HAL_GPIO_Init+0x350>)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <HAL_GPIO_Init+0x350>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_GPIO_Init+0x350>)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a20:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <HAL_GPIO_Init+0x350>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a44:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <HAL_GPIO_Init+0x350>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f47f ae78 	bne.w	8003750 <HAL_GPIO_Init+0x10>
  }
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40010000 	.word	0x40010000
 8003a78:	48000400 	.word	0x48000400
 8003a7c:	48000800 	.word	0x48000800
 8003a80:	48000c00 	.word	0x48000c00
 8003a84:	48001000 	.word	0x48001000
 8003a88:	48001400 	.word	0x48001400
 8003a8c:	48001800 	.word	0x48001800
 8003a90:	40010400 	.word	0x40010400

08003a94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40007000 	.word	0x40007000

08003ab4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad2:	d10e      	bne.n	8003af2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003ad4:	f000 f896 	bl	8003c04 <HAL_PWREx_DisableLowPowerRunMode>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003ade:	e016      	b.n	8003b0e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aec:	d001      	beq.n	8003af2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003aee:	f000 f879 	bl	8003be4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b04:	bf30      	wfi
 8003b06:	e002      	b.n	8003b0e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b08:	bf40      	sev
    __WFE();
 8003b0a:	bf20      	wfe
    __WFE();
 8003b0c:	bf20      	wfe
  }

}
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40007000 	.word	0x40007000
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40007000 	.word	0x40007000

08003b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b46:	d130      	bne.n	8003baa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b54:	d038      	beq.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2232      	movs	r2, #50	; 0x32
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b7c:	e002      	b.n	8003b84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b84:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d102      	bne.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f2      	bne.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d110      	bne.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e00f      	b.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d007      	beq.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bc0:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	431bde83 	.word	0x431bde83

08003be4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40007000 	.word	0x40007000

08003c04 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c14:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2232      	movs	r2, #50	; 0x32
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	3301      	adds	r3, #1
 8003c2a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003c2c:	e002      	b.n	8003c34 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c40:	d102      	bne.n	8003c48 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f2      	bne.n	8003c2e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c54:	d101      	bne.n	8003c5a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e000      	b.n	8003c5c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	431bde83 	.word	0x431bde83

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e3ca      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c86:	4b97      	ldr	r3, [pc, #604]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c90:	4b94      	ldr	r3, [pc, #592]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80e4 	beq.w	8003e70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_RCC_OscConfig+0x4a>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	f040 808b 	bne.w	8003dcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f040 8087 	bne.w	8003dcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cbe:	4b89      	ldr	r3, [pc, #548]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e3a2      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x7c>
 8003ce6:	4b7f      	ldr	r3, [pc, #508]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cee:	e005      	b.n	8003cfc <HAL_RCC_OscConfig+0x88>
 8003cf0:	4b7c      	ldr	r3, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d223      	bcs.n	8003d48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fd55 	bl	80047b4 <RCC_SetFlashLatencyFromMSIRange>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e383      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d14:	4b73      	ldr	r3, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a72      	ldr	r2, [pc, #456]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	f043 0308 	orr.w	r3, r3, #8
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	496d      	ldr	r1, [pc, #436]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d32:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	4968      	ldr	r1, [pc, #416]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
 8003d46:	e025      	b.n	8003d94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d48:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a65      	ldr	r2, [pc, #404]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	f043 0308 	orr.w	r3, r3, #8
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4960      	ldr	r1, [pc, #384]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d66:	4b5f      	ldr	r3, [pc, #380]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	495b      	ldr	r1, [pc, #364]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fd15 	bl	80047b4 <RCC_SetFlashLatencyFromMSIRange>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e343      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d94:	f000 fc4a 	bl	800462c <HAL_RCC_GetSysClockFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	4950      	ldr	r1, [pc, #320]	; (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	4a4e      	ldr	r2, [pc, #312]	; (8003eec <HAL_RCC_OscConfig+0x278>)
 8003db2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003db4:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <HAL_RCC_OscConfig+0x27c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd ff9d 	bl	8001cf8 <HAL_InitTick>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d052      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	e327      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d032      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dd4:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003de0:	f7fd ffda 	bl	8001d98 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de8:	f7fd ffd6 	bl	8001d98 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e310      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a36      	ldr	r2, [pc, #216]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e0c:	f043 0308 	orr.w	r3, r3, #8
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4931      	ldr	r1, [pc, #196]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e24:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	492c      	ldr	r1, [pc, #176]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
 8003e38:	e01a      	b.n	8003e70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a29      	ldr	r2, [pc, #164]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e46:	f7fd ffa7 	bl	8001d98 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e4e:	f7fd ffa3 	bl	8001d98 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e2dd      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x1da>
 8003e6c:	e000      	b.n	8003e70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d074      	beq.n	8003f66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x21a>
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d10e      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d064      	beq.n	8003f64 <HAL_RCC_OscConfig+0x2f0>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d160      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e2ba      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d106      	bne.n	8003ebe <HAL_RCC_OscConfig+0x24a>
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	e026      	b.n	8003f0c <HAL_RCC_OscConfig+0x298>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec6:	d115      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x280>
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a02      	ldr	r2, [pc, #8]	; (8003ee4 <HAL_RCC_OscConfig+0x270>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e014      	b.n	8003f0c <HAL_RCC_OscConfig+0x298>
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	0800cbb4 	.word	0x0800cbb4
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	20000004 	.word	0x20000004
 8003ef4:	4ba0      	ldr	r3, [pc, #640]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a9f      	ldr	r2, [pc, #636]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b9d      	ldr	r3, [pc, #628]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a9c      	ldr	r2, [pc, #624]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd ff40 	bl	8001d98 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fd ff3c 	bl	8001d98 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e276      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x2a8>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd ff2c 	bl	8001d98 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd ff28 	bl	8001d98 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e262      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f56:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x2d0>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d060      	beq.n	8004034 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_OscConfig+0x310>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d116      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f84:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_OscConfig+0x328>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e23f      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9c:	4b76      	ldr	r3, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	4973      	ldr	r1, [pc, #460]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb0:	e040      	b.n	8004034 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d023      	beq.n	8004002 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fba:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd fee7 	bl	8001d98 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd fee3 	bl	8001d98 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e21d      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fe0:	4b65      	ldr	r3, [pc, #404]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b62      	ldr	r3, [pc, #392]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	495f      	ldr	r1, [pc, #380]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e018      	b.n	8004034 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b5d      	ldr	r3, [pc, #372]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5c      	ldr	r2, [pc, #368]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fd fec3 	bl	8001d98 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004016:	f7fd febf 	bl	8001d98 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e1f9      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d03c      	beq.n	80040ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01c      	beq.n	8004082 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004048:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 800404a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404e:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fe9e 	bl	8001d98 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004060:	f7fd fe9a 	bl	8001d98 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1d4      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ef      	beq.n	8004060 <HAL_RCC_OscConfig+0x3ec>
 8004080:	e01b      	b.n	80040ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004088:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004092:	f7fd fe81 	bl	8001d98 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409a:	f7fd fe7d 	bl	8001d98 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e1b7      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040ac:	4b32      	ldr	r3, [pc, #200]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ef      	bne.n	800409a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80a6 	beq.w	8004214 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c8:	2300      	movs	r3, #0
 80040ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10d      	bne.n	80040f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 80040de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6593      	str	r3, [r2, #88]	; 0x58
 80040e4:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f0:	2301      	movs	r3, #1
 80040f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_OscConfig+0x508>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d118      	bne.n	8004132 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <HAL_RCC_OscConfig+0x508>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_RCC_OscConfig+0x508>)
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410c:	f7fd fe44 	bl	8001d98 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004114:	f7fd fe40 	bl	8001d98 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e17a      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_RCC_OscConfig+0x508>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d108      	bne.n	800414c <HAL_RCC_OscConfig+0x4d8>
 800413a:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800414a:	e029      	b.n	80041a0 <HAL_RCC_OscConfig+0x52c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d115      	bne.n	8004180 <HAL_RCC_OscConfig+0x50c>
 8004154:	4b08      	ldr	r3, [pc, #32]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 800415c:	f043 0304 	orr.w	r3, r3, #4
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a03      	ldr	r2, [pc, #12]	; (8004178 <HAL_RCC_OscConfig+0x504>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004174:	e014      	b.n	80041a0 <HAL_RCC_OscConfig+0x52c>
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
 800417c:	40007000 	.word	0x40007000
 8004180:	4b9c      	ldr	r3, [pc, #624]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	4a9b      	ldr	r2, [pc, #620]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004190:	4b98      	ldr	r3, [pc, #608]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	4a97      	ldr	r2, [pc, #604]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d016      	beq.n	80041d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a8:	f7fd fdf6 	bl	8001d98 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fd fdf2 	bl	8001d98 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e12a      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c6:	4b8b      	ldr	r3, [pc, #556]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ed      	beq.n	80041b0 <HAL_RCC_OscConfig+0x53c>
 80041d4:	e015      	b.n	8004202 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7fd fddf 	bl	8001d98 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fd fddb 	bl	8001d98 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e113      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f4:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ed      	bne.n	80041de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004208:	4b7a      	ldr	r3, [pc, #488]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	4a79      	ldr	r2, [pc, #484]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80fe 	beq.w	800441a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	2b02      	cmp	r3, #2
 8004224:	f040 80d0 	bne.w	80043c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004228:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0203 	and.w	r2, r3, #3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	429a      	cmp	r2, r3
 800423a:	d130      	bne.n	800429e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	3b01      	subs	r3, #1
 8004248:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d127      	bne.n	800429e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d11f      	bne.n	800429e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004268:	2a07      	cmp	r2, #7
 800426a:	bf14      	ite	ne
 800426c:	2201      	movne	r2, #1
 800426e:	2200      	moveq	r2, #0
 8004270:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004272:	4293      	cmp	r3, r2
 8004274:	d113      	bne.n	800429e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	3b01      	subs	r3, #1
 8004284:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d109      	bne.n	800429e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	3b01      	subs	r3, #1
 8004298:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d06e      	beq.n	800437c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d069      	beq.n	8004378 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0ad      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042c0:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80042c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042cc:	f7fd fd64 	bl	8001d98 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fd fd60 	bl	8001d98 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e09a      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e6:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	4b40      	ldr	r3, [pc, #256]	; (80043f8 <HAL_RCC_OscConfig+0x784>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004302:	3a01      	subs	r2, #1
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	4311      	orrs	r1, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800430c:	0212      	lsls	r2, r2, #8
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004314:	0852      	lsrs	r2, r2, #1
 8004316:	3a01      	subs	r2, #1
 8004318:	0552      	lsls	r2, r2, #21
 800431a:	4311      	orrs	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004320:	0852      	lsrs	r2, r2, #1
 8004322:	3a01      	subs	r2, #1
 8004324:	0652      	lsls	r2, r2, #25
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800432c:	0912      	lsrs	r2, r2, #4
 800432e:	0452      	lsls	r2, r2, #17
 8004330:	430a      	orrs	r2, r1
 8004332:	4930      	ldr	r1, [pc, #192]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 8004334:	4313      	orrs	r3, r2
 8004336:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004338:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a2a      	ldr	r2, [pc, #168]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004350:	f7fd fd22 	bl	8001d98 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fd1e 	bl	8001d98 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e058      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004376:	e050      	b.n	800441a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e04f      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d148      	bne.n	800441a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800438e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004392:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 800439a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043a0:	f7fd fcfa 	bl	8001d98 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fd fcf6 	bl	8001d98 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e030      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x734>
 80043c6:	e028      	b.n	800441a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d023      	beq.n	8004416 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <HAL_RCC_OscConfig+0x780>)
 80043d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fd fcdd 	bl	8001d98 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e0:	e00c      	b.n	80043fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e2:	f7fd fcd9 	bl	8001d98 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d905      	bls.n	80043fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e013      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
 80043f4:	40021000 	.word	0x40021000
 80043f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_OscConfig+0x7b0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ec      	bne.n	80043e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCC_OscConfig+0x7b0>)
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	4905      	ldr	r1, [pc, #20]	; (8004424 <HAL_RCC_OscConfig+0x7b0>)
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x7b4>)
 8004410:	4013      	ands	r3, r2
 8004412:	60cb      	str	r3, [r1, #12]
 8004414:	e001      	b.n	800441a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	feeefffc 	.word	0xfeeefffc

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0e7      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b75      	ldr	r3, [pc, #468]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d910      	bls.n	8004470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b72      	ldr	r3, [pc, #456]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 0207 	bic.w	r2, r3, #7
 8004456:	4970      	ldr	r1, [pc, #448]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b6e      	ldr	r3, [pc, #440]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0cf      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004488:	429a      	cmp	r2, r3
 800448a:	d908      	bls.n	800449e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b63      	ldr	r3, [pc, #396]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4960      	ldr	r1, [pc, #384]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d04c      	beq.n	8004544 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	4b5a      	ldr	r3, [pc, #360]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0a6      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ca:	4b54      	ldr	r3, [pc, #336]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d115      	bne.n	8004502 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e09a      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e2:	4b4e      	ldr	r3, [pc, #312]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e08e      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e086      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004502:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f023 0203 	bic.w	r2, r3, #3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4943      	ldr	r1, [pc, #268]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004514:	f7fd fc40 	bl	8001d98 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451a:	e00a      	b.n	8004532 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451c:	f7fd fc3c 	bl	8001d98 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e06e      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 020c 	and.w	r2, r3, #12
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	429a      	cmp	r2, r3
 8004542:	d1eb      	bne.n	800451c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d010      	beq.n	8004572 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455c:	429a      	cmp	r2, r3
 800455e:	d208      	bcs.n	8004572 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	492b      	ldr	r1, [pc, #172]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004572:	4b29      	ldr	r3, [pc, #164]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d210      	bcs.n	80045a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 0207 	bic.w	r2, r3, #7
 8004588:	4923      	ldr	r1, [pc, #140]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCC_ClockConfig+0x1ec>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e036      	b.n	8004610 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ae:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4918      	ldr	r1, [pc, #96]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045cc:	4b13      	ldr	r3, [pc, #76]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4910      	ldr	r1, [pc, #64]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e0:	f000 f824 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <HAL_RCC_ClockConfig+0x1f0>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	490b      	ldr	r1, [pc, #44]	; (8004620 <HAL_RCC_ClockConfig+0x1f4>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
 80045fc:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1f8>)
 80045fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1fc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fd fb77 	bl	8001cf8 <HAL_InitTick>
 800460a:	4603      	mov	r3, r0
 800460c:	72fb      	strb	r3, [r7, #11]

  return status;
 800460e:	7afb      	ldrb	r3, [r7, #11]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40022000 	.word	0x40022000
 800461c:	40021000 	.word	0x40021000
 8004620:	0800cbb4 	.word	0x0800cbb4
 8004624:	20000000 	.word	0x20000000
 8004628:	20000004 	.word	0x20000004

0800462c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b089      	sub	sp, #36	; 0x24
 8004630:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004644:	4b3b      	ldr	r3, [pc, #236]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_RCC_GetSysClockFreq+0x34>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d121      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d11e      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004660:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800466c:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e005      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800467c:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004688:	4a2b      	ldr	r2, [pc, #172]	; (8004738 <HAL_RCC_GetSysClockFreq+0x10c>)
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10d      	bne.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d102      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046a4:	4b25      	ldr	r3, [pc, #148]	; (800473c <HAL_RCC_GetSysClockFreq+0x110>)
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e004      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <HAL_RCC_GetSysClockFreq+0x114>)
 80046b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d134      	bne.n	8004724 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ba:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d003      	beq.n	80046d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d003      	beq.n	80046d8 <HAL_RCC_GetSysClockFreq+0xac>
 80046d0:	e005      	b.n	80046de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046d2:	4b1a      	ldr	r3, [pc, #104]	; (800473c <HAL_RCC_GetSysClockFreq+0x110>)
 80046d4:	617b      	str	r3, [r7, #20]
      break;
 80046d6:	e005      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046d8:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_RCC_GetSysClockFreq+0x114>)
 80046da:	617b      	str	r3, [r7, #20]
      break;
 80046dc:	e002      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	617b      	str	r3, [r7, #20]
      break;
 80046e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	3301      	adds	r3, #1
 80046f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	fb03 f202 	mul.w	r2, r3, r2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_RCC_GetSysClockFreq+0x108>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	0e5b      	lsrs	r3, r3, #25
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	3301      	adds	r3, #1
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004724:	69bb      	ldr	r3, [r7, #24]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3724      	adds	r7, #36	; 0x24
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	0800cbcc 	.word	0x0800cbcc
 800473c:	00f42400 	.word	0x00f42400
 8004740:	007a1200 	.word	0x007a1200

08004744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_RCC_GetHCLKFreq+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000000 	.word	0x20000000

0800475c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004760:	f7ff fff0 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4904      	ldr	r1, [pc, #16]	; (8004784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000
 8004784:	0800cbc4 	.word	0x0800cbc4

08004788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800478c:	f7ff ffda 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	0adb      	lsrs	r3, r3, #11
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4904      	ldr	r1, [pc, #16]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	0800cbc4 	.word	0x0800cbc4

080047b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047cc:	f7ff f9a6 	bl	8003b1c <HAL_PWREx_GetVoltageRange>
 80047d0:	6178      	str	r0, [r7, #20]
 80047d2:	e014      	b.n	80047fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	4a24      	ldr	r2, [pc, #144]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047de:	6593      	str	r3, [r2, #88]	; 0x58
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047ec:	f7ff f996 	bl	8003b1c <HAL_PWREx_GetVoltageRange>
 80047f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f6:	4a1d      	ldr	r2, [pc, #116]	; (800486c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004804:	d10b      	bne.n	800481e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b80      	cmp	r3, #128	; 0x80
 800480a:	d919      	bls.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2ba0      	cmp	r3, #160	; 0xa0
 8004810:	d902      	bls.n	8004818 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004812:	2302      	movs	r3, #2
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	e013      	b.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004818:	2301      	movs	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	e010      	b.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b80      	cmp	r3, #128	; 0x80
 8004822:	d902      	bls.n	800482a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004824:	2303      	movs	r3, #3
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e00a      	b.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b80      	cmp	r3, #128	; 0x80
 800482e:	d102      	bne.n	8004836 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004830:	2302      	movs	r3, #2
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	e004      	b.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b70      	cmp	r3, #112	; 0x70
 800483a:	d101      	bne.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800483c:	2301      	movs	r3, #1
 800483e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 0207 	bic.w	r2, r3, #7
 8004848:	4909      	ldr	r1, [pc, #36]	; (8004870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d001      	beq.n	8004862 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	40022000 	.word	0x40022000

08004874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800487c:	2300      	movs	r3, #0
 800487e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004880:	2300      	movs	r3, #0
 8004882:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488c:	2b00      	cmp	r3, #0
 800488e:	d041      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004894:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004898:	d02a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800489a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800489e:	d824      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048a4:	d008      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048aa:	d81e      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b4:	d010      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048b6:	e018      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b8:	4b86      	ldr	r3, [pc, #536]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a85      	ldr	r2, [pc, #532]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048c4:	e015      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 facb 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048d6:	e00c      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3320      	adds	r3, #32
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fbb6 	bl	8005050 <RCCEx_PLLSAI2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	74fb      	strb	r3, [r7, #19]
      break;
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f8:	4b76      	ldr	r3, [pc, #472]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004906:	4973      	ldr	r1, [pc, #460]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7cfb      	ldrb	r3, [r7, #19]
 8004912:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d041      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004924:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004928:	d02a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800492a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800492e:	d824      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004930:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004934:	d008      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800493a:	d81e      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004944:	d010      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004946:	e018      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004948:	4b62      	ldr	r3, [pc, #392]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4a61      	ldr	r2, [pc, #388]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004952:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004954:	e015      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fa83 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004966:	e00c      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3320      	adds	r3, #32
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fb6e 	bl	8005050 <RCCEx_PLLSAI2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004978:	e003      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	74fb      	strb	r3, [r7, #19]
      break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004988:	4b52      	ldr	r3, [pc, #328]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004996:	494f      	ldr	r1, [pc, #316]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800499e:	e001      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a0 	beq.w	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049b6:	4b47      	ldr	r3, [pc, #284]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049cc:	4b41      	ldr	r3, [pc, #260]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	4a40      	ldr	r2, [pc, #256]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6593      	str	r3, [r2, #88]	; 0x58
 80049d8:	4b3e      	ldr	r3, [pc, #248]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e4:	2301      	movs	r3, #1
 80049e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e8:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a3a      	ldr	r2, [pc, #232]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049f4:	f7fd f9d0 	bl	8001d98 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049fa:	e009      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fc:	f7fd f9cc 	bl	8001d98 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004a0e:	e005      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a10:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ef      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d15c      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a22:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01f      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d019      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a40:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a6c:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7fd f98b 	bl	8001d98 <HAL_GetTick>
 8004a82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a84:	e00b      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fd f987 	bl	8001d98 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d902      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ec      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac2:	4904      	ldr	r1, [pc, #16]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aca:	e009      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	74bb      	strb	r3, [r7, #18]
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae0:	7c7b      	ldrb	r3, [r7, #17]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae6:	4b9e      	ldr	r3, [pc, #632]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	4a9d      	ldr	r2, [pc, #628]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004afe:	4b98      	ldr	r3, [pc, #608]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f023 0203 	bic.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	4994      	ldr	r1, [pc, #592]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b20:	4b8f      	ldr	r3, [pc, #572]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f023 020c 	bic.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	498c      	ldr	r1, [pc, #560]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b42:	4b87      	ldr	r3, [pc, #540]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	4983      	ldr	r1, [pc, #524]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b64:	4b7e      	ldr	r3, [pc, #504]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	497b      	ldr	r1, [pc, #492]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b86:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b94:	4972      	ldr	r1, [pc, #456]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ba8:	4b6d      	ldr	r3, [pc, #436]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	496a      	ldr	r1, [pc, #424]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bca:	4b65      	ldr	r3, [pc, #404]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd8:	4961      	ldr	r1, [pc, #388]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bec:	4b5c      	ldr	r3, [pc, #368]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfa:	4959      	ldr	r1, [pc, #356]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c0e:	4b54      	ldr	r3, [pc, #336]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	4950      	ldr	r1, [pc, #320]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	4948      	ldr	r1, [pc, #288]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c52:	4b43      	ldr	r3, [pc, #268]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	493f      	ldr	r1, [pc, #252]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d028      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c74:	4b3a      	ldr	r3, [pc, #232]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c82:	4937      	ldr	r1, [pc, #220]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c94:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a31      	ldr	r2, [pc, #196]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9e:	60d3      	str	r3, [r2, #12]
 8004ca0:	e011      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f8d8 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d028      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	491f      	ldr	r1, [pc, #124]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfc:	60d3      	str	r3, [r2, #12]
 8004cfe:	e011      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f8a9 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02b      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	4908      	ldr	r1, [pc, #32]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d4e:	d109      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a02      	ldr	r2, [pc, #8]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5a:	60d3      	str	r3, [r2, #12]
 8004d5c:	e014      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2101      	movs	r1, #1
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f877 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d02f      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d94:	4b2b      	ldr	r3, [pc, #172]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da2:	4928      	ldr	r1, [pc, #160]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	2102      	movs	r1, #2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f854 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dca:	7cfb      	ldrb	r3, [r7, #19]
 8004dcc:	74bb      	strb	r3, [r7, #18]
 8004dce:	e011      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3320      	adds	r3, #32
 8004dde:	2102      	movs	r1, #2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f935 	bl	8005050 <RCCEx_PLLSAI2_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dea:	7cfb      	ldrb	r3, [r7, #19]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e00:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	490d      	ldr	r1, [pc, #52]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e32:	4904      	ldr	r1, [pc, #16]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000

08004e48 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000

08004e68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e76:	4b75      	ldr	r3, [pc, #468]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e82:	4b72      	ldr	r3, [pc, #456]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0203 	and.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d10d      	bne.n	8004eae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
       ||
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e9a:	4b6c      	ldr	r3, [pc, #432]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d047      	beq.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
 8004eb2:	e044      	b.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d018      	beq.n	8004eee <RCCEx_PLLSAI1_Config+0x86>
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d825      	bhi.n	8004f0c <RCCEx_PLLSAI1_Config+0xa4>
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d002      	beq.n	8004eca <RCCEx_PLLSAI1_Config+0x62>
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d009      	beq.n	8004edc <RCCEx_PLLSAI1_Config+0x74>
 8004ec8:	e020      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eca:	4b60      	ldr	r3, [pc, #384]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eda:	e01a      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004edc:	4b5b      	ldr	r3, [pc, #364]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d116      	bne.n	8004f16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e013      	b.n	8004f16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eee:	4b57      	ldr	r3, [pc, #348]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10f      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004efa:	4b54      	ldr	r3, [pc, #336]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f0a:	e006      	b.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e004      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f22:	4b4a      	ldr	r3, [pc, #296]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	430b      	orrs	r3, r1
 8004f38:	4944      	ldr	r1, [pc, #272]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d17d      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f44:	4b41      	ldr	r3, [pc, #260]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a40      	ldr	r2, [pc, #256]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fc ff22 	bl	8001d98 <HAL_GetTick>
 8004f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f56:	e009      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f58:	f7fc ff1e 	bl	8001d98 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d902      	bls.n	8004f6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	73fb      	strb	r3, [r7, #15]
        break;
 8004f6a:	e005      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6c:	4b37      	ldr	r3, [pc, #220]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ef      	bne.n	8004f58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d160      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d111      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f84:	4b31      	ldr	r3, [pc, #196]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6892      	ldr	r2, [r2, #8]
 8004f94:	0211      	lsls	r1, r2, #8
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68d2      	ldr	r2, [r2, #12]
 8004f9a:	0912      	lsrs	r2, r2, #4
 8004f9c:	0452      	lsls	r2, r2, #17
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	492a      	ldr	r1, [pc, #168]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	610b      	str	r3, [r1, #16]
 8004fa6:	e027      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d112      	bne.n	8004fd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fae:	4b27      	ldr	r3, [pc, #156]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6892      	ldr	r2, [r2, #8]
 8004fbe:	0211      	lsls	r1, r2, #8
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6912      	ldr	r2, [r2, #16]
 8004fc4:	0852      	lsrs	r2, r2, #1
 8004fc6:	3a01      	subs	r2, #1
 8004fc8:	0552      	lsls	r2, r2, #21
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	491f      	ldr	r1, [pc, #124]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]
 8004fd2:	e011      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6892      	ldr	r2, [r2, #8]
 8004fe4:	0211      	lsls	r1, r2, #8
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6952      	ldr	r2, [r2, #20]
 8004fea:	0852      	lsrs	r2, r2, #1
 8004fec:	3a01      	subs	r2, #1
 8004fee:	0652      	lsls	r2, r2, #25
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4916      	ldr	r1, [pc, #88]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fc fec8 	bl	8001d98 <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800500a:	e009      	b.n	8005020 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800500c:	f7fc fec4 	bl	8001d98 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	73fb      	strb	r3, [r7, #15]
          break;
 800501e:	e005      	b.n	800502c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ef      	beq.n	800500c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	4904      	ldr	r1, [pc, #16]	; (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000

08005050 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800505e:	4b6a      	ldr	r3, [pc, #424]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800506a:	4b67      	ldr	r3, [pc, #412]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d10d      	bne.n	8005096 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
       ||
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005082:	4b61      	ldr	r3, [pc, #388]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
       ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d047      	beq.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e044      	b.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d018      	beq.n	80050d6 <RCCEx_PLLSAI2_Config+0x86>
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d825      	bhi.n	80050f4 <RCCEx_PLLSAI2_Config+0xa4>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d002      	beq.n	80050b2 <RCCEx_PLLSAI2_Config+0x62>
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d009      	beq.n	80050c4 <RCCEx_PLLSAI2_Config+0x74>
 80050b0:	e020      	b.n	80050f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050b2:	4b55      	ldr	r3, [pc, #340]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11d      	bne.n	80050fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c2:	e01a      	b.n	80050fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050c4:	4b50      	ldr	r3, [pc, #320]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d4:	e013      	b.n	80050fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050d6:	4b4c      	ldr	r3, [pc, #304]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050e2:	4b49      	ldr	r3, [pc, #292]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050f2:	e006      	b.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      break;
 80050f8:	e004      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005102:	bf00      	nop
    }

    if(status == HAL_OK)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10d      	bne.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800510a:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	430b      	orrs	r3, r1
 8005120:	4939      	ldr	r1, [pc, #228]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d167      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800512c:	4b36      	ldr	r3, [pc, #216]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a35      	ldr	r2, [pc, #212]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fc fe2e 	bl	8001d98 <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800513e:	e009      	b.n	8005154 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005140:	f7fc fe2a 	bl	8001d98 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d902      	bls.n	8005154 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	73fb      	strb	r3, [r7, #15]
        break;
 8005152:	e005      	b.n	8005160 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005154:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ef      	bne.n	8005140 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d14a      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d111      	bne.n	8005190 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800516c:	4b26      	ldr	r3, [pc, #152]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	0211      	lsls	r1, r2, #8
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	0912      	lsrs	r2, r2, #4
 8005184:	0452      	lsls	r2, r2, #17
 8005186:	430a      	orrs	r2, r1
 8005188:	491f      	ldr	r1, [pc, #124]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	614b      	str	r3, [r1, #20]
 800518e:	e011      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	0211      	lsls	r1, r2, #8
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6912      	ldr	r2, [r2, #16]
 80051a6:	0852      	lsrs	r2, r2, #1
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0652      	lsls	r2, r2, #25
 80051ac:	430a      	orrs	r2, r1
 80051ae:	4916      	ldr	r1, [pc, #88]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051b4:	4b14      	ldr	r3, [pc, #80]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a13      	ldr	r2, [pc, #76]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fc fdea 	bl	8001d98 <HAL_GetTick>
 80051c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051c6:	e009      	b.n	80051dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051c8:	f7fc fde6 	bl	8001d98 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d902      	bls.n	80051dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	73fb      	strb	r3, [r7, #15]
          break;
 80051da:	e005      	b.n	80051e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ef      	beq.n	80051c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	4904      	ldr	r1, [pc, #16]	; (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000

0800520c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d06c      	beq.n	80052f8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc fa08 	bl	8001648 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	22ca      	movs	r2, #202	; 0xca
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2253      	movs	r2, #83	; 0x53
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f87c 	bl	800534e <RTC_EnterInitMode>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d14b      	bne.n	80052f8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800526e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005272:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6899      	ldr	r1, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6919      	ldr	r1, [r3, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	041a      	lsls	r2, r3, #16
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f87f 	bl	80053b4 <RTC_ExitInitMode>
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d11b      	bne.n	80052f8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0203 	bic.w	r2, r2, #3
 80052ce:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69da      	ldr	r2, [r3, #28]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005318:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800531a:	f7fc fd3d 	bl	8001d98 <HAL_GetTick>
 800531e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005320:	e009      	b.n	8005336 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005322:	f7fc fd39 	bl	8001d98 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005330:	d901      	bls.n	8005336 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e007      	b.n	8005346 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ee      	beq.n	8005322 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d120      	bne.n	80053aa <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005372:	f7fc fd11 	bl	8001d98 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005378:	e00d      	b.n	8005396 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800537a:	f7fc fd0d 	bl	8001d98 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005388:	d905      	bls.n	8005396 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2203      	movs	r2, #3
 8005392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <RTC_EnterInitMode+0x5c>
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d1e7      	bne.n	800537a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80053c0:	4b1a      	ldr	r3, [pc, #104]	; (800542c <RTC_ExitInitMode+0x78>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <RTC_ExitInitMode+0x78>)
 80053c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ca:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <RTC_ExitInitMode+0x78>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10c      	bne.n	80053f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff92 	bl	8005302 <HAL_RTC_WaitForSynchro>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01e      	beq.n	8005422 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2203      	movs	r2, #3
 80053e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	73fb      	strb	r3, [r7, #15]
 80053f0:	e017      	b.n	8005422 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <RTC_ExitInitMode+0x78>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4a0d      	ldr	r2, [pc, #52]	; (800542c <RTC_ExitInitMode+0x78>)
 80053f8:	f023 0320 	bic.w	r3, r3, #32
 80053fc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff ff7f 	bl	8005302 <HAL_RTC_WaitForSynchro>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2203      	movs	r2, #3
 800540e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <RTC_ExitInitMode+0x78>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4a04      	ldr	r2, [pc, #16]	; (800542c <RTC_ExitInitMode+0x78>)
 800541c:	f043 0320 	orr.w	r3, r3, #32
 8005420:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40002800 	.word	0x40002800

08005430 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005438:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800543a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800543e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800545e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f80b 	bl	800547c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40010400 	.word	0x40010400

0800547c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e040      	b.n	8005524 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fc fae0 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	; 0x24
 80054bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fc18 	bl	8005d04 <UART_SetConfig>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e022      	b.n	8005524 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fec4 	bl	8006274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800550a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 ff4b 	bl	80063b8 <UART_CheckIdleState>
 8005522:	4603      	mov	r3, r0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005540:	2b20      	cmp	r3, #32
 8005542:	f040 8082 	bne.w	800564a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <HAL_UART_Transmit+0x26>
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e07a      	b.n	800564c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_UART_Transmit+0x38>
 8005560:	2302      	movs	r3, #2
 8005562:	e073      	b.n	800564c <HAL_UART_Transmit+0x120>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2221      	movs	r2, #33	; 0x21
 8005578:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800557a:	f7fc fc0d 	bl	8001d98 <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d108      	bne.n	80055ac <HAL_UART_Transmit+0x80>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e003      	b.n	80055b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80055bc:	e02d      	b.n	800561a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 ff3e 	bl	800644a <UART_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e039      	b.n	800564c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ea:	b292      	uxth	r2, r2
 80055ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	3302      	adds	r3, #2
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e008      	b.n	8005608 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b292      	uxth	r2, r2
 8005600:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1cb      	bne.n	80055be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	2140      	movs	r1, #64	; 0x40
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 ff0a 	bl	800644a <UART_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e005      	b.n	800564c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005666:	2b20      	cmp	r3, #32
 8005668:	d142      	bne.n	80056f0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_UART_Receive_IT+0x22>
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e03b      	b.n	80056f2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_UART_Receive_IT+0x34>
 8005684:	2302      	movs	r3, #2
 8005686:	e034      	b.n	80056f2 <HAL_UART_Receive_IT+0x9e>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a18      	ldr	r2, [pc, #96]	; (80056fc <HAL_UART_Receive_IT+0xa8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d01f      	beq.n	80056e0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	613b      	str	r3, [r7, #16]
   return(result);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	69f9      	ldr	r1, [r7, #28]
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e6      	bne.n	80056ae <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	461a      	mov	r2, r3
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 ff74 	bl	80065d4 <UART_Start_Receive_IT>
 80056ec:	4603      	mov	r3, r0
 80056ee:	e000      	b.n	80056f2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3728      	adds	r7, #40	; 0x28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40008000 	.word	0x40008000

08005700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b0ba      	sub	sp, #232	; 0xe8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005726:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800572a:	f640 030f 	movw	r3, #2063	; 0x80f
 800572e:	4013      	ands	r3, r2
 8005730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d115      	bne.n	8005768 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800573c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00f      	beq.n	8005768 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d009      	beq.n	8005768 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 82a6 	beq.w	8005caa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
      }
      return;
 8005766:	e2a0      	b.n	8005caa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8117 	beq.w	80059a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800577e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005782:	4b85      	ldr	r3, [pc, #532]	; (8005998 <HAL_UART_IRQHandler+0x298>)
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 810a 	beq.w	80059a0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d011      	beq.n	80057bc <HAL_UART_IRQHandler+0xbc>
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2201      	movs	r2, #1
 80057aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b2:	f043 0201 	orr.w	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d011      	beq.n	80057ec <HAL_UART_IRQHandler+0xec>
 80057c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2202      	movs	r2, #2
 80057da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e2:	f043 0204 	orr.w	r2, r3, #4
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d011      	beq.n	800581c <HAL_UART_IRQHandler+0x11c>
 80057f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2204      	movs	r2, #4
 800580a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005812:	f043 0202 	orr.w	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800581c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b00      	cmp	r3, #0
 8005826:	d017      	beq.n	8005858 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d105      	bne.n	8005840 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005838:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2208      	movs	r2, #8
 8005846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584e:	f043 0208 	orr.w	r2, r3, #8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005860:	2b00      	cmp	r3, #0
 8005862:	d012      	beq.n	800588a <HAL_UART_IRQHandler+0x18a>
 8005864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00c      	beq.n	800588a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005880:	f043 0220 	orr.w	r2, r3, #32
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 820c 	beq.w	8005cae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d005      	beq.n	80058e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d04f      	beq.n	8005982 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 ff40 	bl	8006768 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d141      	bne.n	800597a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800590c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3308      	adds	r3, #8
 800591e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005922:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800592e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800593a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1d9      	bne.n	80058f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	2b00      	cmp	r3, #0
 8005948:	d013      	beq.n	8005972 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <HAL_UART_IRQHandler+0x29c>)
 8005950:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	4618      	mov	r0, r3
 8005958:	f7fd feb1 	bl	80036be <HAL_DMA_Abort_IT>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d017      	beq.n	8005992 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800596c:	4610      	mov	r0, r2
 800596e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	e00f      	b.n	8005992 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9b0 	bl	8005cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	e00b      	b.n	8005992 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f9ac 	bl	8005cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e007      	b.n	8005992 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9a8 	bl	8005cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005990:	e18d      	b.n	8005cae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005992:	bf00      	nop
    return;
 8005994:	e18b      	b.n	8005cae <HAL_UART_IRQHandler+0x5ae>
 8005996:	bf00      	nop
 8005998:	04000120 	.word	0x04000120
 800599c:	0800682f 	.word	0x0800682f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	f040 8146 	bne.w	8005c36 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 813f 	beq.w	8005c36 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8138 	beq.w	8005c36 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2210      	movs	r2, #16
 80059cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	f040 80b4 	bne.w	8005b46 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 815f 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059fe:	429a      	cmp	r2, r3
 8005a00:	f080 8157 	bcs.w	8005cb2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f040 8085 	bne.w	8005b2a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1da      	bne.n	8005a20 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e1      	bne.n	8005a6a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e3      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e4      	bne.n	8005aea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fd fd8c 	bl	8003642 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8d4 	bl	8005cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b44:	e0b5      	b.n	8005cb2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80a7 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80a2 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b94:	647b      	str	r3, [r7, #68]	; 0x44
 8005b96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e4      	bne.n	8005b72 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3308      	adds	r3, #8
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e3      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0310 	bic.w	r3, r3, #16
 8005c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e4      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f85c 	bl	8005cec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c34:	e03f      	b.n	8005cb6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00e      	beq.n	8005c60 <HAL_UART_IRQHandler+0x560>
 8005c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 ff88 	bl	8006b6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c5e:	e02d      	b.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00e      	beq.n	8005c8a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d008      	beq.n	8005c8a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01c      	beq.n	8005cba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
    }
    return;
 8005c88:	e017      	b.n	8005cba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d012      	beq.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
 8005c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00c      	beq.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fdd9 	bl	800685a <UART_EndTransmit_IT>
    return;
 8005ca8:	e008      	b.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
      return;
 8005caa:	bf00      	nop
 8005cac:	e006      	b.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
    return;
 8005cae:	bf00      	nop
 8005cb0:	e004      	b.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
      return;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
      return;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <HAL_UART_IRQHandler+0x5bc>
    return;
 8005cba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005cbc:	37e8      	adds	r7, #232	; 0xe8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop

08005cc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d08:	b08a      	sub	sp, #40	; 0x28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4ba4      	ldr	r3, [pc, #656]	; (8005fc4 <UART_SetConfig+0x2c0>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a99      	ldr	r2, [pc, #612]	; (8005fc8 <UART_SetConfig+0x2c4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a90      	ldr	r2, [pc, #576]	; (8005fcc <UART_SetConfig+0x2c8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d126      	bne.n	8005ddc <UART_SetConfig+0xd8>
 8005d8e:	4b90      	ldr	r3, [pc, #576]	; (8005fd0 <UART_SetConfig+0x2cc>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d81b      	bhi.n	8005dd4 <UART_SetConfig+0xd0>
 8005d9c:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <UART_SetConfig+0xa0>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005dc5 	.word	0x08005dc5
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dba:	e116      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e112      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e10e      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005dcc:	2308      	movs	r3, #8
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e10a      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e106      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a7c      	ldr	r2, [pc, #496]	; (8005fd4 <UART_SetConfig+0x2d0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d138      	bne.n	8005e58 <UART_SetConfig+0x154>
 8005de6:	4b7a      	ldr	r3, [pc, #488]	; (8005fd0 <UART_SetConfig+0x2cc>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f003 030c 	and.w	r3, r3, #12
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	d82d      	bhi.n	8005e50 <UART_SetConfig+0x14c>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0xf8>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e31 	.word	0x08005e31
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e51 	.word	0x08005e51
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e41 	.word	0x08005e41
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e51 	.word	0x08005e51
 8005e18:	08005e51 	.word	0x08005e51
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e51 	.word	0x08005e51
 8005e24:	08005e51 	.word	0x08005e51
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e49 	.word	0x08005e49
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e36:	e0d8      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e0d4      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e0d0      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e0cc      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e0c8      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a5e      	ldr	r2, [pc, #376]	; (8005fd8 <UART_SetConfig+0x2d4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d125      	bne.n	8005eae <UART_SetConfig+0x1aa>
 8005e62:	4b5b      	ldr	r3, [pc, #364]	; (8005fd0 <UART_SetConfig+0x2cc>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	d016      	beq.n	8005e9e <UART_SetConfig+0x19a>
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d818      	bhi.n	8005ea6 <UART_SetConfig+0x1a2>
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d00a      	beq.n	8005e8e <UART_SetConfig+0x18a>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d814      	bhi.n	8005ea6 <UART_SetConfig+0x1a2>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <UART_SetConfig+0x182>
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d008      	beq.n	8005e96 <UART_SetConfig+0x192>
 8005e84:	e00f      	b.n	8005ea6 <UART_SetConfig+0x1a2>
 8005e86:	2300      	movs	r3, #0
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8c:	e0ad      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e94:	e0a9      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e96:	2304      	movs	r3, #4
 8005e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9c:	e0a5      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea4:	e0a1      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005ea6:	2310      	movs	r3, #16
 8005ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eac:	e09d      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a4a      	ldr	r2, [pc, #296]	; (8005fdc <UART_SetConfig+0x2d8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d125      	bne.n	8005f04 <UART_SetConfig+0x200>
 8005eb8:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <UART_SetConfig+0x2cc>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec4:	d016      	beq.n	8005ef4 <UART_SetConfig+0x1f0>
 8005ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ec8:	d818      	bhi.n	8005efc <UART_SetConfig+0x1f8>
 8005eca:	2b80      	cmp	r3, #128	; 0x80
 8005ecc:	d00a      	beq.n	8005ee4 <UART_SetConfig+0x1e0>
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d814      	bhi.n	8005efc <UART_SetConfig+0x1f8>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <UART_SetConfig+0x1d8>
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d008      	beq.n	8005eec <UART_SetConfig+0x1e8>
 8005eda:	e00f      	b.n	8005efc <UART_SetConfig+0x1f8>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e082      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e07e      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005eec:	2304      	movs	r3, #4
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e07a      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005ef4:	2308      	movs	r3, #8
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e076      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005efc:	2310      	movs	r3, #16
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e072      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <UART_SetConfig+0x2dc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d12a      	bne.n	8005f64 <UART_SetConfig+0x260>
 8005f0e:	4b30      	ldr	r3, [pc, #192]	; (8005fd0 <UART_SetConfig+0x2cc>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f1c:	d01a      	beq.n	8005f54 <UART_SetConfig+0x250>
 8005f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f22:	d81b      	bhi.n	8005f5c <UART_SetConfig+0x258>
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f28:	d00c      	beq.n	8005f44 <UART_SetConfig+0x240>
 8005f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2e:	d815      	bhi.n	8005f5c <UART_SetConfig+0x258>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <UART_SetConfig+0x238>
 8005f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f38:	d008      	beq.n	8005f4c <UART_SetConfig+0x248>
 8005f3a:	e00f      	b.n	8005f5c <UART_SetConfig+0x258>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f42:	e052      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005f44:	2302      	movs	r3, #2
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e04e      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e04a      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e046      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e042      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <UART_SetConfig+0x2c4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d13a      	bne.n	8005fe4 <UART_SetConfig+0x2e0>
 8005f6e:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <UART_SetConfig+0x2cc>)
 8005f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f7c:	d01a      	beq.n	8005fb4 <UART_SetConfig+0x2b0>
 8005f7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f82:	d81b      	bhi.n	8005fbc <UART_SetConfig+0x2b8>
 8005f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f88:	d00c      	beq.n	8005fa4 <UART_SetConfig+0x2a0>
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d815      	bhi.n	8005fbc <UART_SetConfig+0x2b8>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <UART_SetConfig+0x298>
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d008      	beq.n	8005fac <UART_SetConfig+0x2a8>
 8005f9a:	e00f      	b.n	8005fbc <UART_SetConfig+0x2b8>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa2:	e022      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e01e      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e01a      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	e016      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e012      	b.n	8005fea <UART_SetConfig+0x2e6>
 8005fc4:	efff69f3 	.word	0xefff69f3
 8005fc8:	40008000 	.word	0x40008000
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40004400 	.word	0x40004400
 8005fd8:	40004800 	.word	0x40004800
 8005fdc:	40004c00 	.word	0x40004c00
 8005fe0:	40005000 	.word	0x40005000
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a9f      	ldr	r2, [pc, #636]	; (800626c <UART_SetConfig+0x568>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d17a      	bne.n	80060ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d824      	bhi.n	8006046 <UART_SetConfig+0x342>
 8005ffc:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0x300>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	08006029 	.word	0x08006029
 8006008:	08006047 	.word	0x08006047
 800600c:	08006031 	.word	0x08006031
 8006010:	08006047 	.word	0x08006047
 8006014:	08006037 	.word	0x08006037
 8006018:	08006047 	.word	0x08006047
 800601c:	08006047 	.word	0x08006047
 8006020:	08006047 	.word	0x08006047
 8006024:	0800603f 	.word	0x0800603f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fe fb98 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 800602c:	61f8      	str	r0, [r7, #28]
        break;
 800602e:	e010      	b.n	8006052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006030:	4b8f      	ldr	r3, [pc, #572]	; (8006270 <UART_SetConfig+0x56c>)
 8006032:	61fb      	str	r3, [r7, #28]
        break;
 8006034:	e00d      	b.n	8006052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006036:	f7fe faf9 	bl	800462c <HAL_RCC_GetSysClockFreq>
 800603a:	61f8      	str	r0, [r7, #28]
        break;
 800603c:	e009      	b.n	8006052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006042:	61fb      	str	r3, [r7, #28]
        break;
 8006044:	e005      	b.n	8006052 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80fb 	beq.w	8006250 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	429a      	cmp	r2, r3
 8006068:	d305      	bcc.n	8006076 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	429a      	cmp	r2, r3
 8006074:	d903      	bls.n	800607e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800607c:	e0e8      	b.n	8006250 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2200      	movs	r2, #0
 8006082:	461c      	mov	r4, r3
 8006084:	4615      	mov	r5, r2
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	022b      	lsls	r3, r5, #8
 8006090:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006094:	0222      	lsls	r2, r4, #8
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6849      	ldr	r1, [r1, #4]
 800609a:	0849      	lsrs	r1, r1, #1
 800609c:	2000      	movs	r0, #0
 800609e:	4688      	mov	r8, r1
 80060a0:	4681      	mov	r9, r0
 80060a2:	eb12 0a08 	adds.w	sl, r2, r8
 80060a6:	eb43 0b09 	adc.w	fp, r3, r9
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	603b      	str	r3, [r7, #0]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b8:	4650      	mov	r0, sl
 80060ba:	4659      	mov	r1, fp
 80060bc:	f7fa fde4 	bl	8000c88 <__aeabi_uldivmod>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4613      	mov	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ce:	d308      	bcc.n	80060e2 <UART_SetConfig+0x3de>
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d6:	d204      	bcs.n	80060e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	60da      	str	r2, [r3, #12]
 80060e0:	e0b6      	b.n	8006250 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060e8:	e0b2      	b.n	8006250 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f2:	d15e      	bne.n	80061b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80060f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d828      	bhi.n	800614e <UART_SetConfig+0x44a>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0x400>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006129 	.word	0x08006129
 8006108:	08006131 	.word	0x08006131
 800610c:	08006139 	.word	0x08006139
 8006110:	0800614f 	.word	0x0800614f
 8006114:	0800613f 	.word	0x0800613f
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800614f 	.word	0x0800614f
 8006120:	0800614f 	.word	0x0800614f
 8006124:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fe fb18 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 800612c:	61f8      	str	r0, [r7, #28]
        break;
 800612e:	e014      	b.n	800615a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fe fb2a 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 8006134:	61f8      	str	r0, [r7, #28]
        break;
 8006136:	e010      	b.n	800615a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b4d      	ldr	r3, [pc, #308]	; (8006270 <UART_SetConfig+0x56c>)
 800613a:	61fb      	str	r3, [r7, #28]
        break;
 800613c:	e00d      	b.n	800615a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe fa75 	bl	800462c <HAL_RCC_GetSysClockFreq>
 8006142:	61f8      	str	r0, [r7, #28]
        break;
 8006144:	e009      	b.n	800615a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e005      	b.n	800615a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d077      	beq.n	8006250 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	005a      	lsls	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	441a      	add	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b0f      	cmp	r3, #15
 800617a:	d916      	bls.n	80061aa <UART_SetConfig+0x4a6>
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006182:	d212      	bcs.n	80061aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f023 030f 	bic.w	r3, r3, #15
 800618c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	b29b      	uxth	r3, r3
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	b29a      	uxth	r2, r3
 800619a:	8afb      	ldrh	r3, [r7, #22]
 800619c:	4313      	orrs	r3, r2
 800619e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	8afa      	ldrh	r2, [r7, #22]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	e052      	b.n	8006250 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b0:	e04e      	b.n	8006250 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d827      	bhi.n	800620a <UART_SetConfig+0x506>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x4bc>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620b 	.word	0x0800620b
 80061d0:	080061fb 	.word	0x080061fb
 80061d4:	0800620b 	.word	0x0800620b
 80061d8:	0800620b 	.word	0x0800620b
 80061dc:	0800620b 	.word	0x0800620b
 80061e0:	08006203 	.word	0x08006203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fe faba 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 80061e8:	61f8      	str	r0, [r7, #28]
        break;
 80061ea:	e014      	b.n	8006216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fe facc 	bl	8004788 <HAL_RCC_GetPCLK2Freq>
 80061f0:	61f8      	str	r0, [r7, #28]
        break;
 80061f2:	e010      	b.n	8006216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <UART_SetConfig+0x56c>)
 80061f6:	61fb      	str	r3, [r7, #28]
        break;
 80061f8:	e00d      	b.n	8006216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fa:	f7fe fa17 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80061fe:	61f8      	str	r0, [r7, #28]
        break;
 8006200:	e009      	b.n	8006216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006206:	61fb      	str	r3, [r7, #28]
        break;
 8006208:	e005      	b.n	8006216 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006214:	bf00      	nop
    }

    if (pclk != 0U)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d019      	beq.n	8006250 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	085a      	lsrs	r2, r3, #1
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b0f      	cmp	r3, #15
 8006234:	d909      	bls.n	800624a <UART_SetConfig+0x546>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d205      	bcs.n	800624a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	e002      	b.n	8006250 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800625c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006260:	4618      	mov	r0, r3
 8006262:	3728      	adds	r7, #40	; 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800626a:	bf00      	nop
 800626c:	40008000 	.word	0x40008000
 8006270:	00f42400 	.word	0x00f42400

08006274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01a      	beq.n	800638a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006372:	d10a      	bne.n	800638a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063c8:	f7fb fce6 	bl	8001d98 <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d10e      	bne.n	80063fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f82d 	bl	800644a <UART_WaitOnFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e023      	b.n	8006442 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b04      	cmp	r3, #4
 8006406:	d10e      	bne.n	8006426 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f817 	bl	800644a <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e00d      	b.n	8006442 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b09c      	sub	sp, #112	; 0x70
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	603b      	str	r3, [r7, #0]
 8006456:	4613      	mov	r3, r2
 8006458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645a:	e0a5      	b.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	f000 80a1 	beq.w	80065a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006466:	f7fb fc97 	bl	8001d98 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006472:	429a      	cmp	r2, r3
 8006474:	d302      	bcc.n	800647c <UART_WaitOnFlagUntilTimeout+0x32>
 8006476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006478:	2b00      	cmp	r3, #0
 800647a:	d13e      	bne.n	80064fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800648a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006490:	667b      	str	r3, [r7, #100]	; 0x64
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800649a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800649c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e6      	bne.n	800647c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	663b      	str	r3, [r7, #96]	; 0x60
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3308      	adds	r3, #8
 80064cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80064d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e067      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d04f      	beq.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006516:	d147      	bne.n	80065a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006520:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
 8006542:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e6      	bne.n	8006522 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	613b      	str	r3, [r7, #16]
   return(result);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	66bb      	str	r3, [r7, #104]	; 0x68
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006574:	623a      	str	r2, [r7, #32]
 8006576:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	69f9      	ldr	r1, [r7, #28]
 800657a:	6a3a      	ldr	r2, [r7, #32]
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	61bb      	str	r3, [r7, #24]
   return(result);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e5      	bne.n	8006554 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e010      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69da      	ldr	r2, [r3, #28]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4013      	ands	r3, r2
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	bf0c      	ite	eq
 80065b8:	2301      	moveq	r3, #1
 80065ba:	2300      	movne	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	f43f af4a 	beq.w	800645c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3770      	adds	r7, #112	; 0x70
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b097      	sub	sp, #92	; 0x5c
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	88fa      	ldrh	r2, [r7, #6]
 80065ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	d10e      	bne.n	8006626 <UART_Start_Receive_IT+0x52>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <UART_Start_Receive_IT+0x48>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800661a:	e02d      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006624:	e028      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <UART_Start_Receive_IT+0x76>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <UART_Start_Receive_IT+0x6c>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800663e:	e01b      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	227f      	movs	r2, #127	; 0x7f
 8006644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006648:	e016      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006652:	d10d      	bne.n	8006670 <UART_Start_Receive_IT+0x9c>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <UART_Start_Receive_IT+0x92>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	227f      	movs	r2, #127	; 0x7f
 8006660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006664:	e008      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	223f      	movs	r2, #63	; 0x3f
 800666a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800666e:	e003      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2222      	movs	r2, #34	; 0x22
 8006684:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	f043 0301 	orr.w	r3, r3, #1
 800669c:	657b      	str	r3, [r7, #84]	; 0x54
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e5      	bne.n	8006686 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	d107      	bne.n	80066d4 <UART_Start_Receive_IT+0x100>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a24      	ldr	r2, [pc, #144]	; (8006760 <UART_Start_Receive_IT+0x18c>)
 80066d0:	665a      	str	r2, [r3, #100]	; 0x64
 80066d2:	e002      	b.n	80066da <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a23      	ldr	r2, [pc, #140]	; (8006764 <UART_Start_Receive_IT+0x190>)
 80066d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d019      	beq.n	800671e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80066fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
 800670a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800670e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_Start_Receive_IT+0x116>
 800671c:	e018      	b.n	8006750 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	613b      	str	r3, [r7, #16]
   return(result);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f043 0320 	orr.w	r3, r3, #32
 8006732:	653b      	str	r3, [r7, #80]	; 0x50
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	69f9      	ldr	r1, [r7, #28]
 8006742:	6a3a      	ldr	r2, [r7, #32]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	61bb      	str	r3, [r7, #24]
   return(result);
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e6      	bne.n	800671e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	375c      	adds	r7, #92	; 0x5c
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	08006a0f 	.word	0x08006a0f
 8006764:	080068af 	.word	0x080068af

08006768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b095      	sub	sp, #84	; 0x54
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	643b      	str	r3, [r7, #64]	; 0x40
 8006790:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e6      	bne.n	8006770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3308      	adds	r3, #8
 80067a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e5      	bne.n	80067a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d118      	bne.n	8006810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	647b      	str	r3, [r7, #68]	; 0x44
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	613b      	str	r3, [r7, #16]
   return(result);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e6      	bne.n	80067de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006822:	bf00      	nop
 8006824:	3754      	adds	r7, #84	; 0x54
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fa43 	bl	8005cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b088      	sub	sp, #32
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6979      	ldr	r1, [r7, #20]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	613b      	str	r3, [r7, #16]
   return(result);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e6      	bne.n	8006862 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fa0f 	bl	8005cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a6:	bf00      	nop
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b096      	sub	sp, #88	; 0x58
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c4:	2b22      	cmp	r3, #34	; 0x22
 80068c6:	f040 8094 	bne.w	80069f2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80068d8:	b2d9      	uxtb	r1, r3
 80068da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	400a      	ands	r2, r1
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d179      	bne.n	8006a06 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006926:	653b      	str	r3, [r7, #80]	; 0x50
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006930:	647b      	str	r3, [r7, #68]	; 0x44
 8006932:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800693e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e6      	bne.n	8006912 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3308      	adds	r3, #8
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	623b      	str	r3, [r7, #32]
   return(result);
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006964:	633a      	str	r2, [r7, #48]	; 0x30
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800696a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e5      	bne.n	8006944 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006988:	2b01      	cmp	r3, #1
 800698a:	d12e      	bne.n	80069ea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	69b9      	ldr	r1, [r7, #24]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	617b      	str	r3, [r7, #20]
   return(result);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e6      	bne.n	8006992 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	2b10      	cmp	r3, #16
 80069d0:	d103      	bne.n	80069da <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2210      	movs	r2, #16
 80069d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff f982 	bl	8005cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069e8:	e00d      	b.n	8006a06 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fa fc16 	bl	800121c <HAL_UART_RxCpltCallback>
}
 80069f0:	e009      	b.n	8006a06 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	8b1b      	ldrh	r3, [r3, #24]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0208 	orr.w	r2, r2, #8
 8006a02:	b292      	uxth	r2, r2
 8006a04:	831a      	strh	r2, [r3, #24]
}
 8006a06:	bf00      	nop
 8006a08:	3758      	adds	r7, #88	; 0x58
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b096      	sub	sp, #88	; 0x58
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a24:	2b22      	cmp	r3, #34	; 0x22
 8006a26:	f040 8094 	bne.w	8006b52 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a38:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a3a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006a3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a42:	4013      	ands	r3, r2
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	1c9a      	adds	r2, r3, #2
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d179      	bne.n	8006b66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	643b      	str	r3, [r7, #64]	; 0x40
 8006a92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d12e      	bne.n	8006b4a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6979      	ldr	r1, [r7, #20]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e6      	bne.n	8006af2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d103      	bne.n	8006b3a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2210      	movs	r2, #16
 8006b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7ff f8d2 	bl	8005cec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b48:	e00d      	b.n	8006b66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fa fb66 	bl	800121c <HAL_UART_RxCpltCallback>
}
 8006b50:	e009      	b.n	8006b66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	8b1b      	ldrh	r3, [r3, #24]
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0208 	orr.w	r2, r2, #8
 8006b62:	b292      	uxth	r2, r2
 8006b64:	831a      	strh	r2, [r3, #24]
}
 8006b66:	bf00      	nop
 8006b68:	3758      	adds	r7, #88	; 0x58
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	0000      	movs	r0, r0
 8006b84:	0000      	movs	r0, r0
	...

08006b88 <_initVoltsArray>:

/*
 * Private functions
 */

static void _initVoltsArray(void){
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
    _vs[0] = 3.200; 
 8006b8c:	49b4      	ldr	r1, [pc, #720]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006b8e:	a36e      	add	r3, pc, #440	; (adr r3, 8006d48 <_initVoltsArray+0x1c0>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	e9c1 2300 	strd	r2, r3, [r1]
    _vs[1] = 3.250; _vs[2] = 3.300; _vs[3] = 3.350; _vs[4] = 3.400; _vs[5] = 3.450;
 8006b98:	49b1      	ldr	r1, [pc, #708]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	4bb1      	ldr	r3, [pc, #708]	; (8006e64 <_initVoltsArray+0x2dc>)
 8006ba0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006ba4:	49ae      	ldr	r1, [pc, #696]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006ba6:	a36a      	add	r3, pc, #424	; (adr r3, 8006d50 <_initVoltsArray+0x1c8>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006bb0:	49ab      	ldr	r1, [pc, #684]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006bb2:	a369      	add	r3, pc, #420	; (adr r3, 8006d58 <_initVoltsArray+0x1d0>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8006bbc:	49a8      	ldr	r1, [pc, #672]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006bbe:	a368      	add	r3, pc, #416	; (adr r3, 8006d60 <_initVoltsArray+0x1d8>)
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8006bc8:	49a5      	ldr	r1, [pc, #660]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006bca:	a367      	add	r3, pc, #412	; (adr r3, 8006d68 <_initVoltsArray+0x1e0>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    _vs[6] = 3.500; _vs[7] = 3.550; _vs[8] = 3.600; _vs[9] = 3.650; _vs[10] = 3.700;
 8006bd4:	49a2      	ldr	r1, [pc, #648]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	4ba3      	ldr	r3, [pc, #652]	; (8006e68 <_initVoltsArray+0x2e0>)
 8006bdc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8006be0:	499f      	ldr	r1, [pc, #636]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006be2:	a363      	add	r3, pc, #396	; (adr r3, 8006d70 <_initVoltsArray+0x1e8>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006bec:	499c      	ldr	r1, [pc, #624]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006bee:	a362      	add	r3, pc, #392	; (adr r3, 8006d78 <_initVoltsArray+0x1f0>)
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8006bf8:	4999      	ldr	r1, [pc, #612]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006bfa:	a361      	add	r3, pc, #388	; (adr r3, 8006d80 <_initVoltsArray+0x1f8>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006c04:	4996      	ldr	r1, [pc, #600]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c06:	a360      	add	r3, pc, #384	; (adr r3, 8006d88 <_initVoltsArray+0x200>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    _vs[11] = 3.703; _vs[12] = 3.706; _vs[13] = 3.710; _vs[14] = 3.713; _vs[15] = 3.716;
 8006c10:	4993      	ldr	r1, [pc, #588]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c12:	a35f      	add	r3, pc, #380	; (adr r3, 8006d90 <_initVoltsArray+0x208>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8006c1c:	4990      	ldr	r1, [pc, #576]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c1e:	a35e      	add	r3, pc, #376	; (adr r3, 8006d98 <_initVoltsArray+0x210>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006c28:	498d      	ldr	r1, [pc, #564]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c2a:	a35d      	add	r3, pc, #372	; (adr r3, 8006da0 <_initVoltsArray+0x218>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006c34:	498a      	ldr	r1, [pc, #552]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c36:	a35c      	add	r3, pc, #368	; (adr r3, 8006da8 <_initVoltsArray+0x220>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006c40:	4987      	ldr	r1, [pc, #540]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c42:	a35b      	add	r3, pc, #364	; (adr r3, 8006db0 <_initVoltsArray+0x228>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    _vs[16] = 3.719; _vs[17] = 3.723; _vs[18] = 3.726; _vs[19] = 3.729; _vs[20] = 3.732;
 8006c4c:	4984      	ldr	r1, [pc, #528]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c4e:	a35a      	add	r3, pc, #360	; (adr r3, 8006db8 <_initVoltsArray+0x230>)
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006c58:	4981      	ldr	r1, [pc, #516]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c5a:	a359      	add	r3, pc, #356	; (adr r3, 8006dc0 <_initVoltsArray+0x238>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8006c64:	497e      	ldr	r1, [pc, #504]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c66:	a358      	add	r3, pc, #352	; (adr r3, 8006dc8 <_initVoltsArray+0x240>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8006c70:	497b      	ldr	r1, [pc, #492]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c72:	a357      	add	r3, pc, #348	; (adr r3, 8006dd0 <_initVoltsArray+0x248>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8006c7c:	4978      	ldr	r1, [pc, #480]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c7e:	a356      	add	r3, pc, #344	; (adr r3, 8006dd8 <_initVoltsArray+0x250>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    _vs[21] = 3.735; _vs[22] = 3.739; _vs[23] = 3.742; _vs[24] = 3.745; _vs[25] = 3.748;
 8006c88:	4975      	ldr	r1, [pc, #468]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c8a:	a355      	add	r3, pc, #340	; (adr r3, 8006de0 <_initVoltsArray+0x258>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8006c94:	4972      	ldr	r1, [pc, #456]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006c96:	a354      	add	r3, pc, #336	; (adr r3, 8006de8 <_initVoltsArray+0x260>)
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
 8006ca0:	496f      	ldr	r1, [pc, #444]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006ca2:	a353      	add	r3, pc, #332	; (adr r3, 8006df0 <_initVoltsArray+0x268>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8006cac:	496c      	ldr	r1, [pc, #432]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006cae:	a352      	add	r3, pc, #328	; (adr r3, 8006df8 <_initVoltsArray+0x270>)
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8006cb8:	4969      	ldr	r1, [pc, #420]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006cba:	a351      	add	r3, pc, #324	; (adr r3, 8006e00 <_initVoltsArray+0x278>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    _vs[26] = 3.752; _vs[27] = 3.755; _vs[28] = 3.758; _vs[29] = 3.761; _vs[30] = 3.765;
 8006cc4:	4966      	ldr	r1, [pc, #408]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006cc6:	a350      	add	r3, pc, #320	; (adr r3, 8006e08 <_initVoltsArray+0x280>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
 8006cd0:	4963      	ldr	r1, [pc, #396]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006cd2:	a34f      	add	r3, pc, #316	; (adr r3, 8006e10 <_initVoltsArray+0x288>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8006cdc:	4960      	ldr	r1, [pc, #384]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006cde:	a34e      	add	r3, pc, #312	; (adr r3, 8006e18 <_initVoltsArray+0x290>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8006ce8:	495d      	ldr	r1, [pc, #372]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006cea:	a34d      	add	r3, pc, #308	; (adr r3, 8006e20 <_initVoltsArray+0x298>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 8006cf4:	495a      	ldr	r1, [pc, #360]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006cf6:	a34c      	add	r3, pc, #304	; (adr r3, 8006e28 <_initVoltsArray+0x2a0>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    _vs[31] = 3.768; _vs[32] = 3.771; _vs[33] = 3.774; _vs[34] = 3.777; _vs[35] = 3.781;
 8006d00:	4957      	ldr	r1, [pc, #348]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006d02:	a34b      	add	r3, pc, #300	; (adr r3, 8006e30 <_initVoltsArray+0x2a8>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8006d0c:	4954      	ldr	r1, [pc, #336]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006d0e:	a34a      	add	r3, pc, #296	; (adr r3, 8006e38 <_initVoltsArray+0x2b0>)
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
 8006d18:	4951      	ldr	r1, [pc, #324]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006d1a:	a349      	add	r3, pc, #292	; (adr r3, 8006e40 <_initVoltsArray+0x2b8>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 8006d24:	494e      	ldr	r1, [pc, #312]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006d26:	a348      	add	r3, pc, #288	; (adr r3, 8006e48 <_initVoltsArray+0x2c0>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 8006d30:	494b      	ldr	r1, [pc, #300]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006d32:	a347      	add	r3, pc, #284	; (adr r3, 8006e50 <_initVoltsArray+0x2c8>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    _vs[36] = 3.784; _vs[37] = 3.787; _vs[38] = 3.790; _vs[39] = 3.794; _vs[40] = 3.797;
 8006d3c:	4948      	ldr	r1, [pc, #288]	; (8006e60 <_initVoltsArray+0x2d8>)
 8006d3e:	a346      	add	r3, pc, #280	; (adr r3, 8006e58 <_initVoltsArray+0x2d0>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	e092      	b.n	8006e6c <_initVoltsArray+0x2e4>
 8006d46:	bf00      	nop
 8006d48:	9999999a 	.word	0x9999999a
 8006d4c:	40099999 	.word	0x40099999
 8006d50:	66666666 	.word	0x66666666
 8006d54:	400a6666 	.word	0x400a6666
 8006d58:	cccccccd 	.word	0xcccccccd
 8006d5c:	400acccc 	.word	0x400acccc
 8006d60:	33333333 	.word	0x33333333
 8006d64:	400b3333 	.word	0x400b3333
 8006d68:	9999999a 	.word	0x9999999a
 8006d6c:	400b9999 	.word	0x400b9999
 8006d70:	66666666 	.word	0x66666666
 8006d74:	400c6666 	.word	0x400c6666
 8006d78:	cccccccd 	.word	0xcccccccd
 8006d7c:	400ccccc 	.word	0x400ccccc
 8006d80:	33333333 	.word	0x33333333
 8006d84:	400d3333 	.word	0x400d3333
 8006d88:	9999999a 	.word	0x9999999a
 8006d8c:	400d9999 	.word	0x400d9999
 8006d90:	76c8b439 	.word	0x76c8b439
 8006d94:	400d9fbe 	.word	0x400d9fbe
 8006d98:	53f7ced9 	.word	0x53f7ced9
 8006d9c:	400da5e3 	.word	0x400da5e3
 8006da0:	7ae147ae 	.word	0x7ae147ae
 8006da4:	400dae14 	.word	0x400dae14
 8006da8:	5810624e 	.word	0x5810624e
 8006dac:	400db439 	.word	0x400db439
 8006db0:	353f7cee 	.word	0x353f7cee
 8006db4:	400dba5e 	.word	0x400dba5e
 8006db8:	126e978d 	.word	0x126e978d
 8006dbc:	400dc083 	.word	0x400dc083
 8006dc0:	39581062 	.word	0x39581062
 8006dc4:	400dc8b4 	.word	0x400dc8b4
 8006dc8:	16872b02 	.word	0x16872b02
 8006dcc:	400dced9 	.word	0x400dced9
 8006dd0:	f3b645a2 	.word	0xf3b645a2
 8006dd4:	400dd4fd 	.word	0x400dd4fd
 8006dd8:	d0e56042 	.word	0xd0e56042
 8006ddc:	400ddb22 	.word	0x400ddb22
 8006de0:	ae147ae1 	.word	0xae147ae1
 8006de4:	400de147 	.word	0x400de147
 8006de8:	d4fdf3b6 	.word	0xd4fdf3b6
 8006dec:	400de978 	.word	0x400de978
 8006df0:	b22d0e56 	.word	0xb22d0e56
 8006df4:	400def9d 	.word	0x400def9d
 8006df8:	8f5c28f6 	.word	0x8f5c28f6
 8006dfc:	400df5c2 	.word	0x400df5c2
 8006e00:	6c8b4396 	.word	0x6c8b4396
 8006e04:	400dfbe7 	.word	0x400dfbe7
 8006e08:	9374bc6a 	.word	0x9374bc6a
 8006e0c:	400e0418 	.word	0x400e0418
 8006e10:	70a3d70a 	.word	0x70a3d70a
 8006e14:	400e0a3d 	.word	0x400e0a3d
 8006e18:	4dd2f1aa 	.word	0x4dd2f1aa
 8006e1c:	400e1062 	.word	0x400e1062
 8006e20:	2b020c4a 	.word	0x2b020c4a
 8006e24:	400e1687 	.word	0x400e1687
 8006e28:	51eb851f 	.word	0x51eb851f
 8006e2c:	400e1eb8 	.word	0x400e1eb8
 8006e30:	2f1a9fbe 	.word	0x2f1a9fbe
 8006e34:	400e24dd 	.word	0x400e24dd
 8006e38:	0c49ba5e 	.word	0x0c49ba5e
 8006e3c:	400e2b02 	.word	0x400e2b02
 8006e40:	e978d4fe 	.word	0xe978d4fe
 8006e44:	400e3126 	.word	0x400e3126
 8006e48:	c6a7ef9e 	.word	0xc6a7ef9e
 8006e4c:	400e374b 	.word	0x400e374b
 8006e50:	ed916873 	.word	0xed916873
 8006e54:	400e3f7c 	.word	0x400e3f7c
 8006e58:	cac08312 	.word	0xcac08312
 8006e5c:	400e45a1 	.word	0x400e45a1
 8006e60:	20000430 	.word	0x20000430
 8006e64:	400a0000 	.word	0x400a0000
 8006e68:	400c0000 	.word	0x400c0000
 8006e6c:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8006e70:	49b5      	ldr	r1, [pc, #724]	; (8007148 <_initVoltsArray+0x5c0>)
 8006e72:	a36d      	add	r3, pc, #436	; (adr r3, 8007028 <_initVoltsArray+0x4a0>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
 8006e7c:	49b2      	ldr	r1, [pc, #712]	; (8007148 <_initVoltsArray+0x5c0>)
 8006e7e:	a36c      	add	r3, pc, #432	; (adr r3, 8007030 <_initVoltsArray+0x4a8>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 8006e88:	49af      	ldr	r1, [pc, #700]	; (8007148 <_initVoltsArray+0x5c0>)
 8006e8a:	a36b      	add	r3, pc, #428	; (adr r3, 8007038 <_initVoltsArray+0x4b0>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 8006e94:	49ac      	ldr	r1, [pc, #688]	; (8007148 <_initVoltsArray+0x5c0>)
 8006e96:	a36a      	add	r3, pc, #424	; (adr r3, 8007040 <_initVoltsArray+0x4b8>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    _vs[41] = 3.800; _vs[42] = 3.805; _vs[43] = 3.811; _vs[44] = 3.816; _vs[45] = 3.821;
 8006ea0:	49a9      	ldr	r1, [pc, #676]	; (8007148 <_initVoltsArray+0x5c0>)
 8006ea2:	a369      	add	r3, pc, #420	; (adr r3, 8007048 <_initVoltsArray+0x4c0>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 8006eac:	49a6      	ldr	r1, [pc, #664]	; (8007148 <_initVoltsArray+0x5c0>)
 8006eae:	a368      	add	r3, pc, #416	; (adr r3, 8007050 <_initVoltsArray+0x4c8>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
 8006eb8:	49a3      	ldr	r1, [pc, #652]	; (8007148 <_initVoltsArray+0x5c0>)
 8006eba:	a367      	add	r3, pc, #412	; (adr r3, 8007058 <_initVoltsArray+0x4d0>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
 8006ec4:	49a0      	ldr	r1, [pc, #640]	; (8007148 <_initVoltsArray+0x5c0>)
 8006ec6:	a366      	add	r3, pc, #408	; (adr r3, 8007060 <_initVoltsArray+0x4d8>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
 8006ed0:	499d      	ldr	r1, [pc, #628]	; (8007148 <_initVoltsArray+0x5c0>)
 8006ed2:	a365      	add	r3, pc, #404	; (adr r3, 8007068 <_initVoltsArray+0x4e0>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
    _vs[46] = 3.826; _vs[47] = 3.832; _vs[48] = 3.837; _vs[49] = 3.842; _vs[50] = 3.847;
 8006edc:	499a      	ldr	r1, [pc, #616]	; (8007148 <_initVoltsArray+0x5c0>)
 8006ede:	a364      	add	r3, pc, #400	; (adr r3, 8007070 <_initVoltsArray+0x4e8>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
 8006ee8:	4997      	ldr	r1, [pc, #604]	; (8007148 <_initVoltsArray+0x5c0>)
 8006eea:	a363      	add	r3, pc, #396	; (adr r3, 8007078 <_initVoltsArray+0x4f0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 8006ef4:	4994      	ldr	r1, [pc, #592]	; (8007148 <_initVoltsArray+0x5c0>)
 8006ef6:	a362      	add	r3, pc, #392	; (adr r3, 8007080 <_initVoltsArray+0x4f8>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 8006f00:	4991      	ldr	r1, [pc, #580]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f02:	a361      	add	r3, pc, #388	; (adr r3, 8007088 <_initVoltsArray+0x500>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 8006f0c:	498e      	ldr	r1, [pc, #568]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f0e:	a360      	add	r3, pc, #384	; (adr r3, 8007090 <_initVoltsArray+0x508>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
    _vs[51] = 3.853; _vs[52] = 3.858; _vs[53] = 3.863; _vs[54] = 3.868; _vs[55] = 3.874;
 8006f18:	498b      	ldr	r1, [pc, #556]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f1a:	a35f      	add	r3, pc, #380	; (adr r3, 8007098 <_initVoltsArray+0x510>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
 8006f24:	4988      	ldr	r1, [pc, #544]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f26:	a35e      	add	r3, pc, #376	; (adr r3, 80070a0 <_initVoltsArray+0x518>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
 8006f30:	4985      	ldr	r1, [pc, #532]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f32:	a35d      	add	r3, pc, #372	; (adr r3, 80070a8 <_initVoltsArray+0x520>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8006f3c:	4982      	ldr	r1, [pc, #520]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f3e:	a35c      	add	r3, pc, #368	; (adr r3, 80070b0 <_initVoltsArray+0x528>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 8006f48:	497f      	ldr	r1, [pc, #508]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f4a:	a35b      	add	r3, pc, #364	; (adr r3, 80070b8 <_initVoltsArray+0x530>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    _vs[56] = 3.879; _vs[57] = 3.884; _vs[58] = 3.889; _vs[59] = 3.895; _vs[60] = 3.900;
 8006f54:	497c      	ldr	r1, [pc, #496]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f56:	a35a      	add	r3, pc, #360	; (adr r3, 80070c0 <_initVoltsArray+0x538>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8006f60:	4979      	ldr	r1, [pc, #484]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f62:	a359      	add	r3, pc, #356	; (adr r3, 80070c8 <_initVoltsArray+0x540>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
 8006f6c:	4976      	ldr	r1, [pc, #472]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f6e:	a358      	add	r3, pc, #352	; (adr r3, 80070d0 <_initVoltsArray+0x548>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
 8006f78:	4973      	ldr	r1, [pc, #460]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f7a:	a357      	add	r3, pc, #348	; (adr r3, 80070d8 <_initVoltsArray+0x550>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 8006f84:	4970      	ldr	r1, [pc, #448]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f86:	a356      	add	r3, pc, #344	; (adr r3, 80070e0 <_initVoltsArray+0x558>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    _vs[61] = 3.906; _vs[62] = 3.911; _vs[63] = 3.917; _vs[64] = 3.922; _vs[65] = 3.928;
 8006f90:	496d      	ldr	r1, [pc, #436]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f92:	a355      	add	r3, pc, #340	; (adr r3, 80070e8 <_initVoltsArray+0x560>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
 8006f9c:	496a      	ldr	r1, [pc, #424]	; (8007148 <_initVoltsArray+0x5c0>)
 8006f9e:	a354      	add	r3, pc, #336	; (adr r3, 80070f0 <_initVoltsArray+0x568>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
 8006fa8:	4967      	ldr	r1, [pc, #412]	; (8007148 <_initVoltsArray+0x5c0>)
 8006faa:	a353      	add	r3, pc, #332	; (adr r3, 80070f8 <_initVoltsArray+0x570>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
 8006fb4:	4964      	ldr	r1, [pc, #400]	; (8007148 <_initVoltsArray+0x5c0>)
 8006fb6:	a352      	add	r3, pc, #328	; (adr r3, 8007100 <_initVoltsArray+0x578>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200
 8006fc0:	4961      	ldr	r1, [pc, #388]	; (8007148 <_initVoltsArray+0x5c0>)
 8006fc2:	a351      	add	r3, pc, #324	; (adr r3, 8007108 <_initVoltsArray+0x580>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    _vs[66] = 3.933; _vs[67] = 3.939; _vs[68] = 3.944; _vs[69] = 3.950; _vs[70] = 3.956;
 8006fcc:	495e      	ldr	r1, [pc, #376]	; (8007148 <_initVoltsArray+0x5c0>)
 8006fce:	a350      	add	r3, pc, #320	; (adr r3, 8007110 <_initVoltsArray+0x588>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
 8006fd8:	495b      	ldr	r1, [pc, #364]	; (8007148 <_initVoltsArray+0x5c0>)
 8006fda:	a34f      	add	r3, pc, #316	; (adr r3, 8007118 <_initVoltsArray+0x590>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 8006fe4:	4958      	ldr	r1, [pc, #352]	; (8007148 <_initVoltsArray+0x5c0>)
 8006fe6:	a34e      	add	r3, pc, #312	; (adr r3, 8007120 <_initVoltsArray+0x598>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
 8006ff0:	4955      	ldr	r1, [pc, #340]	; (8007148 <_initVoltsArray+0x5c0>)
 8006ff2:	a34d      	add	r3, pc, #308	; (adr r3, 8007128 <_initVoltsArray+0x5a0>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8006ffc:	4952      	ldr	r1, [pc, #328]	; (8007148 <_initVoltsArray+0x5c0>)
 8006ffe:	a34c      	add	r3, pc, #304	; (adr r3, 8007130 <_initVoltsArray+0x5a8>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    _vs[71] = 3.961; _vs[72] = 3.967; _vs[73] = 3.972; _vs[74] = 3.978; _vs[75] = 3.983;
 8007008:	494f      	ldr	r1, [pc, #316]	; (8007148 <_initVoltsArray+0x5c0>)
 800700a:	a34b      	add	r3, pc, #300	; (adr r3, 8007138 <_initVoltsArray+0x5b0>)
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
 8007014:	494c      	ldr	r1, [pc, #304]	; (8007148 <_initVoltsArray+0x5c0>)
 8007016:	a34a      	add	r3, pc, #296	; (adr r3, 8007140 <_initVoltsArray+0x5b8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
 8007020:	e094      	b.n	800714c <_initVoltsArray+0x5c4>
 8007022:	bf00      	nop
 8007024:	f3af 8000 	nop.w
 8007028:	a7ef9db2 	.word	0xa7ef9db2
 800702c:	400e4bc6 	.word	0x400e4bc6
 8007030:	851eb852 	.word	0x851eb852
 8007034:	400e51eb 	.word	0x400e51eb
 8007038:	ac083127 	.word	0xac083127
 800703c:	400e5a1c 	.word	0x400e5a1c
 8007040:	89374bc7 	.word	0x89374bc7
 8007044:	400e6041 	.word	0x400e6041
 8007048:	66666666 	.word	0x66666666
 800704c:	400e6666 	.word	0x400e6666
 8007050:	d70a3d71 	.word	0xd70a3d71
 8007054:	400e70a3 	.word	0x400e70a3
 8007058:	916872b0 	.word	0x916872b0
 800705c:	400e7ced 	.word	0x400e7ced
 8007060:	020c49ba 	.word	0x020c49ba
 8007064:	400e872b 	.word	0x400e872b
 8007068:	72b020c5 	.word	0x72b020c5
 800706c:	400e9168 	.word	0x400e9168
 8007070:	e353f7cf 	.word	0xe353f7cf
 8007074:	400e9ba5 	.word	0x400e9ba5
 8007078:	9db22d0e 	.word	0x9db22d0e
 800707c:	400ea7ef 	.word	0x400ea7ef
 8007080:	0e560419 	.word	0x0e560419
 8007084:	400eb22d 	.word	0x400eb22d
 8007088:	7ef9db23 	.word	0x7ef9db23
 800708c:	400ebc6a 	.word	0x400ebc6a
 8007090:	ef9db22d 	.word	0xef9db22d
 8007094:	400ec6a7 	.word	0x400ec6a7
 8007098:	a9fbe76d 	.word	0xa9fbe76d
 800709c:	400ed2f1 	.word	0x400ed2f1
 80070a0:	1a9fbe77 	.word	0x1a9fbe77
 80070a4:	400edd2f 	.word	0x400edd2f
 80070a8:	8b439581 	.word	0x8b439581
 80070ac:	400ee76c 	.word	0x400ee76c
 80070b0:	fbe76c8b 	.word	0xfbe76c8b
 80070b4:	400ef1a9 	.word	0x400ef1a9
 80070b8:	b645a1cb 	.word	0xb645a1cb
 80070bc:	400efdf3 	.word	0x400efdf3
 80070c0:	26e978d5 	.word	0x26e978d5
 80070c4:	400f0831 	.word	0x400f0831
 80070c8:	978d4fdf 	.word	0x978d4fdf
 80070cc:	400f126e 	.word	0x400f126e
 80070d0:	083126e9 	.word	0x083126e9
 80070d4:	400f1cac 	.word	0x400f1cac
 80070d8:	c28f5c29 	.word	0xc28f5c29
 80070dc:	400f28f5 	.word	0x400f28f5
 80070e0:	33333333 	.word	0x33333333
 80070e4:	400f3333 	.word	0x400f3333
 80070e8:	ed916873 	.word	0xed916873
 80070ec:	400f3f7c 	.word	0x400f3f7c
 80070f0:	5e353f7d 	.word	0x5e353f7d
 80070f4:	400f49ba 	.word	0x400f49ba
 80070f8:	189374bc 	.word	0x189374bc
 80070fc:	400f5604 	.word	0x400f5604
 8007100:	89374bc7 	.word	0x89374bc7
 8007104:	400f6041 	.word	0x400f6041
 8007108:	43958106 	.word	0x43958106
 800710c:	400f6c8b 	.word	0x400f6c8b
 8007110:	b4395810 	.word	0xb4395810
 8007114:	400f76c8 	.word	0x400f76c8
 8007118:	6e978d50 	.word	0x6e978d50
 800711c:	400f8312 	.word	0x400f8312
 8007120:	df3b645a 	.word	0xdf3b645a
 8007124:	400f8d4f 	.word	0x400f8d4f
 8007128:	9999999a 	.word	0x9999999a
 800712c:	400f9999 	.word	0x400f9999
 8007130:	53f7ced9 	.word	0x53f7ced9
 8007134:	400fa5e3 	.word	0x400fa5e3
 8007138:	c49ba5e3 	.word	0xc49ba5e3
 800713c:	400fb020 	.word	0x400fb020
 8007140:	7ef9db23 	.word	0x7ef9db23
 8007144:	400fbc6a 	.word	0x400fbc6a
 8007148:	20000430 	.word	0x20000430
 800714c:	498c      	ldr	r1, [pc, #560]	; (8007380 <_initVoltsArray+0x7f8>)
 800714e:	a356      	add	r3, pc, #344	; (adr r3, 80072a8 <_initVoltsArray+0x720>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
 8007158:	4989      	ldr	r1, [pc, #548]	; (8007380 <_initVoltsArray+0x7f8>)
 800715a:	a355      	add	r3, pc, #340	; (adr r3, 80072b0 <_initVoltsArray+0x728>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 8007164:	4986      	ldr	r1, [pc, #536]	; (8007380 <_initVoltsArray+0x7f8>)
 8007166:	a354      	add	r3, pc, #336	; (adr r3, 80072b8 <_initVoltsArray+0x730>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
    _vs[76] = 3.989; _vs[77] = 3.994; _vs[78] = 4.000; _vs[79] = 4.008; _vs[80] = 4.015;
 8007170:	4983      	ldr	r1, [pc, #524]	; (8007380 <_initVoltsArray+0x7f8>)
 8007172:	a353      	add	r3, pc, #332	; (adr r3, 80072c0 <_initVoltsArray+0x738>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 800717c:	4980      	ldr	r1, [pc, #512]	; (8007380 <_initVoltsArray+0x7f8>)
 800717e:	a352      	add	r3, pc, #328	; (adr r3, 80072c8 <_initVoltsArray+0x740>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
 8007188:	497d      	ldr	r1, [pc, #500]	; (8007380 <_initVoltsArray+0x7f8>)
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	4b7d      	ldr	r3, [pc, #500]	; (8007384 <_initVoltsArray+0x7fc>)
 8007190:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
 8007194:	497a      	ldr	r1, [pc, #488]	; (8007380 <_initVoltsArray+0x7f8>)
 8007196:	a34e      	add	r3, pc, #312	; (adr r3, 80072d0 <_initVoltsArray+0x748>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
 80071a0:	4977      	ldr	r1, [pc, #476]	; (8007380 <_initVoltsArray+0x7f8>)
 80071a2:	a34d      	add	r3, pc, #308	; (adr r3, 80072d8 <_initVoltsArray+0x750>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
    _vs[81] = 4.023; _vs[82] = 4.031; _vs[83] = 4.038; _vs[84] = 4.046; _vs[85] = 4.054;
 80071ac:	4974      	ldr	r1, [pc, #464]	; (8007380 <_initVoltsArray+0x7f8>)
 80071ae:	a34c      	add	r3, pc, #304	; (adr r3, 80072e0 <_initVoltsArray+0x758>)
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
 80071b8:	4971      	ldr	r1, [pc, #452]	; (8007380 <_initVoltsArray+0x7f8>)
 80071ba:	a34b      	add	r3, pc, #300	; (adr r3, 80072e8 <_initVoltsArray+0x760>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
 80071c4:	496e      	ldr	r1, [pc, #440]	; (8007380 <_initVoltsArray+0x7f8>)
 80071c6:	a34a      	add	r3, pc, #296	; (adr r3, 80072f0 <_initVoltsArray+0x768>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
 80071d0:	496b      	ldr	r1, [pc, #428]	; (8007380 <_initVoltsArray+0x7f8>)
 80071d2:	a349      	add	r3, pc, #292	; (adr r3, 80072f8 <_initVoltsArray+0x770>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
 80071dc:	4968      	ldr	r1, [pc, #416]	; (8007380 <_initVoltsArray+0x7f8>)
 80071de:	a348      	add	r3, pc, #288	; (adr r3, 8007300 <_initVoltsArray+0x778>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
    _vs[86] = 4.062; _vs[87] = 4.069; _vs[88] = 4.077; _vs[89] = 4.085; _vs[90] = 4.092;
 80071e8:	4965      	ldr	r1, [pc, #404]	; (8007380 <_initVoltsArray+0x7f8>)
 80071ea:	a347      	add	r3, pc, #284	; (adr r3, 8007308 <_initVoltsArray+0x780>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
 80071f4:	4962      	ldr	r1, [pc, #392]	; (8007380 <_initVoltsArray+0x7f8>)
 80071f6:	a346      	add	r3, pc, #280	; (adr r3, 8007310 <_initVoltsArray+0x788>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
 8007200:	495f      	ldr	r1, [pc, #380]	; (8007380 <_initVoltsArray+0x7f8>)
 8007202:	a345      	add	r3, pc, #276	; (adr r3, 8007318 <_initVoltsArray+0x790>)
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
 800720c:	495c      	ldr	r1, [pc, #368]	; (8007380 <_initVoltsArray+0x7f8>)
 800720e:	a344      	add	r3, pc, #272	; (adr r3, 8007320 <_initVoltsArray+0x798>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
 8007218:	4959      	ldr	r1, [pc, #356]	; (8007380 <_initVoltsArray+0x7f8>)
 800721a:	a343      	add	r3, pc, #268	; (adr r3, 8007328 <_initVoltsArray+0x7a0>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
    _vs[91] = 4.100; _vs[92] = 4.111; _vs[93] = 4.122; _vs[94] = 4.133; _vs[95] = 4.144;
 8007224:	4956      	ldr	r1, [pc, #344]	; (8007380 <_initVoltsArray+0x7f8>)
 8007226:	a342      	add	r3, pc, #264	; (adr r3, 8007330 <_initVoltsArray+0x7a8>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8007230:	4953      	ldr	r1, [pc, #332]	; (8007380 <_initVoltsArray+0x7f8>)
 8007232:	a341      	add	r3, pc, #260	; (adr r3, 8007338 <_initVoltsArray+0x7b0>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0
 800723c:	4950      	ldr	r1, [pc, #320]	; (8007380 <_initVoltsArray+0x7f8>)
 800723e:	a340      	add	r3, pc, #256	; (adr r3, 8007340 <_initVoltsArray+0x7b8>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
 8007248:	494d      	ldr	r1, [pc, #308]	; (8007380 <_initVoltsArray+0x7f8>)
 800724a:	a33f      	add	r3, pc, #252	; (adr r3, 8007348 <_initVoltsArray+0x7c0>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 8007254:	494a      	ldr	r1, [pc, #296]	; (8007380 <_initVoltsArray+0x7f8>)
 8007256:	a33e      	add	r3, pc, #248	; (adr r3, 8007350 <_initVoltsArray+0x7c8>)
 8007258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725c:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    _vs[96] = 4.156; _vs[97] = 4.167; _vs[98] = 4.178; _vs[99] = 4.189; _vs[100] = 4.200;
 8007260:	4947      	ldr	r1, [pc, #284]	; (8007380 <_initVoltsArray+0x7f8>)
 8007262:	a33d      	add	r3, pc, #244	; (adr r3, 8007358 <_initVoltsArray+0x7d0>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	e9c1 23c0 	strd	r2, r3, [r1, #768]	; 0x300
 800726c:	4944      	ldr	r1, [pc, #272]	; (8007380 <_initVoltsArray+0x7f8>)
 800726e:	a33c      	add	r3, pc, #240	; (adr r3, 8007360 <_initVoltsArray+0x7d8>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	e9c1 23c2 	strd	r2, r3, [r1, #776]	; 0x308
 8007278:	4941      	ldr	r1, [pc, #260]	; (8007380 <_initVoltsArray+0x7f8>)
 800727a:	a33b      	add	r3, pc, #236	; (adr r3, 8007368 <_initVoltsArray+0x7e0>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310
 8007284:	493e      	ldr	r1, [pc, #248]	; (8007380 <_initVoltsArray+0x7f8>)
 8007286:	a33a      	add	r3, pc, #232	; (adr r3, 8007370 <_initVoltsArray+0x7e8>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	e9c1 23c6 	strd	r2, r3, [r1, #792]	; 0x318
 8007290:	493b      	ldr	r1, [pc, #236]	; (8007380 <_initVoltsArray+0x7f8>)
 8007292:	a339      	add	r3, pc, #228	; (adr r3, 8007378 <_initVoltsArray+0x7f0>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	ef9db22d 	.word	0xef9db22d
 80072ac:	400fc6a7 	.word	0x400fc6a7
 80072b0:	a9fbe76d 	.word	0xa9fbe76d
 80072b4:	400fd2f1 	.word	0x400fd2f1
 80072b8:	1a9fbe77 	.word	0x1a9fbe77
 80072bc:	400fdd2f 	.word	0x400fdd2f
 80072c0:	d4fdf3b6 	.word	0xd4fdf3b6
 80072c4:	400fe978 	.word	0x400fe978
 80072c8:	45a1cac1 	.word	0x45a1cac1
 80072cc:	400ff3b6 	.word	0x400ff3b6
 80072d0:	26e978d5 	.word	0x26e978d5
 80072d4:	40100831 	.word	0x40100831
 80072d8:	28f5c28f 	.word	0x28f5c28f
 80072dc:	40100f5c 	.word	0x40100f5c
 80072e0:	4fdf3b64 	.word	0x4fdf3b64
 80072e4:	4010178d 	.word	0x4010178d
 80072e8:	76c8b439 	.word	0x76c8b439
 80072ec:	40101fbe 	.word	0x40101fbe
 80072f0:	78d4fdf4 	.word	0x78d4fdf4
 80072f4:	401026e9 	.word	0x401026e9
 80072f8:	9fbe76c9 	.word	0x9fbe76c9
 80072fc:	40102f1a 	.word	0x40102f1a
 8007300:	c6a7ef9e 	.word	0xc6a7ef9e
 8007304:	4010374b 	.word	0x4010374b
 8007308:	ed916873 	.word	0xed916873
 800730c:	40103f7c 	.word	0x40103f7c
 8007310:	ef9db22d 	.word	0xef9db22d
 8007314:	401046a7 	.word	0x401046a7
 8007318:	16872b02 	.word	0x16872b02
 800731c:	40104ed9 	.word	0x40104ed9
 8007320:	3d70a3d7 	.word	0x3d70a3d7
 8007324:	4010570a 	.word	0x4010570a
 8007328:	3f7ced91 	.word	0x3f7ced91
 800732c:	40105e35 	.word	0x40105e35
 8007330:	66666666 	.word	0x66666666
 8007334:	40106666 	.word	0x40106666
 8007338:	fbe76c8b 	.word	0xfbe76c8b
 800733c:	401071a9 	.word	0x401071a9
 8007340:	916872b0 	.word	0x916872b0
 8007344:	40107ced 	.word	0x40107ced
 8007348:	26e978d5 	.word	0x26e978d5
 800734c:	40108831 	.word	0x40108831
 8007350:	bc6a7efa 	.word	0xbc6a7efa
 8007354:	40109374 	.word	0x40109374
 8007358:	76c8b439 	.word	0x76c8b439
 800735c:	40109fbe 	.word	0x40109fbe
 8007360:	0c49ba5e 	.word	0x0c49ba5e
 8007364:	4010ab02 	.word	0x4010ab02
 8007368:	a1cac083 	.word	0xa1cac083
 800736c:	4010b645 	.word	0x4010b645
 8007370:	374bc6a8 	.word	0x374bc6a8
 8007374:	4010c189 	.word	0x4010c189
 8007378:	cccccccd 	.word	0xcccccccd
 800737c:	4010cccc 	.word	0x4010cccc
 8007380:	20000430 	.word	0x20000430
 8007384:	40100000 	.word	0x40100000

08007388 <_analogRead>:

static uint32_t _analogRead(void) {
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(_hadc);
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <_analogRead+0x30>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7fb f86d 	bl	8002470 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(_hadc, _timeout);
 8007396:	4b08      	ldr	r3, [pc, #32]	; (80073b8 <_analogRead+0x30>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a08      	ldr	r2, [pc, #32]	; (80073bc <_analogRead+0x34>)
 800739c:	6812      	ldr	r2, [r2, #0]
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fb f91f 	bl	80025e4 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(_hadc);
 80073a6:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <_analogRead+0x30>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fb f9f2 	bl	8002794 <HAL_ADC_GetValue>
 80073b0:	4603      	mov	r3, r0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	2000075c 	.word	0x2000075c
 80073bc:	20000758 	.word	0x20000758

080073c0 <_analogReadToVolts>:

static float _analogReadToVolts(uint32_t readValue) {
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  float volts = 2.0f * readValue * 3.3f / 4096.0f;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80073d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007400 <_analogReadToVolts+0x40>
 80073da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80073de:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007404 <_analogReadToVolts+0x44>
 80073e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073e6:	edc7 7a03 	vstr	s15, [r7, #12]
  return volts;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	ee07 3a90 	vmov	s15, r3
}
 80073f0:	eeb0 0a67 	vmov.f32	s0, s15
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40533333 	.word	0x40533333
 8007404:	45800000 	.word	0x45800000

08007408 <_getChargeLevel>:

static int _getChargeLevel(float volts) {
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	ed87 0a01 	vstr	s0, [r7, #4]
  int idx = 50;
 8007412:	2332      	movs	r3, #50	; 0x32
 8007414:	617b      	str	r3, [r7, #20]
  int prev = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
  int half = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
  if (volts >= 4.2){
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7f9 f892 	bl	8000548 <__aeabi_f2d>
 8007424:	a323      	add	r3, pc, #140	; (adr r3, 80074b4 <_getChargeLevel+0xac>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f9 fb6b 	bl	8000b04 <__aeabi_dcmpge>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <_getChargeLevel+0x30>
    return 100;
 8007434:	2364      	movs	r3, #100	; 0x64
 8007436:	e037      	b.n	80074a8 <_getChargeLevel+0xa0>
  }
  if (volts <= 3.2){
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7f9 f885 	bl	8000548 <__aeabi_f2d>
 800743e:	a31f      	add	r3, pc, #124	; (adr r3, 80074bc <_getChargeLevel+0xb4>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f7f9 fb54 	bl	8000af0 <__aeabi_dcmple>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d100      	bne.n	8007450 <_getChargeLevel+0x48>
 800744e:	e001      	b.n	8007454 <_getChargeLevel+0x4c>
    return 0;
 8007450:	2300      	movs	r3, #0
 8007452:	e029      	b.n	80074a8 <_getChargeLevel+0xa0>
  }
  while(1){
    half = abs(idx - prev) / 2;
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	bfb8      	it	lt
 800745e:	425b      	neglt	r3, r3
 8007460:	0fda      	lsrs	r2, r3, #31
 8007462:	4413      	add	r3, r2
 8007464:	105b      	asrs	r3, r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
    prev = idx;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	613b      	str	r3, [r7, #16]
    if(volts >= _vs[idx]){
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7f9 f86b 	bl	8000548 <__aeabi_f2d>
 8007472:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <_getChargeLevel+0xa8>)
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	4413      	add	r3, r2
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 fb41 	bl	8000b04 <__aeabi_dcmpge>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <_getChargeLevel+0x8a>
      idx = idx + half;
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e003      	b.n	800749a <_getChargeLevel+0x92>
    }else{
      idx = idx - half;
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]
    }
    if (prev == idx){
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d000      	beq.n	80074a4 <_getChargeLevel+0x9c>
    half = abs(idx - prev) / 2;
 80074a2:	e7d7      	b.n	8007454 <_getChargeLevel+0x4c>
      break;
 80074a4:	bf00      	nop
    }
  }
  return idx;
 80074a6:	697b      	ldr	r3, [r7, #20]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000430 	.word	0x20000430
 80074b4:	cccccccd 	.word	0xcccccccd
 80074b8:	4010cccc 	.word	0x4010cccc
 80074bc:	9999999a 	.word	0x9999999a
 80074c0:	40099999 	.word	0x40099999

080074c4 <battery_init>:

/*
 * Public functions
 */

void battery_init(ADC_HandleTypeDef* hadc, uint32_t timeout) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	_hadc = hadc;
 80074ce:	4a08      	ldr	r2, [pc, #32]	; (80074f0 <battery_init+0x2c>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6013      	str	r3, [r2, #0]
	_timeout = timeout;
 80074d4:	4a07      	ldr	r2, [pc, #28]	; (80074f4 <battery_init+0x30>)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	6013      	str	r3, [r2, #0]
	_initVoltsArray();
 80074da:	f7ff fb55 	bl	8006b88 <_initVoltsArray>
    HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 80074de:	217f      	movs	r1, #127	; 0x7f
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fb fe8d 	bl	8003200 <HAL_ADCEx_Calibration_Start>
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	2000075c 	.word	0x2000075c
 80074f4:	20000758 	.word	0x20000758

080074f8 <battery_getBatteryChargeLevel>:


int battery_getBatteryChargeLevel(void) {
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 80074fe:	f7ff ff43 	bl	8007388 <_analogRead>
 8007502:	6178      	str	r0, [r7, #20]
    double volts = _analogReadToVolts(readValue);
 8007504:	6978      	ldr	r0, [r7, #20]
 8007506:	f7ff ff5b 	bl	80073c0 <_analogReadToVolts>
 800750a:	ee10 3a10 	vmov	r3, s0
 800750e:	4618      	mov	r0, r3
 8007510:	f7f9 f81a 	bl	8000548 <__aeabi_f2d>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int chargeLevel = _getChargeLevel(volts);
 800751c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007520:	f7f9 fb62 	bl	8000be8 <__aeabi_d2f>
 8007524:	4603      	mov	r3, r0
 8007526:	ee00 3a10 	vmov	s0, r3
 800752a:	f7ff ff6d 	bl	8007408 <_getChargeLevel>
 800752e:	6078      	str	r0, [r7, #4]
    return chargeLevel;
 8007530:	687b      	ldr	r3, [r7, #4]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <battery_getBatteryVolts>:

float battery_getBatteryVolts(void) {
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 8007540:	f7ff ff22 	bl	8007388 <_analogRead>
 8007544:	6078      	str	r0, [r7, #4]
    return _analogReadToVolts(readValue);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff ff3a 	bl	80073c0 <_analogReadToVolts>
 800754c:	eef0 7a40 	vmov.f32	s15, s0
}
 8007550:	eeb0 0a67 	vmov.f32	s0, s15
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <validateMessage>:
static uint8_t validateMessage();
static void parseGPGLLSentence();
static float changeCordsToDec(float deg_coord, char nsew);

static uint8_t validateMessage()
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0

	return (messageBuffer[0] == '$' &&
 8007560:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <validateMessage+0x48>)
 8007562:	781b      	ldrb	r3, [r3, #0]
		messageBuffer[1] == 'G' &&
		messageBuffer[2] == 'P' &&
		messageBuffer[3] == 'G' &&
		messageBuffer[4] == 'L' &&
 8007564:	2b24      	cmp	r3, #36	; 0x24
 8007566:	d115      	bne.n	8007594 <validateMessage+0x38>
		messageBuffer[1] == 'G' &&
 8007568:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <validateMessage+0x48>)
 800756a:	785b      	ldrb	r3, [r3, #1]
	return (messageBuffer[0] == '$' &&
 800756c:	2b47      	cmp	r3, #71	; 0x47
 800756e:	d111      	bne.n	8007594 <validateMessage+0x38>
		messageBuffer[2] == 'P' &&
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <validateMessage+0x48>)
 8007572:	789b      	ldrb	r3, [r3, #2]
		messageBuffer[1] == 'G' &&
 8007574:	2b50      	cmp	r3, #80	; 0x50
 8007576:	d10d      	bne.n	8007594 <validateMessage+0x38>
		messageBuffer[3] == 'G' &&
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <validateMessage+0x48>)
 800757a:	78db      	ldrb	r3, [r3, #3]
		messageBuffer[2] == 'P' &&
 800757c:	2b47      	cmp	r3, #71	; 0x47
 800757e:	d109      	bne.n	8007594 <validateMessage+0x38>
		messageBuffer[4] == 'L' &&
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <validateMessage+0x48>)
 8007582:	791b      	ldrb	r3, [r3, #4]
		messageBuffer[3] == 'G' &&
 8007584:	2b4c      	cmp	r3, #76	; 0x4c
 8007586:	d105      	bne.n	8007594 <validateMessage+0x38>
		messageBuffer[5] == 'L');
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <validateMessage+0x48>)
 800758a:	795b      	ldrb	r3, [r3, #5]
		messageBuffer[4] == 'L' &&
 800758c:	2b4c      	cmp	r3, #76	; 0x4c
 800758e:	d101      	bne.n	8007594 <validateMessage+0x38>
 8007590:	2301      	movs	r3, #1
 8007592:	e000      	b.n	8007596 <validateMessage+0x3a>
 8007594:	2300      	movs	r3, #0
 8007596:	b2db      	uxtb	r3, r3

}
 8007598:	4618      	mov	r0, r3
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000764 	.word	0x20000764

080075a8 <parseGPGLLSentence>:

static void parseGPGLLSentence()
{
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af02      	add	r7, sp, #8
	float lat, lon;
    char sn, we;
	sscanf(messageBuffer, "$GPGLL,%f,%c,%f,%c", &lat, &sn, &lon, &we);
 80075ae:	1df9      	adds	r1, r7, #7
 80075b0:	f107 020c 	add.w	r2, r7, #12
 80075b4:	1dbb      	adds	r3, r7, #6
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	f107 0308 	add.w	r3, r7, #8
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	460b      	mov	r3, r1
 80075c0:	4911      	ldr	r1, [pc, #68]	; (8007608 <parseGPGLLSentence+0x60>)
 80075c2:	4812      	ldr	r0, [pc, #72]	; (800760c <parseGPGLLSentence+0x64>)
 80075c4:	f001 f978 	bl	80088b8 <siscanf>
	currentPosition -> latitude = (float) changeCordsToDec(lat, sn);
 80075c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	4a10      	ldr	r2, [pc, #64]	; (8007610 <parseGPGLLSentence+0x68>)
 80075d0:	6814      	ldr	r4, [r2, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	eeb0 0a67 	vmov.f32	s0, s15
 80075d8:	f000 f81c 	bl	8007614 <changeCordsToDec>
 80075dc:	eef0 7a40 	vmov.f32	s15, s0
 80075e0:	edc4 7a00 	vstr	s15, [r4]
	currentPosition -> longitude = (float) changeCordsToDec(lon, we);
 80075e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80075e8:	79bb      	ldrb	r3, [r7, #6]
 80075ea:	4a09      	ldr	r2, [pc, #36]	; (8007610 <parseGPGLLSentence+0x68>)
 80075ec:	6814      	ldr	r4, [r2, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	eeb0 0a67 	vmov.f32	s0, s15
 80075f4:	f000 f80e 	bl	8007614 <changeCordsToDec>
 80075f8:	eef0 7a40 	vmov.f32	s15, s0
 80075fc:	edc4 7a01 	vstr	s15, [r4, #4]
}
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	bd90      	pop	{r4, r7, pc}
 8007608:	0800cb94 	.word	0x0800cb94
 800760c:	20000764 	.word	0x20000764
 8007610:	200007b8 	.word	0x200007b8

08007614 <changeCordsToDec>:

static float changeCordsToDec(float deg_coord, char nsew) {
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	ed87 0a01 	vstr	s0, [r7, #4]
 800761e:	4603      	mov	r3, r0
 8007620:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8007622:	ed97 7a01 	vldr	s14, [r7, #4]
 8007626:	eddf 6a20 	vldr	s13, [pc, #128]	; 80076a8 <changeCordsToDec+0x94>
 800762a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800762e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007632:	ee17 3a90 	vmov	r3, s15
 8007636:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2264      	movs	r2, #100	; 0x64
 800763c:	fb02 f303 	mul.w	r3, r2, r3
 8007640:	ee07 3a90 	vmov	s15, r3
 8007644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007648:	ed97 7a01 	vldr	s14, [r7, #4]
 800764c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007650:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8007654:	ed97 7a03 	vldr	s14, [r7, #12]
 8007658:	eddf 6a14 	vldr	s13, [pc, #80]	; 80076ac <changeCordsToDec+0x98>
 800765c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007660:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766e:	ed97 7a02 	vldr	s14, [r7, #8]
 8007672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007676:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W')
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	2b53      	cmp	r3, #83	; 0x53
 800767e:	d002      	beq.n	8007686 <changeCordsToDec+0x72>
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	2b57      	cmp	r3, #87	; 0x57
 8007684:	d105      	bne.n	8007692 <changeCordsToDec+0x7e>
    {
        decimal *= -1;
 8007686:	edd7 7a05 	vldr	s15, [r7, #20]
 800768a:	eef1 7a67 	vneg.f32	s15, s15
 800768e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	ee07 3a90 	vmov	s15, r3
}
 8007698:	eeb0 0a67 	vmov.f32	s0, s15
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	42c80000 	.word	0x42c80000
 80076ac:	42700000 	.word	0x42700000

080076b0 <GPS_Init>:
/*
 * public functions
 */

void GPS_Init(uint8_t *rxData)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	gpsDataReady = 0;
 80076b8:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <GPS_Init+0x30>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
	currentPosition = malloc(sizeof(Position));
 80076be:	2008      	movs	r0, #8
 80076c0:	f000 f8be 	bl	8007840 <malloc>
 80076c4:	4603      	mov	r3, r0
 80076c6:	461a      	mov	r2, r3
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <GPS_Init+0x34>)
 80076ca:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(GPS_USART, (uint8_t *) &rxData, 1);
 80076cc:	1d3b      	adds	r3, r7, #4
 80076ce:	2201      	movs	r2, #1
 80076d0:	4619      	mov	r1, r3
 80076d2:	4805      	ldr	r0, [pc, #20]	; (80076e8 <GPS_Init+0x38>)
 80076d4:	f7fd ffbe 	bl	8005654 <HAL_UART_Receive_IT>
}
 80076d8:	bf00      	nop
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20000760 	.word	0x20000760
 80076e4:	200007b8 	.word	0x200007b8
 80076e8:	200003a8 	.word	0x200003a8

080076ec <GPS_UART_Callback>:


void GPS_UART_Callback(uint8_t *rxData)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]

	if(mess_index == 0 && *rxData == '$')
 80076f4:	4b2e      	ldr	r3, [pc, #184]	; (80077b0 <GPS_UART_Callback+0xc4>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d111      	bne.n	8007720 <GPS_UART_Callback+0x34>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b24      	cmp	r3, #36	; 0x24
 8007702:	d10d      	bne.n	8007720 <GPS_UART_Callback+0x34>
	{
		messageBuffer[mess_index] = *rxData;
 8007704:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7819      	ldrb	r1, [r3, #0]
 800770e:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <GPS_UART_Callback+0xc8>)
 8007710:	5499      	strb	r1, [r3, r2]
		++mess_index;
 8007712:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	3301      	adds	r3, #1
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <GPS_UART_Callback+0xc4>)
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e039      	b.n	8007794 <GPS_UART_Callback+0xa8>
	}
	else if (mess_index >= 1 && mess_index < sizeof(messageBuffer))
 8007720:	4b23      	ldr	r3, [pc, #140]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d032      	beq.n	800778e <GPS_UART_Callback+0xa2>
 8007728:	4b21      	ldr	r3, [pc, #132]	; (80077b0 <GPS_UART_Callback+0xc4>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b4f      	cmp	r3, #79	; 0x4f
 800772e:	d82e      	bhi.n	800778e <GPS_UART_Callback+0xa2>
	{
		if(*rxData == '\n' || *rxData == '\r')
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b0a      	cmp	r3, #10
 8007736:	d003      	beq.n	8007740 <GPS_UART_Callback+0x54>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b0d      	cmp	r3, #13
 800773e:	d118      	bne.n	8007772 <GPS_UART_Callback+0x86>
		{
			messageBuffer[mess_index] = '\0';
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <GPS_UART_Callback+0xc8>)
 8007748:	2100      	movs	r1, #0
 800774a:	5499      	strb	r1, [r3, r2]
			if(validateMessage())
 800774c:	f7ff ff06 	bl	800755c <validateMessage>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <GPS_UART_Callback+0x74>
			{
				parseGPGLLSentence();
 8007756:	f7ff ff27 	bl	80075a8 <parseGPGLLSentence>
				gpsDataReady = 1;
 800775a:	4b17      	ldr	r3, [pc, #92]	; (80077b8 <GPS_UART_Callback+0xcc>)
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
			}
			mess_index = 0;
 8007760:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
			memset(messageBuffer, 0 , sizeof(messageBuffer));
 8007766:	2250      	movs	r2, #80	; 0x50
 8007768:	2100      	movs	r1, #0
 800776a:	4812      	ldr	r0, [pc, #72]	; (80077b4 <GPS_UART_Callback+0xc8>)
 800776c:	f000 f87e 	bl	800786c <memset>
		if(*rxData == '\n' || *rxData == '\r')
 8007770:	e010      	b.n	8007794 <GPS_UART_Callback+0xa8>
		}
		else
		{
			messageBuffer[mess_index] = *rxData;
 8007772:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7819      	ldrb	r1, [r3, #0]
 800777c:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <GPS_UART_Callback+0xc8>)
 800777e:	5499      	strb	r1, [r3, r2]
			++mess_index;
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	b2da      	uxtb	r2, r3
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <GPS_UART_Callback+0xc4>)
 800778a:	701a      	strb	r2, [r3, #0]
		if(*rxData == '\n' || *rxData == '\r')
 800778c:	e002      	b.n	8007794 <GPS_UART_Callback+0xa8>
		}
	}
	else
	{
		mess_index = 0;
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <GPS_UART_Callback+0xc4>)
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
	}

	if(gpsDataReady == 0)
 8007794:	4b08      	ldr	r3, [pc, #32]	; (80077b8 <GPS_UART_Callback+0xcc>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <GPS_UART_Callback+0xba>
	{
		HAL_UART_Receive_IT(GPS_USART, (uint8_t *) rxData, 1);
 800779c:	2201      	movs	r2, #1
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	4806      	ldr	r0, [pc, #24]	; (80077bc <GPS_UART_Callback+0xd0>)
 80077a2:	f7fd ff57 	bl	8005654 <HAL_UART_Receive_IT>
	}
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200007b4 	.word	0x200007b4
 80077b4:	20000764 	.word	0x20000764
 80077b8:	20000760 	.word	0x20000760
 80077bc:	200003a8 	.word	0x200003a8

080077c0 <GPS_getCurrentPosition>:


void GPS_getCurrentPosition(Position *const position)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	memcpy(position, currentPosition, sizeof(Position));
 80077c8:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <GPS_getCurrentPosition+0x24>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2208      	movs	r2, #8
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f83d 	bl	8007850 <memcpy>
	gpsDataReady = 0;
 80077d6:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <GPS_getCurrentPosition+0x28>)
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	200007b8 	.word	0x200007b8
 80077e8:	20000760 	.word	0x20000760

080077ec <__errno>:
 80077ec:	4b01      	ldr	r3, [pc, #4]	; (80077f4 <__errno+0x8>)
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000000c 	.word	0x2000000c

080077f8 <__libc_init_array>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4d0d      	ldr	r5, [pc, #52]	; (8007830 <__libc_init_array+0x38>)
 80077fc:	4c0d      	ldr	r4, [pc, #52]	; (8007834 <__libc_init_array+0x3c>)
 80077fe:	1b64      	subs	r4, r4, r5
 8007800:	10a4      	asrs	r4, r4, #2
 8007802:	2600      	movs	r6, #0
 8007804:	42a6      	cmp	r6, r4
 8007806:	d109      	bne.n	800781c <__libc_init_array+0x24>
 8007808:	4d0b      	ldr	r5, [pc, #44]	; (8007838 <__libc_init_array+0x40>)
 800780a:	4c0c      	ldr	r4, [pc, #48]	; (800783c <__libc_init_array+0x44>)
 800780c:	f005 f956 	bl	800cabc <_init>
 8007810:	1b64      	subs	r4, r4, r5
 8007812:	10a4      	asrs	r4, r4, #2
 8007814:	2600      	movs	r6, #0
 8007816:	42a6      	cmp	r6, r4
 8007818:	d105      	bne.n	8007826 <__libc_init_array+0x2e>
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007820:	4798      	blx	r3
 8007822:	3601      	adds	r6, #1
 8007824:	e7ee      	b.n	8007804 <__libc_init_array+0xc>
 8007826:	f855 3b04 	ldr.w	r3, [r5], #4
 800782a:	4798      	blx	r3
 800782c:	3601      	adds	r6, #1
 800782e:	e7f2      	b.n	8007816 <__libc_init_array+0x1e>
 8007830:	0800d0c4 	.word	0x0800d0c4
 8007834:	0800d0c4 	.word	0x0800d0c4
 8007838:	0800d0c4 	.word	0x0800d0c4
 800783c:	0800d0c8 	.word	0x0800d0c8

08007840 <malloc>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <malloc+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f000 b885 	b.w	8007954 <_malloc_r>
 800784a:	bf00      	nop
 800784c:	2000000c 	.word	0x2000000c

08007850 <memcpy>:
 8007850:	440a      	add	r2, r1
 8007852:	4291      	cmp	r1, r2
 8007854:	f100 33ff 	add.w	r3, r0, #4294967295
 8007858:	d100      	bne.n	800785c <memcpy+0xc>
 800785a:	4770      	bx	lr
 800785c:	b510      	push	{r4, lr}
 800785e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007866:	4291      	cmp	r1, r2
 8007868:	d1f9      	bne.n	800785e <memcpy+0xe>
 800786a:	bd10      	pop	{r4, pc}

0800786c <memset>:
 800786c:	4402      	add	r2, r0
 800786e:	4603      	mov	r3, r0
 8007870:	4293      	cmp	r3, r2
 8007872:	d100      	bne.n	8007876 <memset+0xa>
 8007874:	4770      	bx	lr
 8007876:	f803 1b01 	strb.w	r1, [r3], #1
 800787a:	e7f9      	b.n	8007870 <memset+0x4>

0800787c <_free_r>:
 800787c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800787e:	2900      	cmp	r1, #0
 8007880:	d044      	beq.n	800790c <_free_r+0x90>
 8007882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007886:	9001      	str	r0, [sp, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f1a1 0404 	sub.w	r4, r1, #4
 800788e:	bfb8      	it	lt
 8007890:	18e4      	addlt	r4, r4, r3
 8007892:	f003 fc47 	bl	800b124 <__malloc_lock>
 8007896:	4a1e      	ldr	r2, [pc, #120]	; (8007910 <_free_r+0x94>)
 8007898:	9801      	ldr	r0, [sp, #4]
 800789a:	6813      	ldr	r3, [r2, #0]
 800789c:	b933      	cbnz	r3, 80078ac <_free_r+0x30>
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	6014      	str	r4, [r2, #0]
 80078a2:	b003      	add	sp, #12
 80078a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078a8:	f003 bc42 	b.w	800b130 <__malloc_unlock>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d908      	bls.n	80078c2 <_free_r+0x46>
 80078b0:	6825      	ldr	r5, [r4, #0]
 80078b2:	1961      	adds	r1, r4, r5
 80078b4:	428b      	cmp	r3, r1
 80078b6:	bf01      	itttt	eq
 80078b8:	6819      	ldreq	r1, [r3, #0]
 80078ba:	685b      	ldreq	r3, [r3, #4]
 80078bc:	1949      	addeq	r1, r1, r5
 80078be:	6021      	streq	r1, [r4, #0]
 80078c0:	e7ed      	b.n	800789e <_free_r+0x22>
 80078c2:	461a      	mov	r2, r3
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	b10b      	cbz	r3, 80078cc <_free_r+0x50>
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	d9fa      	bls.n	80078c2 <_free_r+0x46>
 80078cc:	6811      	ldr	r1, [r2, #0]
 80078ce:	1855      	adds	r5, r2, r1
 80078d0:	42a5      	cmp	r5, r4
 80078d2:	d10b      	bne.n	80078ec <_free_r+0x70>
 80078d4:	6824      	ldr	r4, [r4, #0]
 80078d6:	4421      	add	r1, r4
 80078d8:	1854      	adds	r4, r2, r1
 80078da:	42a3      	cmp	r3, r4
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	d1e0      	bne.n	80078a2 <_free_r+0x26>
 80078e0:	681c      	ldr	r4, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	6053      	str	r3, [r2, #4]
 80078e6:	4421      	add	r1, r4
 80078e8:	6011      	str	r1, [r2, #0]
 80078ea:	e7da      	b.n	80078a2 <_free_r+0x26>
 80078ec:	d902      	bls.n	80078f4 <_free_r+0x78>
 80078ee:	230c      	movs	r3, #12
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	e7d6      	b.n	80078a2 <_free_r+0x26>
 80078f4:	6825      	ldr	r5, [r4, #0]
 80078f6:	1961      	adds	r1, r4, r5
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf04      	itt	eq
 80078fc:	6819      	ldreq	r1, [r3, #0]
 80078fe:	685b      	ldreq	r3, [r3, #4]
 8007900:	6063      	str	r3, [r4, #4]
 8007902:	bf04      	itt	eq
 8007904:	1949      	addeq	r1, r1, r5
 8007906:	6021      	streq	r1, [r4, #0]
 8007908:	6054      	str	r4, [r2, #4]
 800790a:	e7ca      	b.n	80078a2 <_free_r+0x26>
 800790c:	b003      	add	sp, #12
 800790e:	bd30      	pop	{r4, r5, pc}
 8007910:	200007bc 	.word	0x200007bc

08007914 <sbrk_aligned>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	4e0e      	ldr	r6, [pc, #56]	; (8007950 <sbrk_aligned+0x3c>)
 8007918:	460c      	mov	r4, r1
 800791a:	6831      	ldr	r1, [r6, #0]
 800791c:	4605      	mov	r5, r0
 800791e:	b911      	cbnz	r1, 8007926 <sbrk_aligned+0x12>
 8007920:	f000 ff94 	bl	800884c <_sbrk_r>
 8007924:	6030      	str	r0, [r6, #0]
 8007926:	4621      	mov	r1, r4
 8007928:	4628      	mov	r0, r5
 800792a:	f000 ff8f 	bl	800884c <_sbrk_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	d00a      	beq.n	8007948 <sbrk_aligned+0x34>
 8007932:	1cc4      	adds	r4, r0, #3
 8007934:	f024 0403 	bic.w	r4, r4, #3
 8007938:	42a0      	cmp	r0, r4
 800793a:	d007      	beq.n	800794c <sbrk_aligned+0x38>
 800793c:	1a21      	subs	r1, r4, r0
 800793e:	4628      	mov	r0, r5
 8007940:	f000 ff84 	bl	800884c <_sbrk_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d101      	bne.n	800794c <sbrk_aligned+0x38>
 8007948:	f04f 34ff 	mov.w	r4, #4294967295
 800794c:	4620      	mov	r0, r4
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	200007c0 	.word	0x200007c0

08007954 <_malloc_r>:
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	1ccd      	adds	r5, r1, #3
 800795a:	f025 0503 	bic.w	r5, r5, #3
 800795e:	3508      	adds	r5, #8
 8007960:	2d0c      	cmp	r5, #12
 8007962:	bf38      	it	cc
 8007964:	250c      	movcc	r5, #12
 8007966:	2d00      	cmp	r5, #0
 8007968:	4607      	mov	r7, r0
 800796a:	db01      	blt.n	8007970 <_malloc_r+0x1c>
 800796c:	42a9      	cmp	r1, r5
 800796e:	d905      	bls.n	800797c <_malloc_r+0x28>
 8007970:	230c      	movs	r3, #12
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	2600      	movs	r6, #0
 8007976:	4630      	mov	r0, r6
 8007978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800797c:	4e2e      	ldr	r6, [pc, #184]	; (8007a38 <_malloc_r+0xe4>)
 800797e:	f003 fbd1 	bl	800b124 <__malloc_lock>
 8007982:	6833      	ldr	r3, [r6, #0]
 8007984:	461c      	mov	r4, r3
 8007986:	bb34      	cbnz	r4, 80079d6 <_malloc_r+0x82>
 8007988:	4629      	mov	r1, r5
 800798a:	4638      	mov	r0, r7
 800798c:	f7ff ffc2 	bl	8007914 <sbrk_aligned>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	4604      	mov	r4, r0
 8007994:	d14d      	bne.n	8007a32 <_malloc_r+0xde>
 8007996:	6834      	ldr	r4, [r6, #0]
 8007998:	4626      	mov	r6, r4
 800799a:	2e00      	cmp	r6, #0
 800799c:	d140      	bne.n	8007a20 <_malloc_r+0xcc>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	4631      	mov	r1, r6
 80079a2:	4638      	mov	r0, r7
 80079a4:	eb04 0803 	add.w	r8, r4, r3
 80079a8:	f000 ff50 	bl	800884c <_sbrk_r>
 80079ac:	4580      	cmp	r8, r0
 80079ae:	d13a      	bne.n	8007a26 <_malloc_r+0xd2>
 80079b0:	6821      	ldr	r1, [r4, #0]
 80079b2:	3503      	adds	r5, #3
 80079b4:	1a6d      	subs	r5, r5, r1
 80079b6:	f025 0503 	bic.w	r5, r5, #3
 80079ba:	3508      	adds	r5, #8
 80079bc:	2d0c      	cmp	r5, #12
 80079be:	bf38      	it	cc
 80079c0:	250c      	movcc	r5, #12
 80079c2:	4629      	mov	r1, r5
 80079c4:	4638      	mov	r0, r7
 80079c6:	f7ff ffa5 	bl	8007914 <sbrk_aligned>
 80079ca:	3001      	adds	r0, #1
 80079cc:	d02b      	beq.n	8007a26 <_malloc_r+0xd2>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	442b      	add	r3, r5
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	e00e      	b.n	80079f4 <_malloc_r+0xa0>
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	1b52      	subs	r2, r2, r5
 80079da:	d41e      	bmi.n	8007a1a <_malloc_r+0xc6>
 80079dc:	2a0b      	cmp	r2, #11
 80079de:	d916      	bls.n	8007a0e <_malloc_r+0xba>
 80079e0:	1961      	adds	r1, r4, r5
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	6025      	str	r5, [r4, #0]
 80079e6:	bf18      	it	ne
 80079e8:	6059      	strne	r1, [r3, #4]
 80079ea:	6863      	ldr	r3, [r4, #4]
 80079ec:	bf08      	it	eq
 80079ee:	6031      	streq	r1, [r6, #0]
 80079f0:	5162      	str	r2, [r4, r5]
 80079f2:	604b      	str	r3, [r1, #4]
 80079f4:	4638      	mov	r0, r7
 80079f6:	f104 060b 	add.w	r6, r4, #11
 80079fa:	f003 fb99 	bl	800b130 <__malloc_unlock>
 80079fe:	f026 0607 	bic.w	r6, r6, #7
 8007a02:	1d23      	adds	r3, r4, #4
 8007a04:	1af2      	subs	r2, r6, r3
 8007a06:	d0b6      	beq.n	8007976 <_malloc_r+0x22>
 8007a08:	1b9b      	subs	r3, r3, r6
 8007a0a:	50a3      	str	r3, [r4, r2]
 8007a0c:	e7b3      	b.n	8007976 <_malloc_r+0x22>
 8007a0e:	6862      	ldr	r2, [r4, #4]
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	bf0c      	ite	eq
 8007a14:	6032      	streq	r2, [r6, #0]
 8007a16:	605a      	strne	r2, [r3, #4]
 8007a18:	e7ec      	b.n	80079f4 <_malloc_r+0xa0>
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	6864      	ldr	r4, [r4, #4]
 8007a1e:	e7b2      	b.n	8007986 <_malloc_r+0x32>
 8007a20:	4634      	mov	r4, r6
 8007a22:	6876      	ldr	r6, [r6, #4]
 8007a24:	e7b9      	b.n	800799a <_malloc_r+0x46>
 8007a26:	230c      	movs	r3, #12
 8007a28:	603b      	str	r3, [r7, #0]
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f003 fb80 	bl	800b130 <__malloc_unlock>
 8007a30:	e7a1      	b.n	8007976 <_malloc_r+0x22>
 8007a32:	6025      	str	r5, [r4, #0]
 8007a34:	e7de      	b.n	80079f4 <_malloc_r+0xa0>
 8007a36:	bf00      	nop
 8007a38:	200007bc 	.word	0x200007bc

08007a3c <__cvt>:
 8007a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	ec55 4b10 	vmov	r4, r5, d0
 8007a44:	2d00      	cmp	r5, #0
 8007a46:	460e      	mov	r6, r1
 8007a48:	4619      	mov	r1, r3
 8007a4a:	462b      	mov	r3, r5
 8007a4c:	bfbb      	ittet	lt
 8007a4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a52:	461d      	movlt	r5, r3
 8007a54:	2300      	movge	r3, #0
 8007a56:	232d      	movlt	r3, #45	; 0x2d
 8007a58:	700b      	strb	r3, [r1, #0]
 8007a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a60:	4691      	mov	r9, r2
 8007a62:	f023 0820 	bic.w	r8, r3, #32
 8007a66:	bfbc      	itt	lt
 8007a68:	4622      	movlt	r2, r4
 8007a6a:	4614      	movlt	r4, r2
 8007a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a70:	d005      	beq.n	8007a7e <__cvt+0x42>
 8007a72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a76:	d100      	bne.n	8007a7a <__cvt+0x3e>
 8007a78:	3601      	adds	r6, #1
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	e000      	b.n	8007a80 <__cvt+0x44>
 8007a7e:	2103      	movs	r1, #3
 8007a80:	ab03      	add	r3, sp, #12
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	ab02      	add	r3, sp, #8
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	ec45 4b10 	vmov	d0, r4, r5
 8007a8c:	4653      	mov	r3, sl
 8007a8e:	4632      	mov	r2, r6
 8007a90:	f001 ffa2 	bl	80099d8 <_dtoa_r>
 8007a94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a98:	4607      	mov	r7, r0
 8007a9a:	d102      	bne.n	8007aa2 <__cvt+0x66>
 8007a9c:	f019 0f01 	tst.w	r9, #1
 8007aa0:	d022      	beq.n	8007ae8 <__cvt+0xac>
 8007aa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007aa6:	eb07 0906 	add.w	r9, r7, r6
 8007aaa:	d110      	bne.n	8007ace <__cvt+0x92>
 8007aac:	783b      	ldrb	r3, [r7, #0]
 8007aae:	2b30      	cmp	r3, #48	; 0x30
 8007ab0:	d10a      	bne.n	8007ac8 <__cvt+0x8c>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f9 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8007abe:	b918      	cbnz	r0, 8007ac8 <__cvt+0x8c>
 8007ac0:	f1c6 0601 	rsb	r6, r6, #1
 8007ac4:	f8ca 6000 	str.w	r6, [sl]
 8007ac8:	f8da 3000 	ldr.w	r3, [sl]
 8007acc:	4499      	add	r9, r3
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	f7f8 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ada:	b108      	cbz	r0, 8007ae0 <__cvt+0xa4>
 8007adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ae0:	2230      	movs	r2, #48	; 0x30
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	454b      	cmp	r3, r9
 8007ae6:	d307      	bcc.n	8007af8 <__cvt+0xbc>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007aec:	1bdb      	subs	r3, r3, r7
 8007aee:	4638      	mov	r0, r7
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	b004      	add	sp, #16
 8007af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af8:	1c59      	adds	r1, r3, #1
 8007afa:	9103      	str	r1, [sp, #12]
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	e7f0      	b.n	8007ae2 <__cvt+0xa6>

08007b00 <__exponent>:
 8007b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b02:	4603      	mov	r3, r0
 8007b04:	2900      	cmp	r1, #0
 8007b06:	bfb8      	it	lt
 8007b08:	4249      	neglt	r1, r1
 8007b0a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b0e:	bfb4      	ite	lt
 8007b10:	222d      	movlt	r2, #45	; 0x2d
 8007b12:	222b      	movge	r2, #43	; 0x2b
 8007b14:	2909      	cmp	r1, #9
 8007b16:	7042      	strb	r2, [r0, #1]
 8007b18:	dd2a      	ble.n	8007b70 <__exponent+0x70>
 8007b1a:	f10d 0407 	add.w	r4, sp, #7
 8007b1e:	46a4      	mov	ip, r4
 8007b20:	270a      	movs	r7, #10
 8007b22:	46a6      	mov	lr, r4
 8007b24:	460a      	mov	r2, r1
 8007b26:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b2a:	fb07 1516 	mls	r5, r7, r6, r1
 8007b2e:	3530      	adds	r5, #48	; 0x30
 8007b30:	2a63      	cmp	r2, #99	; 0x63
 8007b32:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	dcf1      	bgt.n	8007b22 <__exponent+0x22>
 8007b3e:	3130      	adds	r1, #48	; 0x30
 8007b40:	f1ae 0502 	sub.w	r5, lr, #2
 8007b44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b48:	1c44      	adds	r4, r0, #1
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4561      	cmp	r1, ip
 8007b4e:	d30a      	bcc.n	8007b66 <__exponent+0x66>
 8007b50:	f10d 0209 	add.w	r2, sp, #9
 8007b54:	eba2 020e 	sub.w	r2, r2, lr
 8007b58:	4565      	cmp	r5, ip
 8007b5a:	bf88      	it	hi
 8007b5c:	2200      	movhi	r2, #0
 8007b5e:	4413      	add	r3, r2
 8007b60:	1a18      	subs	r0, r3, r0
 8007b62:	b003      	add	sp, #12
 8007b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b6e:	e7ed      	b.n	8007b4c <__exponent+0x4c>
 8007b70:	2330      	movs	r3, #48	; 0x30
 8007b72:	3130      	adds	r1, #48	; 0x30
 8007b74:	7083      	strb	r3, [r0, #2]
 8007b76:	70c1      	strb	r1, [r0, #3]
 8007b78:	1d03      	adds	r3, r0, #4
 8007b7a:	e7f1      	b.n	8007b60 <__exponent+0x60>

08007b7c <_printf_float>:
 8007b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	ed2d 8b02 	vpush	{d8}
 8007b84:	b08d      	sub	sp, #52	; 0x34
 8007b86:	460c      	mov	r4, r1
 8007b88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b8c:	4616      	mov	r6, r2
 8007b8e:	461f      	mov	r7, r3
 8007b90:	4605      	mov	r5, r0
 8007b92:	f003 fa35 	bl	800b000 <_localeconv_r>
 8007b96:	f8d0 a000 	ldr.w	sl, [r0]
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	f7f8 fb18 	bl	80001d0 <strlen>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	9305      	str	r3, [sp, #20]
 8007ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bb0:	3307      	adds	r3, #7
 8007bb2:	f023 0307 	bic.w	r3, r3, #7
 8007bb6:	f103 0208 	add.w	r2, r3, #8
 8007bba:	f8c8 2000 	str.w	r2, [r8]
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bce:	9307      	str	r3, [sp, #28]
 8007bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bd4:	ee08 0a10 	vmov	s16, r0
 8007bd8:	4b9f      	ldr	r3, [pc, #636]	; (8007e58 <_printf_float+0x2dc>)
 8007bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295
 8007be2:	f7f8 ffa3 	bl	8000b2c <__aeabi_dcmpun>
 8007be6:	bb88      	cbnz	r0, 8007c4c <_printf_float+0xd0>
 8007be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bec:	4b9a      	ldr	r3, [pc, #616]	; (8007e58 <_printf_float+0x2dc>)
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	f7f8 ff7d 	bl	8000af0 <__aeabi_dcmple>
 8007bf6:	bb48      	cbnz	r0, 8007c4c <_printf_float+0xd0>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4640      	mov	r0, r8
 8007bfe:	4649      	mov	r1, r9
 8007c00:	f7f8 ff6c 	bl	8000adc <__aeabi_dcmplt>
 8007c04:	b110      	cbz	r0, 8007c0c <_printf_float+0x90>
 8007c06:	232d      	movs	r3, #45	; 0x2d
 8007c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c0c:	4b93      	ldr	r3, [pc, #588]	; (8007e5c <_printf_float+0x2e0>)
 8007c0e:	4894      	ldr	r0, [pc, #592]	; (8007e60 <_printf_float+0x2e4>)
 8007c10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c14:	bf94      	ite	ls
 8007c16:	4698      	movls	r8, r3
 8007c18:	4680      	movhi	r8, r0
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	6123      	str	r3, [r4, #16]
 8007c1e:	9b05      	ldr	r3, [sp, #20]
 8007c20:	f023 0204 	bic.w	r2, r3, #4
 8007c24:	6022      	str	r2, [r4, #0]
 8007c26:	f04f 0900 	mov.w	r9, #0
 8007c2a:	9700      	str	r7, [sp, #0]
 8007c2c:	4633      	mov	r3, r6
 8007c2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c30:	4621      	mov	r1, r4
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 f9d8 	bl	8007fe8 <_printf_common>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f040 8090 	bne.w	8007d5e <_printf_float+0x1e2>
 8007c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c42:	b00d      	add	sp, #52	; 0x34
 8007c44:	ecbd 8b02 	vpop	{d8}
 8007c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	464b      	mov	r3, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	4649      	mov	r1, r9
 8007c54:	f7f8 ff6a 	bl	8000b2c <__aeabi_dcmpun>
 8007c58:	b140      	cbz	r0, 8007c6c <_printf_float+0xf0>
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bfbc      	itt	lt
 8007c60:	232d      	movlt	r3, #45	; 0x2d
 8007c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c66:	487f      	ldr	r0, [pc, #508]	; (8007e64 <_printf_float+0x2e8>)
 8007c68:	4b7f      	ldr	r3, [pc, #508]	; (8007e68 <_printf_float+0x2ec>)
 8007c6a:	e7d1      	b.n	8007c10 <_printf_float+0x94>
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c72:	9206      	str	r2, [sp, #24]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	d13f      	bne.n	8007cf8 <_printf_float+0x17c>
 8007c78:	2306      	movs	r3, #6
 8007c7a:	6063      	str	r3, [r4, #4]
 8007c7c:	9b05      	ldr	r3, [sp, #20]
 8007c7e:	6861      	ldr	r1, [r4, #4]
 8007c80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c84:	2300      	movs	r3, #0
 8007c86:	9303      	str	r3, [sp, #12]
 8007c88:	ab0a      	add	r3, sp, #40	; 0x28
 8007c8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c8e:	ab09      	add	r3, sp, #36	; 0x24
 8007c90:	ec49 8b10 	vmov	d0, r8, r9
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	6022      	str	r2, [r4, #0]
 8007c98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7ff fecd 	bl	8007a3c <__cvt>
 8007ca2:	9b06      	ldr	r3, [sp, #24]
 8007ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ca6:	2b47      	cmp	r3, #71	; 0x47
 8007ca8:	4680      	mov	r8, r0
 8007caa:	d108      	bne.n	8007cbe <_printf_float+0x142>
 8007cac:	1cc8      	adds	r0, r1, #3
 8007cae:	db02      	blt.n	8007cb6 <_printf_float+0x13a>
 8007cb0:	6863      	ldr	r3, [r4, #4]
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	dd41      	ble.n	8007d3a <_printf_float+0x1be>
 8007cb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007cba:	fa5f fb8b 	uxtb.w	fp, fp
 8007cbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cc2:	d820      	bhi.n	8007d06 <_printf_float+0x18a>
 8007cc4:	3901      	subs	r1, #1
 8007cc6:	465a      	mov	r2, fp
 8007cc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ccc:	9109      	str	r1, [sp, #36]	; 0x24
 8007cce:	f7ff ff17 	bl	8007b00 <__exponent>
 8007cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd4:	1813      	adds	r3, r2, r0
 8007cd6:	2a01      	cmp	r2, #1
 8007cd8:	4681      	mov	r9, r0
 8007cda:	6123      	str	r3, [r4, #16]
 8007cdc:	dc02      	bgt.n	8007ce4 <_printf_float+0x168>
 8007cde:	6822      	ldr	r2, [r4, #0]
 8007ce0:	07d2      	lsls	r2, r2, #31
 8007ce2:	d501      	bpl.n	8007ce8 <_printf_float+0x16c>
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	6123      	str	r3, [r4, #16]
 8007ce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d09c      	beq.n	8007c2a <_printf_float+0xae>
 8007cf0:	232d      	movs	r3, #45	; 0x2d
 8007cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf6:	e798      	b.n	8007c2a <_printf_float+0xae>
 8007cf8:	9a06      	ldr	r2, [sp, #24]
 8007cfa:	2a47      	cmp	r2, #71	; 0x47
 8007cfc:	d1be      	bne.n	8007c7c <_printf_float+0x100>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1bc      	bne.n	8007c7c <_printf_float+0x100>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e7b9      	b.n	8007c7a <_printf_float+0xfe>
 8007d06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d0a:	d118      	bne.n	8007d3e <_printf_float+0x1c2>
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	6863      	ldr	r3, [r4, #4]
 8007d10:	dd0b      	ble.n	8007d2a <_printf_float+0x1ae>
 8007d12:	6121      	str	r1, [r4, #16]
 8007d14:	b913      	cbnz	r3, 8007d1c <_printf_float+0x1a0>
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	07d0      	lsls	r0, r2, #31
 8007d1a:	d502      	bpl.n	8007d22 <_printf_float+0x1a6>
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	440b      	add	r3, r1
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d24:	f04f 0900 	mov.w	r9, #0
 8007d28:	e7de      	b.n	8007ce8 <_printf_float+0x16c>
 8007d2a:	b913      	cbnz	r3, 8007d32 <_printf_float+0x1b6>
 8007d2c:	6822      	ldr	r2, [r4, #0]
 8007d2e:	07d2      	lsls	r2, r2, #31
 8007d30:	d501      	bpl.n	8007d36 <_printf_float+0x1ba>
 8007d32:	3302      	adds	r3, #2
 8007d34:	e7f4      	b.n	8007d20 <_printf_float+0x1a4>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e7f2      	b.n	8007d20 <_printf_float+0x1a4>
 8007d3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d40:	4299      	cmp	r1, r3
 8007d42:	db05      	blt.n	8007d50 <_printf_float+0x1d4>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	6121      	str	r1, [r4, #16]
 8007d48:	07d8      	lsls	r0, r3, #31
 8007d4a:	d5ea      	bpl.n	8007d22 <_printf_float+0x1a6>
 8007d4c:	1c4b      	adds	r3, r1, #1
 8007d4e:	e7e7      	b.n	8007d20 <_printf_float+0x1a4>
 8007d50:	2900      	cmp	r1, #0
 8007d52:	bfd4      	ite	le
 8007d54:	f1c1 0202 	rsble	r2, r1, #2
 8007d58:	2201      	movgt	r2, #1
 8007d5a:	4413      	add	r3, r2
 8007d5c:	e7e0      	b.n	8007d20 <_printf_float+0x1a4>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	055a      	lsls	r2, r3, #21
 8007d62:	d407      	bmi.n	8007d74 <_printf_float+0x1f8>
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	4642      	mov	r2, r8
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	47b8      	blx	r7
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d12c      	bne.n	8007dcc <_printf_float+0x250>
 8007d72:	e764      	b.n	8007c3e <_printf_float+0xc2>
 8007d74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d78:	f240 80e0 	bls.w	8007f3c <_printf_float+0x3c0>
 8007d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d80:	2200      	movs	r2, #0
 8007d82:	2300      	movs	r3, #0
 8007d84:	f7f8 fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d034      	beq.n	8007df6 <_printf_float+0x27a>
 8007d8c:	4a37      	ldr	r2, [pc, #220]	; (8007e6c <_printf_float+0x2f0>)
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af51 	beq.w	8007c3e <_printf_float+0xc2>
 8007d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007da0:	429a      	cmp	r2, r3
 8007da2:	db02      	blt.n	8007daa <_printf_float+0x22e>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	07d8      	lsls	r0, r3, #31
 8007da8:	d510      	bpl.n	8007dcc <_printf_float+0x250>
 8007daa:	ee18 3a10 	vmov	r3, s16
 8007dae:	4652      	mov	r2, sl
 8007db0:	4631      	mov	r1, r6
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b8      	blx	r7
 8007db6:	3001      	adds	r0, #1
 8007db8:	f43f af41 	beq.w	8007c3e <_printf_float+0xc2>
 8007dbc:	f04f 0800 	mov.w	r8, #0
 8007dc0:	f104 091a 	add.w	r9, r4, #26
 8007dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	4543      	cmp	r3, r8
 8007dca:	dc09      	bgt.n	8007de0 <_printf_float+0x264>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	079b      	lsls	r3, r3, #30
 8007dd0:	f100 8105 	bmi.w	8007fde <_printf_float+0x462>
 8007dd4:	68e0      	ldr	r0, [r4, #12]
 8007dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd8:	4298      	cmp	r0, r3
 8007dda:	bfb8      	it	lt
 8007ddc:	4618      	movlt	r0, r3
 8007dde:	e730      	b.n	8007c42 <_printf_float+0xc6>
 8007de0:	2301      	movs	r3, #1
 8007de2:	464a      	mov	r2, r9
 8007de4:	4631      	mov	r1, r6
 8007de6:	4628      	mov	r0, r5
 8007de8:	47b8      	blx	r7
 8007dea:	3001      	adds	r0, #1
 8007dec:	f43f af27 	beq.w	8007c3e <_printf_float+0xc2>
 8007df0:	f108 0801 	add.w	r8, r8, #1
 8007df4:	e7e6      	b.n	8007dc4 <_printf_float+0x248>
 8007df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dc39      	bgt.n	8007e70 <_printf_float+0x2f4>
 8007dfc:	4a1b      	ldr	r2, [pc, #108]	; (8007e6c <_printf_float+0x2f0>)
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f af19 	beq.w	8007c3e <_printf_float+0xc2>
 8007e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e10:	4313      	orrs	r3, r2
 8007e12:	d102      	bne.n	8007e1a <_printf_float+0x29e>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	07d9      	lsls	r1, r3, #31
 8007e18:	d5d8      	bpl.n	8007dcc <_printf_float+0x250>
 8007e1a:	ee18 3a10 	vmov	r3, s16
 8007e1e:	4652      	mov	r2, sl
 8007e20:	4631      	mov	r1, r6
 8007e22:	4628      	mov	r0, r5
 8007e24:	47b8      	blx	r7
 8007e26:	3001      	adds	r0, #1
 8007e28:	f43f af09 	beq.w	8007c3e <_printf_float+0xc2>
 8007e2c:	f04f 0900 	mov.w	r9, #0
 8007e30:	f104 0a1a 	add.w	sl, r4, #26
 8007e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e36:	425b      	negs	r3, r3
 8007e38:	454b      	cmp	r3, r9
 8007e3a:	dc01      	bgt.n	8007e40 <_printf_float+0x2c4>
 8007e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3e:	e792      	b.n	8007d66 <_printf_float+0x1ea>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4652      	mov	r2, sl
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f aef7 	beq.w	8007c3e <_printf_float+0xc2>
 8007e50:	f109 0901 	add.w	r9, r9, #1
 8007e54:	e7ee      	b.n	8007e34 <_printf_float+0x2b8>
 8007e56:	bf00      	nop
 8007e58:	7fefffff 	.word	0x7fefffff
 8007e5c:	0800cc00 	.word	0x0800cc00
 8007e60:	0800cc04 	.word	0x0800cc04
 8007e64:	0800cc0c 	.word	0x0800cc0c
 8007e68:	0800cc08 	.word	0x0800cc08
 8007e6c:	0800d069 	.word	0x0800d069
 8007e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e74:	429a      	cmp	r2, r3
 8007e76:	bfa8      	it	ge
 8007e78:	461a      	movge	r2, r3
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	4691      	mov	r9, r2
 8007e7e:	dc37      	bgt.n	8007ef0 <_printf_float+0x374>
 8007e80:	f04f 0b00 	mov.w	fp, #0
 8007e84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e88:	f104 021a 	add.w	r2, r4, #26
 8007e8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	eba3 0309 	sub.w	r3, r3, r9
 8007e94:	455b      	cmp	r3, fp
 8007e96:	dc33      	bgt.n	8007f00 <_printf_float+0x384>
 8007e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	db3b      	blt.n	8007f18 <_printf_float+0x39c>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d438      	bmi.n	8007f18 <_printf_float+0x39c>
 8007ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea8:	9a05      	ldr	r2, [sp, #20]
 8007eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eac:	1a9a      	subs	r2, r3, r2
 8007eae:	eba3 0901 	sub.w	r9, r3, r1
 8007eb2:	4591      	cmp	r9, r2
 8007eb4:	bfa8      	it	ge
 8007eb6:	4691      	movge	r9, r2
 8007eb8:	f1b9 0f00 	cmp.w	r9, #0
 8007ebc:	dc35      	bgt.n	8007f2a <_printf_float+0x3ae>
 8007ebe:	f04f 0800 	mov.w	r8, #0
 8007ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ec6:	f104 0a1a 	add.w	sl, r4, #26
 8007eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	eba3 0309 	sub.w	r3, r3, r9
 8007ed4:	4543      	cmp	r3, r8
 8007ed6:	f77f af79 	ble.w	8007dcc <_printf_float+0x250>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4652      	mov	r2, sl
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b8      	blx	r7
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	f43f aeaa 	beq.w	8007c3e <_printf_float+0xc2>
 8007eea:	f108 0801 	add.w	r8, r8, #1
 8007eee:	e7ec      	b.n	8007eca <_printf_float+0x34e>
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b8      	blx	r7
 8007efa:	3001      	adds	r0, #1
 8007efc:	d1c0      	bne.n	8007e80 <_printf_float+0x304>
 8007efe:	e69e      	b.n	8007c3e <_printf_float+0xc2>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4631      	mov	r1, r6
 8007f04:	4628      	mov	r0, r5
 8007f06:	9205      	str	r2, [sp, #20]
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f ae97 	beq.w	8007c3e <_printf_float+0xc2>
 8007f10:	9a05      	ldr	r2, [sp, #20]
 8007f12:	f10b 0b01 	add.w	fp, fp, #1
 8007f16:	e7b9      	b.n	8007e8c <_printf_float+0x310>
 8007f18:	ee18 3a10 	vmov	r3, s16
 8007f1c:	4652      	mov	r2, sl
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b8      	blx	r7
 8007f24:	3001      	adds	r0, #1
 8007f26:	d1be      	bne.n	8007ea6 <_printf_float+0x32a>
 8007f28:	e689      	b.n	8007c3e <_printf_float+0xc2>
 8007f2a:	9a05      	ldr	r2, [sp, #20]
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	4442      	add	r2, r8
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	d1c1      	bne.n	8007ebe <_printf_float+0x342>
 8007f3a:	e680      	b.n	8007c3e <_printf_float+0xc2>
 8007f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f3e:	2a01      	cmp	r2, #1
 8007f40:	dc01      	bgt.n	8007f46 <_printf_float+0x3ca>
 8007f42:	07db      	lsls	r3, r3, #31
 8007f44:	d538      	bpl.n	8007fb8 <_printf_float+0x43c>
 8007f46:	2301      	movs	r3, #1
 8007f48:	4642      	mov	r2, r8
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b8      	blx	r7
 8007f50:	3001      	adds	r0, #1
 8007f52:	f43f ae74 	beq.w	8007c3e <_printf_float+0xc2>
 8007f56:	ee18 3a10 	vmov	r3, s16
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	f43f ae6b 	beq.w	8007c3e <_printf_float+0xc2>
 8007f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f7f8 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f74:	b9d8      	cbnz	r0, 8007fae <_printf_float+0x432>
 8007f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f78:	f108 0201 	add.w	r2, r8, #1
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	4631      	mov	r1, r6
 8007f80:	4628      	mov	r0, r5
 8007f82:	47b8      	blx	r7
 8007f84:	3001      	adds	r0, #1
 8007f86:	d10e      	bne.n	8007fa6 <_printf_float+0x42a>
 8007f88:	e659      	b.n	8007c3e <_printf_float+0xc2>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	f43f ae52 	beq.w	8007c3e <_printf_float+0xc2>
 8007f9a:	f108 0801 	add.w	r8, r8, #1
 8007f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	4543      	cmp	r3, r8
 8007fa4:	dcf1      	bgt.n	8007f8a <_printf_float+0x40e>
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fac:	e6dc      	b.n	8007d68 <_printf_float+0x1ec>
 8007fae:	f04f 0800 	mov.w	r8, #0
 8007fb2:	f104 0a1a 	add.w	sl, r4, #26
 8007fb6:	e7f2      	b.n	8007f9e <_printf_float+0x422>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4642      	mov	r2, r8
 8007fbc:	e7df      	b.n	8007f7e <_printf_float+0x402>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	464a      	mov	r2, r9
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	47b8      	blx	r7
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f43f ae38 	beq.w	8007c3e <_printf_float+0xc2>
 8007fce:	f108 0801 	add.w	r8, r8, #1
 8007fd2:	68e3      	ldr	r3, [r4, #12]
 8007fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fd6:	1a5b      	subs	r3, r3, r1
 8007fd8:	4543      	cmp	r3, r8
 8007fda:	dcf0      	bgt.n	8007fbe <_printf_float+0x442>
 8007fdc:	e6fa      	b.n	8007dd4 <_printf_float+0x258>
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	f104 0919 	add.w	r9, r4, #25
 8007fe6:	e7f4      	b.n	8007fd2 <_printf_float+0x456>

08007fe8 <_printf_common>:
 8007fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fec:	4616      	mov	r6, r2
 8007fee:	4699      	mov	r9, r3
 8007ff0:	688a      	ldr	r2, [r1, #8]
 8007ff2:	690b      	ldr	r3, [r1, #16]
 8007ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	bfb8      	it	lt
 8007ffc:	4613      	movlt	r3, r2
 8007ffe:	6033      	str	r3, [r6, #0]
 8008000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008004:	4607      	mov	r7, r0
 8008006:	460c      	mov	r4, r1
 8008008:	b10a      	cbz	r2, 800800e <_printf_common+0x26>
 800800a:	3301      	adds	r3, #1
 800800c:	6033      	str	r3, [r6, #0]
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	0699      	lsls	r1, r3, #26
 8008012:	bf42      	ittt	mi
 8008014:	6833      	ldrmi	r3, [r6, #0]
 8008016:	3302      	addmi	r3, #2
 8008018:	6033      	strmi	r3, [r6, #0]
 800801a:	6825      	ldr	r5, [r4, #0]
 800801c:	f015 0506 	ands.w	r5, r5, #6
 8008020:	d106      	bne.n	8008030 <_printf_common+0x48>
 8008022:	f104 0a19 	add.w	sl, r4, #25
 8008026:	68e3      	ldr	r3, [r4, #12]
 8008028:	6832      	ldr	r2, [r6, #0]
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	42ab      	cmp	r3, r5
 800802e:	dc26      	bgt.n	800807e <_printf_common+0x96>
 8008030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008034:	1e13      	subs	r3, r2, #0
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	bf18      	it	ne
 800803a:	2301      	movne	r3, #1
 800803c:	0692      	lsls	r2, r2, #26
 800803e:	d42b      	bmi.n	8008098 <_printf_common+0xb0>
 8008040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008044:	4649      	mov	r1, r9
 8008046:	4638      	mov	r0, r7
 8008048:	47c0      	blx	r8
 800804a:	3001      	adds	r0, #1
 800804c:	d01e      	beq.n	800808c <_printf_common+0xa4>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	68e5      	ldr	r5, [r4, #12]
 8008052:	6832      	ldr	r2, [r6, #0]
 8008054:	f003 0306 	and.w	r3, r3, #6
 8008058:	2b04      	cmp	r3, #4
 800805a:	bf08      	it	eq
 800805c:	1aad      	subeq	r5, r5, r2
 800805e:	68a3      	ldr	r3, [r4, #8]
 8008060:	6922      	ldr	r2, [r4, #16]
 8008062:	bf0c      	ite	eq
 8008064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008068:	2500      	movne	r5, #0
 800806a:	4293      	cmp	r3, r2
 800806c:	bfc4      	itt	gt
 800806e:	1a9b      	subgt	r3, r3, r2
 8008070:	18ed      	addgt	r5, r5, r3
 8008072:	2600      	movs	r6, #0
 8008074:	341a      	adds	r4, #26
 8008076:	42b5      	cmp	r5, r6
 8008078:	d11a      	bne.n	80080b0 <_printf_common+0xc8>
 800807a:	2000      	movs	r0, #0
 800807c:	e008      	b.n	8008090 <_printf_common+0xa8>
 800807e:	2301      	movs	r3, #1
 8008080:	4652      	mov	r2, sl
 8008082:	4649      	mov	r1, r9
 8008084:	4638      	mov	r0, r7
 8008086:	47c0      	blx	r8
 8008088:	3001      	adds	r0, #1
 800808a:	d103      	bne.n	8008094 <_printf_common+0xac>
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008094:	3501      	adds	r5, #1
 8008096:	e7c6      	b.n	8008026 <_printf_common+0x3e>
 8008098:	18e1      	adds	r1, r4, r3
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	2030      	movs	r0, #48	; 0x30
 800809e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080a2:	4422      	add	r2, r4
 80080a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080ac:	3302      	adds	r3, #2
 80080ae:	e7c7      	b.n	8008040 <_printf_common+0x58>
 80080b0:	2301      	movs	r3, #1
 80080b2:	4622      	mov	r2, r4
 80080b4:	4649      	mov	r1, r9
 80080b6:	4638      	mov	r0, r7
 80080b8:	47c0      	blx	r8
 80080ba:	3001      	adds	r0, #1
 80080bc:	d0e6      	beq.n	800808c <_printf_common+0xa4>
 80080be:	3601      	adds	r6, #1
 80080c0:	e7d9      	b.n	8008076 <_printf_common+0x8e>
	...

080080c4 <_printf_i>:
 80080c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	7e0f      	ldrb	r7, [r1, #24]
 80080ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080cc:	2f78      	cmp	r7, #120	; 0x78
 80080ce:	4691      	mov	r9, r2
 80080d0:	4680      	mov	r8, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	469a      	mov	sl, r3
 80080d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080da:	d807      	bhi.n	80080ec <_printf_i+0x28>
 80080dc:	2f62      	cmp	r7, #98	; 0x62
 80080de:	d80a      	bhi.n	80080f6 <_printf_i+0x32>
 80080e0:	2f00      	cmp	r7, #0
 80080e2:	f000 80d8 	beq.w	8008296 <_printf_i+0x1d2>
 80080e6:	2f58      	cmp	r7, #88	; 0x58
 80080e8:	f000 80a3 	beq.w	8008232 <_printf_i+0x16e>
 80080ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080f4:	e03a      	b.n	800816c <_printf_i+0xa8>
 80080f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080fa:	2b15      	cmp	r3, #21
 80080fc:	d8f6      	bhi.n	80080ec <_printf_i+0x28>
 80080fe:	a101      	add	r1, pc, #4	; (adr r1, 8008104 <_printf_i+0x40>)
 8008100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008104:	0800815d 	.word	0x0800815d
 8008108:	08008171 	.word	0x08008171
 800810c:	080080ed 	.word	0x080080ed
 8008110:	080080ed 	.word	0x080080ed
 8008114:	080080ed 	.word	0x080080ed
 8008118:	080080ed 	.word	0x080080ed
 800811c:	08008171 	.word	0x08008171
 8008120:	080080ed 	.word	0x080080ed
 8008124:	080080ed 	.word	0x080080ed
 8008128:	080080ed 	.word	0x080080ed
 800812c:	080080ed 	.word	0x080080ed
 8008130:	0800827d 	.word	0x0800827d
 8008134:	080081a1 	.word	0x080081a1
 8008138:	0800825f 	.word	0x0800825f
 800813c:	080080ed 	.word	0x080080ed
 8008140:	080080ed 	.word	0x080080ed
 8008144:	0800829f 	.word	0x0800829f
 8008148:	080080ed 	.word	0x080080ed
 800814c:	080081a1 	.word	0x080081a1
 8008150:	080080ed 	.word	0x080080ed
 8008154:	080080ed 	.word	0x080080ed
 8008158:	08008267 	.word	0x08008267
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	602a      	str	r2, [r5, #0]
 8008164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800816c:	2301      	movs	r3, #1
 800816e:	e0a3      	b.n	80082b8 <_printf_i+0x1f4>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	6829      	ldr	r1, [r5, #0]
 8008174:	0606      	lsls	r6, r0, #24
 8008176:	f101 0304 	add.w	r3, r1, #4
 800817a:	d50a      	bpl.n	8008192 <_printf_i+0xce>
 800817c:	680e      	ldr	r6, [r1, #0]
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	2e00      	cmp	r6, #0
 8008182:	da03      	bge.n	800818c <_printf_i+0xc8>
 8008184:	232d      	movs	r3, #45	; 0x2d
 8008186:	4276      	negs	r6, r6
 8008188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800818c:	485e      	ldr	r0, [pc, #376]	; (8008308 <_printf_i+0x244>)
 800818e:	230a      	movs	r3, #10
 8008190:	e019      	b.n	80081c6 <_printf_i+0x102>
 8008192:	680e      	ldr	r6, [r1, #0]
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	f010 0f40 	tst.w	r0, #64	; 0x40
 800819a:	bf18      	it	ne
 800819c:	b236      	sxthne	r6, r6
 800819e:	e7ef      	b.n	8008180 <_printf_i+0xbc>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	6820      	ldr	r0, [r4, #0]
 80081a4:	1d19      	adds	r1, r3, #4
 80081a6:	6029      	str	r1, [r5, #0]
 80081a8:	0601      	lsls	r1, r0, #24
 80081aa:	d501      	bpl.n	80081b0 <_printf_i+0xec>
 80081ac:	681e      	ldr	r6, [r3, #0]
 80081ae:	e002      	b.n	80081b6 <_printf_i+0xf2>
 80081b0:	0646      	lsls	r6, r0, #25
 80081b2:	d5fb      	bpl.n	80081ac <_printf_i+0xe8>
 80081b4:	881e      	ldrh	r6, [r3, #0]
 80081b6:	4854      	ldr	r0, [pc, #336]	; (8008308 <_printf_i+0x244>)
 80081b8:	2f6f      	cmp	r7, #111	; 0x6f
 80081ba:	bf0c      	ite	eq
 80081bc:	2308      	moveq	r3, #8
 80081be:	230a      	movne	r3, #10
 80081c0:	2100      	movs	r1, #0
 80081c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081c6:	6865      	ldr	r5, [r4, #4]
 80081c8:	60a5      	str	r5, [r4, #8]
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	bfa2      	ittt	ge
 80081ce:	6821      	ldrge	r1, [r4, #0]
 80081d0:	f021 0104 	bicge.w	r1, r1, #4
 80081d4:	6021      	strge	r1, [r4, #0]
 80081d6:	b90e      	cbnz	r6, 80081dc <_printf_i+0x118>
 80081d8:	2d00      	cmp	r5, #0
 80081da:	d04d      	beq.n	8008278 <_printf_i+0x1b4>
 80081dc:	4615      	mov	r5, r2
 80081de:	fbb6 f1f3 	udiv	r1, r6, r3
 80081e2:	fb03 6711 	mls	r7, r3, r1, r6
 80081e6:	5dc7      	ldrb	r7, [r0, r7]
 80081e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081ec:	4637      	mov	r7, r6
 80081ee:	42bb      	cmp	r3, r7
 80081f0:	460e      	mov	r6, r1
 80081f2:	d9f4      	bls.n	80081de <_printf_i+0x11a>
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d10b      	bne.n	8008210 <_printf_i+0x14c>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	07de      	lsls	r6, r3, #31
 80081fc:	d508      	bpl.n	8008210 <_printf_i+0x14c>
 80081fe:	6923      	ldr	r3, [r4, #16]
 8008200:	6861      	ldr	r1, [r4, #4]
 8008202:	4299      	cmp	r1, r3
 8008204:	bfde      	ittt	le
 8008206:	2330      	movle	r3, #48	; 0x30
 8008208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800820c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008210:	1b52      	subs	r2, r2, r5
 8008212:	6122      	str	r2, [r4, #16]
 8008214:	f8cd a000 	str.w	sl, [sp]
 8008218:	464b      	mov	r3, r9
 800821a:	aa03      	add	r2, sp, #12
 800821c:	4621      	mov	r1, r4
 800821e:	4640      	mov	r0, r8
 8008220:	f7ff fee2 	bl	8007fe8 <_printf_common>
 8008224:	3001      	adds	r0, #1
 8008226:	d14c      	bne.n	80082c2 <_printf_i+0x1fe>
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	b004      	add	sp, #16
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	4835      	ldr	r0, [pc, #212]	; (8008308 <_printf_i+0x244>)
 8008234:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008238:	6829      	ldr	r1, [r5, #0]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008240:	6029      	str	r1, [r5, #0]
 8008242:	061d      	lsls	r5, r3, #24
 8008244:	d514      	bpl.n	8008270 <_printf_i+0x1ac>
 8008246:	07df      	lsls	r7, r3, #31
 8008248:	bf44      	itt	mi
 800824a:	f043 0320 	orrmi.w	r3, r3, #32
 800824e:	6023      	strmi	r3, [r4, #0]
 8008250:	b91e      	cbnz	r6, 800825a <_printf_i+0x196>
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	f023 0320 	bic.w	r3, r3, #32
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	2310      	movs	r3, #16
 800825c:	e7b0      	b.n	80081c0 <_printf_i+0xfc>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	f043 0320 	orr.w	r3, r3, #32
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	2378      	movs	r3, #120	; 0x78
 8008268:	4828      	ldr	r0, [pc, #160]	; (800830c <_printf_i+0x248>)
 800826a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800826e:	e7e3      	b.n	8008238 <_printf_i+0x174>
 8008270:	0659      	lsls	r1, r3, #25
 8008272:	bf48      	it	mi
 8008274:	b2b6      	uxthmi	r6, r6
 8008276:	e7e6      	b.n	8008246 <_printf_i+0x182>
 8008278:	4615      	mov	r5, r2
 800827a:	e7bb      	b.n	80081f4 <_printf_i+0x130>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	6826      	ldr	r6, [r4, #0]
 8008280:	6961      	ldr	r1, [r4, #20]
 8008282:	1d18      	adds	r0, r3, #4
 8008284:	6028      	str	r0, [r5, #0]
 8008286:	0635      	lsls	r5, r6, #24
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	d501      	bpl.n	8008290 <_printf_i+0x1cc>
 800828c:	6019      	str	r1, [r3, #0]
 800828e:	e002      	b.n	8008296 <_printf_i+0x1d2>
 8008290:	0670      	lsls	r0, r6, #25
 8008292:	d5fb      	bpl.n	800828c <_printf_i+0x1c8>
 8008294:	8019      	strh	r1, [r3, #0]
 8008296:	2300      	movs	r3, #0
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	4615      	mov	r5, r2
 800829c:	e7ba      	b.n	8008214 <_printf_i+0x150>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	1d1a      	adds	r2, r3, #4
 80082a2:	602a      	str	r2, [r5, #0]
 80082a4:	681d      	ldr	r5, [r3, #0]
 80082a6:	6862      	ldr	r2, [r4, #4]
 80082a8:	2100      	movs	r1, #0
 80082aa:	4628      	mov	r0, r5
 80082ac:	f7f7 ff98 	bl	80001e0 <memchr>
 80082b0:	b108      	cbz	r0, 80082b6 <_printf_i+0x1f2>
 80082b2:	1b40      	subs	r0, r0, r5
 80082b4:	6060      	str	r0, [r4, #4]
 80082b6:	6863      	ldr	r3, [r4, #4]
 80082b8:	6123      	str	r3, [r4, #16]
 80082ba:	2300      	movs	r3, #0
 80082bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c0:	e7a8      	b.n	8008214 <_printf_i+0x150>
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4649      	mov	r1, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	47d0      	blx	sl
 80082cc:	3001      	adds	r0, #1
 80082ce:	d0ab      	beq.n	8008228 <_printf_i+0x164>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	079b      	lsls	r3, r3, #30
 80082d4:	d413      	bmi.n	80082fe <_printf_i+0x23a>
 80082d6:	68e0      	ldr	r0, [r4, #12]
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	4298      	cmp	r0, r3
 80082dc:	bfb8      	it	lt
 80082de:	4618      	movlt	r0, r3
 80082e0:	e7a4      	b.n	800822c <_printf_i+0x168>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4632      	mov	r2, r6
 80082e6:	4649      	mov	r1, r9
 80082e8:	4640      	mov	r0, r8
 80082ea:	47d0      	blx	sl
 80082ec:	3001      	adds	r0, #1
 80082ee:	d09b      	beq.n	8008228 <_printf_i+0x164>
 80082f0:	3501      	adds	r5, #1
 80082f2:	68e3      	ldr	r3, [r4, #12]
 80082f4:	9903      	ldr	r1, [sp, #12]
 80082f6:	1a5b      	subs	r3, r3, r1
 80082f8:	42ab      	cmp	r3, r5
 80082fa:	dcf2      	bgt.n	80082e2 <_printf_i+0x21e>
 80082fc:	e7eb      	b.n	80082d6 <_printf_i+0x212>
 80082fe:	2500      	movs	r5, #0
 8008300:	f104 0619 	add.w	r6, r4, #25
 8008304:	e7f5      	b.n	80082f2 <_printf_i+0x22e>
 8008306:	bf00      	nop
 8008308:	0800cc10 	.word	0x0800cc10
 800830c:	0800cc21 	.word	0x0800cc21

08008310 <_scanf_float>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	b087      	sub	sp, #28
 8008316:	4617      	mov	r7, r2
 8008318:	9303      	str	r3, [sp, #12]
 800831a:	688b      	ldr	r3, [r1, #8]
 800831c:	1e5a      	subs	r2, r3, #1
 800831e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008322:	bf83      	ittte	hi
 8008324:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008328:	195b      	addhi	r3, r3, r5
 800832a:	9302      	strhi	r3, [sp, #8]
 800832c:	2300      	movls	r3, #0
 800832e:	bf86      	itte	hi
 8008330:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008334:	608b      	strhi	r3, [r1, #8]
 8008336:	9302      	strls	r3, [sp, #8]
 8008338:	680b      	ldr	r3, [r1, #0]
 800833a:	468b      	mov	fp, r1
 800833c:	2500      	movs	r5, #0
 800833e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008342:	f84b 3b1c 	str.w	r3, [fp], #28
 8008346:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800834a:	4680      	mov	r8, r0
 800834c:	460c      	mov	r4, r1
 800834e:	465e      	mov	r6, fp
 8008350:	46aa      	mov	sl, r5
 8008352:	46a9      	mov	r9, r5
 8008354:	9501      	str	r5, [sp, #4]
 8008356:	68a2      	ldr	r2, [r4, #8]
 8008358:	b152      	cbz	r2, 8008370 <_scanf_float+0x60>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b4e      	cmp	r3, #78	; 0x4e
 8008360:	d864      	bhi.n	800842c <_scanf_float+0x11c>
 8008362:	2b40      	cmp	r3, #64	; 0x40
 8008364:	d83c      	bhi.n	80083e0 <_scanf_float+0xd0>
 8008366:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800836a:	b2c8      	uxtb	r0, r1
 800836c:	280e      	cmp	r0, #14
 800836e:	d93a      	bls.n	80083e6 <_scanf_float+0xd6>
 8008370:	f1b9 0f00 	cmp.w	r9, #0
 8008374:	d003      	beq.n	800837e <_scanf_float+0x6e>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008382:	f1ba 0f01 	cmp.w	sl, #1
 8008386:	f200 8113 	bhi.w	80085b0 <_scanf_float+0x2a0>
 800838a:	455e      	cmp	r6, fp
 800838c:	f200 8105 	bhi.w	800859a <_scanf_float+0x28a>
 8008390:	2501      	movs	r5, #1
 8008392:	4628      	mov	r0, r5
 8008394:	b007      	add	sp, #28
 8008396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800839e:	2a0d      	cmp	r2, #13
 80083a0:	d8e6      	bhi.n	8008370 <_scanf_float+0x60>
 80083a2:	a101      	add	r1, pc, #4	; (adr r1, 80083a8 <_scanf_float+0x98>)
 80083a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80083a8:	080084e7 	.word	0x080084e7
 80083ac:	08008371 	.word	0x08008371
 80083b0:	08008371 	.word	0x08008371
 80083b4:	08008371 	.word	0x08008371
 80083b8:	08008547 	.word	0x08008547
 80083bc:	0800851f 	.word	0x0800851f
 80083c0:	08008371 	.word	0x08008371
 80083c4:	08008371 	.word	0x08008371
 80083c8:	080084f5 	.word	0x080084f5
 80083cc:	08008371 	.word	0x08008371
 80083d0:	08008371 	.word	0x08008371
 80083d4:	08008371 	.word	0x08008371
 80083d8:	08008371 	.word	0x08008371
 80083dc:	080084ad 	.word	0x080084ad
 80083e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80083e4:	e7db      	b.n	800839e <_scanf_float+0x8e>
 80083e6:	290e      	cmp	r1, #14
 80083e8:	d8c2      	bhi.n	8008370 <_scanf_float+0x60>
 80083ea:	a001      	add	r0, pc, #4	; (adr r0, 80083f0 <_scanf_float+0xe0>)
 80083ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80083f0:	0800849f 	.word	0x0800849f
 80083f4:	08008371 	.word	0x08008371
 80083f8:	0800849f 	.word	0x0800849f
 80083fc:	08008533 	.word	0x08008533
 8008400:	08008371 	.word	0x08008371
 8008404:	0800844d 	.word	0x0800844d
 8008408:	08008489 	.word	0x08008489
 800840c:	08008489 	.word	0x08008489
 8008410:	08008489 	.word	0x08008489
 8008414:	08008489 	.word	0x08008489
 8008418:	08008489 	.word	0x08008489
 800841c:	08008489 	.word	0x08008489
 8008420:	08008489 	.word	0x08008489
 8008424:	08008489 	.word	0x08008489
 8008428:	08008489 	.word	0x08008489
 800842c:	2b6e      	cmp	r3, #110	; 0x6e
 800842e:	d809      	bhi.n	8008444 <_scanf_float+0x134>
 8008430:	2b60      	cmp	r3, #96	; 0x60
 8008432:	d8b2      	bhi.n	800839a <_scanf_float+0x8a>
 8008434:	2b54      	cmp	r3, #84	; 0x54
 8008436:	d077      	beq.n	8008528 <_scanf_float+0x218>
 8008438:	2b59      	cmp	r3, #89	; 0x59
 800843a:	d199      	bne.n	8008370 <_scanf_float+0x60>
 800843c:	2d07      	cmp	r5, #7
 800843e:	d197      	bne.n	8008370 <_scanf_float+0x60>
 8008440:	2508      	movs	r5, #8
 8008442:	e029      	b.n	8008498 <_scanf_float+0x188>
 8008444:	2b74      	cmp	r3, #116	; 0x74
 8008446:	d06f      	beq.n	8008528 <_scanf_float+0x218>
 8008448:	2b79      	cmp	r3, #121	; 0x79
 800844a:	e7f6      	b.n	800843a <_scanf_float+0x12a>
 800844c:	6821      	ldr	r1, [r4, #0]
 800844e:	05c8      	lsls	r0, r1, #23
 8008450:	d51a      	bpl.n	8008488 <_scanf_float+0x178>
 8008452:	9b02      	ldr	r3, [sp, #8]
 8008454:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008458:	6021      	str	r1, [r4, #0]
 800845a:	f109 0901 	add.w	r9, r9, #1
 800845e:	b11b      	cbz	r3, 8008468 <_scanf_float+0x158>
 8008460:	3b01      	subs	r3, #1
 8008462:	3201      	adds	r2, #1
 8008464:	9302      	str	r3, [sp, #8]
 8008466:	60a2      	str	r2, [r4, #8]
 8008468:	68a3      	ldr	r3, [r4, #8]
 800846a:	3b01      	subs	r3, #1
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	3301      	adds	r3, #1
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3b01      	subs	r3, #1
 8008478:	2b00      	cmp	r3, #0
 800847a:	607b      	str	r3, [r7, #4]
 800847c:	f340 8084 	ble.w	8008588 <_scanf_float+0x278>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	603b      	str	r3, [r7, #0]
 8008486:	e766      	b.n	8008356 <_scanf_float+0x46>
 8008488:	eb1a 0f05 	cmn.w	sl, r5
 800848c:	f47f af70 	bne.w	8008370 <_scanf_float+0x60>
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	f806 3b01 	strb.w	r3, [r6], #1
 800849c:	e7e4      	b.n	8008468 <_scanf_float+0x158>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	0610      	lsls	r0, r2, #24
 80084a2:	f57f af65 	bpl.w	8008370 <_scanf_float+0x60>
 80084a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084aa:	e7f4      	b.n	8008496 <_scanf_float+0x186>
 80084ac:	f1ba 0f00 	cmp.w	sl, #0
 80084b0:	d10e      	bne.n	80084d0 <_scanf_float+0x1c0>
 80084b2:	f1b9 0f00 	cmp.w	r9, #0
 80084b6:	d10e      	bne.n	80084d6 <_scanf_float+0x1c6>
 80084b8:	6822      	ldr	r2, [r4, #0]
 80084ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084c2:	d108      	bne.n	80084d6 <_scanf_float+0x1c6>
 80084c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	f04f 0a01 	mov.w	sl, #1
 80084ce:	e7e3      	b.n	8008498 <_scanf_float+0x188>
 80084d0:	f1ba 0f02 	cmp.w	sl, #2
 80084d4:	d055      	beq.n	8008582 <_scanf_float+0x272>
 80084d6:	2d01      	cmp	r5, #1
 80084d8:	d002      	beq.n	80084e0 <_scanf_float+0x1d0>
 80084da:	2d04      	cmp	r5, #4
 80084dc:	f47f af48 	bne.w	8008370 <_scanf_float+0x60>
 80084e0:	3501      	adds	r5, #1
 80084e2:	b2ed      	uxtb	r5, r5
 80084e4:	e7d8      	b.n	8008498 <_scanf_float+0x188>
 80084e6:	f1ba 0f01 	cmp.w	sl, #1
 80084ea:	f47f af41 	bne.w	8008370 <_scanf_float+0x60>
 80084ee:	f04f 0a02 	mov.w	sl, #2
 80084f2:	e7d1      	b.n	8008498 <_scanf_float+0x188>
 80084f4:	b97d      	cbnz	r5, 8008516 <_scanf_float+0x206>
 80084f6:	f1b9 0f00 	cmp.w	r9, #0
 80084fa:	f47f af3c 	bne.w	8008376 <_scanf_float+0x66>
 80084fe:	6822      	ldr	r2, [r4, #0]
 8008500:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008504:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008508:	f47f af39 	bne.w	800837e <_scanf_float+0x6e>
 800850c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	2501      	movs	r5, #1
 8008514:	e7c0      	b.n	8008498 <_scanf_float+0x188>
 8008516:	2d03      	cmp	r5, #3
 8008518:	d0e2      	beq.n	80084e0 <_scanf_float+0x1d0>
 800851a:	2d05      	cmp	r5, #5
 800851c:	e7de      	b.n	80084dc <_scanf_float+0x1cc>
 800851e:	2d02      	cmp	r5, #2
 8008520:	f47f af26 	bne.w	8008370 <_scanf_float+0x60>
 8008524:	2503      	movs	r5, #3
 8008526:	e7b7      	b.n	8008498 <_scanf_float+0x188>
 8008528:	2d06      	cmp	r5, #6
 800852a:	f47f af21 	bne.w	8008370 <_scanf_float+0x60>
 800852e:	2507      	movs	r5, #7
 8008530:	e7b2      	b.n	8008498 <_scanf_float+0x188>
 8008532:	6822      	ldr	r2, [r4, #0]
 8008534:	0591      	lsls	r1, r2, #22
 8008536:	f57f af1b 	bpl.w	8008370 <_scanf_float+0x60>
 800853a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800853e:	6022      	str	r2, [r4, #0]
 8008540:	f8cd 9004 	str.w	r9, [sp, #4]
 8008544:	e7a8      	b.n	8008498 <_scanf_float+0x188>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800854c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008550:	d006      	beq.n	8008560 <_scanf_float+0x250>
 8008552:	0550      	lsls	r0, r2, #21
 8008554:	f57f af0c 	bpl.w	8008370 <_scanf_float+0x60>
 8008558:	f1b9 0f00 	cmp.w	r9, #0
 800855c:	f43f af0f 	beq.w	800837e <_scanf_float+0x6e>
 8008560:	0591      	lsls	r1, r2, #22
 8008562:	bf58      	it	pl
 8008564:	9901      	ldrpl	r1, [sp, #4]
 8008566:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800856a:	bf58      	it	pl
 800856c:	eba9 0101 	subpl.w	r1, r9, r1
 8008570:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008574:	bf58      	it	pl
 8008576:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	f04f 0900 	mov.w	r9, #0
 8008580:	e78a      	b.n	8008498 <_scanf_float+0x188>
 8008582:	f04f 0a03 	mov.w	sl, #3
 8008586:	e787      	b.n	8008498 <_scanf_float+0x188>
 8008588:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800858c:	4639      	mov	r1, r7
 800858e:	4640      	mov	r0, r8
 8008590:	4798      	blx	r3
 8008592:	2800      	cmp	r0, #0
 8008594:	f43f aedf 	beq.w	8008356 <_scanf_float+0x46>
 8008598:	e6ea      	b.n	8008370 <_scanf_float+0x60>
 800859a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800859e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085a2:	463a      	mov	r2, r7
 80085a4:	4640      	mov	r0, r8
 80085a6:	4798      	blx	r3
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	e6ec      	b.n	800838a <_scanf_float+0x7a>
 80085b0:	1e6b      	subs	r3, r5, #1
 80085b2:	2b06      	cmp	r3, #6
 80085b4:	d825      	bhi.n	8008602 <_scanf_float+0x2f2>
 80085b6:	2d02      	cmp	r5, #2
 80085b8:	d836      	bhi.n	8008628 <_scanf_float+0x318>
 80085ba:	455e      	cmp	r6, fp
 80085bc:	f67f aee8 	bls.w	8008390 <_scanf_float+0x80>
 80085c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085c8:	463a      	mov	r2, r7
 80085ca:	4640      	mov	r0, r8
 80085cc:	4798      	blx	r3
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	e7f1      	b.n	80085ba <_scanf_float+0x2aa>
 80085d6:	9802      	ldr	r0, [sp, #8]
 80085d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80085e0:	9002      	str	r0, [sp, #8]
 80085e2:	463a      	mov	r2, r7
 80085e4:	4640      	mov	r0, r8
 80085e6:	4798      	blx	r3
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	6123      	str	r3, [r4, #16]
 80085ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085f2:	fa5f fa8a 	uxtb.w	sl, sl
 80085f6:	f1ba 0f02 	cmp.w	sl, #2
 80085fa:	d1ec      	bne.n	80085d6 <_scanf_float+0x2c6>
 80085fc:	3d03      	subs	r5, #3
 80085fe:	b2ed      	uxtb	r5, r5
 8008600:	1b76      	subs	r6, r6, r5
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	05da      	lsls	r2, r3, #23
 8008606:	d52f      	bpl.n	8008668 <_scanf_float+0x358>
 8008608:	055b      	lsls	r3, r3, #21
 800860a:	d510      	bpl.n	800862e <_scanf_float+0x31e>
 800860c:	455e      	cmp	r6, fp
 800860e:	f67f aebf 	bls.w	8008390 <_scanf_float+0x80>
 8008612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800861a:	463a      	mov	r2, r7
 800861c:	4640      	mov	r0, r8
 800861e:	4798      	blx	r3
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	3b01      	subs	r3, #1
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	e7f1      	b.n	800860c <_scanf_float+0x2fc>
 8008628:	46aa      	mov	sl, r5
 800862a:	9602      	str	r6, [sp, #8]
 800862c:	e7df      	b.n	80085ee <_scanf_float+0x2de>
 800862e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	2965      	cmp	r1, #101	; 0x65
 8008636:	f103 33ff 	add.w	r3, r3, #4294967295
 800863a:	f106 35ff 	add.w	r5, r6, #4294967295
 800863e:	6123      	str	r3, [r4, #16]
 8008640:	d00c      	beq.n	800865c <_scanf_float+0x34c>
 8008642:	2945      	cmp	r1, #69	; 0x45
 8008644:	d00a      	beq.n	800865c <_scanf_float+0x34c>
 8008646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800864a:	463a      	mov	r2, r7
 800864c:	4640      	mov	r0, r8
 800864e:	4798      	blx	r3
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008656:	3b01      	subs	r3, #1
 8008658:	1eb5      	subs	r5, r6, #2
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008660:	463a      	mov	r2, r7
 8008662:	4640      	mov	r0, r8
 8008664:	4798      	blx	r3
 8008666:	462e      	mov	r6, r5
 8008668:	6825      	ldr	r5, [r4, #0]
 800866a:	f015 0510 	ands.w	r5, r5, #16
 800866e:	d159      	bne.n	8008724 <_scanf_float+0x414>
 8008670:	7035      	strb	r5, [r6, #0]
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800867c:	d11b      	bne.n	80086b6 <_scanf_float+0x3a6>
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	454b      	cmp	r3, r9
 8008682:	eba3 0209 	sub.w	r2, r3, r9
 8008686:	d123      	bne.n	80086d0 <_scanf_float+0x3c0>
 8008688:	2200      	movs	r2, #0
 800868a:	4659      	mov	r1, fp
 800868c:	4640      	mov	r0, r8
 800868e:	f000 ffa9 	bl	80095e4 <_strtod_r>
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	f012 0f02 	tst.w	r2, #2
 800869a:	ec57 6b10 	vmov	r6, r7, d0
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	d021      	beq.n	80086e6 <_scanf_float+0x3d6>
 80086a2:	9903      	ldr	r1, [sp, #12]
 80086a4:	1d1a      	adds	r2, r3, #4
 80086a6:	600a      	str	r2, [r1, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	e9c3 6700 	strd	r6, r7, [r3]
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	60e3      	str	r3, [r4, #12]
 80086b4:	e66d      	b.n	8008392 <_scanf_float+0x82>
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0e5      	beq.n	8008688 <_scanf_float+0x378>
 80086bc:	9905      	ldr	r1, [sp, #20]
 80086be:	230a      	movs	r3, #10
 80086c0:	462a      	mov	r2, r5
 80086c2:	3101      	adds	r1, #1
 80086c4:	4640      	mov	r0, r8
 80086c6:	f001 f815 	bl	80096f4 <_strtol_r>
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	9e05      	ldr	r6, [sp, #20]
 80086ce:	1ac2      	subs	r2, r0, r3
 80086d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80086d4:	429e      	cmp	r6, r3
 80086d6:	bf28      	it	cs
 80086d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80086dc:	4912      	ldr	r1, [pc, #72]	; (8008728 <_scanf_float+0x418>)
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 f8ca 	bl	8008878 <siprintf>
 80086e4:	e7d0      	b.n	8008688 <_scanf_float+0x378>
 80086e6:	9903      	ldr	r1, [sp, #12]
 80086e8:	f012 0f04 	tst.w	r2, #4
 80086ec:	f103 0204 	add.w	r2, r3, #4
 80086f0:	600a      	str	r2, [r1, #0]
 80086f2:	d1d9      	bne.n	80086a8 <_scanf_float+0x398>
 80086f4:	f8d3 8000 	ldr.w	r8, [r3]
 80086f8:	ee10 2a10 	vmov	r2, s0
 80086fc:	ee10 0a10 	vmov	r0, s0
 8008700:	463b      	mov	r3, r7
 8008702:	4639      	mov	r1, r7
 8008704:	f7f8 fa12 	bl	8000b2c <__aeabi_dcmpun>
 8008708:	b128      	cbz	r0, 8008716 <_scanf_float+0x406>
 800870a:	4808      	ldr	r0, [pc, #32]	; (800872c <_scanf_float+0x41c>)
 800870c:	f000 f8ae 	bl	800886c <nanf>
 8008710:	ed88 0a00 	vstr	s0, [r8]
 8008714:	e7cb      	b.n	80086ae <_scanf_float+0x39e>
 8008716:	4630      	mov	r0, r6
 8008718:	4639      	mov	r1, r7
 800871a:	f7f8 fa65 	bl	8000be8 <__aeabi_d2f>
 800871e:	f8c8 0000 	str.w	r0, [r8]
 8008722:	e7c4      	b.n	80086ae <_scanf_float+0x39e>
 8008724:	2500      	movs	r5, #0
 8008726:	e634      	b.n	8008392 <_scanf_float+0x82>
 8008728:	0800cc32 	.word	0x0800cc32
 800872c:	0800d0bb 	.word	0x0800d0bb

08008730 <iprintf>:
 8008730:	b40f      	push	{r0, r1, r2, r3}
 8008732:	4b0a      	ldr	r3, [pc, #40]	; (800875c <iprintf+0x2c>)
 8008734:	b513      	push	{r0, r1, r4, lr}
 8008736:	681c      	ldr	r4, [r3, #0]
 8008738:	b124      	cbz	r4, 8008744 <iprintf+0x14>
 800873a:	69a3      	ldr	r3, [r4, #24]
 800873c:	b913      	cbnz	r3, 8008744 <iprintf+0x14>
 800873e:	4620      	mov	r0, r4
 8008740:	f002 f852 	bl	800a7e8 <__sinit>
 8008744:	ab05      	add	r3, sp, #20
 8008746:	9a04      	ldr	r2, [sp, #16]
 8008748:	68a1      	ldr	r1, [r4, #8]
 800874a:	9301      	str	r3, [sp, #4]
 800874c:	4620      	mov	r0, r4
 800874e:	f003 fd23 	bl	800c198 <_vfiprintf_r>
 8008752:	b002      	add	sp, #8
 8008754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008758:	b004      	add	sp, #16
 800875a:	4770      	bx	lr
 800875c:	2000000c 	.word	0x2000000c

08008760 <_puts_r>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	460e      	mov	r6, r1
 8008764:	4605      	mov	r5, r0
 8008766:	b118      	cbz	r0, 8008770 <_puts_r+0x10>
 8008768:	6983      	ldr	r3, [r0, #24]
 800876a:	b90b      	cbnz	r3, 8008770 <_puts_r+0x10>
 800876c:	f002 f83c 	bl	800a7e8 <__sinit>
 8008770:	69ab      	ldr	r3, [r5, #24]
 8008772:	68ac      	ldr	r4, [r5, #8]
 8008774:	b913      	cbnz	r3, 800877c <_puts_r+0x1c>
 8008776:	4628      	mov	r0, r5
 8008778:	f002 f836 	bl	800a7e8 <__sinit>
 800877c:	4b2c      	ldr	r3, [pc, #176]	; (8008830 <_puts_r+0xd0>)
 800877e:	429c      	cmp	r4, r3
 8008780:	d120      	bne.n	80087c4 <_puts_r+0x64>
 8008782:	686c      	ldr	r4, [r5, #4]
 8008784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008786:	07db      	lsls	r3, r3, #31
 8008788:	d405      	bmi.n	8008796 <_puts_r+0x36>
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	0598      	lsls	r0, r3, #22
 800878e:	d402      	bmi.n	8008796 <_puts_r+0x36>
 8008790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008792:	f002 fc3a 	bl	800b00a <__retarget_lock_acquire_recursive>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	0719      	lsls	r1, r3, #28
 800879a:	d51d      	bpl.n	80087d8 <_puts_r+0x78>
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	b1db      	cbz	r3, 80087d8 <_puts_r+0x78>
 80087a0:	3e01      	subs	r6, #1
 80087a2:	68a3      	ldr	r3, [r4, #8]
 80087a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087a8:	3b01      	subs	r3, #1
 80087aa:	60a3      	str	r3, [r4, #8]
 80087ac:	bb39      	cbnz	r1, 80087fe <_puts_r+0x9e>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da38      	bge.n	8008824 <_puts_r+0xc4>
 80087b2:	4622      	mov	r2, r4
 80087b4:	210a      	movs	r1, #10
 80087b6:	4628      	mov	r0, r5
 80087b8:	f000 ff9e 	bl	80096f8 <__swbuf_r>
 80087bc:	3001      	adds	r0, #1
 80087be:	d011      	beq.n	80087e4 <_puts_r+0x84>
 80087c0:	250a      	movs	r5, #10
 80087c2:	e011      	b.n	80087e8 <_puts_r+0x88>
 80087c4:	4b1b      	ldr	r3, [pc, #108]	; (8008834 <_puts_r+0xd4>)
 80087c6:	429c      	cmp	r4, r3
 80087c8:	d101      	bne.n	80087ce <_puts_r+0x6e>
 80087ca:	68ac      	ldr	r4, [r5, #8]
 80087cc:	e7da      	b.n	8008784 <_puts_r+0x24>
 80087ce:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <_puts_r+0xd8>)
 80087d0:	429c      	cmp	r4, r3
 80087d2:	bf08      	it	eq
 80087d4:	68ec      	ldreq	r4, [r5, #12]
 80087d6:	e7d5      	b.n	8008784 <_puts_r+0x24>
 80087d8:	4621      	mov	r1, r4
 80087da:	4628      	mov	r0, r5
 80087dc:	f000 fff0 	bl	80097c0 <__swsetup_r>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d0dd      	beq.n	80087a0 <_puts_r+0x40>
 80087e4:	f04f 35ff 	mov.w	r5, #4294967295
 80087e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087ea:	07da      	lsls	r2, r3, #31
 80087ec:	d405      	bmi.n	80087fa <_puts_r+0x9a>
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	059b      	lsls	r3, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_puts_r+0x9a>
 80087f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087f6:	f002 fc09 	bl	800b00c <__retarget_lock_release_recursive>
 80087fa:	4628      	mov	r0, r5
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
 80087fe:	2b00      	cmp	r3, #0
 8008800:	da04      	bge.n	800880c <_puts_r+0xac>
 8008802:	69a2      	ldr	r2, [r4, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	dc06      	bgt.n	8008816 <_puts_r+0xb6>
 8008808:	290a      	cmp	r1, #10
 800880a:	d004      	beq.n	8008816 <_puts_r+0xb6>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	6022      	str	r2, [r4, #0]
 8008812:	7019      	strb	r1, [r3, #0]
 8008814:	e7c5      	b.n	80087a2 <_puts_r+0x42>
 8008816:	4622      	mov	r2, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 ff6d 	bl	80096f8 <__swbuf_r>
 800881e:	3001      	adds	r0, #1
 8008820:	d1bf      	bne.n	80087a2 <_puts_r+0x42>
 8008822:	e7df      	b.n	80087e4 <_puts_r+0x84>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	250a      	movs	r5, #10
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	6022      	str	r2, [r4, #0]
 800882c:	701d      	strb	r5, [r3, #0]
 800882e:	e7db      	b.n	80087e8 <_puts_r+0x88>
 8008830:	0800ce3c 	.word	0x0800ce3c
 8008834:	0800ce5c 	.word	0x0800ce5c
 8008838:	0800ce1c 	.word	0x0800ce1c

0800883c <puts>:
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <puts+0xc>)
 800883e:	4601      	mov	r1, r0
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	f7ff bf8d 	b.w	8008760 <_puts_r>
 8008846:	bf00      	nop
 8008848:	2000000c 	.word	0x2000000c

0800884c <_sbrk_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d06      	ldr	r5, [pc, #24]	; (8008868 <_sbrk_r+0x1c>)
 8008850:	2300      	movs	r3, #0
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	f7f9 f836 	bl	80018c8 <_sbrk>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_sbrk_r+0x1a>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_sbrk_r+0x1a>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	200007c8 	.word	0x200007c8

0800886c <nanf>:
 800886c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008874 <nanf+0x8>
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	7fc00000 	.word	0x7fc00000

08008878 <siprintf>:
 8008878:	b40e      	push	{r1, r2, r3}
 800887a:	b500      	push	{lr}
 800887c:	b09c      	sub	sp, #112	; 0x70
 800887e:	ab1d      	add	r3, sp, #116	; 0x74
 8008880:	9002      	str	r0, [sp, #8]
 8008882:	9006      	str	r0, [sp, #24]
 8008884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008888:	4809      	ldr	r0, [pc, #36]	; (80088b0 <siprintf+0x38>)
 800888a:	9107      	str	r1, [sp, #28]
 800888c:	9104      	str	r1, [sp, #16]
 800888e:	4909      	ldr	r1, [pc, #36]	; (80088b4 <siprintf+0x3c>)
 8008890:	f853 2b04 	ldr.w	r2, [r3], #4
 8008894:	9105      	str	r1, [sp, #20]
 8008896:	6800      	ldr	r0, [r0, #0]
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	a902      	add	r1, sp, #8
 800889c:	f003 f980 	bl	800bba0 <_svfiprintf_r>
 80088a0:	9b02      	ldr	r3, [sp, #8]
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	b01c      	add	sp, #112	; 0x70
 80088a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ac:	b003      	add	sp, #12
 80088ae:	4770      	bx	lr
 80088b0:	2000000c 	.word	0x2000000c
 80088b4:	ffff0208 	.word	0xffff0208

080088b8 <siscanf>:
 80088b8:	b40e      	push	{r1, r2, r3}
 80088ba:	b510      	push	{r4, lr}
 80088bc:	b09f      	sub	sp, #124	; 0x7c
 80088be:	ac21      	add	r4, sp, #132	; 0x84
 80088c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80088c4:	f854 2b04 	ldr.w	r2, [r4], #4
 80088c8:	9201      	str	r2, [sp, #4]
 80088ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 80088ce:	9004      	str	r0, [sp, #16]
 80088d0:	9008      	str	r0, [sp, #32]
 80088d2:	f7f7 fc7d 	bl	80001d0 <strlen>
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <siscanf+0x50>)
 80088d8:	9005      	str	r0, [sp, #20]
 80088da:	9009      	str	r0, [sp, #36]	; 0x24
 80088dc:	930d      	str	r3, [sp, #52]	; 0x34
 80088de:	480b      	ldr	r0, [pc, #44]	; (800890c <siscanf+0x54>)
 80088e0:	9a01      	ldr	r2, [sp, #4]
 80088e2:	6800      	ldr	r0, [r0, #0]
 80088e4:	9403      	str	r4, [sp, #12]
 80088e6:	2300      	movs	r3, #0
 80088e8:	9311      	str	r3, [sp, #68]	; 0x44
 80088ea:	9316      	str	r3, [sp, #88]	; 0x58
 80088ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80088f4:	a904      	add	r1, sp, #16
 80088f6:	4623      	mov	r3, r4
 80088f8:	f003 faac 	bl	800be54 <__ssvfiscanf_r>
 80088fc:	b01f      	add	sp, #124	; 0x7c
 80088fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008902:	b003      	add	sp, #12
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	08008933 	.word	0x08008933
 800890c:	2000000c 	.word	0x2000000c

08008910 <__sread>:
 8008910:	b510      	push	{r4, lr}
 8008912:	460c      	mov	r4, r1
 8008914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008918:	f003 fec0 	bl	800c69c <_read_r>
 800891c:	2800      	cmp	r0, #0
 800891e:	bfab      	itete	ge
 8008920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008922:	89a3      	ldrhlt	r3, [r4, #12]
 8008924:	181b      	addge	r3, r3, r0
 8008926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800892a:	bfac      	ite	ge
 800892c:	6563      	strge	r3, [r4, #84]	; 0x54
 800892e:	81a3      	strhlt	r3, [r4, #12]
 8008930:	bd10      	pop	{r4, pc}

08008932 <__seofread>:
 8008932:	2000      	movs	r0, #0
 8008934:	4770      	bx	lr

08008936 <__swrite>:
 8008936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	461f      	mov	r7, r3
 800893c:	898b      	ldrh	r3, [r1, #12]
 800893e:	05db      	lsls	r3, r3, #23
 8008940:	4605      	mov	r5, r0
 8008942:	460c      	mov	r4, r1
 8008944:	4616      	mov	r6, r2
 8008946:	d505      	bpl.n	8008954 <__swrite+0x1e>
 8008948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894c:	2302      	movs	r3, #2
 800894e:	2200      	movs	r2, #0
 8008950:	f002 fb5e 	bl	800b010 <_lseek_r>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800895a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	4632      	mov	r2, r6
 8008962:	463b      	mov	r3, r7
 8008964:	4628      	mov	r0, r5
 8008966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	f000 bf17 	b.w	800979c <_write_r>

0800896e <__sseek>:
 800896e:	b510      	push	{r4, lr}
 8008970:	460c      	mov	r4, r1
 8008972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008976:	f002 fb4b 	bl	800b010 <_lseek_r>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	bf15      	itete	ne
 8008980:	6560      	strne	r0, [r4, #84]	; 0x54
 8008982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800898a:	81a3      	strheq	r3, [r4, #12]
 800898c:	bf18      	it	ne
 800898e:	81a3      	strhne	r3, [r4, #12]
 8008990:	bd10      	pop	{r4, pc}

08008992 <__sclose>:
 8008992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008996:	f000 bf81 	b.w	800989c <_close_r>

0800899a <sulp>:
 800899a:	b570      	push	{r4, r5, r6, lr}
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	ec45 4b10 	vmov	d0, r4, r5
 80089a4:	4616      	mov	r6, r2
 80089a6:	f002 ff3b 	bl	800b820 <__ulp>
 80089aa:	ec51 0b10 	vmov	r0, r1, d0
 80089ae:	b17e      	cbz	r6, 80089d0 <sulp+0x36>
 80089b0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dd09      	ble.n	80089d0 <sulp+0x36>
 80089bc:	051b      	lsls	r3, r3, #20
 80089be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80089c2:	2400      	movs	r4, #0
 80089c4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089c8:	4622      	mov	r2, r4
 80089ca:	462b      	mov	r3, r5
 80089cc:	f7f7 fe14 	bl	80005f8 <__aeabi_dmul>
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	0000      	movs	r0, r0
 80089d4:	0000      	movs	r0, r0
	...

080089d8 <_strtod_l>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	ed2d 8b02 	vpush	{d8}
 80089e0:	b09d      	sub	sp, #116	; 0x74
 80089e2:	461f      	mov	r7, r3
 80089e4:	2300      	movs	r3, #0
 80089e6:	9318      	str	r3, [sp, #96]	; 0x60
 80089e8:	4ba2      	ldr	r3, [pc, #648]	; (8008c74 <_strtod_l+0x29c>)
 80089ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	9305      	str	r3, [sp, #20]
 80089f0:	4604      	mov	r4, r0
 80089f2:	4618      	mov	r0, r3
 80089f4:	4688      	mov	r8, r1
 80089f6:	f7f7 fbeb 	bl	80001d0 <strlen>
 80089fa:	f04f 0a00 	mov.w	sl, #0
 80089fe:	4605      	mov	r5, r0
 8008a00:	f04f 0b00 	mov.w	fp, #0
 8008a04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	2a2b      	cmp	r2, #43	; 0x2b
 8008a0e:	d04e      	beq.n	8008aae <_strtod_l+0xd6>
 8008a10:	d83b      	bhi.n	8008a8a <_strtod_l+0xb2>
 8008a12:	2a0d      	cmp	r2, #13
 8008a14:	d834      	bhi.n	8008a80 <_strtod_l+0xa8>
 8008a16:	2a08      	cmp	r2, #8
 8008a18:	d834      	bhi.n	8008a84 <_strtod_l+0xac>
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	d03e      	beq.n	8008a9c <_strtod_l+0xc4>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	930a      	str	r3, [sp, #40]	; 0x28
 8008a22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a24:	7833      	ldrb	r3, [r6, #0]
 8008a26:	2b30      	cmp	r3, #48	; 0x30
 8008a28:	f040 80b0 	bne.w	8008b8c <_strtod_l+0x1b4>
 8008a2c:	7873      	ldrb	r3, [r6, #1]
 8008a2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a32:	2b58      	cmp	r3, #88	; 0x58
 8008a34:	d168      	bne.n	8008b08 <_strtod_l+0x130>
 8008a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	ab18      	add	r3, sp, #96	; 0x60
 8008a3c:	9702      	str	r7, [sp, #8]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	4a8d      	ldr	r2, [pc, #564]	; (8008c78 <_strtod_l+0x2a0>)
 8008a42:	ab19      	add	r3, sp, #100	; 0x64
 8008a44:	a917      	add	r1, sp, #92	; 0x5c
 8008a46:	4620      	mov	r0, r4
 8008a48:	f001 ffd2 	bl	800a9f0 <__gethex>
 8008a4c:	f010 0707 	ands.w	r7, r0, #7
 8008a50:	4605      	mov	r5, r0
 8008a52:	d005      	beq.n	8008a60 <_strtod_l+0x88>
 8008a54:	2f06      	cmp	r7, #6
 8008a56:	d12c      	bne.n	8008ab2 <_strtod_l+0xda>
 8008a58:	3601      	adds	r6, #1
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f040 8590 	bne.w	8009588 <_strtod_l+0xbb0>
 8008a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6a:	b1eb      	cbz	r3, 8008aa8 <_strtod_l+0xd0>
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a72:	ec43 2b10 	vmov	d0, r2, r3
 8008a76:	b01d      	add	sp, #116	; 0x74
 8008a78:	ecbd 8b02 	vpop	{d8}
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a80:	2a20      	cmp	r2, #32
 8008a82:	d1cc      	bne.n	8008a1e <_strtod_l+0x46>
 8008a84:	3301      	adds	r3, #1
 8008a86:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a88:	e7be      	b.n	8008a08 <_strtod_l+0x30>
 8008a8a:	2a2d      	cmp	r2, #45	; 0x2d
 8008a8c:	d1c7      	bne.n	8008a1e <_strtod_l+0x46>
 8008a8e:	2201      	movs	r2, #1
 8008a90:	920a      	str	r2, [sp, #40]	; 0x28
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1c2      	bne.n	8008a22 <_strtod_l+0x4a>
 8008a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 856e 	bne.w	8009584 <_strtod_l+0xbac>
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	465b      	mov	r3, fp
 8008aac:	e7e1      	b.n	8008a72 <_strtod_l+0x9a>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	e7ee      	b.n	8008a90 <_strtod_l+0xb8>
 8008ab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ab4:	b13a      	cbz	r2, 8008ac6 <_strtod_l+0xee>
 8008ab6:	2135      	movs	r1, #53	; 0x35
 8008ab8:	a81a      	add	r0, sp, #104	; 0x68
 8008aba:	f002 ffbc 	bl	800ba36 <__copybits>
 8008abe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f002 fb7b 	bl	800b1bc <_Bfree>
 8008ac6:	3f01      	subs	r7, #1
 8008ac8:	2f04      	cmp	r7, #4
 8008aca:	d806      	bhi.n	8008ada <_strtod_l+0x102>
 8008acc:	e8df f007 	tbb	[pc, r7]
 8008ad0:	1714030a 	.word	0x1714030a
 8008ad4:	0a          	.byte	0x0a
 8008ad5:	00          	.byte	0x00
 8008ad6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008ada:	0728      	lsls	r0, r5, #28
 8008adc:	d5c0      	bpl.n	8008a60 <_strtod_l+0x88>
 8008ade:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008ae2:	e7bd      	b.n	8008a60 <_strtod_l+0x88>
 8008ae4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008ae8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008aea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008aee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008af2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008af6:	e7f0      	b.n	8008ada <_strtod_l+0x102>
 8008af8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008c7c <_strtod_l+0x2a4>
 8008afc:	e7ed      	b.n	8008ada <_strtod_l+0x102>
 8008afe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b02:	f04f 3aff 	mov.w	sl, #4294967295
 8008b06:	e7e8      	b.n	8008ada <_strtod_l+0x102>
 8008b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b30      	cmp	r3, #48	; 0x30
 8008b12:	d0f9      	beq.n	8008b08 <_strtod_l+0x130>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0a3      	beq.n	8008a60 <_strtod_l+0x88>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	f04f 0900 	mov.w	r9, #0
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b22:	9308      	str	r3, [sp, #32]
 8008b24:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b28:	464f      	mov	r7, r9
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008b2e:	7806      	ldrb	r6, [r0, #0]
 8008b30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008b34:	b2d9      	uxtb	r1, r3
 8008b36:	2909      	cmp	r1, #9
 8008b38:	d92a      	bls.n	8008b90 <_strtod_l+0x1b8>
 8008b3a:	9905      	ldr	r1, [sp, #20]
 8008b3c:	462a      	mov	r2, r5
 8008b3e:	f003 fdff 	bl	800c740 <strncmp>
 8008b42:	b398      	cbz	r0, 8008bac <_strtod_l+0x1d4>
 8008b44:	2000      	movs	r0, #0
 8008b46:	4632      	mov	r2, r6
 8008b48:	463d      	mov	r5, r7
 8008b4a:	9005      	str	r0, [sp, #20]
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2a65      	cmp	r2, #101	; 0x65
 8008b50:	d001      	beq.n	8008b56 <_strtod_l+0x17e>
 8008b52:	2a45      	cmp	r2, #69	; 0x45
 8008b54:	d118      	bne.n	8008b88 <_strtod_l+0x1b0>
 8008b56:	b91d      	cbnz	r5, 8008b60 <_strtod_l+0x188>
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	4302      	orrs	r2, r0
 8008b5c:	d09e      	beq.n	8008a9c <_strtod_l+0xc4>
 8008b5e:	2500      	movs	r5, #0
 8008b60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008b64:	f108 0201 	add.w	r2, r8, #1
 8008b68:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b6e:	2a2b      	cmp	r2, #43	; 0x2b
 8008b70:	d075      	beq.n	8008c5e <_strtod_l+0x286>
 8008b72:	2a2d      	cmp	r2, #45	; 0x2d
 8008b74:	d07b      	beq.n	8008c6e <_strtod_l+0x296>
 8008b76:	f04f 0c00 	mov.w	ip, #0
 8008b7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008b7e:	2909      	cmp	r1, #9
 8008b80:	f240 8082 	bls.w	8008c88 <_strtod_l+0x2b0>
 8008b84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b88:	2600      	movs	r6, #0
 8008b8a:	e09d      	b.n	8008cc8 <_strtod_l+0x2f0>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e7c4      	b.n	8008b1a <_strtod_l+0x142>
 8008b90:	2f08      	cmp	r7, #8
 8008b92:	bfd8      	it	le
 8008b94:	9907      	ldrle	r1, [sp, #28]
 8008b96:	f100 0001 	add.w	r0, r0, #1
 8008b9a:	bfda      	itte	le
 8008b9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ba0:	9307      	strle	r3, [sp, #28]
 8008ba2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008ba6:	3701      	adds	r7, #1
 8008ba8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008baa:	e7bf      	b.n	8008b2c <_strtod_l+0x154>
 8008bac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bae:	195a      	adds	r2, r3, r5
 8008bb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bb2:	5d5a      	ldrb	r2, [r3, r5]
 8008bb4:	2f00      	cmp	r7, #0
 8008bb6:	d037      	beq.n	8008c28 <_strtod_l+0x250>
 8008bb8:	9005      	str	r0, [sp, #20]
 8008bba:	463d      	mov	r5, r7
 8008bbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d912      	bls.n	8008bea <_strtod_l+0x212>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e7c2      	b.n	8008b4e <_strtod_l+0x176>
 8008bc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bce:	785a      	ldrb	r2, [r3, #1]
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	2a30      	cmp	r2, #48	; 0x30
 8008bd4:	d0f8      	beq.n	8008bc8 <_strtod_l+0x1f0>
 8008bd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008bda:	2b08      	cmp	r3, #8
 8008bdc:	f200 84d9 	bhi.w	8009592 <_strtod_l+0xbba>
 8008be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008be2:	9005      	str	r0, [sp, #20]
 8008be4:	2000      	movs	r0, #0
 8008be6:	9308      	str	r3, [sp, #32]
 8008be8:	4605      	mov	r5, r0
 8008bea:	3a30      	subs	r2, #48	; 0x30
 8008bec:	f100 0301 	add.w	r3, r0, #1
 8008bf0:	d014      	beq.n	8008c1c <_strtod_l+0x244>
 8008bf2:	9905      	ldr	r1, [sp, #20]
 8008bf4:	4419      	add	r1, r3
 8008bf6:	9105      	str	r1, [sp, #20]
 8008bf8:	462b      	mov	r3, r5
 8008bfa:	eb00 0e05 	add.w	lr, r0, r5
 8008bfe:	210a      	movs	r1, #10
 8008c00:	4573      	cmp	r3, lr
 8008c02:	d113      	bne.n	8008c2c <_strtod_l+0x254>
 8008c04:	182b      	adds	r3, r5, r0
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	f105 0501 	add.w	r5, r5, #1
 8008c0c:	4405      	add	r5, r0
 8008c0e:	dc1c      	bgt.n	8008c4a <_strtod_l+0x272>
 8008c10:	9907      	ldr	r1, [sp, #28]
 8008c12:	230a      	movs	r3, #10
 8008c14:	fb03 2301 	mla	r3, r3, r1, r2
 8008c18:	9307      	str	r3, [sp, #28]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c1e:	1c51      	adds	r1, r2, #1
 8008c20:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c22:	7852      	ldrb	r2, [r2, #1]
 8008c24:	4618      	mov	r0, r3
 8008c26:	e7c9      	b.n	8008bbc <_strtod_l+0x1e4>
 8008c28:	4638      	mov	r0, r7
 8008c2a:	e7d2      	b.n	8008bd2 <_strtod_l+0x1fa>
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	dc04      	bgt.n	8008c3a <_strtod_l+0x262>
 8008c30:	9e07      	ldr	r6, [sp, #28]
 8008c32:	434e      	muls	r6, r1
 8008c34:	9607      	str	r6, [sp, #28]
 8008c36:	3301      	adds	r3, #1
 8008c38:	e7e2      	b.n	8008c00 <_strtod_l+0x228>
 8008c3a:	f103 0c01 	add.w	ip, r3, #1
 8008c3e:	f1bc 0f10 	cmp.w	ip, #16
 8008c42:	bfd8      	it	le
 8008c44:	fb01 f909 	mulle.w	r9, r1, r9
 8008c48:	e7f5      	b.n	8008c36 <_strtod_l+0x25e>
 8008c4a:	2d10      	cmp	r5, #16
 8008c4c:	bfdc      	itt	le
 8008c4e:	230a      	movle	r3, #10
 8008c50:	fb03 2909 	mlale	r9, r3, r9, r2
 8008c54:	e7e1      	b.n	8008c1a <_strtod_l+0x242>
 8008c56:	2300      	movs	r3, #0
 8008c58:	9305      	str	r3, [sp, #20]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e77c      	b.n	8008b58 <_strtod_l+0x180>
 8008c5e:	f04f 0c00 	mov.w	ip, #0
 8008c62:	f108 0202 	add.w	r2, r8, #2
 8008c66:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c68:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008c6c:	e785      	b.n	8008b7a <_strtod_l+0x1a2>
 8008c6e:	f04f 0c01 	mov.w	ip, #1
 8008c72:	e7f6      	b.n	8008c62 <_strtod_l+0x28a>
 8008c74:	0800cee4 	.word	0x0800cee4
 8008c78:	0800cc38 	.word	0x0800cc38
 8008c7c:	7ff00000 	.word	0x7ff00000
 8008c80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c82:	1c51      	adds	r1, r2, #1
 8008c84:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c86:	7852      	ldrb	r2, [r2, #1]
 8008c88:	2a30      	cmp	r2, #48	; 0x30
 8008c8a:	d0f9      	beq.n	8008c80 <_strtod_l+0x2a8>
 8008c8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c90:	2908      	cmp	r1, #8
 8008c92:	f63f af79 	bhi.w	8008b88 <_strtod_l+0x1b0>
 8008c96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c9c:	9206      	str	r2, [sp, #24]
 8008c9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ca0:	1c51      	adds	r1, r2, #1
 8008ca2:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ca4:	7852      	ldrb	r2, [r2, #1]
 8008ca6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008caa:	2e09      	cmp	r6, #9
 8008cac:	d937      	bls.n	8008d1e <_strtod_l+0x346>
 8008cae:	9e06      	ldr	r6, [sp, #24]
 8008cb0:	1b89      	subs	r1, r1, r6
 8008cb2:	2908      	cmp	r1, #8
 8008cb4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008cb8:	dc02      	bgt.n	8008cc0 <_strtod_l+0x2e8>
 8008cba:	4576      	cmp	r6, lr
 8008cbc:	bfa8      	it	ge
 8008cbe:	4676      	movge	r6, lr
 8008cc0:	f1bc 0f00 	cmp.w	ip, #0
 8008cc4:	d000      	beq.n	8008cc8 <_strtod_l+0x2f0>
 8008cc6:	4276      	negs	r6, r6
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	d14d      	bne.n	8008d68 <_strtod_l+0x390>
 8008ccc:	9904      	ldr	r1, [sp, #16]
 8008cce:	4301      	orrs	r1, r0
 8008cd0:	f47f aec6 	bne.w	8008a60 <_strtod_l+0x88>
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f47f aee1 	bne.w	8008a9c <_strtod_l+0xc4>
 8008cda:	2a69      	cmp	r2, #105	; 0x69
 8008cdc:	d027      	beq.n	8008d2e <_strtod_l+0x356>
 8008cde:	dc24      	bgt.n	8008d2a <_strtod_l+0x352>
 8008ce0:	2a49      	cmp	r2, #73	; 0x49
 8008ce2:	d024      	beq.n	8008d2e <_strtod_l+0x356>
 8008ce4:	2a4e      	cmp	r2, #78	; 0x4e
 8008ce6:	f47f aed9 	bne.w	8008a9c <_strtod_l+0xc4>
 8008cea:	499f      	ldr	r1, [pc, #636]	; (8008f68 <_strtod_l+0x590>)
 8008cec:	a817      	add	r0, sp, #92	; 0x5c
 8008cee:	f002 f8d7 	bl	800aea0 <__match>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f43f aed2 	beq.w	8008a9c <_strtod_l+0xc4>
 8008cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b28      	cmp	r3, #40	; 0x28
 8008cfe:	d12d      	bne.n	8008d5c <_strtod_l+0x384>
 8008d00:	499a      	ldr	r1, [pc, #616]	; (8008f6c <_strtod_l+0x594>)
 8008d02:	aa1a      	add	r2, sp, #104	; 0x68
 8008d04:	a817      	add	r0, sp, #92	; 0x5c
 8008d06:	f002 f8df 	bl	800aec8 <__hexnan>
 8008d0a:	2805      	cmp	r0, #5
 8008d0c:	d126      	bne.n	8008d5c <_strtod_l+0x384>
 8008d0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d10:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d14:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d18:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d1c:	e6a0      	b.n	8008a60 <_strtod_l+0x88>
 8008d1e:	210a      	movs	r1, #10
 8008d20:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008d24:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008d28:	e7b9      	b.n	8008c9e <_strtod_l+0x2c6>
 8008d2a:	2a6e      	cmp	r2, #110	; 0x6e
 8008d2c:	e7db      	b.n	8008ce6 <_strtod_l+0x30e>
 8008d2e:	4990      	ldr	r1, [pc, #576]	; (8008f70 <_strtod_l+0x598>)
 8008d30:	a817      	add	r0, sp, #92	; 0x5c
 8008d32:	f002 f8b5 	bl	800aea0 <__match>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f aeb0 	beq.w	8008a9c <_strtod_l+0xc4>
 8008d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d3e:	498d      	ldr	r1, [pc, #564]	; (8008f74 <_strtod_l+0x59c>)
 8008d40:	3b01      	subs	r3, #1
 8008d42:	a817      	add	r0, sp, #92	; 0x5c
 8008d44:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d46:	f002 f8ab 	bl	800aea0 <__match>
 8008d4a:	b910      	cbnz	r0, 8008d52 <_strtod_l+0x37a>
 8008d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d4e:	3301      	adds	r3, #1
 8008d50:	9317      	str	r3, [sp, #92]	; 0x5c
 8008d52:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f84 <_strtod_l+0x5ac>
 8008d56:	f04f 0a00 	mov.w	sl, #0
 8008d5a:	e681      	b.n	8008a60 <_strtod_l+0x88>
 8008d5c:	4886      	ldr	r0, [pc, #536]	; (8008f78 <_strtod_l+0x5a0>)
 8008d5e:	f003 fcaf 	bl	800c6c0 <nan>
 8008d62:	ec5b ab10 	vmov	sl, fp, d0
 8008d66:	e67b      	b.n	8008a60 <_strtod_l+0x88>
 8008d68:	9b05      	ldr	r3, [sp, #20]
 8008d6a:	9807      	ldr	r0, [sp, #28]
 8008d6c:	1af3      	subs	r3, r6, r3
 8008d6e:	2f00      	cmp	r7, #0
 8008d70:	bf08      	it	eq
 8008d72:	462f      	moveq	r7, r5
 8008d74:	2d10      	cmp	r5, #16
 8008d76:	9306      	str	r3, [sp, #24]
 8008d78:	46a8      	mov	r8, r5
 8008d7a:	bfa8      	it	ge
 8008d7c:	f04f 0810 	movge.w	r8, #16
 8008d80:	f7f7 fbc0 	bl	8000504 <__aeabi_ui2d>
 8008d84:	2d09      	cmp	r5, #9
 8008d86:	4682      	mov	sl, r0
 8008d88:	468b      	mov	fp, r1
 8008d8a:	dd13      	ble.n	8008db4 <_strtod_l+0x3dc>
 8008d8c:	4b7b      	ldr	r3, [pc, #492]	; (8008f7c <_strtod_l+0x5a4>)
 8008d8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d96:	f7f7 fc2f 	bl	80005f8 <__aeabi_dmul>
 8008d9a:	4682      	mov	sl, r0
 8008d9c:	4648      	mov	r0, r9
 8008d9e:	468b      	mov	fp, r1
 8008da0:	f7f7 fbb0 	bl	8000504 <__aeabi_ui2d>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4650      	mov	r0, sl
 8008daa:	4659      	mov	r1, fp
 8008dac:	f7f7 fa6e 	bl	800028c <__adddf3>
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
 8008db4:	2d0f      	cmp	r5, #15
 8008db6:	dc38      	bgt.n	8008e2a <_strtod_l+0x452>
 8008db8:	9b06      	ldr	r3, [sp, #24]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f43f ae50 	beq.w	8008a60 <_strtod_l+0x88>
 8008dc0:	dd24      	ble.n	8008e0c <_strtod_l+0x434>
 8008dc2:	2b16      	cmp	r3, #22
 8008dc4:	dc0b      	bgt.n	8008dde <_strtod_l+0x406>
 8008dc6:	496d      	ldr	r1, [pc, #436]	; (8008f7c <_strtod_l+0x5a4>)
 8008dc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	465b      	mov	r3, fp
 8008dd4:	f7f7 fc10 	bl	80005f8 <__aeabi_dmul>
 8008dd8:	4682      	mov	sl, r0
 8008dda:	468b      	mov	fp, r1
 8008ddc:	e640      	b.n	8008a60 <_strtod_l+0x88>
 8008dde:	9a06      	ldr	r2, [sp, #24]
 8008de0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008de4:	4293      	cmp	r3, r2
 8008de6:	db20      	blt.n	8008e2a <_strtod_l+0x452>
 8008de8:	4c64      	ldr	r4, [pc, #400]	; (8008f7c <_strtod_l+0x5a4>)
 8008dea:	f1c5 050f 	rsb	r5, r5, #15
 8008dee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008df2:	4652      	mov	r2, sl
 8008df4:	465b      	mov	r3, fp
 8008df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dfa:	f7f7 fbfd 	bl	80005f8 <__aeabi_dmul>
 8008dfe:	9b06      	ldr	r3, [sp, #24]
 8008e00:	1b5d      	subs	r5, r3, r5
 8008e02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e0a:	e7e3      	b.n	8008dd4 <_strtod_l+0x3fc>
 8008e0c:	9b06      	ldr	r3, [sp, #24]
 8008e0e:	3316      	adds	r3, #22
 8008e10:	db0b      	blt.n	8008e2a <_strtod_l+0x452>
 8008e12:	9b05      	ldr	r3, [sp, #20]
 8008e14:	1b9e      	subs	r6, r3, r6
 8008e16:	4b59      	ldr	r3, [pc, #356]	; (8008f7c <_strtod_l+0x5a4>)
 8008e18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008e1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e20:	4650      	mov	r0, sl
 8008e22:	4659      	mov	r1, fp
 8008e24:	f7f7 fd12 	bl	800084c <__aeabi_ddiv>
 8008e28:	e7d6      	b.n	8008dd8 <_strtod_l+0x400>
 8008e2a:	9b06      	ldr	r3, [sp, #24]
 8008e2c:	eba5 0808 	sub.w	r8, r5, r8
 8008e30:	4498      	add	r8, r3
 8008e32:	f1b8 0f00 	cmp.w	r8, #0
 8008e36:	dd74      	ble.n	8008f22 <_strtod_l+0x54a>
 8008e38:	f018 030f 	ands.w	r3, r8, #15
 8008e3c:	d00a      	beq.n	8008e54 <_strtod_l+0x47c>
 8008e3e:	494f      	ldr	r1, [pc, #316]	; (8008f7c <_strtod_l+0x5a4>)
 8008e40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e44:	4652      	mov	r2, sl
 8008e46:	465b      	mov	r3, fp
 8008e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e4c:	f7f7 fbd4 	bl	80005f8 <__aeabi_dmul>
 8008e50:	4682      	mov	sl, r0
 8008e52:	468b      	mov	fp, r1
 8008e54:	f038 080f 	bics.w	r8, r8, #15
 8008e58:	d04f      	beq.n	8008efa <_strtod_l+0x522>
 8008e5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e5e:	dd22      	ble.n	8008ea6 <_strtod_l+0x4ce>
 8008e60:	2500      	movs	r5, #0
 8008e62:	462e      	mov	r6, r5
 8008e64:	9507      	str	r5, [sp, #28]
 8008e66:	9505      	str	r5, [sp, #20]
 8008e68:	2322      	movs	r3, #34	; 0x22
 8008e6a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f84 <_strtod_l+0x5ac>
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	f04f 0a00 	mov.w	sl, #0
 8008e74:	9b07      	ldr	r3, [sp, #28]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f43f adf2 	beq.w	8008a60 <_strtod_l+0x88>
 8008e7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f002 f99c 	bl	800b1bc <_Bfree>
 8008e84:	9905      	ldr	r1, [sp, #20]
 8008e86:	4620      	mov	r0, r4
 8008e88:	f002 f998 	bl	800b1bc <_Bfree>
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f002 f994 	bl	800b1bc <_Bfree>
 8008e94:	9907      	ldr	r1, [sp, #28]
 8008e96:	4620      	mov	r0, r4
 8008e98:	f002 f990 	bl	800b1bc <_Bfree>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f002 f98c 	bl	800b1bc <_Bfree>
 8008ea4:	e5dc      	b.n	8008a60 <_strtod_l+0x88>
 8008ea6:	4b36      	ldr	r3, [pc, #216]	; (8008f80 <_strtod_l+0x5a8>)
 8008ea8:	9304      	str	r3, [sp, #16]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	4699      	mov	r9, r3
 8008eb6:	f1b8 0f01 	cmp.w	r8, #1
 8008eba:	dc21      	bgt.n	8008f00 <_strtod_l+0x528>
 8008ebc:	b10b      	cbz	r3, 8008ec2 <_strtod_l+0x4ea>
 8008ebe:	4682      	mov	sl, r0
 8008ec0:	468b      	mov	fp, r1
 8008ec2:	4b2f      	ldr	r3, [pc, #188]	; (8008f80 <_strtod_l+0x5a8>)
 8008ec4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008ec8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008ecc:	4652      	mov	r2, sl
 8008ece:	465b      	mov	r3, fp
 8008ed0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <_strtod_l+0x5ac>)
 8008eda:	460a      	mov	r2, r1
 8008edc:	400b      	ands	r3, r1
 8008ede:	492a      	ldr	r1, [pc, #168]	; (8008f88 <_strtod_l+0x5b0>)
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	4682      	mov	sl, r0
 8008ee4:	d8bc      	bhi.n	8008e60 <_strtod_l+0x488>
 8008ee6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008eea:	428b      	cmp	r3, r1
 8008eec:	bf86      	itte	hi
 8008eee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f8c <_strtod_l+0x5b4>
 8008ef2:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ef6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008efa:	2300      	movs	r3, #0
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	e084      	b.n	800900a <_strtod_l+0x632>
 8008f00:	f018 0f01 	tst.w	r8, #1
 8008f04:	d005      	beq.n	8008f12 <_strtod_l+0x53a>
 8008f06:	9b04      	ldr	r3, [sp, #16]
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f7f7 fb74 	bl	80005f8 <__aeabi_dmul>
 8008f10:	2301      	movs	r3, #1
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	3208      	adds	r2, #8
 8008f16:	f109 0901 	add.w	r9, r9, #1
 8008f1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f1e:	9204      	str	r2, [sp, #16]
 8008f20:	e7c9      	b.n	8008eb6 <_strtod_l+0x4de>
 8008f22:	d0ea      	beq.n	8008efa <_strtod_l+0x522>
 8008f24:	f1c8 0800 	rsb	r8, r8, #0
 8008f28:	f018 020f 	ands.w	r2, r8, #15
 8008f2c:	d00a      	beq.n	8008f44 <_strtod_l+0x56c>
 8008f2e:	4b13      	ldr	r3, [pc, #76]	; (8008f7c <_strtod_l+0x5a4>)
 8008f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f34:	4650      	mov	r0, sl
 8008f36:	4659      	mov	r1, fp
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	f7f7 fc86 	bl	800084c <__aeabi_ddiv>
 8008f40:	4682      	mov	sl, r0
 8008f42:	468b      	mov	fp, r1
 8008f44:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f48:	d0d7      	beq.n	8008efa <_strtod_l+0x522>
 8008f4a:	f1b8 0f1f 	cmp.w	r8, #31
 8008f4e:	dd1f      	ble.n	8008f90 <_strtod_l+0x5b8>
 8008f50:	2500      	movs	r5, #0
 8008f52:	462e      	mov	r6, r5
 8008f54:	9507      	str	r5, [sp, #28]
 8008f56:	9505      	str	r5, [sp, #20]
 8008f58:	2322      	movs	r3, #34	; 0x22
 8008f5a:	f04f 0a00 	mov.w	sl, #0
 8008f5e:	f04f 0b00 	mov.w	fp, #0
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	e786      	b.n	8008e74 <_strtod_l+0x49c>
 8008f66:	bf00      	nop
 8008f68:	0800cc0d 	.word	0x0800cc0d
 8008f6c:	0800cc4c 	.word	0x0800cc4c
 8008f70:	0800cc05 	.word	0x0800cc05
 8008f74:	0800cd8c 	.word	0x0800cd8c
 8008f78:	0800d0bb 	.word	0x0800d0bb
 8008f7c:	0800cf80 	.word	0x0800cf80
 8008f80:	0800cf58 	.word	0x0800cf58
 8008f84:	7ff00000 	.word	0x7ff00000
 8008f88:	7ca00000 	.word	0x7ca00000
 8008f8c:	7fefffff 	.word	0x7fefffff
 8008f90:	f018 0310 	ands.w	r3, r8, #16
 8008f94:	bf18      	it	ne
 8008f96:	236a      	movne	r3, #106	; 0x6a
 8008f98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009348 <_strtod_l+0x970>
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	4659      	mov	r1, fp
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f018 0f01 	tst.w	r8, #1
 8008fa8:	d004      	beq.n	8008fb4 <_strtod_l+0x5dc>
 8008faa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fae:	f7f7 fb23 	bl	80005f8 <__aeabi_dmul>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008fb8:	f109 0908 	add.w	r9, r9, #8
 8008fbc:	d1f2      	bne.n	8008fa4 <_strtod_l+0x5cc>
 8008fbe:	b10b      	cbz	r3, 8008fc4 <_strtod_l+0x5ec>
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	9b04      	ldr	r3, [sp, #16]
 8008fc6:	b1c3      	cbz	r3, 8008ffa <_strtod_l+0x622>
 8008fc8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	4659      	mov	r1, fp
 8008fd4:	dd11      	ble.n	8008ffa <_strtod_l+0x622>
 8008fd6:	2b1f      	cmp	r3, #31
 8008fd8:	f340 8124 	ble.w	8009224 <_strtod_l+0x84c>
 8008fdc:	2b34      	cmp	r3, #52	; 0x34
 8008fde:	bfde      	ittt	le
 8008fe0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008fe4:	f04f 33ff 	movle.w	r3, #4294967295
 8008fe8:	fa03 f202 	lslle.w	r2, r3, r2
 8008fec:	f04f 0a00 	mov.w	sl, #0
 8008ff0:	bfcc      	ite	gt
 8008ff2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008ff6:	ea02 0b01 	andle.w	fp, r2, r1
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4650      	mov	r0, sl
 8009000:	4659      	mov	r1, fp
 8009002:	f7f7 fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009006:	2800      	cmp	r0, #0
 8009008:	d1a2      	bne.n	8008f50 <_strtod_l+0x578>
 800900a:	9b07      	ldr	r3, [sp, #28]
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	9908      	ldr	r1, [sp, #32]
 8009010:	462b      	mov	r3, r5
 8009012:	463a      	mov	r2, r7
 8009014:	4620      	mov	r0, r4
 8009016:	f002 f939 	bl	800b28c <__s2b>
 800901a:	9007      	str	r0, [sp, #28]
 800901c:	2800      	cmp	r0, #0
 800901e:	f43f af1f 	beq.w	8008e60 <_strtod_l+0x488>
 8009022:	9b05      	ldr	r3, [sp, #20]
 8009024:	1b9e      	subs	r6, r3, r6
 8009026:	9b06      	ldr	r3, [sp, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfb4      	ite	lt
 800902c:	4633      	movlt	r3, r6
 800902e:	2300      	movge	r3, #0
 8009030:	930c      	str	r3, [sp, #48]	; 0x30
 8009032:	9b06      	ldr	r3, [sp, #24]
 8009034:	2500      	movs	r5, #0
 8009036:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800903a:	9312      	str	r3, [sp, #72]	; 0x48
 800903c:	462e      	mov	r6, r5
 800903e:	9b07      	ldr	r3, [sp, #28]
 8009040:	4620      	mov	r0, r4
 8009042:	6859      	ldr	r1, [r3, #4]
 8009044:	f002 f87a 	bl	800b13c <_Balloc>
 8009048:	9005      	str	r0, [sp, #20]
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f af0c 	beq.w	8008e68 <_strtod_l+0x490>
 8009050:	9b07      	ldr	r3, [sp, #28]
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	3202      	adds	r2, #2
 8009056:	f103 010c 	add.w	r1, r3, #12
 800905a:	0092      	lsls	r2, r2, #2
 800905c:	300c      	adds	r0, #12
 800905e:	f7fe fbf7 	bl	8007850 <memcpy>
 8009062:	ec4b ab10 	vmov	d0, sl, fp
 8009066:	aa1a      	add	r2, sp, #104	; 0x68
 8009068:	a919      	add	r1, sp, #100	; 0x64
 800906a:	4620      	mov	r0, r4
 800906c:	f002 fc54 	bl	800b918 <__d2b>
 8009070:	ec4b ab18 	vmov	d8, sl, fp
 8009074:	9018      	str	r0, [sp, #96]	; 0x60
 8009076:	2800      	cmp	r0, #0
 8009078:	f43f aef6 	beq.w	8008e68 <_strtod_l+0x490>
 800907c:	2101      	movs	r1, #1
 800907e:	4620      	mov	r0, r4
 8009080:	f002 f99e 	bl	800b3c0 <__i2b>
 8009084:	4606      	mov	r6, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f aeee 	beq.w	8008e68 <_strtod_l+0x490>
 800908c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800908e:	9904      	ldr	r1, [sp, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfab      	itete	ge
 8009094:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009096:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009098:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800909a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800909e:	bfac      	ite	ge
 80090a0:	eb03 0902 	addge.w	r9, r3, r2
 80090a4:	1ad7      	sublt	r7, r2, r3
 80090a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090a8:	eba3 0801 	sub.w	r8, r3, r1
 80090ac:	4490      	add	r8, r2
 80090ae:	4ba1      	ldr	r3, [pc, #644]	; (8009334 <_strtod_l+0x95c>)
 80090b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80090b4:	4598      	cmp	r8, r3
 80090b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80090ba:	f280 80c7 	bge.w	800924c <_strtod_l+0x874>
 80090be:	eba3 0308 	sub.w	r3, r3, r8
 80090c2:	2b1f      	cmp	r3, #31
 80090c4:	eba2 0203 	sub.w	r2, r2, r3
 80090c8:	f04f 0101 	mov.w	r1, #1
 80090cc:	f300 80b1 	bgt.w	8009232 <_strtod_l+0x85a>
 80090d0:	fa01 f303 	lsl.w	r3, r1, r3
 80090d4:	930d      	str	r3, [sp, #52]	; 0x34
 80090d6:	2300      	movs	r3, #0
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	eb09 0802 	add.w	r8, r9, r2
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	45c1      	cmp	r9, r8
 80090e2:	4417      	add	r7, r2
 80090e4:	441f      	add	r7, r3
 80090e6:	464b      	mov	r3, r9
 80090e8:	bfa8      	it	ge
 80090ea:	4643      	movge	r3, r8
 80090ec:	42bb      	cmp	r3, r7
 80090ee:	bfa8      	it	ge
 80090f0:	463b      	movge	r3, r7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bfc2      	ittt	gt
 80090f6:	eba8 0803 	subgt.w	r8, r8, r3
 80090fa:	1aff      	subgt	r7, r7, r3
 80090fc:	eba9 0903 	subgt.w	r9, r9, r3
 8009100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009102:	2b00      	cmp	r3, #0
 8009104:	dd17      	ble.n	8009136 <_strtod_l+0x75e>
 8009106:	4631      	mov	r1, r6
 8009108:	461a      	mov	r2, r3
 800910a:	4620      	mov	r0, r4
 800910c:	f002 fa18 	bl	800b540 <__pow5mult>
 8009110:	4606      	mov	r6, r0
 8009112:	2800      	cmp	r0, #0
 8009114:	f43f aea8 	beq.w	8008e68 <_strtod_l+0x490>
 8009118:	4601      	mov	r1, r0
 800911a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800911c:	4620      	mov	r0, r4
 800911e:	f002 f965 	bl	800b3ec <__multiply>
 8009122:	900b      	str	r0, [sp, #44]	; 0x2c
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f ae9f 	beq.w	8008e68 <_strtod_l+0x490>
 800912a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800912c:	4620      	mov	r0, r4
 800912e:	f002 f845 	bl	800b1bc <_Bfree>
 8009132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009134:	9318      	str	r3, [sp, #96]	; 0x60
 8009136:	f1b8 0f00 	cmp.w	r8, #0
 800913a:	f300 808c 	bgt.w	8009256 <_strtod_l+0x87e>
 800913e:	9b06      	ldr	r3, [sp, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	dd08      	ble.n	8009156 <_strtod_l+0x77e>
 8009144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009146:	9905      	ldr	r1, [sp, #20]
 8009148:	4620      	mov	r0, r4
 800914a:	f002 f9f9 	bl	800b540 <__pow5mult>
 800914e:	9005      	str	r0, [sp, #20]
 8009150:	2800      	cmp	r0, #0
 8009152:	f43f ae89 	beq.w	8008e68 <_strtod_l+0x490>
 8009156:	2f00      	cmp	r7, #0
 8009158:	dd08      	ble.n	800916c <_strtod_l+0x794>
 800915a:	9905      	ldr	r1, [sp, #20]
 800915c:	463a      	mov	r2, r7
 800915e:	4620      	mov	r0, r4
 8009160:	f002 fa48 	bl	800b5f4 <__lshift>
 8009164:	9005      	str	r0, [sp, #20]
 8009166:	2800      	cmp	r0, #0
 8009168:	f43f ae7e 	beq.w	8008e68 <_strtod_l+0x490>
 800916c:	f1b9 0f00 	cmp.w	r9, #0
 8009170:	dd08      	ble.n	8009184 <_strtod_l+0x7ac>
 8009172:	4631      	mov	r1, r6
 8009174:	464a      	mov	r2, r9
 8009176:	4620      	mov	r0, r4
 8009178:	f002 fa3c 	bl	800b5f4 <__lshift>
 800917c:	4606      	mov	r6, r0
 800917e:	2800      	cmp	r0, #0
 8009180:	f43f ae72 	beq.w	8008e68 <_strtod_l+0x490>
 8009184:	9a05      	ldr	r2, [sp, #20]
 8009186:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009188:	4620      	mov	r0, r4
 800918a:	f002 fabf 	bl	800b70c <__mdiff>
 800918e:	4605      	mov	r5, r0
 8009190:	2800      	cmp	r0, #0
 8009192:	f43f ae69 	beq.w	8008e68 <_strtod_l+0x490>
 8009196:	68c3      	ldr	r3, [r0, #12]
 8009198:	930b      	str	r3, [sp, #44]	; 0x2c
 800919a:	2300      	movs	r3, #0
 800919c:	60c3      	str	r3, [r0, #12]
 800919e:	4631      	mov	r1, r6
 80091a0:	f002 fa98 	bl	800b6d4 <__mcmp>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	da60      	bge.n	800926a <_strtod_l+0x892>
 80091a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091aa:	ea53 030a 	orrs.w	r3, r3, sl
 80091ae:	f040 8082 	bne.w	80092b6 <_strtod_l+0x8de>
 80091b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d17d      	bne.n	80092b6 <_strtod_l+0x8de>
 80091ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091be:	0d1b      	lsrs	r3, r3, #20
 80091c0:	051b      	lsls	r3, r3, #20
 80091c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80091c6:	d976      	bls.n	80092b6 <_strtod_l+0x8de>
 80091c8:	696b      	ldr	r3, [r5, #20]
 80091ca:	b913      	cbnz	r3, 80091d2 <_strtod_l+0x7fa>
 80091cc:	692b      	ldr	r3, [r5, #16]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	dd71      	ble.n	80092b6 <_strtod_l+0x8de>
 80091d2:	4629      	mov	r1, r5
 80091d4:	2201      	movs	r2, #1
 80091d6:	4620      	mov	r0, r4
 80091d8:	f002 fa0c 	bl	800b5f4 <__lshift>
 80091dc:	4631      	mov	r1, r6
 80091de:	4605      	mov	r5, r0
 80091e0:	f002 fa78 	bl	800b6d4 <__mcmp>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	dd66      	ble.n	80092b6 <_strtod_l+0x8de>
 80091e8:	9904      	ldr	r1, [sp, #16]
 80091ea:	4a53      	ldr	r2, [pc, #332]	; (8009338 <_strtod_l+0x960>)
 80091ec:	465b      	mov	r3, fp
 80091ee:	2900      	cmp	r1, #0
 80091f0:	f000 8081 	beq.w	80092f6 <_strtod_l+0x91e>
 80091f4:	ea02 010b 	and.w	r1, r2, fp
 80091f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091fc:	dc7b      	bgt.n	80092f6 <_strtod_l+0x91e>
 80091fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009202:	f77f aea9 	ble.w	8008f58 <_strtod_l+0x580>
 8009206:	4b4d      	ldr	r3, [pc, #308]	; (800933c <_strtod_l+0x964>)
 8009208:	4650      	mov	r0, sl
 800920a:	4659      	mov	r1, fp
 800920c:	2200      	movs	r2, #0
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	460b      	mov	r3, r1
 8009214:	4303      	orrs	r3, r0
 8009216:	bf08      	it	eq
 8009218:	2322      	moveq	r3, #34	; 0x22
 800921a:	4682      	mov	sl, r0
 800921c:	468b      	mov	fp, r1
 800921e:	bf08      	it	eq
 8009220:	6023      	streq	r3, [r4, #0]
 8009222:	e62b      	b.n	8008e7c <_strtod_l+0x4a4>
 8009224:	f04f 32ff 	mov.w	r2, #4294967295
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	ea03 0a0a 	and.w	sl, r3, sl
 8009230:	e6e3      	b.n	8008ffa <_strtod_l+0x622>
 8009232:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009236:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800923a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800923e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009242:	fa01 f308 	lsl.w	r3, r1, r8
 8009246:	9308      	str	r3, [sp, #32]
 8009248:	910d      	str	r1, [sp, #52]	; 0x34
 800924a:	e746      	b.n	80090da <_strtod_l+0x702>
 800924c:	2300      	movs	r3, #0
 800924e:	9308      	str	r3, [sp, #32]
 8009250:	2301      	movs	r3, #1
 8009252:	930d      	str	r3, [sp, #52]	; 0x34
 8009254:	e741      	b.n	80090da <_strtod_l+0x702>
 8009256:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009258:	4642      	mov	r2, r8
 800925a:	4620      	mov	r0, r4
 800925c:	f002 f9ca 	bl	800b5f4 <__lshift>
 8009260:	9018      	str	r0, [sp, #96]	; 0x60
 8009262:	2800      	cmp	r0, #0
 8009264:	f47f af6b 	bne.w	800913e <_strtod_l+0x766>
 8009268:	e5fe      	b.n	8008e68 <_strtod_l+0x490>
 800926a:	465f      	mov	r7, fp
 800926c:	d16e      	bne.n	800934c <_strtod_l+0x974>
 800926e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009274:	b342      	cbz	r2, 80092c8 <_strtod_l+0x8f0>
 8009276:	4a32      	ldr	r2, [pc, #200]	; (8009340 <_strtod_l+0x968>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d128      	bne.n	80092ce <_strtod_l+0x8f6>
 800927c:	9b04      	ldr	r3, [sp, #16]
 800927e:	4651      	mov	r1, sl
 8009280:	b1eb      	cbz	r3, 80092be <_strtod_l+0x8e6>
 8009282:	4b2d      	ldr	r3, [pc, #180]	; (8009338 <_strtod_l+0x960>)
 8009284:	403b      	ands	r3, r7
 8009286:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800928a:	f04f 32ff 	mov.w	r2, #4294967295
 800928e:	d819      	bhi.n	80092c4 <_strtod_l+0x8ec>
 8009290:	0d1b      	lsrs	r3, r3, #20
 8009292:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009296:	fa02 f303 	lsl.w	r3, r2, r3
 800929a:	4299      	cmp	r1, r3
 800929c:	d117      	bne.n	80092ce <_strtod_l+0x8f6>
 800929e:	4b29      	ldr	r3, [pc, #164]	; (8009344 <_strtod_l+0x96c>)
 80092a0:	429f      	cmp	r7, r3
 80092a2:	d102      	bne.n	80092aa <_strtod_l+0x8d2>
 80092a4:	3101      	adds	r1, #1
 80092a6:	f43f addf 	beq.w	8008e68 <_strtod_l+0x490>
 80092aa:	4b23      	ldr	r3, [pc, #140]	; (8009338 <_strtod_l+0x960>)
 80092ac:	403b      	ands	r3, r7
 80092ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80092b2:	f04f 0a00 	mov.w	sl, #0
 80092b6:	9b04      	ldr	r3, [sp, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1a4      	bne.n	8009206 <_strtod_l+0x82e>
 80092bc:	e5de      	b.n	8008e7c <_strtod_l+0x4a4>
 80092be:	f04f 33ff 	mov.w	r3, #4294967295
 80092c2:	e7ea      	b.n	800929a <_strtod_l+0x8c2>
 80092c4:	4613      	mov	r3, r2
 80092c6:	e7e8      	b.n	800929a <_strtod_l+0x8c2>
 80092c8:	ea53 030a 	orrs.w	r3, r3, sl
 80092cc:	d08c      	beq.n	80091e8 <_strtod_l+0x810>
 80092ce:	9b08      	ldr	r3, [sp, #32]
 80092d0:	b1db      	cbz	r3, 800930a <_strtod_l+0x932>
 80092d2:	423b      	tst	r3, r7
 80092d4:	d0ef      	beq.n	80092b6 <_strtod_l+0x8de>
 80092d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	4650      	mov	r0, sl
 80092dc:	4659      	mov	r1, fp
 80092de:	b1c3      	cbz	r3, 8009312 <_strtod_l+0x93a>
 80092e0:	f7ff fb5b 	bl	800899a <sulp>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	ec51 0b18 	vmov	r0, r1, d8
 80092ec:	f7f6 ffce 	bl	800028c <__adddf3>
 80092f0:	4682      	mov	sl, r0
 80092f2:	468b      	mov	fp, r1
 80092f4:	e7df      	b.n	80092b6 <_strtod_l+0x8de>
 80092f6:	4013      	ands	r3, r2
 80092f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009300:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009304:	f04f 3aff 	mov.w	sl, #4294967295
 8009308:	e7d5      	b.n	80092b6 <_strtod_l+0x8de>
 800930a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800930c:	ea13 0f0a 	tst.w	r3, sl
 8009310:	e7e0      	b.n	80092d4 <_strtod_l+0x8fc>
 8009312:	f7ff fb42 	bl	800899a <sulp>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	ec51 0b18 	vmov	r0, r1, d8
 800931e:	f7f6 ffb3 	bl	8000288 <__aeabi_dsub>
 8009322:	2200      	movs	r2, #0
 8009324:	2300      	movs	r3, #0
 8009326:	4682      	mov	sl, r0
 8009328:	468b      	mov	fp, r1
 800932a:	f7f7 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800932e:	2800      	cmp	r0, #0
 8009330:	d0c1      	beq.n	80092b6 <_strtod_l+0x8de>
 8009332:	e611      	b.n	8008f58 <_strtod_l+0x580>
 8009334:	fffffc02 	.word	0xfffffc02
 8009338:	7ff00000 	.word	0x7ff00000
 800933c:	39500000 	.word	0x39500000
 8009340:	000fffff 	.word	0x000fffff
 8009344:	7fefffff 	.word	0x7fefffff
 8009348:	0800cc60 	.word	0x0800cc60
 800934c:	4631      	mov	r1, r6
 800934e:	4628      	mov	r0, r5
 8009350:	f002 fb3e 	bl	800b9d0 <__ratio>
 8009354:	ec59 8b10 	vmov	r8, r9, d0
 8009358:	ee10 0a10 	vmov	r0, s0
 800935c:	2200      	movs	r2, #0
 800935e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009362:	4649      	mov	r1, r9
 8009364:	f7f7 fbc4 	bl	8000af0 <__aeabi_dcmple>
 8009368:	2800      	cmp	r0, #0
 800936a:	d07a      	beq.n	8009462 <_strtod_l+0xa8a>
 800936c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d04a      	beq.n	8009408 <_strtod_l+0xa30>
 8009372:	4b95      	ldr	r3, [pc, #596]	; (80095c8 <_strtod_l+0xbf0>)
 8009374:	2200      	movs	r2, #0
 8009376:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800937a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095c8 <_strtod_l+0xbf0>
 800937e:	f04f 0800 	mov.w	r8, #0
 8009382:	4b92      	ldr	r3, [pc, #584]	; (80095cc <_strtod_l+0xbf4>)
 8009384:	403b      	ands	r3, r7
 8009386:	930d      	str	r3, [sp, #52]	; 0x34
 8009388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800938a:	4b91      	ldr	r3, [pc, #580]	; (80095d0 <_strtod_l+0xbf8>)
 800938c:	429a      	cmp	r2, r3
 800938e:	f040 80b0 	bne.w	80094f2 <_strtod_l+0xb1a>
 8009392:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009396:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800939a:	ec4b ab10 	vmov	d0, sl, fp
 800939e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093a2:	f002 fa3d 	bl	800b820 <__ulp>
 80093a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80093aa:	ec53 2b10 	vmov	r2, r3, d0
 80093ae:	f7f7 f923 	bl	80005f8 <__aeabi_dmul>
 80093b2:	4652      	mov	r2, sl
 80093b4:	465b      	mov	r3, fp
 80093b6:	f7f6 ff69 	bl	800028c <__adddf3>
 80093ba:	460b      	mov	r3, r1
 80093bc:	4983      	ldr	r1, [pc, #524]	; (80095cc <_strtod_l+0xbf4>)
 80093be:	4a85      	ldr	r2, [pc, #532]	; (80095d4 <_strtod_l+0xbfc>)
 80093c0:	4019      	ands	r1, r3
 80093c2:	4291      	cmp	r1, r2
 80093c4:	4682      	mov	sl, r0
 80093c6:	d960      	bls.n	800948a <_strtod_l+0xab2>
 80093c8:	ee18 3a90 	vmov	r3, s17
 80093cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d104      	bne.n	80093de <_strtod_l+0xa06>
 80093d4:	ee18 3a10 	vmov	r3, s16
 80093d8:	3301      	adds	r3, #1
 80093da:	f43f ad45 	beq.w	8008e68 <_strtod_l+0x490>
 80093de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80095e0 <_strtod_l+0xc08>
 80093e2:	f04f 3aff 	mov.w	sl, #4294967295
 80093e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093e8:	4620      	mov	r0, r4
 80093ea:	f001 fee7 	bl	800b1bc <_Bfree>
 80093ee:	9905      	ldr	r1, [sp, #20]
 80093f0:	4620      	mov	r0, r4
 80093f2:	f001 fee3 	bl	800b1bc <_Bfree>
 80093f6:	4631      	mov	r1, r6
 80093f8:	4620      	mov	r0, r4
 80093fa:	f001 fedf 	bl	800b1bc <_Bfree>
 80093fe:	4629      	mov	r1, r5
 8009400:	4620      	mov	r0, r4
 8009402:	f001 fedb 	bl	800b1bc <_Bfree>
 8009406:	e61a      	b.n	800903e <_strtod_l+0x666>
 8009408:	f1ba 0f00 	cmp.w	sl, #0
 800940c:	d11b      	bne.n	8009446 <_strtod_l+0xa6e>
 800940e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009412:	b9f3      	cbnz	r3, 8009452 <_strtod_l+0xa7a>
 8009414:	4b6c      	ldr	r3, [pc, #432]	; (80095c8 <_strtod_l+0xbf0>)
 8009416:	2200      	movs	r2, #0
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	f7f7 fb5e 	bl	8000adc <__aeabi_dcmplt>
 8009420:	b9d0      	cbnz	r0, 8009458 <_strtod_l+0xa80>
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	4b6c      	ldr	r3, [pc, #432]	; (80095d8 <_strtod_l+0xc00>)
 8009428:	2200      	movs	r2, #0
 800942a:	f7f7 f8e5 	bl	80005f8 <__aeabi_dmul>
 800942e:	4680      	mov	r8, r0
 8009430:	4689      	mov	r9, r1
 8009432:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009436:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800943a:	9315      	str	r3, [sp, #84]	; 0x54
 800943c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009440:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009444:	e79d      	b.n	8009382 <_strtod_l+0x9aa>
 8009446:	f1ba 0f01 	cmp.w	sl, #1
 800944a:	d102      	bne.n	8009452 <_strtod_l+0xa7a>
 800944c:	2f00      	cmp	r7, #0
 800944e:	f43f ad83 	beq.w	8008f58 <_strtod_l+0x580>
 8009452:	4b62      	ldr	r3, [pc, #392]	; (80095dc <_strtod_l+0xc04>)
 8009454:	2200      	movs	r2, #0
 8009456:	e78e      	b.n	8009376 <_strtod_l+0x99e>
 8009458:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80095d8 <_strtod_l+0xc00>
 800945c:	f04f 0800 	mov.w	r8, #0
 8009460:	e7e7      	b.n	8009432 <_strtod_l+0xa5a>
 8009462:	4b5d      	ldr	r3, [pc, #372]	; (80095d8 <_strtod_l+0xc00>)
 8009464:	4640      	mov	r0, r8
 8009466:	4649      	mov	r1, r9
 8009468:	2200      	movs	r2, #0
 800946a:	f7f7 f8c5 	bl	80005f8 <__aeabi_dmul>
 800946e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009470:	4680      	mov	r8, r0
 8009472:	4689      	mov	r9, r1
 8009474:	b933      	cbnz	r3, 8009484 <_strtod_l+0xaac>
 8009476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800947a:	900e      	str	r0, [sp, #56]	; 0x38
 800947c:	930f      	str	r3, [sp, #60]	; 0x3c
 800947e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009482:	e7dd      	b.n	8009440 <_strtod_l+0xa68>
 8009484:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009488:	e7f9      	b.n	800947e <_strtod_l+0xaa6>
 800948a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800948e:	9b04      	ldr	r3, [sp, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1a8      	bne.n	80093e6 <_strtod_l+0xa0e>
 8009494:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800949a:	0d1b      	lsrs	r3, r3, #20
 800949c:	051b      	lsls	r3, r3, #20
 800949e:	429a      	cmp	r2, r3
 80094a0:	d1a1      	bne.n	80093e6 <_strtod_l+0xa0e>
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f7 fc07 	bl	8000cb8 <__aeabi_d2lz>
 80094aa:	f7f7 f877 	bl	800059c <__aeabi_l2d>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4640      	mov	r0, r8
 80094b4:	4649      	mov	r1, r9
 80094b6:	f7f6 fee7 	bl	8000288 <__aeabi_dsub>
 80094ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094c0:	ea43 030a 	orr.w	r3, r3, sl
 80094c4:	4313      	orrs	r3, r2
 80094c6:	4680      	mov	r8, r0
 80094c8:	4689      	mov	r9, r1
 80094ca:	d055      	beq.n	8009578 <_strtod_l+0xba0>
 80094cc:	a336      	add	r3, pc, #216	; (adr r3, 80095a8 <_strtod_l+0xbd0>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f7 fb03 	bl	8000adc <__aeabi_dcmplt>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f47f acd0 	bne.w	8008e7c <_strtod_l+0x4a4>
 80094dc:	a334      	add	r3, pc, #208	; (adr r3, 80095b0 <_strtod_l+0xbd8>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f7 fb17 	bl	8000b18 <__aeabi_dcmpgt>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f43f af7b 	beq.w	80093e6 <_strtod_l+0xa0e>
 80094f0:	e4c4      	b.n	8008e7c <_strtod_l+0x4a4>
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	b333      	cbz	r3, 8009544 <_strtod_l+0xb6c>
 80094f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094fc:	d822      	bhi.n	8009544 <_strtod_l+0xb6c>
 80094fe:	a32e      	add	r3, pc, #184	; (adr r3, 80095b8 <_strtod_l+0xbe0>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	4640      	mov	r0, r8
 8009506:	4649      	mov	r1, r9
 8009508:	f7f7 faf2 	bl	8000af0 <__aeabi_dcmple>
 800950c:	b1a0      	cbz	r0, 8009538 <_strtod_l+0xb60>
 800950e:	4649      	mov	r1, r9
 8009510:	4640      	mov	r0, r8
 8009512:	f7f7 fb49 	bl	8000ba8 <__aeabi_d2uiz>
 8009516:	2801      	cmp	r0, #1
 8009518:	bf38      	it	cc
 800951a:	2001      	movcc	r0, #1
 800951c:	f7f6 fff2 	bl	8000504 <__aeabi_ui2d>
 8009520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009522:	4680      	mov	r8, r0
 8009524:	4689      	mov	r9, r1
 8009526:	bb23      	cbnz	r3, 8009572 <_strtod_l+0xb9a>
 8009528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800952c:	9010      	str	r0, [sp, #64]	; 0x40
 800952e:	9311      	str	r3, [sp, #68]	; 0x44
 8009530:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009534:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800953c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009540:	1a9b      	subs	r3, r3, r2
 8009542:	9309      	str	r3, [sp, #36]	; 0x24
 8009544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009548:	eeb0 0a48 	vmov.f32	s0, s16
 800954c:	eef0 0a68 	vmov.f32	s1, s17
 8009550:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009554:	f002 f964 	bl	800b820 <__ulp>
 8009558:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800955c:	ec53 2b10 	vmov	r2, r3, d0
 8009560:	f7f7 f84a 	bl	80005f8 <__aeabi_dmul>
 8009564:	ec53 2b18 	vmov	r2, r3, d8
 8009568:	f7f6 fe90 	bl	800028c <__adddf3>
 800956c:	4682      	mov	sl, r0
 800956e:	468b      	mov	fp, r1
 8009570:	e78d      	b.n	800948e <_strtod_l+0xab6>
 8009572:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009576:	e7db      	b.n	8009530 <_strtod_l+0xb58>
 8009578:	a311      	add	r3, pc, #68	; (adr r3, 80095c0 <_strtod_l+0xbe8>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f7 faad 	bl	8000adc <__aeabi_dcmplt>
 8009582:	e7b2      	b.n	80094ea <_strtod_l+0xb12>
 8009584:	2300      	movs	r3, #0
 8009586:	930a      	str	r3, [sp, #40]	; 0x28
 8009588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800958a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	f7ff ba6b 	b.w	8008a68 <_strtod_l+0x90>
 8009592:	2a65      	cmp	r2, #101	; 0x65
 8009594:	f43f ab5f 	beq.w	8008c56 <_strtod_l+0x27e>
 8009598:	2a45      	cmp	r2, #69	; 0x45
 800959a:	f43f ab5c 	beq.w	8008c56 <_strtod_l+0x27e>
 800959e:	2301      	movs	r3, #1
 80095a0:	f7ff bb94 	b.w	8008ccc <_strtod_l+0x2f4>
 80095a4:	f3af 8000 	nop.w
 80095a8:	94a03595 	.word	0x94a03595
 80095ac:	3fdfffff 	.word	0x3fdfffff
 80095b0:	35afe535 	.word	0x35afe535
 80095b4:	3fe00000 	.word	0x3fe00000
 80095b8:	ffc00000 	.word	0xffc00000
 80095bc:	41dfffff 	.word	0x41dfffff
 80095c0:	94a03595 	.word	0x94a03595
 80095c4:	3fcfffff 	.word	0x3fcfffff
 80095c8:	3ff00000 	.word	0x3ff00000
 80095cc:	7ff00000 	.word	0x7ff00000
 80095d0:	7fe00000 	.word	0x7fe00000
 80095d4:	7c9fffff 	.word	0x7c9fffff
 80095d8:	3fe00000 	.word	0x3fe00000
 80095dc:	bff00000 	.word	0xbff00000
 80095e0:	7fefffff 	.word	0x7fefffff

080095e4 <_strtod_r>:
 80095e4:	4b01      	ldr	r3, [pc, #4]	; (80095ec <_strtod_r+0x8>)
 80095e6:	f7ff b9f7 	b.w	80089d8 <_strtod_l>
 80095ea:	bf00      	nop
 80095ec:	20000074 	.word	0x20000074

080095f0 <_strtol_l.constprop.0>:
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f6:	d001      	beq.n	80095fc <_strtol_l.constprop.0+0xc>
 80095f8:	2b24      	cmp	r3, #36	; 0x24
 80095fa:	d906      	bls.n	800960a <_strtol_l.constprop.0+0x1a>
 80095fc:	f7fe f8f6 	bl	80077ec <__errno>
 8009600:	2316      	movs	r3, #22
 8009602:	6003      	str	r3, [r0, #0]
 8009604:	2000      	movs	r0, #0
 8009606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80096f0 <_strtol_l.constprop.0+0x100>
 800960e:	460d      	mov	r5, r1
 8009610:	462e      	mov	r6, r5
 8009612:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009616:	f814 700c 	ldrb.w	r7, [r4, ip]
 800961a:	f017 0708 	ands.w	r7, r7, #8
 800961e:	d1f7      	bne.n	8009610 <_strtol_l.constprop.0+0x20>
 8009620:	2c2d      	cmp	r4, #45	; 0x2d
 8009622:	d132      	bne.n	800968a <_strtol_l.constprop.0+0x9a>
 8009624:	782c      	ldrb	r4, [r5, #0]
 8009626:	2701      	movs	r7, #1
 8009628:	1cb5      	adds	r5, r6, #2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d05b      	beq.n	80096e6 <_strtol_l.constprop.0+0xf6>
 800962e:	2b10      	cmp	r3, #16
 8009630:	d109      	bne.n	8009646 <_strtol_l.constprop.0+0x56>
 8009632:	2c30      	cmp	r4, #48	; 0x30
 8009634:	d107      	bne.n	8009646 <_strtol_l.constprop.0+0x56>
 8009636:	782c      	ldrb	r4, [r5, #0]
 8009638:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800963c:	2c58      	cmp	r4, #88	; 0x58
 800963e:	d14d      	bne.n	80096dc <_strtol_l.constprop.0+0xec>
 8009640:	786c      	ldrb	r4, [r5, #1]
 8009642:	2310      	movs	r3, #16
 8009644:	3502      	adds	r5, #2
 8009646:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800964a:	f108 38ff 	add.w	r8, r8, #4294967295
 800964e:	f04f 0c00 	mov.w	ip, #0
 8009652:	fbb8 f9f3 	udiv	r9, r8, r3
 8009656:	4666      	mov	r6, ip
 8009658:	fb03 8a19 	mls	sl, r3, r9, r8
 800965c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009660:	f1be 0f09 	cmp.w	lr, #9
 8009664:	d816      	bhi.n	8009694 <_strtol_l.constprop.0+0xa4>
 8009666:	4674      	mov	r4, lr
 8009668:	42a3      	cmp	r3, r4
 800966a:	dd24      	ble.n	80096b6 <_strtol_l.constprop.0+0xc6>
 800966c:	f1bc 0f00 	cmp.w	ip, #0
 8009670:	db1e      	blt.n	80096b0 <_strtol_l.constprop.0+0xc0>
 8009672:	45b1      	cmp	r9, r6
 8009674:	d31c      	bcc.n	80096b0 <_strtol_l.constprop.0+0xc0>
 8009676:	d101      	bne.n	800967c <_strtol_l.constprop.0+0x8c>
 8009678:	45a2      	cmp	sl, r4
 800967a:	db19      	blt.n	80096b0 <_strtol_l.constprop.0+0xc0>
 800967c:	fb06 4603 	mla	r6, r6, r3, r4
 8009680:	f04f 0c01 	mov.w	ip, #1
 8009684:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009688:	e7e8      	b.n	800965c <_strtol_l.constprop.0+0x6c>
 800968a:	2c2b      	cmp	r4, #43	; 0x2b
 800968c:	bf04      	itt	eq
 800968e:	782c      	ldrbeq	r4, [r5, #0]
 8009690:	1cb5      	addeq	r5, r6, #2
 8009692:	e7ca      	b.n	800962a <_strtol_l.constprop.0+0x3a>
 8009694:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009698:	f1be 0f19 	cmp.w	lr, #25
 800969c:	d801      	bhi.n	80096a2 <_strtol_l.constprop.0+0xb2>
 800969e:	3c37      	subs	r4, #55	; 0x37
 80096a0:	e7e2      	b.n	8009668 <_strtol_l.constprop.0+0x78>
 80096a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096a6:	f1be 0f19 	cmp.w	lr, #25
 80096aa:	d804      	bhi.n	80096b6 <_strtol_l.constprop.0+0xc6>
 80096ac:	3c57      	subs	r4, #87	; 0x57
 80096ae:	e7db      	b.n	8009668 <_strtol_l.constprop.0+0x78>
 80096b0:	f04f 3cff 	mov.w	ip, #4294967295
 80096b4:	e7e6      	b.n	8009684 <_strtol_l.constprop.0+0x94>
 80096b6:	f1bc 0f00 	cmp.w	ip, #0
 80096ba:	da05      	bge.n	80096c8 <_strtol_l.constprop.0+0xd8>
 80096bc:	2322      	movs	r3, #34	; 0x22
 80096be:	6003      	str	r3, [r0, #0]
 80096c0:	4646      	mov	r6, r8
 80096c2:	b942      	cbnz	r2, 80096d6 <_strtol_l.constprop.0+0xe6>
 80096c4:	4630      	mov	r0, r6
 80096c6:	e79e      	b.n	8009606 <_strtol_l.constprop.0+0x16>
 80096c8:	b107      	cbz	r7, 80096cc <_strtol_l.constprop.0+0xdc>
 80096ca:	4276      	negs	r6, r6
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	d0f9      	beq.n	80096c4 <_strtol_l.constprop.0+0xd4>
 80096d0:	f1bc 0f00 	cmp.w	ip, #0
 80096d4:	d000      	beq.n	80096d8 <_strtol_l.constprop.0+0xe8>
 80096d6:	1e69      	subs	r1, r5, #1
 80096d8:	6011      	str	r1, [r2, #0]
 80096da:	e7f3      	b.n	80096c4 <_strtol_l.constprop.0+0xd4>
 80096dc:	2430      	movs	r4, #48	; 0x30
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1b1      	bne.n	8009646 <_strtol_l.constprop.0+0x56>
 80096e2:	2308      	movs	r3, #8
 80096e4:	e7af      	b.n	8009646 <_strtol_l.constprop.0+0x56>
 80096e6:	2c30      	cmp	r4, #48	; 0x30
 80096e8:	d0a5      	beq.n	8009636 <_strtol_l.constprop.0+0x46>
 80096ea:	230a      	movs	r3, #10
 80096ec:	e7ab      	b.n	8009646 <_strtol_l.constprop.0+0x56>
 80096ee:	bf00      	nop
 80096f0:	0800cc89 	.word	0x0800cc89

080096f4 <_strtol_r>:
 80096f4:	f7ff bf7c 	b.w	80095f0 <_strtol_l.constprop.0>

080096f8 <__swbuf_r>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	460e      	mov	r6, r1
 80096fc:	4614      	mov	r4, r2
 80096fe:	4605      	mov	r5, r0
 8009700:	b118      	cbz	r0, 800970a <__swbuf_r+0x12>
 8009702:	6983      	ldr	r3, [r0, #24]
 8009704:	b90b      	cbnz	r3, 800970a <__swbuf_r+0x12>
 8009706:	f001 f86f 	bl	800a7e8 <__sinit>
 800970a:	4b21      	ldr	r3, [pc, #132]	; (8009790 <__swbuf_r+0x98>)
 800970c:	429c      	cmp	r4, r3
 800970e:	d12b      	bne.n	8009768 <__swbuf_r+0x70>
 8009710:	686c      	ldr	r4, [r5, #4]
 8009712:	69a3      	ldr	r3, [r4, #24]
 8009714:	60a3      	str	r3, [r4, #8]
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	071a      	lsls	r2, r3, #28
 800971a:	d52f      	bpl.n	800977c <__swbuf_r+0x84>
 800971c:	6923      	ldr	r3, [r4, #16]
 800971e:	b36b      	cbz	r3, 800977c <__swbuf_r+0x84>
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	6820      	ldr	r0, [r4, #0]
 8009724:	1ac0      	subs	r0, r0, r3
 8009726:	6963      	ldr	r3, [r4, #20]
 8009728:	b2f6      	uxtb	r6, r6
 800972a:	4283      	cmp	r3, r0
 800972c:	4637      	mov	r7, r6
 800972e:	dc04      	bgt.n	800973a <__swbuf_r+0x42>
 8009730:	4621      	mov	r1, r4
 8009732:	4628      	mov	r0, r5
 8009734:	f000 ffc4 	bl	800a6c0 <_fflush_r>
 8009738:	bb30      	cbnz	r0, 8009788 <__swbuf_r+0x90>
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	3b01      	subs	r3, #1
 800973e:	60a3      	str	r3, [r4, #8]
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	6022      	str	r2, [r4, #0]
 8009746:	701e      	strb	r6, [r3, #0]
 8009748:	6963      	ldr	r3, [r4, #20]
 800974a:	3001      	adds	r0, #1
 800974c:	4283      	cmp	r3, r0
 800974e:	d004      	beq.n	800975a <__swbuf_r+0x62>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	07db      	lsls	r3, r3, #31
 8009754:	d506      	bpl.n	8009764 <__swbuf_r+0x6c>
 8009756:	2e0a      	cmp	r6, #10
 8009758:	d104      	bne.n	8009764 <__swbuf_r+0x6c>
 800975a:	4621      	mov	r1, r4
 800975c:	4628      	mov	r0, r5
 800975e:	f000 ffaf 	bl	800a6c0 <_fflush_r>
 8009762:	b988      	cbnz	r0, 8009788 <__swbuf_r+0x90>
 8009764:	4638      	mov	r0, r7
 8009766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <__swbuf_r+0x9c>)
 800976a:	429c      	cmp	r4, r3
 800976c:	d101      	bne.n	8009772 <__swbuf_r+0x7a>
 800976e:	68ac      	ldr	r4, [r5, #8]
 8009770:	e7cf      	b.n	8009712 <__swbuf_r+0x1a>
 8009772:	4b09      	ldr	r3, [pc, #36]	; (8009798 <__swbuf_r+0xa0>)
 8009774:	429c      	cmp	r4, r3
 8009776:	bf08      	it	eq
 8009778:	68ec      	ldreq	r4, [r5, #12]
 800977a:	e7ca      	b.n	8009712 <__swbuf_r+0x1a>
 800977c:	4621      	mov	r1, r4
 800977e:	4628      	mov	r0, r5
 8009780:	f000 f81e 	bl	80097c0 <__swsetup_r>
 8009784:	2800      	cmp	r0, #0
 8009786:	d0cb      	beq.n	8009720 <__swbuf_r+0x28>
 8009788:	f04f 37ff 	mov.w	r7, #4294967295
 800978c:	e7ea      	b.n	8009764 <__swbuf_r+0x6c>
 800978e:	bf00      	nop
 8009790:	0800ce3c 	.word	0x0800ce3c
 8009794:	0800ce5c 	.word	0x0800ce5c
 8009798:	0800ce1c 	.word	0x0800ce1c

0800979c <_write_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	; (80097bc <_write_r+0x20>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7f8 f83b 	bl	8001826 <_write>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_write_r+0x1e>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_write_r+0x1e>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	200007c8 	.word	0x200007c8

080097c0 <__swsetup_r>:
 80097c0:	4b32      	ldr	r3, [pc, #200]	; (800988c <__swsetup_r+0xcc>)
 80097c2:	b570      	push	{r4, r5, r6, lr}
 80097c4:	681d      	ldr	r5, [r3, #0]
 80097c6:	4606      	mov	r6, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	b125      	cbz	r5, 80097d6 <__swsetup_r+0x16>
 80097cc:	69ab      	ldr	r3, [r5, #24]
 80097ce:	b913      	cbnz	r3, 80097d6 <__swsetup_r+0x16>
 80097d0:	4628      	mov	r0, r5
 80097d2:	f001 f809 	bl	800a7e8 <__sinit>
 80097d6:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <__swsetup_r+0xd0>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	d10f      	bne.n	80097fc <__swsetup_r+0x3c>
 80097dc:	686c      	ldr	r4, [r5, #4]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097e4:	0719      	lsls	r1, r3, #28
 80097e6:	d42c      	bmi.n	8009842 <__swsetup_r+0x82>
 80097e8:	06dd      	lsls	r5, r3, #27
 80097ea:	d411      	bmi.n	8009810 <__swsetup_r+0x50>
 80097ec:	2309      	movs	r3, #9
 80097ee:	6033      	str	r3, [r6, #0]
 80097f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	e03e      	b.n	800987a <__swsetup_r+0xba>
 80097fc:	4b25      	ldr	r3, [pc, #148]	; (8009894 <__swsetup_r+0xd4>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d101      	bne.n	8009806 <__swsetup_r+0x46>
 8009802:	68ac      	ldr	r4, [r5, #8]
 8009804:	e7eb      	b.n	80097de <__swsetup_r+0x1e>
 8009806:	4b24      	ldr	r3, [pc, #144]	; (8009898 <__swsetup_r+0xd8>)
 8009808:	429c      	cmp	r4, r3
 800980a:	bf08      	it	eq
 800980c:	68ec      	ldreq	r4, [r5, #12]
 800980e:	e7e6      	b.n	80097de <__swsetup_r+0x1e>
 8009810:	0758      	lsls	r0, r3, #29
 8009812:	d512      	bpl.n	800983a <__swsetup_r+0x7a>
 8009814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009816:	b141      	cbz	r1, 800982a <__swsetup_r+0x6a>
 8009818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800981c:	4299      	cmp	r1, r3
 800981e:	d002      	beq.n	8009826 <__swsetup_r+0x66>
 8009820:	4630      	mov	r0, r6
 8009822:	f7fe f82b 	bl	800787c <_free_r>
 8009826:	2300      	movs	r3, #0
 8009828:	6363      	str	r3, [r4, #52]	; 0x34
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	2300      	movs	r3, #0
 8009834:	6063      	str	r3, [r4, #4]
 8009836:	6923      	ldr	r3, [r4, #16]
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f043 0308 	orr.w	r3, r3, #8
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	b94b      	cbnz	r3, 800985a <__swsetup_r+0x9a>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800984c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009850:	d003      	beq.n	800985a <__swsetup_r+0x9a>
 8009852:	4621      	mov	r1, r4
 8009854:	4630      	mov	r0, r6
 8009856:	f001 fc13 	bl	800b080 <__smakebuf_r>
 800985a:	89a0      	ldrh	r0, [r4, #12]
 800985c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009860:	f010 0301 	ands.w	r3, r0, #1
 8009864:	d00a      	beq.n	800987c <__swsetup_r+0xbc>
 8009866:	2300      	movs	r3, #0
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	6963      	ldr	r3, [r4, #20]
 800986c:	425b      	negs	r3, r3
 800986e:	61a3      	str	r3, [r4, #24]
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	b943      	cbnz	r3, 8009886 <__swsetup_r+0xc6>
 8009874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009878:	d1ba      	bne.n	80097f0 <__swsetup_r+0x30>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	0781      	lsls	r1, r0, #30
 800987e:	bf58      	it	pl
 8009880:	6963      	ldrpl	r3, [r4, #20]
 8009882:	60a3      	str	r3, [r4, #8]
 8009884:	e7f4      	b.n	8009870 <__swsetup_r+0xb0>
 8009886:	2000      	movs	r0, #0
 8009888:	e7f7      	b.n	800987a <__swsetup_r+0xba>
 800988a:	bf00      	nop
 800988c:	2000000c 	.word	0x2000000c
 8009890:	0800ce3c 	.word	0x0800ce3c
 8009894:	0800ce5c 	.word	0x0800ce5c
 8009898:	0800ce1c 	.word	0x0800ce1c

0800989c <_close_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d06      	ldr	r5, [pc, #24]	; (80098b8 <_close_r+0x1c>)
 80098a0:	2300      	movs	r3, #0
 80098a2:	4604      	mov	r4, r0
 80098a4:	4608      	mov	r0, r1
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	f7f7 ffd9 	bl	800185e <_close>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d102      	bne.n	80098b6 <_close_r+0x1a>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	b103      	cbz	r3, 80098b6 <_close_r+0x1a>
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	bd38      	pop	{r3, r4, r5, pc}
 80098b8:	200007c8 	.word	0x200007c8

080098bc <quorem>:
 80098bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	6903      	ldr	r3, [r0, #16]
 80098c2:	690c      	ldr	r4, [r1, #16]
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	4607      	mov	r7, r0
 80098c8:	f2c0 8081 	blt.w	80099ce <quorem+0x112>
 80098cc:	3c01      	subs	r4, #1
 80098ce:	f101 0814 	add.w	r8, r1, #20
 80098d2:	f100 0514 	add.w	r5, r0, #20
 80098d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098e4:	3301      	adds	r3, #1
 80098e6:	429a      	cmp	r2, r3
 80098e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80098f4:	d331      	bcc.n	800995a <quorem+0x9e>
 80098f6:	f04f 0e00 	mov.w	lr, #0
 80098fa:	4640      	mov	r0, r8
 80098fc:	46ac      	mov	ip, r5
 80098fe:	46f2      	mov	sl, lr
 8009900:	f850 2b04 	ldr.w	r2, [r0], #4
 8009904:	b293      	uxth	r3, r2
 8009906:	fb06 e303 	mla	r3, r6, r3, lr
 800990a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800990e:	b29b      	uxth	r3, r3
 8009910:	ebaa 0303 	sub.w	r3, sl, r3
 8009914:	f8dc a000 	ldr.w	sl, [ip]
 8009918:	0c12      	lsrs	r2, r2, #16
 800991a:	fa13 f38a 	uxtah	r3, r3, sl
 800991e:	fb06 e202 	mla	r2, r6, r2, lr
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	9b00      	ldr	r3, [sp, #0]
 8009926:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800992a:	b292      	uxth	r2, r2
 800992c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009934:	f8bd 3000 	ldrh.w	r3, [sp]
 8009938:	4581      	cmp	r9, r0
 800993a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800993e:	f84c 3b04 	str.w	r3, [ip], #4
 8009942:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009946:	d2db      	bcs.n	8009900 <quorem+0x44>
 8009948:	f855 300b 	ldr.w	r3, [r5, fp]
 800994c:	b92b      	cbnz	r3, 800995a <quorem+0x9e>
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	3b04      	subs	r3, #4
 8009952:	429d      	cmp	r5, r3
 8009954:	461a      	mov	r2, r3
 8009956:	d32e      	bcc.n	80099b6 <quorem+0xfa>
 8009958:	613c      	str	r4, [r7, #16]
 800995a:	4638      	mov	r0, r7
 800995c:	f001 feba 	bl	800b6d4 <__mcmp>
 8009960:	2800      	cmp	r0, #0
 8009962:	db24      	blt.n	80099ae <quorem+0xf2>
 8009964:	3601      	adds	r6, #1
 8009966:	4628      	mov	r0, r5
 8009968:	f04f 0c00 	mov.w	ip, #0
 800996c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009970:	f8d0 e000 	ldr.w	lr, [r0]
 8009974:	b293      	uxth	r3, r2
 8009976:	ebac 0303 	sub.w	r3, ip, r3
 800997a:	0c12      	lsrs	r2, r2, #16
 800997c:	fa13 f38e 	uxtah	r3, r3, lr
 8009980:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009988:	b29b      	uxth	r3, r3
 800998a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800998e:	45c1      	cmp	r9, r8
 8009990:	f840 3b04 	str.w	r3, [r0], #4
 8009994:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009998:	d2e8      	bcs.n	800996c <quorem+0xb0>
 800999a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800999e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099a2:	b922      	cbnz	r2, 80099ae <quorem+0xf2>
 80099a4:	3b04      	subs	r3, #4
 80099a6:	429d      	cmp	r5, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	d30a      	bcc.n	80099c2 <quorem+0x106>
 80099ac:	613c      	str	r4, [r7, #16]
 80099ae:	4630      	mov	r0, r6
 80099b0:	b003      	add	sp, #12
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	6812      	ldr	r2, [r2, #0]
 80099b8:	3b04      	subs	r3, #4
 80099ba:	2a00      	cmp	r2, #0
 80099bc:	d1cc      	bne.n	8009958 <quorem+0x9c>
 80099be:	3c01      	subs	r4, #1
 80099c0:	e7c7      	b.n	8009952 <quorem+0x96>
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	3b04      	subs	r3, #4
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	d1f0      	bne.n	80099ac <quorem+0xf0>
 80099ca:	3c01      	subs	r4, #1
 80099cc:	e7eb      	b.n	80099a6 <quorem+0xea>
 80099ce:	2000      	movs	r0, #0
 80099d0:	e7ee      	b.n	80099b0 <quorem+0xf4>
 80099d2:	0000      	movs	r0, r0
 80099d4:	0000      	movs	r0, r0
	...

080099d8 <_dtoa_r>:
 80099d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	ed2d 8b04 	vpush	{d8-d9}
 80099e0:	ec57 6b10 	vmov	r6, r7, d0
 80099e4:	b093      	sub	sp, #76	; 0x4c
 80099e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099ec:	9106      	str	r1, [sp, #24]
 80099ee:	ee10 aa10 	vmov	sl, s0
 80099f2:	4604      	mov	r4, r0
 80099f4:	9209      	str	r2, [sp, #36]	; 0x24
 80099f6:	930c      	str	r3, [sp, #48]	; 0x30
 80099f8:	46bb      	mov	fp, r7
 80099fa:	b975      	cbnz	r5, 8009a1a <_dtoa_r+0x42>
 80099fc:	2010      	movs	r0, #16
 80099fe:	f7fd ff1f 	bl	8007840 <malloc>
 8009a02:	4602      	mov	r2, r0
 8009a04:	6260      	str	r0, [r4, #36]	; 0x24
 8009a06:	b920      	cbnz	r0, 8009a12 <_dtoa_r+0x3a>
 8009a08:	4ba7      	ldr	r3, [pc, #668]	; (8009ca8 <_dtoa_r+0x2d0>)
 8009a0a:	21ea      	movs	r1, #234	; 0xea
 8009a0c:	48a7      	ldr	r0, [pc, #668]	; (8009cac <_dtoa_r+0x2d4>)
 8009a0e:	f002 ff67 	bl	800c8e0 <__assert_func>
 8009a12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a16:	6005      	str	r5, [r0, #0]
 8009a18:	60c5      	str	r5, [r0, #12]
 8009a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a1c:	6819      	ldr	r1, [r3, #0]
 8009a1e:	b151      	cbz	r1, 8009a36 <_dtoa_r+0x5e>
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	604a      	str	r2, [r1, #4]
 8009a24:	2301      	movs	r3, #1
 8009a26:	4093      	lsls	r3, r2
 8009a28:	608b      	str	r3, [r1, #8]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f001 fbc6 	bl	800b1bc <_Bfree>
 8009a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	1e3b      	subs	r3, r7, #0
 8009a38:	bfaa      	itet	ge
 8009a3a:	2300      	movge	r3, #0
 8009a3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a40:	f8c8 3000 	strge.w	r3, [r8]
 8009a44:	4b9a      	ldr	r3, [pc, #616]	; (8009cb0 <_dtoa_r+0x2d8>)
 8009a46:	bfbc      	itt	lt
 8009a48:	2201      	movlt	r2, #1
 8009a4a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a4e:	ea33 030b 	bics.w	r3, r3, fp
 8009a52:	d11b      	bne.n	8009a8c <_dtoa_r+0xb4>
 8009a54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a56:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a60:	4333      	orrs	r3, r6
 8009a62:	f000 8592 	beq.w	800a58a <_dtoa_r+0xbb2>
 8009a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a68:	b963      	cbnz	r3, 8009a84 <_dtoa_r+0xac>
 8009a6a:	4b92      	ldr	r3, [pc, #584]	; (8009cb4 <_dtoa_r+0x2dc>)
 8009a6c:	e022      	b.n	8009ab4 <_dtoa_r+0xdc>
 8009a6e:	4b92      	ldr	r3, [pc, #584]	; (8009cb8 <_dtoa_r+0x2e0>)
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	3308      	adds	r3, #8
 8009a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	9801      	ldr	r0, [sp, #4]
 8009a7a:	b013      	add	sp, #76	; 0x4c
 8009a7c:	ecbd 8b04 	vpop	{d8-d9}
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	4b8b      	ldr	r3, [pc, #556]	; (8009cb4 <_dtoa_r+0x2dc>)
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	3303      	adds	r3, #3
 8009a8a:	e7f3      	b.n	8009a74 <_dtoa_r+0x9c>
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4650      	mov	r0, sl
 8009a92:	4659      	mov	r1, fp
 8009a94:	f7f7 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a98:	ec4b ab19 	vmov	d9, sl, fp
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	b158      	cbz	r0, 8009ab8 <_dtoa_r+0xe0>
 8009aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 856b 	beq.w	800a584 <_dtoa_r+0xbac>
 8009aae:	4883      	ldr	r0, [pc, #524]	; (8009cbc <_dtoa_r+0x2e4>)
 8009ab0:	6018      	str	r0, [r3, #0]
 8009ab2:	1e43      	subs	r3, r0, #1
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	e7df      	b.n	8009a78 <_dtoa_r+0xa0>
 8009ab8:	ec4b ab10 	vmov	d0, sl, fp
 8009abc:	aa10      	add	r2, sp, #64	; 0x40
 8009abe:	a911      	add	r1, sp, #68	; 0x44
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f001 ff29 	bl	800b918 <__d2b>
 8009ac6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009aca:	ee08 0a10 	vmov	s16, r0
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	f000 8084 	beq.w	8009bdc <_dtoa_r+0x204>
 8009ad4:	ee19 3a90 	vmov	r3, s19
 8009ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009adc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ae0:	4656      	mov	r6, sl
 8009ae2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ae6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009aee:	4b74      	ldr	r3, [pc, #464]	; (8009cc0 <_dtoa_r+0x2e8>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	4630      	mov	r0, r6
 8009af4:	4639      	mov	r1, r7
 8009af6:	f7f6 fbc7 	bl	8000288 <__aeabi_dsub>
 8009afa:	a365      	add	r3, pc, #404	; (adr r3, 8009c90 <_dtoa_r+0x2b8>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fd7a 	bl	80005f8 <__aeabi_dmul>
 8009b04:	a364      	add	r3, pc, #400	; (adr r3, 8009c98 <_dtoa_r+0x2c0>)
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f7f6 fbbf 	bl	800028c <__adddf3>
 8009b0e:	4606      	mov	r6, r0
 8009b10:	4628      	mov	r0, r5
 8009b12:	460f      	mov	r7, r1
 8009b14:	f7f6 fd06 	bl	8000524 <__aeabi_i2d>
 8009b18:	a361      	add	r3, pc, #388	; (adr r3, 8009ca0 <_dtoa_r+0x2c8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fd6b 	bl	80005f8 <__aeabi_dmul>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4630      	mov	r0, r6
 8009b28:	4639      	mov	r1, r7
 8009b2a:	f7f6 fbaf 	bl	800028c <__adddf3>
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	f7f7 f811 	bl	8000b58 <__aeabi_d2iz>
 8009b36:	2200      	movs	r2, #0
 8009b38:	9000      	str	r0, [sp, #0]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	4639      	mov	r1, r7
 8009b40:	f7f6 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8009b44:	b150      	cbz	r0, 8009b5c <_dtoa_r+0x184>
 8009b46:	9800      	ldr	r0, [sp, #0]
 8009b48:	f7f6 fcec 	bl	8000524 <__aeabi_i2d>
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	f7f6 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b54:	b910      	cbnz	r0, 8009b5c <_dtoa_r+0x184>
 8009b56:	9b00      	ldr	r3, [sp, #0]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	9b00      	ldr	r3, [sp, #0]
 8009b5e:	2b16      	cmp	r3, #22
 8009b60:	d85a      	bhi.n	8009c18 <_dtoa_r+0x240>
 8009b62:	9a00      	ldr	r2, [sp, #0]
 8009b64:	4b57      	ldr	r3, [pc, #348]	; (8009cc4 <_dtoa_r+0x2ec>)
 8009b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	ec51 0b19 	vmov	r0, r1, d9
 8009b72:	f7f6 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d050      	beq.n	8009c1c <_dtoa_r+0x244>
 8009b7a:	9b00      	ldr	r3, [sp, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	2300      	movs	r3, #0
 8009b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b86:	1b5d      	subs	r5, r3, r5
 8009b88:	1e6b      	subs	r3, r5, #1
 8009b8a:	9305      	str	r3, [sp, #20]
 8009b8c:	bf45      	ittet	mi
 8009b8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b92:	9304      	strmi	r3, [sp, #16]
 8009b94:	2300      	movpl	r3, #0
 8009b96:	2300      	movmi	r3, #0
 8009b98:	bf4c      	ite	mi
 8009b9a:	9305      	strmi	r3, [sp, #20]
 8009b9c:	9304      	strpl	r3, [sp, #16]
 8009b9e:	9b00      	ldr	r3, [sp, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	db3d      	blt.n	8009c20 <_dtoa_r+0x248>
 8009ba4:	9b05      	ldr	r3, [sp, #20]
 8009ba6:	9a00      	ldr	r2, [sp, #0]
 8009ba8:	920a      	str	r2, [sp, #40]	; 0x28
 8009baa:	4413      	add	r3, r2
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	2b09      	cmp	r3, #9
 8009bb6:	f200 8089 	bhi.w	8009ccc <_dtoa_r+0x2f4>
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	bfc4      	itt	gt
 8009bbe:	3b04      	subgt	r3, #4
 8009bc0:	9306      	strgt	r3, [sp, #24]
 8009bc2:	9b06      	ldr	r3, [sp, #24]
 8009bc4:	f1a3 0302 	sub.w	r3, r3, #2
 8009bc8:	bfcc      	ite	gt
 8009bca:	2500      	movgt	r5, #0
 8009bcc:	2501      	movle	r5, #1
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	f200 8087 	bhi.w	8009ce2 <_dtoa_r+0x30a>
 8009bd4:	e8df f003 	tbb	[pc, r3]
 8009bd8:	59383a2d 	.word	0x59383a2d
 8009bdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009be0:	441d      	add	r5, r3
 8009be2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009be6:	2b20      	cmp	r3, #32
 8009be8:	bfc1      	itttt	gt
 8009bea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bf2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009bf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bfa:	bfda      	itte	le
 8009bfc:	f1c3 0320 	rsble	r3, r3, #32
 8009c00:	fa06 f003 	lslle.w	r0, r6, r3
 8009c04:	4318      	orrgt	r0, r3
 8009c06:	f7f6 fc7d 	bl	8000504 <__aeabi_ui2d>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c12:	3d01      	subs	r5, #1
 8009c14:	930e      	str	r3, [sp, #56]	; 0x38
 8009c16:	e76a      	b.n	8009aee <_dtoa_r+0x116>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e7b2      	b.n	8009b82 <_dtoa_r+0x1aa>
 8009c1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c1e:	e7b1      	b.n	8009b84 <_dtoa_r+0x1ac>
 8009c20:	9b04      	ldr	r3, [sp, #16]
 8009c22:	9a00      	ldr	r2, [sp, #0]
 8009c24:	1a9b      	subs	r3, r3, r2
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	4253      	negs	r3, r2
 8009c2a:	9307      	str	r3, [sp, #28]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c30:	e7bf      	b.n	8009bb2 <_dtoa_r+0x1da>
 8009c32:	2300      	movs	r3, #0
 8009c34:	9308      	str	r3, [sp, #32]
 8009c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dc55      	bgt.n	8009ce8 <_dtoa_r+0x310>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c42:	461a      	mov	r2, r3
 8009c44:	9209      	str	r2, [sp, #36]	; 0x24
 8009c46:	e00c      	b.n	8009c62 <_dtoa_r+0x28a>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e7f3      	b.n	8009c34 <_dtoa_r+0x25c>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c50:	9308      	str	r3, [sp, #32]
 8009c52:	9b00      	ldr	r3, [sp, #0]
 8009c54:	4413      	add	r3, r2
 8009c56:	9302      	str	r3, [sp, #8]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	9303      	str	r3, [sp, #12]
 8009c5e:	bfb8      	it	lt
 8009c60:	2301      	movlt	r3, #1
 8009c62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c64:	2200      	movs	r2, #0
 8009c66:	6042      	str	r2, [r0, #4]
 8009c68:	2204      	movs	r2, #4
 8009c6a:	f102 0614 	add.w	r6, r2, #20
 8009c6e:	429e      	cmp	r6, r3
 8009c70:	6841      	ldr	r1, [r0, #4]
 8009c72:	d93d      	bls.n	8009cf0 <_dtoa_r+0x318>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f001 fa61 	bl	800b13c <_Balloc>
 8009c7a:	9001      	str	r0, [sp, #4]
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d13b      	bne.n	8009cf8 <_dtoa_r+0x320>
 8009c80:	4b11      	ldr	r3, [pc, #68]	; (8009cc8 <_dtoa_r+0x2f0>)
 8009c82:	4602      	mov	r2, r0
 8009c84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c88:	e6c0      	b.n	8009a0c <_dtoa_r+0x34>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e7df      	b.n	8009c4e <_dtoa_r+0x276>
 8009c8e:	bf00      	nop
 8009c90:	636f4361 	.word	0x636f4361
 8009c94:	3fd287a7 	.word	0x3fd287a7
 8009c98:	8b60c8b3 	.word	0x8b60c8b3
 8009c9c:	3fc68a28 	.word	0x3fc68a28
 8009ca0:	509f79fb 	.word	0x509f79fb
 8009ca4:	3fd34413 	.word	0x3fd34413
 8009ca8:	0800cd96 	.word	0x0800cd96
 8009cac:	0800cdad 	.word	0x0800cdad
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	0800cd92 	.word	0x0800cd92
 8009cb8:	0800cd89 	.word	0x0800cd89
 8009cbc:	0800d06a 	.word	0x0800d06a
 8009cc0:	3ff80000 	.word	0x3ff80000
 8009cc4:	0800cf80 	.word	0x0800cf80
 8009cc8:	0800ce08 	.word	0x0800ce08
 8009ccc:	2501      	movs	r5, #1
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9306      	str	r3, [sp, #24]
 8009cd2:	9508      	str	r5, [sp, #32]
 8009cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2312      	movs	r3, #18
 8009ce0:	e7b0      	b.n	8009c44 <_dtoa_r+0x26c>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	9308      	str	r3, [sp, #32]
 8009ce6:	e7f5      	b.n	8009cd4 <_dtoa_r+0x2fc>
 8009ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cee:	e7b8      	b.n	8009c62 <_dtoa_r+0x28a>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	6041      	str	r1, [r0, #4]
 8009cf4:	0052      	lsls	r2, r2, #1
 8009cf6:	e7b8      	b.n	8009c6a <_dtoa_r+0x292>
 8009cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	601a      	str	r2, [r3, #0]
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	2b0e      	cmp	r3, #14
 8009d02:	f200 809d 	bhi.w	8009e40 <_dtoa_r+0x468>
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	f000 809a 	beq.w	8009e40 <_dtoa_r+0x468>
 8009d0c:	9b00      	ldr	r3, [sp, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dd32      	ble.n	8009d78 <_dtoa_r+0x3a0>
 8009d12:	4ab7      	ldr	r2, [pc, #732]	; (8009ff0 <_dtoa_r+0x618>)
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d20:	9b00      	ldr	r3, [sp, #0]
 8009d22:	05d8      	lsls	r0, r3, #23
 8009d24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d28:	d516      	bpl.n	8009d58 <_dtoa_r+0x380>
 8009d2a:	4bb2      	ldr	r3, [pc, #712]	; (8009ff4 <_dtoa_r+0x61c>)
 8009d2c:	ec51 0b19 	vmov	r0, r1, d9
 8009d30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d34:	f7f6 fd8a 	bl	800084c <__aeabi_ddiv>
 8009d38:	f007 070f 	and.w	r7, r7, #15
 8009d3c:	4682      	mov	sl, r0
 8009d3e:	468b      	mov	fp, r1
 8009d40:	2503      	movs	r5, #3
 8009d42:	4eac      	ldr	r6, [pc, #688]	; (8009ff4 <_dtoa_r+0x61c>)
 8009d44:	b957      	cbnz	r7, 8009d5c <_dtoa_r+0x384>
 8009d46:	4642      	mov	r2, r8
 8009d48:	464b      	mov	r3, r9
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	f7f6 fd7d 	bl	800084c <__aeabi_ddiv>
 8009d52:	4682      	mov	sl, r0
 8009d54:	468b      	mov	fp, r1
 8009d56:	e028      	b.n	8009daa <_dtoa_r+0x3d2>
 8009d58:	2502      	movs	r5, #2
 8009d5a:	e7f2      	b.n	8009d42 <_dtoa_r+0x36a>
 8009d5c:	07f9      	lsls	r1, r7, #31
 8009d5e:	d508      	bpl.n	8009d72 <_dtoa_r+0x39a>
 8009d60:	4640      	mov	r0, r8
 8009d62:	4649      	mov	r1, r9
 8009d64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d68:	f7f6 fc46 	bl	80005f8 <__aeabi_dmul>
 8009d6c:	3501      	adds	r5, #1
 8009d6e:	4680      	mov	r8, r0
 8009d70:	4689      	mov	r9, r1
 8009d72:	107f      	asrs	r7, r7, #1
 8009d74:	3608      	adds	r6, #8
 8009d76:	e7e5      	b.n	8009d44 <_dtoa_r+0x36c>
 8009d78:	f000 809b 	beq.w	8009eb2 <_dtoa_r+0x4da>
 8009d7c:	9b00      	ldr	r3, [sp, #0]
 8009d7e:	4f9d      	ldr	r7, [pc, #628]	; (8009ff4 <_dtoa_r+0x61c>)
 8009d80:	425e      	negs	r6, r3
 8009d82:	4b9b      	ldr	r3, [pc, #620]	; (8009ff0 <_dtoa_r+0x618>)
 8009d84:	f006 020f 	and.w	r2, r6, #15
 8009d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	ec51 0b19 	vmov	r0, r1, d9
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	1136      	asrs	r6, r6, #4
 8009d9a:	4682      	mov	sl, r0
 8009d9c:	468b      	mov	fp, r1
 8009d9e:	2300      	movs	r3, #0
 8009da0:	2502      	movs	r5, #2
 8009da2:	2e00      	cmp	r6, #0
 8009da4:	d17a      	bne.n	8009e9c <_dtoa_r+0x4c4>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1d3      	bne.n	8009d52 <_dtoa_r+0x37a>
 8009daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 8082 	beq.w	8009eb6 <_dtoa_r+0x4de>
 8009db2:	4b91      	ldr	r3, [pc, #580]	; (8009ff8 <_dtoa_r+0x620>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	4650      	mov	r0, sl
 8009db8:	4659      	mov	r1, fp
 8009dba:	f7f6 fe8f 	bl	8000adc <__aeabi_dcmplt>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d079      	beq.n	8009eb6 <_dtoa_r+0x4de>
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d076      	beq.n	8009eb6 <_dtoa_r+0x4de>
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	dd36      	ble.n	8009e3c <_dtoa_r+0x464>
 8009dce:	9b00      	ldr	r3, [sp, #0]
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	4659      	mov	r1, fp
 8009dd4:	1e5f      	subs	r7, r3, #1
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4b88      	ldr	r3, [pc, #544]	; (8009ffc <_dtoa_r+0x624>)
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	9e02      	ldr	r6, [sp, #8]
 8009de0:	4682      	mov	sl, r0
 8009de2:	468b      	mov	fp, r1
 8009de4:	3501      	adds	r5, #1
 8009de6:	4628      	mov	r0, r5
 8009de8:	f7f6 fb9c 	bl	8000524 <__aeabi_i2d>
 8009dec:	4652      	mov	r2, sl
 8009dee:	465b      	mov	r3, fp
 8009df0:	f7f6 fc02 	bl	80005f8 <__aeabi_dmul>
 8009df4:	4b82      	ldr	r3, [pc, #520]	; (800a000 <_dtoa_r+0x628>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	f7f6 fa48 	bl	800028c <__adddf3>
 8009dfc:	46d0      	mov	r8, sl
 8009dfe:	46d9      	mov	r9, fp
 8009e00:	4682      	mov	sl, r0
 8009e02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e06:	2e00      	cmp	r6, #0
 8009e08:	d158      	bne.n	8009ebc <_dtoa_r+0x4e4>
 8009e0a:	4b7e      	ldr	r3, [pc, #504]	; (800a004 <_dtoa_r+0x62c>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4649      	mov	r1, r9
 8009e12:	f7f6 fa39 	bl	8000288 <__aeabi_dsub>
 8009e16:	4652      	mov	r2, sl
 8009e18:	465b      	mov	r3, fp
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4689      	mov	r9, r1
 8009e1e:	f7f6 fe7b 	bl	8000b18 <__aeabi_dcmpgt>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f040 8295 	bne.w	800a352 <_dtoa_r+0x97a>
 8009e28:	4652      	mov	r2, sl
 8009e2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e2e:	4640      	mov	r0, r8
 8009e30:	4649      	mov	r1, r9
 8009e32:	f7f6 fe53 	bl	8000adc <__aeabi_dcmplt>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f040 8289 	bne.w	800a34e <_dtoa_r+0x976>
 8009e3c:	ec5b ab19 	vmov	sl, fp, d9
 8009e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f2c0 8148 	blt.w	800a0d8 <_dtoa_r+0x700>
 8009e48:	9a00      	ldr	r2, [sp, #0]
 8009e4a:	2a0e      	cmp	r2, #14
 8009e4c:	f300 8144 	bgt.w	800a0d8 <_dtoa_r+0x700>
 8009e50:	4b67      	ldr	r3, [pc, #412]	; (8009ff0 <_dtoa_r+0x618>)
 8009e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f280 80d5 	bge.w	800a00c <_dtoa_r+0x634>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f300 80d1 	bgt.w	800a00c <_dtoa_r+0x634>
 8009e6a:	f040 826f 	bne.w	800a34c <_dtoa_r+0x974>
 8009e6e:	4b65      	ldr	r3, [pc, #404]	; (800a004 <_dtoa_r+0x62c>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	f7f6 fbbf 	bl	80005f8 <__aeabi_dmul>
 8009e7a:	4652      	mov	r2, sl
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	f7f6 fe41 	bl	8000b04 <__aeabi_dcmpge>
 8009e82:	9e03      	ldr	r6, [sp, #12]
 8009e84:	4637      	mov	r7, r6
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f040 8245 	bne.w	800a316 <_dtoa_r+0x93e>
 8009e8c:	9d01      	ldr	r5, [sp, #4]
 8009e8e:	2331      	movs	r3, #49	; 0x31
 8009e90:	f805 3b01 	strb.w	r3, [r5], #1
 8009e94:	9b00      	ldr	r3, [sp, #0]
 8009e96:	3301      	adds	r3, #1
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	e240      	b.n	800a31e <_dtoa_r+0x946>
 8009e9c:	07f2      	lsls	r2, r6, #31
 8009e9e:	d505      	bpl.n	8009eac <_dtoa_r+0x4d4>
 8009ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ea4:	f7f6 fba8 	bl	80005f8 <__aeabi_dmul>
 8009ea8:	3501      	adds	r5, #1
 8009eaa:	2301      	movs	r3, #1
 8009eac:	1076      	asrs	r6, r6, #1
 8009eae:	3708      	adds	r7, #8
 8009eb0:	e777      	b.n	8009da2 <_dtoa_r+0x3ca>
 8009eb2:	2502      	movs	r5, #2
 8009eb4:	e779      	b.n	8009daa <_dtoa_r+0x3d2>
 8009eb6:	9f00      	ldr	r7, [sp, #0]
 8009eb8:	9e03      	ldr	r6, [sp, #12]
 8009eba:	e794      	b.n	8009de6 <_dtoa_r+0x40e>
 8009ebc:	9901      	ldr	r1, [sp, #4]
 8009ebe:	4b4c      	ldr	r3, [pc, #304]	; (8009ff0 <_dtoa_r+0x618>)
 8009ec0:	4431      	add	r1, r6
 8009ec2:	910d      	str	r1, [sp, #52]	; 0x34
 8009ec4:	9908      	ldr	r1, [sp, #32]
 8009ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009eca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ece:	2900      	cmp	r1, #0
 8009ed0:	d043      	beq.n	8009f5a <_dtoa_r+0x582>
 8009ed2:	494d      	ldr	r1, [pc, #308]	; (800a008 <_dtoa_r+0x630>)
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	f7f6 fcb9 	bl	800084c <__aeabi_ddiv>
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	f7f6 f9d3 	bl	8000288 <__aeabi_dsub>
 8009ee2:	9d01      	ldr	r5, [sp, #4]
 8009ee4:	4682      	mov	sl, r0
 8009ee6:	468b      	mov	fp, r1
 8009ee8:	4649      	mov	r1, r9
 8009eea:	4640      	mov	r0, r8
 8009eec:	f7f6 fe34 	bl	8000b58 <__aeabi_d2iz>
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	f7f6 fb17 	bl	8000524 <__aeabi_i2d>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 f9c3 	bl	8000288 <__aeabi_dsub>
 8009f02:	3630      	adds	r6, #48	; 0x30
 8009f04:	f805 6b01 	strb.w	r6, [r5], #1
 8009f08:	4652      	mov	r2, sl
 8009f0a:	465b      	mov	r3, fp
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	4689      	mov	r9, r1
 8009f10:	f7f6 fde4 	bl	8000adc <__aeabi_dcmplt>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d163      	bne.n	8009fe0 <_dtoa_r+0x608>
 8009f18:	4642      	mov	r2, r8
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	4936      	ldr	r1, [pc, #216]	; (8009ff8 <_dtoa_r+0x620>)
 8009f1e:	2000      	movs	r0, #0
 8009f20:	f7f6 f9b2 	bl	8000288 <__aeabi_dsub>
 8009f24:	4652      	mov	r2, sl
 8009f26:	465b      	mov	r3, fp
 8009f28:	f7f6 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f040 80b5 	bne.w	800a09c <_dtoa_r+0x6c4>
 8009f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f34:	429d      	cmp	r5, r3
 8009f36:	d081      	beq.n	8009e3c <_dtoa_r+0x464>
 8009f38:	4b30      	ldr	r3, [pc, #192]	; (8009ffc <_dtoa_r+0x624>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	4659      	mov	r1, fp
 8009f40:	f7f6 fb5a 	bl	80005f8 <__aeabi_dmul>
 8009f44:	4b2d      	ldr	r3, [pc, #180]	; (8009ffc <_dtoa_r+0x624>)
 8009f46:	4682      	mov	sl, r0
 8009f48:	468b      	mov	fp, r1
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f7f6 fb52 	bl	80005f8 <__aeabi_dmul>
 8009f54:	4680      	mov	r8, r0
 8009f56:	4689      	mov	r9, r1
 8009f58:	e7c6      	b.n	8009ee8 <_dtoa_r+0x510>
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	4659      	mov	r1, fp
 8009f5e:	f7f6 fb4b 	bl	80005f8 <__aeabi_dmul>
 8009f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f64:	9d01      	ldr	r5, [sp, #4]
 8009f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f68:	4682      	mov	sl, r0
 8009f6a:	468b      	mov	fp, r1
 8009f6c:	4649      	mov	r1, r9
 8009f6e:	4640      	mov	r0, r8
 8009f70:	f7f6 fdf2 	bl	8000b58 <__aeabi_d2iz>
 8009f74:	4606      	mov	r6, r0
 8009f76:	f7f6 fad5 	bl	8000524 <__aeabi_i2d>
 8009f7a:	3630      	adds	r6, #48	; 0x30
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4640      	mov	r0, r8
 8009f82:	4649      	mov	r1, r9
 8009f84:	f7f6 f980 	bl	8000288 <__aeabi_dsub>
 8009f88:	f805 6b01 	strb.w	r6, [r5], #1
 8009f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f8e:	429d      	cmp	r5, r3
 8009f90:	4680      	mov	r8, r0
 8009f92:	4689      	mov	r9, r1
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	d124      	bne.n	8009fe4 <_dtoa_r+0x60c>
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <_dtoa_r+0x630>)
 8009f9c:	4650      	mov	r0, sl
 8009f9e:	4659      	mov	r1, fp
 8009fa0:	f7f6 f974 	bl	800028c <__adddf3>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4640      	mov	r0, r8
 8009faa:	4649      	mov	r1, r9
 8009fac:	f7f6 fdb4 	bl	8000b18 <__aeabi_dcmpgt>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d173      	bne.n	800a09c <_dtoa_r+0x6c4>
 8009fb4:	4652      	mov	r2, sl
 8009fb6:	465b      	mov	r3, fp
 8009fb8:	4913      	ldr	r1, [pc, #76]	; (800a008 <_dtoa_r+0x630>)
 8009fba:	2000      	movs	r0, #0
 8009fbc:	f7f6 f964 	bl	8000288 <__aeabi_dsub>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 fd88 	bl	8000adc <__aeabi_dcmplt>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	f43f af35 	beq.w	8009e3c <_dtoa_r+0x464>
 8009fd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fd4:	1e6b      	subs	r3, r5, #1
 8009fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fdc:	2b30      	cmp	r3, #48	; 0x30
 8009fde:	d0f8      	beq.n	8009fd2 <_dtoa_r+0x5fa>
 8009fe0:	9700      	str	r7, [sp, #0]
 8009fe2:	e049      	b.n	800a078 <_dtoa_r+0x6a0>
 8009fe4:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <_dtoa_r+0x624>)
 8009fe6:	f7f6 fb07 	bl	80005f8 <__aeabi_dmul>
 8009fea:	4680      	mov	r8, r0
 8009fec:	4689      	mov	r9, r1
 8009fee:	e7bd      	b.n	8009f6c <_dtoa_r+0x594>
 8009ff0:	0800cf80 	.word	0x0800cf80
 8009ff4:	0800cf58 	.word	0x0800cf58
 8009ff8:	3ff00000 	.word	0x3ff00000
 8009ffc:	40240000 	.word	0x40240000
 800a000:	401c0000 	.word	0x401c0000
 800a004:	40140000 	.word	0x40140000
 800a008:	3fe00000 	.word	0x3fe00000
 800a00c:	9d01      	ldr	r5, [sp, #4]
 800a00e:	4656      	mov	r6, sl
 800a010:	465f      	mov	r7, fp
 800a012:	4642      	mov	r2, r8
 800a014:	464b      	mov	r3, r9
 800a016:	4630      	mov	r0, r6
 800a018:	4639      	mov	r1, r7
 800a01a:	f7f6 fc17 	bl	800084c <__aeabi_ddiv>
 800a01e:	f7f6 fd9b 	bl	8000b58 <__aeabi_d2iz>
 800a022:	4682      	mov	sl, r0
 800a024:	f7f6 fa7e 	bl	8000524 <__aeabi_i2d>
 800a028:	4642      	mov	r2, r8
 800a02a:	464b      	mov	r3, r9
 800a02c:	f7f6 fae4 	bl	80005f8 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a03c:	f7f6 f924 	bl	8000288 <__aeabi_dsub>
 800a040:	f805 6b01 	strb.w	r6, [r5], #1
 800a044:	9e01      	ldr	r6, [sp, #4]
 800a046:	9f03      	ldr	r7, [sp, #12]
 800a048:	1bae      	subs	r6, r5, r6
 800a04a:	42b7      	cmp	r7, r6
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	d135      	bne.n	800a0be <_dtoa_r+0x6e6>
 800a052:	f7f6 f91b 	bl	800028c <__adddf3>
 800a056:	4642      	mov	r2, r8
 800a058:	464b      	mov	r3, r9
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	f7f6 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 800a062:	b9d0      	cbnz	r0, 800a09a <_dtoa_r+0x6c2>
 800a064:	4642      	mov	r2, r8
 800a066:	464b      	mov	r3, r9
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	f7f6 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a070:	b110      	cbz	r0, 800a078 <_dtoa_r+0x6a0>
 800a072:	f01a 0f01 	tst.w	sl, #1
 800a076:	d110      	bne.n	800a09a <_dtoa_r+0x6c2>
 800a078:	4620      	mov	r0, r4
 800a07a:	ee18 1a10 	vmov	r1, s16
 800a07e:	f001 f89d 	bl	800b1bc <_Bfree>
 800a082:	2300      	movs	r3, #0
 800a084:	9800      	ldr	r0, [sp, #0]
 800a086:	702b      	strb	r3, [r5, #0]
 800a088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a08a:	3001      	adds	r0, #1
 800a08c:	6018      	str	r0, [r3, #0]
 800a08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a090:	2b00      	cmp	r3, #0
 800a092:	f43f acf1 	beq.w	8009a78 <_dtoa_r+0xa0>
 800a096:	601d      	str	r5, [r3, #0]
 800a098:	e4ee      	b.n	8009a78 <_dtoa_r+0xa0>
 800a09a:	9f00      	ldr	r7, [sp, #0]
 800a09c:	462b      	mov	r3, r5
 800a09e:	461d      	mov	r5, r3
 800a0a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0a4:	2a39      	cmp	r2, #57	; 0x39
 800a0a6:	d106      	bne.n	800a0b6 <_dtoa_r+0x6de>
 800a0a8:	9a01      	ldr	r2, [sp, #4]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d1f7      	bne.n	800a09e <_dtoa_r+0x6c6>
 800a0ae:	9901      	ldr	r1, [sp, #4]
 800a0b0:	2230      	movs	r2, #48	; 0x30
 800a0b2:	3701      	adds	r7, #1
 800a0b4:	700a      	strb	r2, [r1, #0]
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	3201      	adds	r2, #1
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	e790      	b.n	8009fe0 <_dtoa_r+0x608>
 800a0be:	4ba6      	ldr	r3, [pc, #664]	; (800a358 <_dtoa_r+0x980>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f7f6 fa99 	bl	80005f8 <__aeabi_dmul>
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460f      	mov	r7, r1
 800a0ce:	f7f6 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d09d      	beq.n	800a012 <_dtoa_r+0x63a>
 800a0d6:	e7cf      	b.n	800a078 <_dtoa_r+0x6a0>
 800a0d8:	9a08      	ldr	r2, [sp, #32]
 800a0da:	2a00      	cmp	r2, #0
 800a0dc:	f000 80d7 	beq.w	800a28e <_dtoa_r+0x8b6>
 800a0e0:	9a06      	ldr	r2, [sp, #24]
 800a0e2:	2a01      	cmp	r2, #1
 800a0e4:	f300 80ba 	bgt.w	800a25c <_dtoa_r+0x884>
 800a0e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	f000 80b2 	beq.w	800a254 <_dtoa_r+0x87c>
 800a0f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0f4:	9e07      	ldr	r6, [sp, #28]
 800a0f6:	9d04      	ldr	r5, [sp, #16]
 800a0f8:	9a04      	ldr	r2, [sp, #16]
 800a0fa:	441a      	add	r2, r3
 800a0fc:	9204      	str	r2, [sp, #16]
 800a0fe:	9a05      	ldr	r2, [sp, #20]
 800a100:	2101      	movs	r1, #1
 800a102:	441a      	add	r2, r3
 800a104:	4620      	mov	r0, r4
 800a106:	9205      	str	r2, [sp, #20]
 800a108:	f001 f95a 	bl	800b3c0 <__i2b>
 800a10c:	4607      	mov	r7, r0
 800a10e:	2d00      	cmp	r5, #0
 800a110:	dd0c      	ble.n	800a12c <_dtoa_r+0x754>
 800a112:	9b05      	ldr	r3, [sp, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	dd09      	ble.n	800a12c <_dtoa_r+0x754>
 800a118:	42ab      	cmp	r3, r5
 800a11a:	9a04      	ldr	r2, [sp, #16]
 800a11c:	bfa8      	it	ge
 800a11e:	462b      	movge	r3, r5
 800a120:	1ad2      	subs	r2, r2, r3
 800a122:	9204      	str	r2, [sp, #16]
 800a124:	9a05      	ldr	r2, [sp, #20]
 800a126:	1aed      	subs	r5, r5, r3
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	9305      	str	r3, [sp, #20]
 800a12c:	9b07      	ldr	r3, [sp, #28]
 800a12e:	b31b      	cbz	r3, 800a178 <_dtoa_r+0x7a0>
 800a130:	9b08      	ldr	r3, [sp, #32]
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 80af 	beq.w	800a296 <_dtoa_r+0x8be>
 800a138:	2e00      	cmp	r6, #0
 800a13a:	dd13      	ble.n	800a164 <_dtoa_r+0x78c>
 800a13c:	4639      	mov	r1, r7
 800a13e:	4632      	mov	r2, r6
 800a140:	4620      	mov	r0, r4
 800a142:	f001 f9fd 	bl	800b540 <__pow5mult>
 800a146:	ee18 2a10 	vmov	r2, s16
 800a14a:	4601      	mov	r1, r0
 800a14c:	4607      	mov	r7, r0
 800a14e:	4620      	mov	r0, r4
 800a150:	f001 f94c 	bl	800b3ec <__multiply>
 800a154:	ee18 1a10 	vmov	r1, s16
 800a158:	4680      	mov	r8, r0
 800a15a:	4620      	mov	r0, r4
 800a15c:	f001 f82e 	bl	800b1bc <_Bfree>
 800a160:	ee08 8a10 	vmov	s16, r8
 800a164:	9b07      	ldr	r3, [sp, #28]
 800a166:	1b9a      	subs	r2, r3, r6
 800a168:	d006      	beq.n	800a178 <_dtoa_r+0x7a0>
 800a16a:	ee18 1a10 	vmov	r1, s16
 800a16e:	4620      	mov	r0, r4
 800a170:	f001 f9e6 	bl	800b540 <__pow5mult>
 800a174:	ee08 0a10 	vmov	s16, r0
 800a178:	2101      	movs	r1, #1
 800a17a:	4620      	mov	r0, r4
 800a17c:	f001 f920 	bl	800b3c0 <__i2b>
 800a180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a182:	2b00      	cmp	r3, #0
 800a184:	4606      	mov	r6, r0
 800a186:	f340 8088 	ble.w	800a29a <_dtoa_r+0x8c2>
 800a18a:	461a      	mov	r2, r3
 800a18c:	4601      	mov	r1, r0
 800a18e:	4620      	mov	r0, r4
 800a190:	f001 f9d6 	bl	800b540 <__pow5mult>
 800a194:	9b06      	ldr	r3, [sp, #24]
 800a196:	2b01      	cmp	r3, #1
 800a198:	4606      	mov	r6, r0
 800a19a:	f340 8081 	ble.w	800a2a0 <_dtoa_r+0x8c8>
 800a19e:	f04f 0800 	mov.w	r8, #0
 800a1a2:	6933      	ldr	r3, [r6, #16]
 800a1a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1a8:	6918      	ldr	r0, [r3, #16]
 800a1aa:	f001 f8b9 	bl	800b320 <__hi0bits>
 800a1ae:	f1c0 0020 	rsb	r0, r0, #32
 800a1b2:	9b05      	ldr	r3, [sp, #20]
 800a1b4:	4418      	add	r0, r3
 800a1b6:	f010 001f 	ands.w	r0, r0, #31
 800a1ba:	f000 8092 	beq.w	800a2e2 <_dtoa_r+0x90a>
 800a1be:	f1c0 0320 	rsb	r3, r0, #32
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	f340 808a 	ble.w	800a2dc <_dtoa_r+0x904>
 800a1c8:	f1c0 001c 	rsb	r0, r0, #28
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	4403      	add	r3, r0
 800a1d0:	9304      	str	r3, [sp, #16]
 800a1d2:	9b05      	ldr	r3, [sp, #20]
 800a1d4:	4403      	add	r3, r0
 800a1d6:	4405      	add	r5, r0
 800a1d8:	9305      	str	r3, [sp, #20]
 800a1da:	9b04      	ldr	r3, [sp, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dd07      	ble.n	800a1f0 <_dtoa_r+0x818>
 800a1e0:	ee18 1a10 	vmov	r1, s16
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f001 fa04 	bl	800b5f4 <__lshift>
 800a1ec:	ee08 0a10 	vmov	s16, r0
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd05      	ble.n	800a202 <_dtoa_r+0x82a>
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f001 f9fa 	bl	800b5f4 <__lshift>
 800a200:	4606      	mov	r6, r0
 800a202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a204:	2b00      	cmp	r3, #0
 800a206:	d06e      	beq.n	800a2e6 <_dtoa_r+0x90e>
 800a208:	ee18 0a10 	vmov	r0, s16
 800a20c:	4631      	mov	r1, r6
 800a20e:	f001 fa61 	bl	800b6d4 <__mcmp>
 800a212:	2800      	cmp	r0, #0
 800a214:	da67      	bge.n	800a2e6 <_dtoa_r+0x90e>
 800a216:	9b00      	ldr	r3, [sp, #0]
 800a218:	3b01      	subs	r3, #1
 800a21a:	ee18 1a10 	vmov	r1, s16
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	220a      	movs	r2, #10
 800a222:	2300      	movs	r3, #0
 800a224:	4620      	mov	r0, r4
 800a226:	f000 ffeb 	bl	800b200 <__multadd>
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	ee08 0a10 	vmov	s16, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 81b1 	beq.w	800a598 <_dtoa_r+0xbc0>
 800a236:	2300      	movs	r3, #0
 800a238:	4639      	mov	r1, r7
 800a23a:	220a      	movs	r2, #10
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 ffdf 	bl	800b200 <__multadd>
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	4607      	mov	r7, r0
 800a248:	f300 808e 	bgt.w	800a368 <_dtoa_r+0x990>
 800a24c:	9b06      	ldr	r3, [sp, #24]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	dc51      	bgt.n	800a2f6 <_dtoa_r+0x91e>
 800a252:	e089      	b.n	800a368 <_dtoa_r+0x990>
 800a254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a25a:	e74b      	b.n	800a0f4 <_dtoa_r+0x71c>
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	1e5e      	subs	r6, r3, #1
 800a260:	9b07      	ldr	r3, [sp, #28]
 800a262:	42b3      	cmp	r3, r6
 800a264:	bfbf      	itttt	lt
 800a266:	9b07      	ldrlt	r3, [sp, #28]
 800a268:	9607      	strlt	r6, [sp, #28]
 800a26a:	1af2      	sublt	r2, r6, r3
 800a26c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a26e:	bfb6      	itet	lt
 800a270:	189b      	addlt	r3, r3, r2
 800a272:	1b9e      	subge	r6, r3, r6
 800a274:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a276:	9b03      	ldr	r3, [sp, #12]
 800a278:	bfb8      	it	lt
 800a27a:	2600      	movlt	r6, #0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	bfb7      	itett	lt
 800a280:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a284:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a288:	1a9d      	sublt	r5, r3, r2
 800a28a:	2300      	movlt	r3, #0
 800a28c:	e734      	b.n	800a0f8 <_dtoa_r+0x720>
 800a28e:	9e07      	ldr	r6, [sp, #28]
 800a290:	9d04      	ldr	r5, [sp, #16]
 800a292:	9f08      	ldr	r7, [sp, #32]
 800a294:	e73b      	b.n	800a10e <_dtoa_r+0x736>
 800a296:	9a07      	ldr	r2, [sp, #28]
 800a298:	e767      	b.n	800a16a <_dtoa_r+0x792>
 800a29a:	9b06      	ldr	r3, [sp, #24]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	dc18      	bgt.n	800a2d2 <_dtoa_r+0x8fa>
 800a2a0:	f1ba 0f00 	cmp.w	sl, #0
 800a2a4:	d115      	bne.n	800a2d2 <_dtoa_r+0x8fa>
 800a2a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2aa:	b993      	cbnz	r3, 800a2d2 <_dtoa_r+0x8fa>
 800a2ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2b0:	0d1b      	lsrs	r3, r3, #20
 800a2b2:	051b      	lsls	r3, r3, #20
 800a2b4:	b183      	cbz	r3, 800a2d8 <_dtoa_r+0x900>
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	9304      	str	r3, [sp, #16]
 800a2bc:	9b05      	ldr	r3, [sp, #20]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	9305      	str	r3, [sp, #20]
 800a2c2:	f04f 0801 	mov.w	r8, #1
 800a2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f47f af6a 	bne.w	800a1a2 <_dtoa_r+0x7ca>
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	e76f      	b.n	800a1b2 <_dtoa_r+0x7da>
 800a2d2:	f04f 0800 	mov.w	r8, #0
 800a2d6:	e7f6      	b.n	800a2c6 <_dtoa_r+0x8ee>
 800a2d8:	4698      	mov	r8, r3
 800a2da:	e7f4      	b.n	800a2c6 <_dtoa_r+0x8ee>
 800a2dc:	f43f af7d 	beq.w	800a1da <_dtoa_r+0x802>
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	301c      	adds	r0, #28
 800a2e4:	e772      	b.n	800a1cc <_dtoa_r+0x7f4>
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	dc37      	bgt.n	800a35c <_dtoa_r+0x984>
 800a2ec:	9b06      	ldr	r3, [sp, #24]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	dd34      	ble.n	800a35c <_dtoa_r+0x984>
 800a2f2:	9b03      	ldr	r3, [sp, #12]
 800a2f4:	9302      	str	r3, [sp, #8]
 800a2f6:	9b02      	ldr	r3, [sp, #8]
 800a2f8:	b96b      	cbnz	r3, 800a316 <_dtoa_r+0x93e>
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	2205      	movs	r2, #5
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 ff7e 	bl	800b200 <__multadd>
 800a304:	4601      	mov	r1, r0
 800a306:	4606      	mov	r6, r0
 800a308:	ee18 0a10 	vmov	r0, s16
 800a30c:	f001 f9e2 	bl	800b6d4 <__mcmp>
 800a310:	2800      	cmp	r0, #0
 800a312:	f73f adbb 	bgt.w	8009e8c <_dtoa_r+0x4b4>
 800a316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a318:	9d01      	ldr	r5, [sp, #4]
 800a31a:	43db      	mvns	r3, r3
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	f04f 0800 	mov.w	r8, #0
 800a322:	4631      	mov	r1, r6
 800a324:	4620      	mov	r0, r4
 800a326:	f000 ff49 	bl	800b1bc <_Bfree>
 800a32a:	2f00      	cmp	r7, #0
 800a32c:	f43f aea4 	beq.w	800a078 <_dtoa_r+0x6a0>
 800a330:	f1b8 0f00 	cmp.w	r8, #0
 800a334:	d005      	beq.n	800a342 <_dtoa_r+0x96a>
 800a336:	45b8      	cmp	r8, r7
 800a338:	d003      	beq.n	800a342 <_dtoa_r+0x96a>
 800a33a:	4641      	mov	r1, r8
 800a33c:	4620      	mov	r0, r4
 800a33e:	f000 ff3d 	bl	800b1bc <_Bfree>
 800a342:	4639      	mov	r1, r7
 800a344:	4620      	mov	r0, r4
 800a346:	f000 ff39 	bl	800b1bc <_Bfree>
 800a34a:	e695      	b.n	800a078 <_dtoa_r+0x6a0>
 800a34c:	2600      	movs	r6, #0
 800a34e:	4637      	mov	r7, r6
 800a350:	e7e1      	b.n	800a316 <_dtoa_r+0x93e>
 800a352:	9700      	str	r7, [sp, #0]
 800a354:	4637      	mov	r7, r6
 800a356:	e599      	b.n	8009e8c <_dtoa_r+0x4b4>
 800a358:	40240000 	.word	0x40240000
 800a35c:	9b08      	ldr	r3, [sp, #32]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 80ca 	beq.w	800a4f8 <_dtoa_r+0xb20>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	9302      	str	r3, [sp, #8]
 800a368:	2d00      	cmp	r5, #0
 800a36a:	dd05      	ble.n	800a378 <_dtoa_r+0x9a0>
 800a36c:	4639      	mov	r1, r7
 800a36e:	462a      	mov	r2, r5
 800a370:	4620      	mov	r0, r4
 800a372:	f001 f93f 	bl	800b5f4 <__lshift>
 800a376:	4607      	mov	r7, r0
 800a378:	f1b8 0f00 	cmp.w	r8, #0
 800a37c:	d05b      	beq.n	800a436 <_dtoa_r+0xa5e>
 800a37e:	6879      	ldr	r1, [r7, #4]
 800a380:	4620      	mov	r0, r4
 800a382:	f000 fedb 	bl	800b13c <_Balloc>
 800a386:	4605      	mov	r5, r0
 800a388:	b928      	cbnz	r0, 800a396 <_dtoa_r+0x9be>
 800a38a:	4b87      	ldr	r3, [pc, #540]	; (800a5a8 <_dtoa_r+0xbd0>)
 800a38c:	4602      	mov	r2, r0
 800a38e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a392:	f7ff bb3b 	b.w	8009a0c <_dtoa_r+0x34>
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	3202      	adds	r2, #2
 800a39a:	0092      	lsls	r2, r2, #2
 800a39c:	f107 010c 	add.w	r1, r7, #12
 800a3a0:	300c      	adds	r0, #12
 800a3a2:	f7fd fa55 	bl	8007850 <memcpy>
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f001 f922 	bl	800b5f4 <__lshift>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	f103 0901 	add.w	r9, r3, #1
 800a3b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	f00a 0301 	and.w	r3, sl, #1
 800a3c2:	46b8      	mov	r8, r7
 800a3c4:	9304      	str	r3, [sp, #16]
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	ee18 0a10 	vmov	r0, s16
 800a3ce:	f7ff fa75 	bl	80098bc <quorem>
 800a3d2:	4641      	mov	r1, r8
 800a3d4:	9002      	str	r0, [sp, #8]
 800a3d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3da:	ee18 0a10 	vmov	r0, s16
 800a3de:	f001 f979 	bl	800b6d4 <__mcmp>
 800a3e2:	463a      	mov	r2, r7
 800a3e4:	9003      	str	r0, [sp, #12]
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f001 f98f 	bl	800b70c <__mdiff>
 800a3ee:	68c2      	ldr	r2, [r0, #12]
 800a3f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	bb02      	cbnz	r2, 800a43a <_dtoa_r+0xa62>
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	ee18 0a10 	vmov	r0, s16
 800a3fe:	f001 f969 	bl	800b6d4 <__mcmp>
 800a402:	4602      	mov	r2, r0
 800a404:	4629      	mov	r1, r5
 800a406:	4620      	mov	r0, r4
 800a408:	9207      	str	r2, [sp, #28]
 800a40a:	f000 fed7 	bl	800b1bc <_Bfree>
 800a40e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a412:	ea43 0102 	orr.w	r1, r3, r2
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	430b      	orrs	r3, r1
 800a41a:	464d      	mov	r5, r9
 800a41c:	d10f      	bne.n	800a43e <_dtoa_r+0xa66>
 800a41e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a422:	d02a      	beq.n	800a47a <_dtoa_r+0xaa2>
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	dd02      	ble.n	800a430 <_dtoa_r+0xa58>
 800a42a:	9b02      	ldr	r3, [sp, #8]
 800a42c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a430:	f88b a000 	strb.w	sl, [fp]
 800a434:	e775      	b.n	800a322 <_dtoa_r+0x94a>
 800a436:	4638      	mov	r0, r7
 800a438:	e7ba      	b.n	800a3b0 <_dtoa_r+0x9d8>
 800a43a:	2201      	movs	r2, #1
 800a43c:	e7e2      	b.n	800a404 <_dtoa_r+0xa2c>
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	db04      	blt.n	800a44e <_dtoa_r+0xa76>
 800a444:	9906      	ldr	r1, [sp, #24]
 800a446:	430b      	orrs	r3, r1
 800a448:	9904      	ldr	r1, [sp, #16]
 800a44a:	430b      	orrs	r3, r1
 800a44c:	d122      	bne.n	800a494 <_dtoa_r+0xabc>
 800a44e:	2a00      	cmp	r2, #0
 800a450:	ddee      	ble.n	800a430 <_dtoa_r+0xa58>
 800a452:	ee18 1a10 	vmov	r1, s16
 800a456:	2201      	movs	r2, #1
 800a458:	4620      	mov	r0, r4
 800a45a:	f001 f8cb 	bl	800b5f4 <__lshift>
 800a45e:	4631      	mov	r1, r6
 800a460:	ee08 0a10 	vmov	s16, r0
 800a464:	f001 f936 	bl	800b6d4 <__mcmp>
 800a468:	2800      	cmp	r0, #0
 800a46a:	dc03      	bgt.n	800a474 <_dtoa_r+0xa9c>
 800a46c:	d1e0      	bne.n	800a430 <_dtoa_r+0xa58>
 800a46e:	f01a 0f01 	tst.w	sl, #1
 800a472:	d0dd      	beq.n	800a430 <_dtoa_r+0xa58>
 800a474:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a478:	d1d7      	bne.n	800a42a <_dtoa_r+0xa52>
 800a47a:	2339      	movs	r3, #57	; 0x39
 800a47c:	f88b 3000 	strb.w	r3, [fp]
 800a480:	462b      	mov	r3, r5
 800a482:	461d      	mov	r5, r3
 800a484:	3b01      	subs	r3, #1
 800a486:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a48a:	2a39      	cmp	r2, #57	; 0x39
 800a48c:	d071      	beq.n	800a572 <_dtoa_r+0xb9a>
 800a48e:	3201      	adds	r2, #1
 800a490:	701a      	strb	r2, [r3, #0]
 800a492:	e746      	b.n	800a322 <_dtoa_r+0x94a>
 800a494:	2a00      	cmp	r2, #0
 800a496:	dd07      	ble.n	800a4a8 <_dtoa_r+0xad0>
 800a498:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a49c:	d0ed      	beq.n	800a47a <_dtoa_r+0xaa2>
 800a49e:	f10a 0301 	add.w	r3, sl, #1
 800a4a2:	f88b 3000 	strb.w	r3, [fp]
 800a4a6:	e73c      	b.n	800a322 <_dtoa_r+0x94a>
 800a4a8:	9b05      	ldr	r3, [sp, #20]
 800a4aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4ae:	4599      	cmp	r9, r3
 800a4b0:	d047      	beq.n	800a542 <_dtoa_r+0xb6a>
 800a4b2:	ee18 1a10 	vmov	r1, s16
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 fea0 	bl	800b200 <__multadd>
 800a4c0:	45b8      	cmp	r8, r7
 800a4c2:	ee08 0a10 	vmov	s16, r0
 800a4c6:	f04f 0300 	mov.w	r3, #0
 800a4ca:	f04f 020a 	mov.w	r2, #10
 800a4ce:	4641      	mov	r1, r8
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	d106      	bne.n	800a4e2 <_dtoa_r+0xb0a>
 800a4d4:	f000 fe94 	bl	800b200 <__multadd>
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4607      	mov	r7, r0
 800a4dc:	f109 0901 	add.w	r9, r9, #1
 800a4e0:	e772      	b.n	800a3c8 <_dtoa_r+0x9f0>
 800a4e2:	f000 fe8d 	bl	800b200 <__multadd>
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 fe86 	bl	800b200 <__multadd>
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	e7f1      	b.n	800a4dc <_dtoa_r+0xb04>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	9302      	str	r3, [sp, #8]
 800a4fc:	9d01      	ldr	r5, [sp, #4]
 800a4fe:	ee18 0a10 	vmov	r0, s16
 800a502:	4631      	mov	r1, r6
 800a504:	f7ff f9da 	bl	80098bc <quorem>
 800a508:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a50c:	9b01      	ldr	r3, [sp, #4]
 800a50e:	f805 ab01 	strb.w	sl, [r5], #1
 800a512:	1aea      	subs	r2, r5, r3
 800a514:	9b02      	ldr	r3, [sp, #8]
 800a516:	4293      	cmp	r3, r2
 800a518:	dd09      	ble.n	800a52e <_dtoa_r+0xb56>
 800a51a:	ee18 1a10 	vmov	r1, s16
 800a51e:	2300      	movs	r3, #0
 800a520:	220a      	movs	r2, #10
 800a522:	4620      	mov	r0, r4
 800a524:	f000 fe6c 	bl	800b200 <__multadd>
 800a528:	ee08 0a10 	vmov	s16, r0
 800a52c:	e7e7      	b.n	800a4fe <_dtoa_r+0xb26>
 800a52e:	9b02      	ldr	r3, [sp, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfc8      	it	gt
 800a534:	461d      	movgt	r5, r3
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	bfd8      	it	le
 800a53a:	2501      	movle	r5, #1
 800a53c:	441d      	add	r5, r3
 800a53e:	f04f 0800 	mov.w	r8, #0
 800a542:	ee18 1a10 	vmov	r1, s16
 800a546:	2201      	movs	r2, #1
 800a548:	4620      	mov	r0, r4
 800a54a:	f001 f853 	bl	800b5f4 <__lshift>
 800a54e:	4631      	mov	r1, r6
 800a550:	ee08 0a10 	vmov	s16, r0
 800a554:	f001 f8be 	bl	800b6d4 <__mcmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	dc91      	bgt.n	800a480 <_dtoa_r+0xaa8>
 800a55c:	d102      	bne.n	800a564 <_dtoa_r+0xb8c>
 800a55e:	f01a 0f01 	tst.w	sl, #1
 800a562:	d18d      	bne.n	800a480 <_dtoa_r+0xaa8>
 800a564:	462b      	mov	r3, r5
 800a566:	461d      	mov	r5, r3
 800a568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a56c:	2a30      	cmp	r2, #48	; 0x30
 800a56e:	d0fa      	beq.n	800a566 <_dtoa_r+0xb8e>
 800a570:	e6d7      	b.n	800a322 <_dtoa_r+0x94a>
 800a572:	9a01      	ldr	r2, [sp, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	d184      	bne.n	800a482 <_dtoa_r+0xaaa>
 800a578:	9b00      	ldr	r3, [sp, #0]
 800a57a:	3301      	adds	r3, #1
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	2331      	movs	r3, #49	; 0x31
 800a580:	7013      	strb	r3, [r2, #0]
 800a582:	e6ce      	b.n	800a322 <_dtoa_r+0x94a>
 800a584:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <_dtoa_r+0xbd4>)
 800a586:	f7ff ba95 	b.w	8009ab4 <_dtoa_r+0xdc>
 800a58a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f47f aa6e 	bne.w	8009a6e <_dtoa_r+0x96>
 800a592:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <_dtoa_r+0xbd8>)
 800a594:	f7ff ba8e 	b.w	8009ab4 <_dtoa_r+0xdc>
 800a598:	9b02      	ldr	r3, [sp, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dcae      	bgt.n	800a4fc <_dtoa_r+0xb24>
 800a59e:	9b06      	ldr	r3, [sp, #24]
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	f73f aea8 	bgt.w	800a2f6 <_dtoa_r+0x91e>
 800a5a6:	e7a9      	b.n	800a4fc <_dtoa_r+0xb24>
 800a5a8:	0800ce08 	.word	0x0800ce08
 800a5ac:	0800d069 	.word	0x0800d069
 800a5b0:	0800cd89 	.word	0x0800cd89

0800a5b4 <__sflush_r>:
 800a5b4:	898a      	ldrh	r2, [r1, #12]
 800a5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	0710      	lsls	r0, r2, #28
 800a5be:	460c      	mov	r4, r1
 800a5c0:	d458      	bmi.n	800a674 <__sflush_r+0xc0>
 800a5c2:	684b      	ldr	r3, [r1, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dc05      	bgt.n	800a5d4 <__sflush_r+0x20>
 800a5c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dc02      	bgt.n	800a5d4 <__sflush_r+0x20>
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	d0f9      	beq.n	800a5ce <__sflush_r+0x1a>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5e0:	682f      	ldr	r7, [r5, #0]
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	d032      	beq.n	800a64c <__sflush_r+0x98>
 800a5e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	075a      	lsls	r2, r3, #29
 800a5ec:	d505      	bpl.n	800a5fa <__sflush_r+0x46>
 800a5ee:	6863      	ldr	r3, [r4, #4]
 800a5f0:	1ac0      	subs	r0, r0, r3
 800a5f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5f4:	b10b      	cbz	r3, 800a5fa <__sflush_r+0x46>
 800a5f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5f8:	1ac0      	subs	r0, r0, r3
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a600:	6a21      	ldr	r1, [r4, #32]
 800a602:	4628      	mov	r0, r5
 800a604:	47b0      	blx	r6
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	d106      	bne.n	800a61a <__sflush_r+0x66>
 800a60c:	6829      	ldr	r1, [r5, #0]
 800a60e:	291d      	cmp	r1, #29
 800a610:	d82c      	bhi.n	800a66c <__sflush_r+0xb8>
 800a612:	4a2a      	ldr	r2, [pc, #168]	; (800a6bc <__sflush_r+0x108>)
 800a614:	40ca      	lsrs	r2, r1
 800a616:	07d6      	lsls	r6, r2, #31
 800a618:	d528      	bpl.n	800a66c <__sflush_r+0xb8>
 800a61a:	2200      	movs	r2, #0
 800a61c:	6062      	str	r2, [r4, #4]
 800a61e:	04d9      	lsls	r1, r3, #19
 800a620:	6922      	ldr	r2, [r4, #16]
 800a622:	6022      	str	r2, [r4, #0]
 800a624:	d504      	bpl.n	800a630 <__sflush_r+0x7c>
 800a626:	1c42      	adds	r2, r0, #1
 800a628:	d101      	bne.n	800a62e <__sflush_r+0x7a>
 800a62a:	682b      	ldr	r3, [r5, #0]
 800a62c:	b903      	cbnz	r3, 800a630 <__sflush_r+0x7c>
 800a62e:	6560      	str	r0, [r4, #84]	; 0x54
 800a630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a632:	602f      	str	r7, [r5, #0]
 800a634:	2900      	cmp	r1, #0
 800a636:	d0ca      	beq.n	800a5ce <__sflush_r+0x1a>
 800a638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a63c:	4299      	cmp	r1, r3
 800a63e:	d002      	beq.n	800a646 <__sflush_r+0x92>
 800a640:	4628      	mov	r0, r5
 800a642:	f7fd f91b 	bl	800787c <_free_r>
 800a646:	2000      	movs	r0, #0
 800a648:	6360      	str	r0, [r4, #52]	; 0x34
 800a64a:	e7c1      	b.n	800a5d0 <__sflush_r+0x1c>
 800a64c:	6a21      	ldr	r1, [r4, #32]
 800a64e:	2301      	movs	r3, #1
 800a650:	4628      	mov	r0, r5
 800a652:	47b0      	blx	r6
 800a654:	1c41      	adds	r1, r0, #1
 800a656:	d1c7      	bne.n	800a5e8 <__sflush_r+0x34>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0c4      	beq.n	800a5e8 <__sflush_r+0x34>
 800a65e:	2b1d      	cmp	r3, #29
 800a660:	d001      	beq.n	800a666 <__sflush_r+0xb2>
 800a662:	2b16      	cmp	r3, #22
 800a664:	d101      	bne.n	800a66a <__sflush_r+0xb6>
 800a666:	602f      	str	r7, [r5, #0]
 800a668:	e7b1      	b.n	800a5ce <__sflush_r+0x1a>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a670:	81a3      	strh	r3, [r4, #12]
 800a672:	e7ad      	b.n	800a5d0 <__sflush_r+0x1c>
 800a674:	690f      	ldr	r7, [r1, #16]
 800a676:	2f00      	cmp	r7, #0
 800a678:	d0a9      	beq.n	800a5ce <__sflush_r+0x1a>
 800a67a:	0793      	lsls	r3, r2, #30
 800a67c:	680e      	ldr	r6, [r1, #0]
 800a67e:	bf08      	it	eq
 800a680:	694b      	ldreq	r3, [r1, #20]
 800a682:	600f      	str	r7, [r1, #0]
 800a684:	bf18      	it	ne
 800a686:	2300      	movne	r3, #0
 800a688:	eba6 0807 	sub.w	r8, r6, r7
 800a68c:	608b      	str	r3, [r1, #8]
 800a68e:	f1b8 0f00 	cmp.w	r8, #0
 800a692:	dd9c      	ble.n	800a5ce <__sflush_r+0x1a>
 800a694:	6a21      	ldr	r1, [r4, #32]
 800a696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a698:	4643      	mov	r3, r8
 800a69a:	463a      	mov	r2, r7
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b0      	blx	r6
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	dc06      	bgt.n	800a6b2 <__sflush_r+0xfe>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	e78e      	b.n	800a5d0 <__sflush_r+0x1c>
 800a6b2:	4407      	add	r7, r0
 800a6b4:	eba8 0800 	sub.w	r8, r8, r0
 800a6b8:	e7e9      	b.n	800a68e <__sflush_r+0xda>
 800a6ba:	bf00      	nop
 800a6bc:	20400001 	.word	0x20400001

0800a6c0 <_fflush_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	b913      	cbnz	r3, 800a6d0 <_fflush_r+0x10>
 800a6ca:	2500      	movs	r5, #0
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	b118      	cbz	r0, 800a6da <_fflush_r+0x1a>
 800a6d2:	6983      	ldr	r3, [r0, #24]
 800a6d4:	b90b      	cbnz	r3, 800a6da <_fflush_r+0x1a>
 800a6d6:	f000 f887 	bl	800a7e8 <__sinit>
 800a6da:	4b14      	ldr	r3, [pc, #80]	; (800a72c <_fflush_r+0x6c>)
 800a6dc:	429c      	cmp	r4, r3
 800a6de:	d11b      	bne.n	800a718 <_fflush_r+0x58>
 800a6e0:	686c      	ldr	r4, [r5, #4]
 800a6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0ef      	beq.n	800a6ca <_fflush_r+0xa>
 800a6ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6ec:	07d0      	lsls	r0, r2, #31
 800a6ee:	d404      	bmi.n	800a6fa <_fflush_r+0x3a>
 800a6f0:	0599      	lsls	r1, r3, #22
 800a6f2:	d402      	bmi.n	800a6fa <_fflush_r+0x3a>
 800a6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f6:	f000 fc88 	bl	800b00a <__retarget_lock_acquire_recursive>
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f7ff ff59 	bl	800a5b4 <__sflush_r>
 800a702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a704:	07da      	lsls	r2, r3, #31
 800a706:	4605      	mov	r5, r0
 800a708:	d4e0      	bmi.n	800a6cc <_fflush_r+0xc>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	059b      	lsls	r3, r3, #22
 800a70e:	d4dd      	bmi.n	800a6cc <_fflush_r+0xc>
 800a710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a712:	f000 fc7b 	bl	800b00c <__retarget_lock_release_recursive>
 800a716:	e7d9      	b.n	800a6cc <_fflush_r+0xc>
 800a718:	4b05      	ldr	r3, [pc, #20]	; (800a730 <_fflush_r+0x70>)
 800a71a:	429c      	cmp	r4, r3
 800a71c:	d101      	bne.n	800a722 <_fflush_r+0x62>
 800a71e:	68ac      	ldr	r4, [r5, #8]
 800a720:	e7df      	b.n	800a6e2 <_fflush_r+0x22>
 800a722:	4b04      	ldr	r3, [pc, #16]	; (800a734 <_fflush_r+0x74>)
 800a724:	429c      	cmp	r4, r3
 800a726:	bf08      	it	eq
 800a728:	68ec      	ldreq	r4, [r5, #12]
 800a72a:	e7da      	b.n	800a6e2 <_fflush_r+0x22>
 800a72c:	0800ce3c 	.word	0x0800ce3c
 800a730:	0800ce5c 	.word	0x0800ce5c
 800a734:	0800ce1c 	.word	0x0800ce1c

0800a738 <std>:
 800a738:	2300      	movs	r3, #0
 800a73a:	b510      	push	{r4, lr}
 800a73c:	4604      	mov	r4, r0
 800a73e:	e9c0 3300 	strd	r3, r3, [r0]
 800a742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a746:	6083      	str	r3, [r0, #8]
 800a748:	8181      	strh	r1, [r0, #12]
 800a74a:	6643      	str	r3, [r0, #100]	; 0x64
 800a74c:	81c2      	strh	r2, [r0, #14]
 800a74e:	6183      	str	r3, [r0, #24]
 800a750:	4619      	mov	r1, r3
 800a752:	2208      	movs	r2, #8
 800a754:	305c      	adds	r0, #92	; 0x5c
 800a756:	f7fd f889 	bl	800786c <memset>
 800a75a:	4b05      	ldr	r3, [pc, #20]	; (800a770 <std+0x38>)
 800a75c:	6263      	str	r3, [r4, #36]	; 0x24
 800a75e:	4b05      	ldr	r3, [pc, #20]	; (800a774 <std+0x3c>)
 800a760:	62a3      	str	r3, [r4, #40]	; 0x28
 800a762:	4b05      	ldr	r3, [pc, #20]	; (800a778 <std+0x40>)
 800a764:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <std+0x44>)
 800a768:	6224      	str	r4, [r4, #32]
 800a76a:	6323      	str	r3, [r4, #48]	; 0x30
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	bf00      	nop
 800a770:	08008911 	.word	0x08008911
 800a774:	08008937 	.word	0x08008937
 800a778:	0800896f 	.word	0x0800896f
 800a77c:	08008993 	.word	0x08008993

0800a780 <_cleanup_r>:
 800a780:	4901      	ldr	r1, [pc, #4]	; (800a788 <_cleanup_r+0x8>)
 800a782:	f000 b8af 	b.w	800a8e4 <_fwalk_reent>
 800a786:	bf00      	nop
 800a788:	0800a6c1 	.word	0x0800a6c1

0800a78c <__sfmoreglue>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	2268      	movs	r2, #104	; 0x68
 800a790:	1e4d      	subs	r5, r1, #1
 800a792:	4355      	muls	r5, r2
 800a794:	460e      	mov	r6, r1
 800a796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a79a:	f7fd f8db 	bl	8007954 <_malloc_r>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	b140      	cbz	r0, 800a7b4 <__sfmoreglue+0x28>
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	e9c0 1600 	strd	r1, r6, [r0]
 800a7a8:	300c      	adds	r0, #12
 800a7aa:	60a0      	str	r0, [r4, #8]
 800a7ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7b0:	f7fd f85c 	bl	800786c <memset>
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}

0800a7b8 <__sfp_lock_acquire>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	; (800a7c0 <__sfp_lock_acquire+0x8>)
 800a7ba:	f000 bc26 	b.w	800b00a <__retarget_lock_acquire_recursive>
 800a7be:	bf00      	nop
 800a7c0:	200007c5 	.word	0x200007c5

0800a7c4 <__sfp_lock_release>:
 800a7c4:	4801      	ldr	r0, [pc, #4]	; (800a7cc <__sfp_lock_release+0x8>)
 800a7c6:	f000 bc21 	b.w	800b00c <__retarget_lock_release_recursive>
 800a7ca:	bf00      	nop
 800a7cc:	200007c5 	.word	0x200007c5

0800a7d0 <__sinit_lock_acquire>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__sinit_lock_acquire+0x8>)
 800a7d2:	f000 bc1a 	b.w	800b00a <__retarget_lock_acquire_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	200007c6 	.word	0x200007c6

0800a7dc <__sinit_lock_release>:
 800a7dc:	4801      	ldr	r0, [pc, #4]	; (800a7e4 <__sinit_lock_release+0x8>)
 800a7de:	f000 bc15 	b.w	800b00c <__retarget_lock_release_recursive>
 800a7e2:	bf00      	nop
 800a7e4:	200007c6 	.word	0x200007c6

0800a7e8 <__sinit>:
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	f7ff fff0 	bl	800a7d0 <__sinit_lock_acquire>
 800a7f0:	69a3      	ldr	r3, [r4, #24]
 800a7f2:	b11b      	cbz	r3, 800a7fc <__sinit+0x14>
 800a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f8:	f7ff bff0 	b.w	800a7dc <__sinit_lock_release>
 800a7fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a800:	6523      	str	r3, [r4, #80]	; 0x50
 800a802:	4b13      	ldr	r3, [pc, #76]	; (800a850 <__sinit+0x68>)
 800a804:	4a13      	ldr	r2, [pc, #76]	; (800a854 <__sinit+0x6c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	62a2      	str	r2, [r4, #40]	; 0x28
 800a80a:	42a3      	cmp	r3, r4
 800a80c:	bf04      	itt	eq
 800a80e:	2301      	moveq	r3, #1
 800a810:	61a3      	streq	r3, [r4, #24]
 800a812:	4620      	mov	r0, r4
 800a814:	f000 f820 	bl	800a858 <__sfp>
 800a818:	6060      	str	r0, [r4, #4]
 800a81a:	4620      	mov	r0, r4
 800a81c:	f000 f81c 	bl	800a858 <__sfp>
 800a820:	60a0      	str	r0, [r4, #8]
 800a822:	4620      	mov	r0, r4
 800a824:	f000 f818 	bl	800a858 <__sfp>
 800a828:	2200      	movs	r2, #0
 800a82a:	60e0      	str	r0, [r4, #12]
 800a82c:	2104      	movs	r1, #4
 800a82e:	6860      	ldr	r0, [r4, #4]
 800a830:	f7ff ff82 	bl	800a738 <std>
 800a834:	68a0      	ldr	r0, [r4, #8]
 800a836:	2201      	movs	r2, #1
 800a838:	2109      	movs	r1, #9
 800a83a:	f7ff ff7d 	bl	800a738 <std>
 800a83e:	68e0      	ldr	r0, [r4, #12]
 800a840:	2202      	movs	r2, #2
 800a842:	2112      	movs	r1, #18
 800a844:	f7ff ff78 	bl	800a738 <std>
 800a848:	2301      	movs	r3, #1
 800a84a:	61a3      	str	r3, [r4, #24]
 800a84c:	e7d2      	b.n	800a7f4 <__sinit+0xc>
 800a84e:	bf00      	nop
 800a850:	0800cbfc 	.word	0x0800cbfc
 800a854:	0800a781 	.word	0x0800a781

0800a858 <__sfp>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	4607      	mov	r7, r0
 800a85c:	f7ff ffac 	bl	800a7b8 <__sfp_lock_acquire>
 800a860:	4b1e      	ldr	r3, [pc, #120]	; (800a8dc <__sfp+0x84>)
 800a862:	681e      	ldr	r6, [r3, #0]
 800a864:	69b3      	ldr	r3, [r6, #24]
 800a866:	b913      	cbnz	r3, 800a86e <__sfp+0x16>
 800a868:	4630      	mov	r0, r6
 800a86a:	f7ff ffbd 	bl	800a7e8 <__sinit>
 800a86e:	3648      	adds	r6, #72	; 0x48
 800a870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a874:	3b01      	subs	r3, #1
 800a876:	d503      	bpl.n	800a880 <__sfp+0x28>
 800a878:	6833      	ldr	r3, [r6, #0]
 800a87a:	b30b      	cbz	r3, 800a8c0 <__sfp+0x68>
 800a87c:	6836      	ldr	r6, [r6, #0]
 800a87e:	e7f7      	b.n	800a870 <__sfp+0x18>
 800a880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a884:	b9d5      	cbnz	r5, 800a8bc <__sfp+0x64>
 800a886:	4b16      	ldr	r3, [pc, #88]	; (800a8e0 <__sfp+0x88>)
 800a888:	60e3      	str	r3, [r4, #12]
 800a88a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a88e:	6665      	str	r5, [r4, #100]	; 0x64
 800a890:	f000 fbba 	bl	800b008 <__retarget_lock_init_recursive>
 800a894:	f7ff ff96 	bl	800a7c4 <__sfp_lock_release>
 800a898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a89c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8a0:	6025      	str	r5, [r4, #0]
 800a8a2:	61a5      	str	r5, [r4, #24]
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8ac:	f7fc ffde 	bl	800786c <memset>
 800a8b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8bc:	3468      	adds	r4, #104	; 0x68
 800a8be:	e7d9      	b.n	800a874 <__sfp+0x1c>
 800a8c0:	2104      	movs	r1, #4
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff ff62 	bl	800a78c <__sfmoreglue>
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	6030      	str	r0, [r6, #0]
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d1d5      	bne.n	800a87c <__sfp+0x24>
 800a8d0:	f7ff ff78 	bl	800a7c4 <__sfp_lock_release>
 800a8d4:	230c      	movs	r3, #12
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	e7ee      	b.n	800a8b8 <__sfp+0x60>
 800a8da:	bf00      	nop
 800a8dc:	0800cbfc 	.word	0x0800cbfc
 800a8e0:	ffff0001 	.word	0xffff0001

0800a8e4 <_fwalk_reent>:
 800a8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	4688      	mov	r8, r1
 800a8ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8f0:	2700      	movs	r7, #0
 800a8f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8f6:	f1b9 0901 	subs.w	r9, r9, #1
 800a8fa:	d505      	bpl.n	800a908 <_fwalk_reent+0x24>
 800a8fc:	6824      	ldr	r4, [r4, #0]
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	d1f7      	bne.n	800a8f2 <_fwalk_reent+0xe>
 800a902:	4638      	mov	r0, r7
 800a904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a908:	89ab      	ldrh	r3, [r5, #12]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d907      	bls.n	800a91e <_fwalk_reent+0x3a>
 800a90e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a912:	3301      	adds	r3, #1
 800a914:	d003      	beq.n	800a91e <_fwalk_reent+0x3a>
 800a916:	4629      	mov	r1, r5
 800a918:	4630      	mov	r0, r6
 800a91a:	47c0      	blx	r8
 800a91c:	4307      	orrs	r7, r0
 800a91e:	3568      	adds	r5, #104	; 0x68
 800a920:	e7e9      	b.n	800a8f6 <_fwalk_reent+0x12>

0800a922 <rshift>:
 800a922:	6903      	ldr	r3, [r0, #16]
 800a924:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a92c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a930:	f100 0414 	add.w	r4, r0, #20
 800a934:	dd45      	ble.n	800a9c2 <rshift+0xa0>
 800a936:	f011 011f 	ands.w	r1, r1, #31
 800a93a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a93e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a942:	d10c      	bne.n	800a95e <rshift+0x3c>
 800a944:	f100 0710 	add.w	r7, r0, #16
 800a948:	4629      	mov	r1, r5
 800a94a:	42b1      	cmp	r1, r6
 800a94c:	d334      	bcc.n	800a9b8 <rshift+0x96>
 800a94e:	1a9b      	subs	r3, r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	1eea      	subs	r2, r5, #3
 800a954:	4296      	cmp	r6, r2
 800a956:	bf38      	it	cc
 800a958:	2300      	movcc	r3, #0
 800a95a:	4423      	add	r3, r4
 800a95c:	e015      	b.n	800a98a <rshift+0x68>
 800a95e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a962:	f1c1 0820 	rsb	r8, r1, #32
 800a966:	40cf      	lsrs	r7, r1
 800a968:	f105 0e04 	add.w	lr, r5, #4
 800a96c:	46a1      	mov	r9, r4
 800a96e:	4576      	cmp	r6, lr
 800a970:	46f4      	mov	ip, lr
 800a972:	d815      	bhi.n	800a9a0 <rshift+0x7e>
 800a974:	1a9a      	subs	r2, r3, r2
 800a976:	0092      	lsls	r2, r2, #2
 800a978:	3a04      	subs	r2, #4
 800a97a:	3501      	adds	r5, #1
 800a97c:	42ae      	cmp	r6, r5
 800a97e:	bf38      	it	cc
 800a980:	2200      	movcc	r2, #0
 800a982:	18a3      	adds	r3, r4, r2
 800a984:	50a7      	str	r7, [r4, r2]
 800a986:	b107      	cbz	r7, 800a98a <rshift+0x68>
 800a988:	3304      	adds	r3, #4
 800a98a:	1b1a      	subs	r2, r3, r4
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a992:	bf08      	it	eq
 800a994:	2300      	moveq	r3, #0
 800a996:	6102      	str	r2, [r0, #16]
 800a998:	bf08      	it	eq
 800a99a:	6143      	streq	r3, [r0, #20]
 800a99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a0:	f8dc c000 	ldr.w	ip, [ip]
 800a9a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9a8:	ea4c 0707 	orr.w	r7, ip, r7
 800a9ac:	f849 7b04 	str.w	r7, [r9], #4
 800a9b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9b4:	40cf      	lsrs	r7, r1
 800a9b6:	e7da      	b.n	800a96e <rshift+0x4c>
 800a9b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9c0:	e7c3      	b.n	800a94a <rshift+0x28>
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	e7e1      	b.n	800a98a <rshift+0x68>

0800a9c6 <__hexdig_fun>:
 800a9c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a9ca:	2b09      	cmp	r3, #9
 800a9cc:	d802      	bhi.n	800a9d4 <__hexdig_fun+0xe>
 800a9ce:	3820      	subs	r0, #32
 800a9d0:	b2c0      	uxtb	r0, r0
 800a9d2:	4770      	bx	lr
 800a9d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	d801      	bhi.n	800a9e0 <__hexdig_fun+0x1a>
 800a9dc:	3847      	subs	r0, #71	; 0x47
 800a9de:	e7f7      	b.n	800a9d0 <__hexdig_fun+0xa>
 800a9e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a9e4:	2b05      	cmp	r3, #5
 800a9e6:	d801      	bhi.n	800a9ec <__hexdig_fun+0x26>
 800a9e8:	3827      	subs	r0, #39	; 0x27
 800a9ea:	e7f1      	b.n	800a9d0 <__hexdig_fun+0xa>
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	4770      	bx	lr

0800a9f0 <__gethex>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	ed2d 8b02 	vpush	{d8}
 800a9f8:	b089      	sub	sp, #36	; 0x24
 800a9fa:	ee08 0a10 	vmov	s16, r0
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	4bb4      	ldr	r3, [pc, #720]	; (800acd4 <__gethex+0x2e4>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9301      	str	r3, [sp, #4]
 800aa06:	4618      	mov	r0, r3
 800aa08:	468b      	mov	fp, r1
 800aa0a:	4690      	mov	r8, r2
 800aa0c:	f7f5 fbe0 	bl	80001d0 <strlen>
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	f8db 2000 	ldr.w	r2, [fp]
 800aa16:	4403      	add	r3, r0
 800aa18:	4682      	mov	sl, r0
 800aa1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aa1e:	9305      	str	r3, [sp, #20]
 800aa20:	1c93      	adds	r3, r2, #2
 800aa22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa2a:	32fe      	adds	r2, #254	; 0xfe
 800aa2c:	18d1      	adds	r1, r2, r3
 800aa2e:	461f      	mov	r7, r3
 800aa30:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa34:	9100      	str	r1, [sp, #0]
 800aa36:	2830      	cmp	r0, #48	; 0x30
 800aa38:	d0f8      	beq.n	800aa2c <__gethex+0x3c>
 800aa3a:	f7ff ffc4 	bl	800a9c6 <__hexdig_fun>
 800aa3e:	4604      	mov	r4, r0
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d13a      	bne.n	800aaba <__gethex+0xca>
 800aa44:	9901      	ldr	r1, [sp, #4]
 800aa46:	4652      	mov	r2, sl
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f001 fe79 	bl	800c740 <strncmp>
 800aa4e:	4605      	mov	r5, r0
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d168      	bne.n	800ab26 <__gethex+0x136>
 800aa54:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aa58:	eb07 060a 	add.w	r6, r7, sl
 800aa5c:	f7ff ffb3 	bl	800a9c6 <__hexdig_fun>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d062      	beq.n	800ab2a <__gethex+0x13a>
 800aa64:	4633      	mov	r3, r6
 800aa66:	7818      	ldrb	r0, [r3, #0]
 800aa68:	2830      	cmp	r0, #48	; 0x30
 800aa6a:	461f      	mov	r7, r3
 800aa6c:	f103 0301 	add.w	r3, r3, #1
 800aa70:	d0f9      	beq.n	800aa66 <__gethex+0x76>
 800aa72:	f7ff ffa8 	bl	800a9c6 <__hexdig_fun>
 800aa76:	2301      	movs	r3, #1
 800aa78:	fab0 f480 	clz	r4, r0
 800aa7c:	0964      	lsrs	r4, r4, #5
 800aa7e:	4635      	mov	r5, r6
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	463a      	mov	r2, r7
 800aa84:	4616      	mov	r6, r2
 800aa86:	3201      	adds	r2, #1
 800aa88:	7830      	ldrb	r0, [r6, #0]
 800aa8a:	f7ff ff9c 	bl	800a9c6 <__hexdig_fun>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d1f8      	bne.n	800aa84 <__gethex+0x94>
 800aa92:	9901      	ldr	r1, [sp, #4]
 800aa94:	4652      	mov	r2, sl
 800aa96:	4630      	mov	r0, r6
 800aa98:	f001 fe52 	bl	800c740 <strncmp>
 800aa9c:	b980      	cbnz	r0, 800aac0 <__gethex+0xd0>
 800aa9e:	b94d      	cbnz	r5, 800aab4 <__gethex+0xc4>
 800aaa0:	eb06 050a 	add.w	r5, r6, sl
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4616      	mov	r6, r2
 800aaa8:	3201      	adds	r2, #1
 800aaaa:	7830      	ldrb	r0, [r6, #0]
 800aaac:	f7ff ff8b 	bl	800a9c6 <__hexdig_fun>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d1f8      	bne.n	800aaa6 <__gethex+0xb6>
 800aab4:	1bad      	subs	r5, r5, r6
 800aab6:	00ad      	lsls	r5, r5, #2
 800aab8:	e004      	b.n	800aac4 <__gethex+0xd4>
 800aaba:	2400      	movs	r4, #0
 800aabc:	4625      	mov	r5, r4
 800aabe:	e7e0      	b.n	800aa82 <__gethex+0x92>
 800aac0:	2d00      	cmp	r5, #0
 800aac2:	d1f7      	bne.n	800aab4 <__gethex+0xc4>
 800aac4:	7833      	ldrb	r3, [r6, #0]
 800aac6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aaca:	2b50      	cmp	r3, #80	; 0x50
 800aacc:	d13b      	bne.n	800ab46 <__gethex+0x156>
 800aace:	7873      	ldrb	r3, [r6, #1]
 800aad0:	2b2b      	cmp	r3, #43	; 0x2b
 800aad2:	d02c      	beq.n	800ab2e <__gethex+0x13e>
 800aad4:	2b2d      	cmp	r3, #45	; 0x2d
 800aad6:	d02e      	beq.n	800ab36 <__gethex+0x146>
 800aad8:	1c71      	adds	r1, r6, #1
 800aada:	f04f 0900 	mov.w	r9, #0
 800aade:	7808      	ldrb	r0, [r1, #0]
 800aae0:	f7ff ff71 	bl	800a9c6 <__hexdig_fun>
 800aae4:	1e43      	subs	r3, r0, #1
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b18      	cmp	r3, #24
 800aaea:	d82c      	bhi.n	800ab46 <__gethex+0x156>
 800aaec:	f1a0 0210 	sub.w	r2, r0, #16
 800aaf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aaf4:	f7ff ff67 	bl	800a9c6 <__hexdig_fun>
 800aaf8:	1e43      	subs	r3, r0, #1
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b18      	cmp	r3, #24
 800aafe:	d91d      	bls.n	800ab3c <__gethex+0x14c>
 800ab00:	f1b9 0f00 	cmp.w	r9, #0
 800ab04:	d000      	beq.n	800ab08 <__gethex+0x118>
 800ab06:	4252      	negs	r2, r2
 800ab08:	4415      	add	r5, r2
 800ab0a:	f8cb 1000 	str.w	r1, [fp]
 800ab0e:	b1e4      	cbz	r4, 800ab4a <__gethex+0x15a>
 800ab10:	9b00      	ldr	r3, [sp, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	bf14      	ite	ne
 800ab16:	2700      	movne	r7, #0
 800ab18:	2706      	moveq	r7, #6
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	b009      	add	sp, #36	; 0x24
 800ab1e:	ecbd 8b02 	vpop	{d8}
 800ab22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab26:	463e      	mov	r6, r7
 800ab28:	4625      	mov	r5, r4
 800ab2a:	2401      	movs	r4, #1
 800ab2c:	e7ca      	b.n	800aac4 <__gethex+0xd4>
 800ab2e:	f04f 0900 	mov.w	r9, #0
 800ab32:	1cb1      	adds	r1, r6, #2
 800ab34:	e7d3      	b.n	800aade <__gethex+0xee>
 800ab36:	f04f 0901 	mov.w	r9, #1
 800ab3a:	e7fa      	b.n	800ab32 <__gethex+0x142>
 800ab3c:	230a      	movs	r3, #10
 800ab3e:	fb03 0202 	mla	r2, r3, r2, r0
 800ab42:	3a10      	subs	r2, #16
 800ab44:	e7d4      	b.n	800aaf0 <__gethex+0x100>
 800ab46:	4631      	mov	r1, r6
 800ab48:	e7df      	b.n	800ab0a <__gethex+0x11a>
 800ab4a:	1bf3      	subs	r3, r6, r7
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	4621      	mov	r1, r4
 800ab50:	2b07      	cmp	r3, #7
 800ab52:	dc0b      	bgt.n	800ab6c <__gethex+0x17c>
 800ab54:	ee18 0a10 	vmov	r0, s16
 800ab58:	f000 faf0 	bl	800b13c <_Balloc>
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	b940      	cbnz	r0, 800ab72 <__gethex+0x182>
 800ab60:	4b5d      	ldr	r3, [pc, #372]	; (800acd8 <__gethex+0x2e8>)
 800ab62:	4602      	mov	r2, r0
 800ab64:	21de      	movs	r1, #222	; 0xde
 800ab66:	485d      	ldr	r0, [pc, #372]	; (800acdc <__gethex+0x2ec>)
 800ab68:	f001 feba 	bl	800c8e0 <__assert_func>
 800ab6c:	3101      	adds	r1, #1
 800ab6e:	105b      	asrs	r3, r3, #1
 800ab70:	e7ee      	b.n	800ab50 <__gethex+0x160>
 800ab72:	f100 0914 	add.w	r9, r0, #20
 800ab76:	f04f 0b00 	mov.w	fp, #0
 800ab7a:	f1ca 0301 	rsb	r3, sl, #1
 800ab7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab82:	f8cd b000 	str.w	fp, [sp]
 800ab86:	9306      	str	r3, [sp, #24]
 800ab88:	42b7      	cmp	r7, r6
 800ab8a:	d340      	bcc.n	800ac0e <__gethex+0x21e>
 800ab8c:	9802      	ldr	r0, [sp, #8]
 800ab8e:	9b00      	ldr	r3, [sp, #0]
 800ab90:	f840 3b04 	str.w	r3, [r0], #4
 800ab94:	eba0 0009 	sub.w	r0, r0, r9
 800ab98:	1080      	asrs	r0, r0, #2
 800ab9a:	0146      	lsls	r6, r0, #5
 800ab9c:	6120      	str	r0, [r4, #16]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 fbbe 	bl	800b320 <__hi0bits>
 800aba4:	1a30      	subs	r0, r6, r0
 800aba6:	f8d8 6000 	ldr.w	r6, [r8]
 800abaa:	42b0      	cmp	r0, r6
 800abac:	dd63      	ble.n	800ac76 <__gethex+0x286>
 800abae:	1b87      	subs	r7, r0, r6
 800abb0:	4639      	mov	r1, r7
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 ff62 	bl	800ba7c <__any_on>
 800abb8:	4682      	mov	sl, r0
 800abba:	b1a8      	cbz	r0, 800abe8 <__gethex+0x1f8>
 800abbc:	1e7b      	subs	r3, r7, #1
 800abbe:	1159      	asrs	r1, r3, #5
 800abc0:	f003 021f 	and.w	r2, r3, #31
 800abc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800abc8:	f04f 0a01 	mov.w	sl, #1
 800abcc:	fa0a f202 	lsl.w	r2, sl, r2
 800abd0:	420a      	tst	r2, r1
 800abd2:	d009      	beq.n	800abe8 <__gethex+0x1f8>
 800abd4:	4553      	cmp	r3, sl
 800abd6:	dd05      	ble.n	800abe4 <__gethex+0x1f4>
 800abd8:	1eb9      	subs	r1, r7, #2
 800abda:	4620      	mov	r0, r4
 800abdc:	f000 ff4e 	bl	800ba7c <__any_on>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d145      	bne.n	800ac70 <__gethex+0x280>
 800abe4:	f04f 0a02 	mov.w	sl, #2
 800abe8:	4639      	mov	r1, r7
 800abea:	4620      	mov	r0, r4
 800abec:	f7ff fe99 	bl	800a922 <rshift>
 800abf0:	443d      	add	r5, r7
 800abf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abf6:	42ab      	cmp	r3, r5
 800abf8:	da4c      	bge.n	800ac94 <__gethex+0x2a4>
 800abfa:	ee18 0a10 	vmov	r0, s16
 800abfe:	4621      	mov	r1, r4
 800ac00:	f000 fadc 	bl	800b1bc <_Bfree>
 800ac04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac06:	2300      	movs	r3, #0
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	27a3      	movs	r7, #163	; 0xa3
 800ac0c:	e785      	b.n	800ab1a <__gethex+0x12a>
 800ac0e:	1e73      	subs	r3, r6, #1
 800ac10:	9a05      	ldr	r2, [sp, #20]
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d019      	beq.n	800ac50 <__gethex+0x260>
 800ac1c:	f1bb 0f20 	cmp.w	fp, #32
 800ac20:	d107      	bne.n	800ac32 <__gethex+0x242>
 800ac22:	9b02      	ldr	r3, [sp, #8]
 800ac24:	9a00      	ldr	r2, [sp, #0]
 800ac26:	f843 2b04 	str.w	r2, [r3], #4
 800ac2a:	9302      	str	r3, [sp, #8]
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	469b      	mov	fp, r3
 800ac32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ac36:	f7ff fec6 	bl	800a9c6 <__hexdig_fun>
 800ac3a:	9b00      	ldr	r3, [sp, #0]
 800ac3c:	f000 000f 	and.w	r0, r0, #15
 800ac40:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac44:	4303      	orrs	r3, r0
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	f10b 0b04 	add.w	fp, fp, #4
 800ac4c:	9b03      	ldr	r3, [sp, #12]
 800ac4e:	e00d      	b.n	800ac6c <__gethex+0x27c>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	9a06      	ldr	r2, [sp, #24]
 800ac54:	4413      	add	r3, r2
 800ac56:	42bb      	cmp	r3, r7
 800ac58:	d3e0      	bcc.n	800ac1c <__gethex+0x22c>
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	9901      	ldr	r1, [sp, #4]
 800ac5e:	9307      	str	r3, [sp, #28]
 800ac60:	4652      	mov	r2, sl
 800ac62:	f001 fd6d 	bl	800c740 <strncmp>
 800ac66:	9b07      	ldr	r3, [sp, #28]
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d1d7      	bne.n	800ac1c <__gethex+0x22c>
 800ac6c:	461e      	mov	r6, r3
 800ac6e:	e78b      	b.n	800ab88 <__gethex+0x198>
 800ac70:	f04f 0a03 	mov.w	sl, #3
 800ac74:	e7b8      	b.n	800abe8 <__gethex+0x1f8>
 800ac76:	da0a      	bge.n	800ac8e <__gethex+0x29e>
 800ac78:	1a37      	subs	r7, r6, r0
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	ee18 0a10 	vmov	r0, s16
 800ac80:	463a      	mov	r2, r7
 800ac82:	f000 fcb7 	bl	800b5f4 <__lshift>
 800ac86:	1bed      	subs	r5, r5, r7
 800ac88:	4604      	mov	r4, r0
 800ac8a:	f100 0914 	add.w	r9, r0, #20
 800ac8e:	f04f 0a00 	mov.w	sl, #0
 800ac92:	e7ae      	b.n	800abf2 <__gethex+0x202>
 800ac94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ac98:	42a8      	cmp	r0, r5
 800ac9a:	dd72      	ble.n	800ad82 <__gethex+0x392>
 800ac9c:	1b45      	subs	r5, r0, r5
 800ac9e:	42ae      	cmp	r6, r5
 800aca0:	dc36      	bgt.n	800ad10 <__gethex+0x320>
 800aca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d02a      	beq.n	800ad00 <__gethex+0x310>
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d02c      	beq.n	800ad08 <__gethex+0x318>
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d11c      	bne.n	800acec <__gethex+0x2fc>
 800acb2:	42ae      	cmp	r6, r5
 800acb4:	d11a      	bne.n	800acec <__gethex+0x2fc>
 800acb6:	2e01      	cmp	r6, #1
 800acb8:	d112      	bne.n	800ace0 <__gethex+0x2f0>
 800acba:	9a04      	ldr	r2, [sp, #16]
 800acbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	2301      	movs	r3, #1
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	f8c9 3000 	str.w	r3, [r9]
 800acca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800accc:	2762      	movs	r7, #98	; 0x62
 800acce:	601c      	str	r4, [r3, #0]
 800acd0:	e723      	b.n	800ab1a <__gethex+0x12a>
 800acd2:	bf00      	nop
 800acd4:	0800cee4 	.word	0x0800cee4
 800acd8:	0800ce08 	.word	0x0800ce08
 800acdc:	0800ce7c 	.word	0x0800ce7c
 800ace0:	1e71      	subs	r1, r6, #1
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 feca 	bl	800ba7c <__any_on>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d1e6      	bne.n	800acba <__gethex+0x2ca>
 800acec:	ee18 0a10 	vmov	r0, s16
 800acf0:	4621      	mov	r1, r4
 800acf2:	f000 fa63 	bl	800b1bc <_Bfree>
 800acf6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acf8:	2300      	movs	r3, #0
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	2750      	movs	r7, #80	; 0x50
 800acfe:	e70c      	b.n	800ab1a <__gethex+0x12a>
 800ad00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1f2      	bne.n	800acec <__gethex+0x2fc>
 800ad06:	e7d8      	b.n	800acba <__gethex+0x2ca>
 800ad08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1d5      	bne.n	800acba <__gethex+0x2ca>
 800ad0e:	e7ed      	b.n	800acec <__gethex+0x2fc>
 800ad10:	1e6f      	subs	r7, r5, #1
 800ad12:	f1ba 0f00 	cmp.w	sl, #0
 800ad16:	d131      	bne.n	800ad7c <__gethex+0x38c>
 800ad18:	b127      	cbz	r7, 800ad24 <__gethex+0x334>
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 fead 	bl	800ba7c <__any_on>
 800ad22:	4682      	mov	sl, r0
 800ad24:	117b      	asrs	r3, r7, #5
 800ad26:	2101      	movs	r1, #1
 800ad28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ad2c:	f007 071f 	and.w	r7, r7, #31
 800ad30:	fa01 f707 	lsl.w	r7, r1, r7
 800ad34:	421f      	tst	r7, r3
 800ad36:	4629      	mov	r1, r5
 800ad38:	4620      	mov	r0, r4
 800ad3a:	bf18      	it	ne
 800ad3c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad40:	1b76      	subs	r6, r6, r5
 800ad42:	f7ff fdee 	bl	800a922 <rshift>
 800ad46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad4a:	2702      	movs	r7, #2
 800ad4c:	f1ba 0f00 	cmp.w	sl, #0
 800ad50:	d048      	beq.n	800ade4 <__gethex+0x3f4>
 800ad52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d015      	beq.n	800ad86 <__gethex+0x396>
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d017      	beq.n	800ad8e <__gethex+0x39e>
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d109      	bne.n	800ad76 <__gethex+0x386>
 800ad62:	f01a 0f02 	tst.w	sl, #2
 800ad66:	d006      	beq.n	800ad76 <__gethex+0x386>
 800ad68:	f8d9 0000 	ldr.w	r0, [r9]
 800ad6c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ad70:	f01a 0f01 	tst.w	sl, #1
 800ad74:	d10e      	bne.n	800ad94 <__gethex+0x3a4>
 800ad76:	f047 0710 	orr.w	r7, r7, #16
 800ad7a:	e033      	b.n	800ade4 <__gethex+0x3f4>
 800ad7c:	f04f 0a01 	mov.w	sl, #1
 800ad80:	e7d0      	b.n	800ad24 <__gethex+0x334>
 800ad82:	2701      	movs	r7, #1
 800ad84:	e7e2      	b.n	800ad4c <__gethex+0x35c>
 800ad86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad88:	f1c3 0301 	rsb	r3, r3, #1
 800ad8c:	9315      	str	r3, [sp, #84]	; 0x54
 800ad8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d0f0      	beq.n	800ad76 <__gethex+0x386>
 800ad94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad98:	f104 0314 	add.w	r3, r4, #20
 800ad9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ada0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ada4:	f04f 0c00 	mov.w	ip, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800adae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adb2:	d01c      	beq.n	800adee <__gethex+0x3fe>
 800adb4:	3201      	adds	r2, #1
 800adb6:	6002      	str	r2, [r0, #0]
 800adb8:	2f02      	cmp	r7, #2
 800adba:	f104 0314 	add.w	r3, r4, #20
 800adbe:	d13f      	bne.n	800ae40 <__gethex+0x450>
 800adc0:	f8d8 2000 	ldr.w	r2, [r8]
 800adc4:	3a01      	subs	r2, #1
 800adc6:	42b2      	cmp	r2, r6
 800adc8:	d10a      	bne.n	800ade0 <__gethex+0x3f0>
 800adca:	1171      	asrs	r1, r6, #5
 800adcc:	2201      	movs	r2, #1
 800adce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800add2:	f006 061f 	and.w	r6, r6, #31
 800add6:	fa02 f606 	lsl.w	r6, r2, r6
 800adda:	421e      	tst	r6, r3
 800addc:	bf18      	it	ne
 800adde:	4617      	movne	r7, r2
 800ade0:	f047 0720 	orr.w	r7, r7, #32
 800ade4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ade6:	601c      	str	r4, [r3, #0]
 800ade8:	9b04      	ldr	r3, [sp, #16]
 800adea:	601d      	str	r5, [r3, #0]
 800adec:	e695      	b.n	800ab1a <__gethex+0x12a>
 800adee:	4299      	cmp	r1, r3
 800adf0:	f843 cc04 	str.w	ip, [r3, #-4]
 800adf4:	d8d8      	bhi.n	800ada8 <__gethex+0x3b8>
 800adf6:	68a3      	ldr	r3, [r4, #8]
 800adf8:	459b      	cmp	fp, r3
 800adfa:	db19      	blt.n	800ae30 <__gethex+0x440>
 800adfc:	6861      	ldr	r1, [r4, #4]
 800adfe:	ee18 0a10 	vmov	r0, s16
 800ae02:	3101      	adds	r1, #1
 800ae04:	f000 f99a 	bl	800b13c <_Balloc>
 800ae08:	4681      	mov	r9, r0
 800ae0a:	b918      	cbnz	r0, 800ae14 <__gethex+0x424>
 800ae0c:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <__gethex+0x488>)
 800ae0e:	4602      	mov	r2, r0
 800ae10:	2184      	movs	r1, #132	; 0x84
 800ae12:	e6a8      	b.n	800ab66 <__gethex+0x176>
 800ae14:	6922      	ldr	r2, [r4, #16]
 800ae16:	3202      	adds	r2, #2
 800ae18:	f104 010c 	add.w	r1, r4, #12
 800ae1c:	0092      	lsls	r2, r2, #2
 800ae1e:	300c      	adds	r0, #12
 800ae20:	f7fc fd16 	bl	8007850 <memcpy>
 800ae24:	4621      	mov	r1, r4
 800ae26:	ee18 0a10 	vmov	r0, s16
 800ae2a:	f000 f9c7 	bl	800b1bc <_Bfree>
 800ae2e:	464c      	mov	r4, r9
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae38:	6122      	str	r2, [r4, #16]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	615a      	str	r2, [r3, #20]
 800ae3e:	e7bb      	b.n	800adb8 <__gethex+0x3c8>
 800ae40:	6922      	ldr	r2, [r4, #16]
 800ae42:	455a      	cmp	r2, fp
 800ae44:	dd0b      	ble.n	800ae5e <__gethex+0x46e>
 800ae46:	2101      	movs	r1, #1
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f7ff fd6a 	bl	800a922 <rshift>
 800ae4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae52:	3501      	adds	r5, #1
 800ae54:	42ab      	cmp	r3, r5
 800ae56:	f6ff aed0 	blt.w	800abfa <__gethex+0x20a>
 800ae5a:	2701      	movs	r7, #1
 800ae5c:	e7c0      	b.n	800ade0 <__gethex+0x3f0>
 800ae5e:	f016 061f 	ands.w	r6, r6, #31
 800ae62:	d0fa      	beq.n	800ae5a <__gethex+0x46a>
 800ae64:	4453      	add	r3, sl
 800ae66:	f1c6 0620 	rsb	r6, r6, #32
 800ae6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae6e:	f000 fa57 	bl	800b320 <__hi0bits>
 800ae72:	42b0      	cmp	r0, r6
 800ae74:	dbe7      	blt.n	800ae46 <__gethex+0x456>
 800ae76:	e7f0      	b.n	800ae5a <__gethex+0x46a>
 800ae78:	0800ce08 	.word	0x0800ce08

0800ae7c <L_shift>:
 800ae7c:	f1c2 0208 	rsb	r2, r2, #8
 800ae80:	0092      	lsls	r2, r2, #2
 800ae82:	b570      	push	{r4, r5, r6, lr}
 800ae84:	f1c2 0620 	rsb	r6, r2, #32
 800ae88:	6843      	ldr	r3, [r0, #4]
 800ae8a:	6804      	ldr	r4, [r0, #0]
 800ae8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ae90:	432c      	orrs	r4, r5
 800ae92:	40d3      	lsrs	r3, r2
 800ae94:	6004      	str	r4, [r0, #0]
 800ae96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae9a:	4288      	cmp	r0, r1
 800ae9c:	d3f4      	bcc.n	800ae88 <L_shift+0xc>
 800ae9e:	bd70      	pop	{r4, r5, r6, pc}

0800aea0 <__match>:
 800aea0:	b530      	push	{r4, r5, lr}
 800aea2:	6803      	ldr	r3, [r0, #0]
 800aea4:	3301      	adds	r3, #1
 800aea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeaa:	b914      	cbnz	r4, 800aeb2 <__match+0x12>
 800aeac:	6003      	str	r3, [r0, #0]
 800aeae:	2001      	movs	r0, #1
 800aeb0:	bd30      	pop	{r4, r5, pc}
 800aeb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aeba:	2d19      	cmp	r5, #25
 800aebc:	bf98      	it	ls
 800aebe:	3220      	addls	r2, #32
 800aec0:	42a2      	cmp	r2, r4
 800aec2:	d0f0      	beq.n	800aea6 <__match+0x6>
 800aec4:	2000      	movs	r0, #0
 800aec6:	e7f3      	b.n	800aeb0 <__match+0x10>

0800aec8 <__hexnan>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	680b      	ldr	r3, [r1, #0]
 800aece:	115e      	asrs	r6, r3, #5
 800aed0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aed4:	f013 031f 	ands.w	r3, r3, #31
 800aed8:	b087      	sub	sp, #28
 800aeda:	bf18      	it	ne
 800aedc:	3604      	addne	r6, #4
 800aede:	2500      	movs	r5, #0
 800aee0:	1f37      	subs	r7, r6, #4
 800aee2:	4690      	mov	r8, r2
 800aee4:	6802      	ldr	r2, [r0, #0]
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	4682      	mov	sl, r0
 800aeea:	f846 5c04 	str.w	r5, [r6, #-4]
 800aeee:	46b9      	mov	r9, r7
 800aef0:	463c      	mov	r4, r7
 800aef2:	9502      	str	r5, [sp, #8]
 800aef4:	46ab      	mov	fp, r5
 800aef6:	7851      	ldrb	r1, [r2, #1]
 800aef8:	1c53      	adds	r3, r2, #1
 800aefa:	9303      	str	r3, [sp, #12]
 800aefc:	b341      	cbz	r1, 800af50 <__hexnan+0x88>
 800aefe:	4608      	mov	r0, r1
 800af00:	9205      	str	r2, [sp, #20]
 800af02:	9104      	str	r1, [sp, #16]
 800af04:	f7ff fd5f 	bl	800a9c6 <__hexdig_fun>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d14f      	bne.n	800afac <__hexnan+0xe4>
 800af0c:	9904      	ldr	r1, [sp, #16]
 800af0e:	9a05      	ldr	r2, [sp, #20]
 800af10:	2920      	cmp	r1, #32
 800af12:	d818      	bhi.n	800af46 <__hexnan+0x7e>
 800af14:	9b02      	ldr	r3, [sp, #8]
 800af16:	459b      	cmp	fp, r3
 800af18:	dd13      	ble.n	800af42 <__hexnan+0x7a>
 800af1a:	454c      	cmp	r4, r9
 800af1c:	d206      	bcs.n	800af2c <__hexnan+0x64>
 800af1e:	2d07      	cmp	r5, #7
 800af20:	dc04      	bgt.n	800af2c <__hexnan+0x64>
 800af22:	462a      	mov	r2, r5
 800af24:	4649      	mov	r1, r9
 800af26:	4620      	mov	r0, r4
 800af28:	f7ff ffa8 	bl	800ae7c <L_shift>
 800af2c:	4544      	cmp	r4, r8
 800af2e:	d950      	bls.n	800afd2 <__hexnan+0x10a>
 800af30:	2300      	movs	r3, #0
 800af32:	f1a4 0904 	sub.w	r9, r4, #4
 800af36:	f844 3c04 	str.w	r3, [r4, #-4]
 800af3a:	f8cd b008 	str.w	fp, [sp, #8]
 800af3e:	464c      	mov	r4, r9
 800af40:	461d      	mov	r5, r3
 800af42:	9a03      	ldr	r2, [sp, #12]
 800af44:	e7d7      	b.n	800aef6 <__hexnan+0x2e>
 800af46:	2929      	cmp	r1, #41	; 0x29
 800af48:	d156      	bne.n	800aff8 <__hexnan+0x130>
 800af4a:	3202      	adds	r2, #2
 800af4c:	f8ca 2000 	str.w	r2, [sl]
 800af50:	f1bb 0f00 	cmp.w	fp, #0
 800af54:	d050      	beq.n	800aff8 <__hexnan+0x130>
 800af56:	454c      	cmp	r4, r9
 800af58:	d206      	bcs.n	800af68 <__hexnan+0xa0>
 800af5a:	2d07      	cmp	r5, #7
 800af5c:	dc04      	bgt.n	800af68 <__hexnan+0xa0>
 800af5e:	462a      	mov	r2, r5
 800af60:	4649      	mov	r1, r9
 800af62:	4620      	mov	r0, r4
 800af64:	f7ff ff8a 	bl	800ae7c <L_shift>
 800af68:	4544      	cmp	r4, r8
 800af6a:	d934      	bls.n	800afd6 <__hexnan+0x10e>
 800af6c:	f1a8 0204 	sub.w	r2, r8, #4
 800af70:	4623      	mov	r3, r4
 800af72:	f853 1b04 	ldr.w	r1, [r3], #4
 800af76:	f842 1f04 	str.w	r1, [r2, #4]!
 800af7a:	429f      	cmp	r7, r3
 800af7c:	d2f9      	bcs.n	800af72 <__hexnan+0xaa>
 800af7e:	1b3b      	subs	r3, r7, r4
 800af80:	f023 0303 	bic.w	r3, r3, #3
 800af84:	3304      	adds	r3, #4
 800af86:	3401      	adds	r4, #1
 800af88:	3e03      	subs	r6, #3
 800af8a:	42b4      	cmp	r4, r6
 800af8c:	bf88      	it	hi
 800af8e:	2304      	movhi	r3, #4
 800af90:	4443      	add	r3, r8
 800af92:	2200      	movs	r2, #0
 800af94:	f843 2b04 	str.w	r2, [r3], #4
 800af98:	429f      	cmp	r7, r3
 800af9a:	d2fb      	bcs.n	800af94 <__hexnan+0xcc>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	b91b      	cbnz	r3, 800afa8 <__hexnan+0xe0>
 800afa0:	4547      	cmp	r7, r8
 800afa2:	d127      	bne.n	800aff4 <__hexnan+0x12c>
 800afa4:	2301      	movs	r3, #1
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	2005      	movs	r0, #5
 800afaa:	e026      	b.n	800affa <__hexnan+0x132>
 800afac:	3501      	adds	r5, #1
 800afae:	2d08      	cmp	r5, #8
 800afb0:	f10b 0b01 	add.w	fp, fp, #1
 800afb4:	dd06      	ble.n	800afc4 <__hexnan+0xfc>
 800afb6:	4544      	cmp	r4, r8
 800afb8:	d9c3      	bls.n	800af42 <__hexnan+0x7a>
 800afba:	2300      	movs	r3, #0
 800afbc:	f844 3c04 	str.w	r3, [r4, #-4]
 800afc0:	2501      	movs	r5, #1
 800afc2:	3c04      	subs	r4, #4
 800afc4:	6822      	ldr	r2, [r4, #0]
 800afc6:	f000 000f 	and.w	r0, r0, #15
 800afca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800afce:	6022      	str	r2, [r4, #0]
 800afd0:	e7b7      	b.n	800af42 <__hexnan+0x7a>
 800afd2:	2508      	movs	r5, #8
 800afd4:	e7b5      	b.n	800af42 <__hexnan+0x7a>
 800afd6:	9b01      	ldr	r3, [sp, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0df      	beq.n	800af9c <__hexnan+0xd4>
 800afdc:	f04f 32ff 	mov.w	r2, #4294967295
 800afe0:	f1c3 0320 	rsb	r3, r3, #32
 800afe4:	fa22 f303 	lsr.w	r3, r2, r3
 800afe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800afec:	401a      	ands	r2, r3
 800afee:	f846 2c04 	str.w	r2, [r6, #-4]
 800aff2:	e7d3      	b.n	800af9c <__hexnan+0xd4>
 800aff4:	3f04      	subs	r7, #4
 800aff6:	e7d1      	b.n	800af9c <__hexnan+0xd4>
 800aff8:	2004      	movs	r0, #4
 800affa:	b007      	add	sp, #28
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b000 <_localeconv_r>:
 800b000:	4800      	ldr	r0, [pc, #0]	; (800b004 <_localeconv_r+0x4>)
 800b002:	4770      	bx	lr
 800b004:	20000164 	.word	0x20000164

0800b008 <__retarget_lock_init_recursive>:
 800b008:	4770      	bx	lr

0800b00a <__retarget_lock_acquire_recursive>:
 800b00a:	4770      	bx	lr

0800b00c <__retarget_lock_release_recursive>:
 800b00c:	4770      	bx	lr
	...

0800b010 <_lseek_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	; (800b030 <_lseek_r+0x20>)
 800b014:	4604      	mov	r4, r0
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	602a      	str	r2, [r5, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	f7f6 fc44 	bl	80018ac <_lseek>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_lseek_r+0x1e>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_lseek_r+0x1e>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	200007c8 	.word	0x200007c8

0800b034 <__swhatbuf_r>:
 800b034:	b570      	push	{r4, r5, r6, lr}
 800b036:	460e      	mov	r6, r1
 800b038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03c:	2900      	cmp	r1, #0
 800b03e:	b096      	sub	sp, #88	; 0x58
 800b040:	4614      	mov	r4, r2
 800b042:	461d      	mov	r5, r3
 800b044:	da08      	bge.n	800b058 <__swhatbuf_r+0x24>
 800b046:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	602a      	str	r2, [r5, #0]
 800b04e:	061a      	lsls	r2, r3, #24
 800b050:	d410      	bmi.n	800b074 <__swhatbuf_r+0x40>
 800b052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b056:	e00e      	b.n	800b076 <__swhatbuf_r+0x42>
 800b058:	466a      	mov	r2, sp
 800b05a:	f001 fc71 	bl	800c940 <_fstat_r>
 800b05e:	2800      	cmp	r0, #0
 800b060:	dbf1      	blt.n	800b046 <__swhatbuf_r+0x12>
 800b062:	9a01      	ldr	r2, [sp, #4]
 800b064:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b068:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b06c:	425a      	negs	r2, r3
 800b06e:	415a      	adcs	r2, r3
 800b070:	602a      	str	r2, [r5, #0]
 800b072:	e7ee      	b.n	800b052 <__swhatbuf_r+0x1e>
 800b074:	2340      	movs	r3, #64	; 0x40
 800b076:	2000      	movs	r0, #0
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	b016      	add	sp, #88	; 0x58
 800b07c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b080 <__smakebuf_r>:
 800b080:	898b      	ldrh	r3, [r1, #12]
 800b082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b084:	079d      	lsls	r5, r3, #30
 800b086:	4606      	mov	r6, r0
 800b088:	460c      	mov	r4, r1
 800b08a:	d507      	bpl.n	800b09c <__smakebuf_r+0x1c>
 800b08c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	6123      	str	r3, [r4, #16]
 800b094:	2301      	movs	r3, #1
 800b096:	6163      	str	r3, [r4, #20]
 800b098:	b002      	add	sp, #8
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	ab01      	add	r3, sp, #4
 800b09e:	466a      	mov	r2, sp
 800b0a0:	f7ff ffc8 	bl	800b034 <__swhatbuf_r>
 800b0a4:	9900      	ldr	r1, [sp, #0]
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7fc fc53 	bl	8007954 <_malloc_r>
 800b0ae:	b948      	cbnz	r0, 800b0c4 <__smakebuf_r+0x44>
 800b0b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b4:	059a      	lsls	r2, r3, #22
 800b0b6:	d4ef      	bmi.n	800b098 <__smakebuf_r+0x18>
 800b0b8:	f023 0303 	bic.w	r3, r3, #3
 800b0bc:	f043 0302 	orr.w	r3, r3, #2
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	e7e3      	b.n	800b08c <__smakebuf_r+0xc>
 800b0c4:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <__smakebuf_r+0x7c>)
 800b0c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	6020      	str	r0, [r4, #0]
 800b0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	9b00      	ldr	r3, [sp, #0]
 800b0d4:	6163      	str	r3, [r4, #20]
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	6120      	str	r0, [r4, #16]
 800b0da:	b15b      	cbz	r3, 800b0f4 <__smakebuf_r+0x74>
 800b0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f001 fc3f 	bl	800c964 <_isatty_r>
 800b0e6:	b128      	cbz	r0, 800b0f4 <__smakebuf_r+0x74>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	f023 0303 	bic.w	r3, r3, #3
 800b0ee:	f043 0301 	orr.w	r3, r3, #1
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	89a0      	ldrh	r0, [r4, #12]
 800b0f6:	4305      	orrs	r5, r0
 800b0f8:	81a5      	strh	r5, [r4, #12]
 800b0fa:	e7cd      	b.n	800b098 <__smakebuf_r+0x18>
 800b0fc:	0800a781 	.word	0x0800a781

0800b100 <__ascii_mbtowc>:
 800b100:	b082      	sub	sp, #8
 800b102:	b901      	cbnz	r1, 800b106 <__ascii_mbtowc+0x6>
 800b104:	a901      	add	r1, sp, #4
 800b106:	b142      	cbz	r2, 800b11a <__ascii_mbtowc+0x1a>
 800b108:	b14b      	cbz	r3, 800b11e <__ascii_mbtowc+0x1e>
 800b10a:	7813      	ldrb	r3, [r2, #0]
 800b10c:	600b      	str	r3, [r1, #0]
 800b10e:	7812      	ldrb	r2, [r2, #0]
 800b110:	1e10      	subs	r0, r2, #0
 800b112:	bf18      	it	ne
 800b114:	2001      	movne	r0, #1
 800b116:	b002      	add	sp, #8
 800b118:	4770      	bx	lr
 800b11a:	4610      	mov	r0, r2
 800b11c:	e7fb      	b.n	800b116 <__ascii_mbtowc+0x16>
 800b11e:	f06f 0001 	mvn.w	r0, #1
 800b122:	e7f8      	b.n	800b116 <__ascii_mbtowc+0x16>

0800b124 <__malloc_lock>:
 800b124:	4801      	ldr	r0, [pc, #4]	; (800b12c <__malloc_lock+0x8>)
 800b126:	f7ff bf70 	b.w	800b00a <__retarget_lock_acquire_recursive>
 800b12a:	bf00      	nop
 800b12c:	200007c4 	.word	0x200007c4

0800b130 <__malloc_unlock>:
 800b130:	4801      	ldr	r0, [pc, #4]	; (800b138 <__malloc_unlock+0x8>)
 800b132:	f7ff bf6b 	b.w	800b00c <__retarget_lock_release_recursive>
 800b136:	bf00      	nop
 800b138:	200007c4 	.word	0x200007c4

0800b13c <_Balloc>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b140:	4604      	mov	r4, r0
 800b142:	460d      	mov	r5, r1
 800b144:	b976      	cbnz	r6, 800b164 <_Balloc+0x28>
 800b146:	2010      	movs	r0, #16
 800b148:	f7fc fb7a 	bl	8007840 <malloc>
 800b14c:	4602      	mov	r2, r0
 800b14e:	6260      	str	r0, [r4, #36]	; 0x24
 800b150:	b920      	cbnz	r0, 800b15c <_Balloc+0x20>
 800b152:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <_Balloc+0x78>)
 800b154:	4818      	ldr	r0, [pc, #96]	; (800b1b8 <_Balloc+0x7c>)
 800b156:	2166      	movs	r1, #102	; 0x66
 800b158:	f001 fbc2 	bl	800c8e0 <__assert_func>
 800b15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b160:	6006      	str	r6, [r0, #0]
 800b162:	60c6      	str	r6, [r0, #12]
 800b164:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b166:	68f3      	ldr	r3, [r6, #12]
 800b168:	b183      	cbz	r3, 800b18c <_Balloc+0x50>
 800b16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b172:	b9b8      	cbnz	r0, 800b1a4 <_Balloc+0x68>
 800b174:	2101      	movs	r1, #1
 800b176:	fa01 f605 	lsl.w	r6, r1, r5
 800b17a:	1d72      	adds	r2, r6, #5
 800b17c:	0092      	lsls	r2, r2, #2
 800b17e:	4620      	mov	r0, r4
 800b180:	f000 fc9d 	bl	800babe <_calloc_r>
 800b184:	b160      	cbz	r0, 800b1a0 <_Balloc+0x64>
 800b186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b18a:	e00e      	b.n	800b1aa <_Balloc+0x6e>
 800b18c:	2221      	movs	r2, #33	; 0x21
 800b18e:	2104      	movs	r1, #4
 800b190:	4620      	mov	r0, r4
 800b192:	f000 fc94 	bl	800babe <_calloc_r>
 800b196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b198:	60f0      	str	r0, [r6, #12]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e4      	bne.n	800b16a <_Balloc+0x2e>
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	6802      	ldr	r2, [r0, #0]
 800b1a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1b0:	e7f7      	b.n	800b1a2 <_Balloc+0x66>
 800b1b2:	bf00      	nop
 800b1b4:	0800cd96 	.word	0x0800cd96
 800b1b8:	0800cef8 	.word	0x0800cef8

0800b1bc <_Bfree>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	b976      	cbnz	r6, 800b1e4 <_Bfree+0x28>
 800b1c6:	2010      	movs	r0, #16
 800b1c8:	f7fc fb3a 	bl	8007840 <malloc>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	6268      	str	r0, [r5, #36]	; 0x24
 800b1d0:	b920      	cbnz	r0, 800b1dc <_Bfree+0x20>
 800b1d2:	4b09      	ldr	r3, [pc, #36]	; (800b1f8 <_Bfree+0x3c>)
 800b1d4:	4809      	ldr	r0, [pc, #36]	; (800b1fc <_Bfree+0x40>)
 800b1d6:	218a      	movs	r1, #138	; 0x8a
 800b1d8:	f001 fb82 	bl	800c8e0 <__assert_func>
 800b1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1e0:	6006      	str	r6, [r0, #0]
 800b1e2:	60c6      	str	r6, [r0, #12]
 800b1e4:	b13c      	cbz	r4, 800b1f6 <_Bfree+0x3a>
 800b1e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1e8:	6862      	ldr	r2, [r4, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1f0:	6021      	str	r1, [r4, #0]
 800b1f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	0800cd96 	.word	0x0800cd96
 800b1fc:	0800cef8 	.word	0x0800cef8

0800b200 <__multadd>:
 800b200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b204:	690d      	ldr	r5, [r1, #16]
 800b206:	4607      	mov	r7, r0
 800b208:	460c      	mov	r4, r1
 800b20a:	461e      	mov	r6, r3
 800b20c:	f101 0c14 	add.w	ip, r1, #20
 800b210:	2000      	movs	r0, #0
 800b212:	f8dc 3000 	ldr.w	r3, [ip]
 800b216:	b299      	uxth	r1, r3
 800b218:	fb02 6101 	mla	r1, r2, r1, r6
 800b21c:	0c1e      	lsrs	r6, r3, #16
 800b21e:	0c0b      	lsrs	r3, r1, #16
 800b220:	fb02 3306 	mla	r3, r2, r6, r3
 800b224:	b289      	uxth	r1, r1
 800b226:	3001      	adds	r0, #1
 800b228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b22c:	4285      	cmp	r5, r0
 800b22e:	f84c 1b04 	str.w	r1, [ip], #4
 800b232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b236:	dcec      	bgt.n	800b212 <__multadd+0x12>
 800b238:	b30e      	cbz	r6, 800b27e <__multadd+0x7e>
 800b23a:	68a3      	ldr	r3, [r4, #8]
 800b23c:	42ab      	cmp	r3, r5
 800b23e:	dc19      	bgt.n	800b274 <__multadd+0x74>
 800b240:	6861      	ldr	r1, [r4, #4]
 800b242:	4638      	mov	r0, r7
 800b244:	3101      	adds	r1, #1
 800b246:	f7ff ff79 	bl	800b13c <_Balloc>
 800b24a:	4680      	mov	r8, r0
 800b24c:	b928      	cbnz	r0, 800b25a <__multadd+0x5a>
 800b24e:	4602      	mov	r2, r0
 800b250:	4b0c      	ldr	r3, [pc, #48]	; (800b284 <__multadd+0x84>)
 800b252:	480d      	ldr	r0, [pc, #52]	; (800b288 <__multadd+0x88>)
 800b254:	21b5      	movs	r1, #181	; 0xb5
 800b256:	f001 fb43 	bl	800c8e0 <__assert_func>
 800b25a:	6922      	ldr	r2, [r4, #16]
 800b25c:	3202      	adds	r2, #2
 800b25e:	f104 010c 	add.w	r1, r4, #12
 800b262:	0092      	lsls	r2, r2, #2
 800b264:	300c      	adds	r0, #12
 800b266:	f7fc faf3 	bl	8007850 <memcpy>
 800b26a:	4621      	mov	r1, r4
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff ffa5 	bl	800b1bc <_Bfree>
 800b272:	4644      	mov	r4, r8
 800b274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b278:	3501      	adds	r5, #1
 800b27a:	615e      	str	r6, [r3, #20]
 800b27c:	6125      	str	r5, [r4, #16]
 800b27e:	4620      	mov	r0, r4
 800b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b284:	0800ce08 	.word	0x0800ce08
 800b288:	0800cef8 	.word	0x0800cef8

0800b28c <__s2b>:
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b290:	460c      	mov	r4, r1
 800b292:	4615      	mov	r5, r2
 800b294:	461f      	mov	r7, r3
 800b296:	2209      	movs	r2, #9
 800b298:	3308      	adds	r3, #8
 800b29a:	4606      	mov	r6, r0
 800b29c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	db09      	blt.n	800b2bc <__s2b+0x30>
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7ff ff47 	bl	800b13c <_Balloc>
 800b2ae:	b940      	cbnz	r0, 800b2c2 <__s2b+0x36>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	4b19      	ldr	r3, [pc, #100]	; (800b318 <__s2b+0x8c>)
 800b2b4:	4819      	ldr	r0, [pc, #100]	; (800b31c <__s2b+0x90>)
 800b2b6:	21ce      	movs	r1, #206	; 0xce
 800b2b8:	f001 fb12 	bl	800c8e0 <__assert_func>
 800b2bc:	0052      	lsls	r2, r2, #1
 800b2be:	3101      	adds	r1, #1
 800b2c0:	e7f0      	b.n	800b2a4 <__s2b+0x18>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	6143      	str	r3, [r0, #20]
 800b2c6:	2d09      	cmp	r5, #9
 800b2c8:	f04f 0301 	mov.w	r3, #1
 800b2cc:	6103      	str	r3, [r0, #16]
 800b2ce:	dd16      	ble.n	800b2fe <__s2b+0x72>
 800b2d0:	f104 0909 	add.w	r9, r4, #9
 800b2d4:	46c8      	mov	r8, r9
 800b2d6:	442c      	add	r4, r5
 800b2d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2dc:	4601      	mov	r1, r0
 800b2de:	3b30      	subs	r3, #48	; 0x30
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff8c 	bl	800b200 <__multadd>
 800b2e8:	45a0      	cmp	r8, r4
 800b2ea:	d1f5      	bne.n	800b2d8 <__s2b+0x4c>
 800b2ec:	f1a5 0408 	sub.w	r4, r5, #8
 800b2f0:	444c      	add	r4, r9
 800b2f2:	1b2d      	subs	r5, r5, r4
 800b2f4:	1963      	adds	r3, r4, r5
 800b2f6:	42bb      	cmp	r3, r7
 800b2f8:	db04      	blt.n	800b304 <__s2b+0x78>
 800b2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fe:	340a      	adds	r4, #10
 800b300:	2509      	movs	r5, #9
 800b302:	e7f6      	b.n	800b2f2 <__s2b+0x66>
 800b304:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b308:	4601      	mov	r1, r0
 800b30a:	3b30      	subs	r3, #48	; 0x30
 800b30c:	220a      	movs	r2, #10
 800b30e:	4630      	mov	r0, r6
 800b310:	f7ff ff76 	bl	800b200 <__multadd>
 800b314:	e7ee      	b.n	800b2f4 <__s2b+0x68>
 800b316:	bf00      	nop
 800b318:	0800ce08 	.word	0x0800ce08
 800b31c:	0800cef8 	.word	0x0800cef8

0800b320 <__hi0bits>:
 800b320:	0c03      	lsrs	r3, r0, #16
 800b322:	041b      	lsls	r3, r3, #16
 800b324:	b9d3      	cbnz	r3, 800b35c <__hi0bits+0x3c>
 800b326:	0400      	lsls	r0, r0, #16
 800b328:	2310      	movs	r3, #16
 800b32a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b32e:	bf04      	itt	eq
 800b330:	0200      	lsleq	r0, r0, #8
 800b332:	3308      	addeq	r3, #8
 800b334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b338:	bf04      	itt	eq
 800b33a:	0100      	lsleq	r0, r0, #4
 800b33c:	3304      	addeq	r3, #4
 800b33e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b342:	bf04      	itt	eq
 800b344:	0080      	lsleq	r0, r0, #2
 800b346:	3302      	addeq	r3, #2
 800b348:	2800      	cmp	r0, #0
 800b34a:	db05      	blt.n	800b358 <__hi0bits+0x38>
 800b34c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b350:	f103 0301 	add.w	r3, r3, #1
 800b354:	bf08      	it	eq
 800b356:	2320      	moveq	r3, #32
 800b358:	4618      	mov	r0, r3
 800b35a:	4770      	bx	lr
 800b35c:	2300      	movs	r3, #0
 800b35e:	e7e4      	b.n	800b32a <__hi0bits+0xa>

0800b360 <__lo0bits>:
 800b360:	6803      	ldr	r3, [r0, #0]
 800b362:	f013 0207 	ands.w	r2, r3, #7
 800b366:	4601      	mov	r1, r0
 800b368:	d00b      	beq.n	800b382 <__lo0bits+0x22>
 800b36a:	07da      	lsls	r2, r3, #31
 800b36c:	d423      	bmi.n	800b3b6 <__lo0bits+0x56>
 800b36e:	0798      	lsls	r0, r3, #30
 800b370:	bf49      	itett	mi
 800b372:	085b      	lsrmi	r3, r3, #1
 800b374:	089b      	lsrpl	r3, r3, #2
 800b376:	2001      	movmi	r0, #1
 800b378:	600b      	strmi	r3, [r1, #0]
 800b37a:	bf5c      	itt	pl
 800b37c:	600b      	strpl	r3, [r1, #0]
 800b37e:	2002      	movpl	r0, #2
 800b380:	4770      	bx	lr
 800b382:	b298      	uxth	r0, r3
 800b384:	b9a8      	cbnz	r0, 800b3b2 <__lo0bits+0x52>
 800b386:	0c1b      	lsrs	r3, r3, #16
 800b388:	2010      	movs	r0, #16
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	b90a      	cbnz	r2, 800b392 <__lo0bits+0x32>
 800b38e:	3008      	adds	r0, #8
 800b390:	0a1b      	lsrs	r3, r3, #8
 800b392:	071a      	lsls	r2, r3, #28
 800b394:	bf04      	itt	eq
 800b396:	091b      	lsreq	r3, r3, #4
 800b398:	3004      	addeq	r0, #4
 800b39a:	079a      	lsls	r2, r3, #30
 800b39c:	bf04      	itt	eq
 800b39e:	089b      	lsreq	r3, r3, #2
 800b3a0:	3002      	addeq	r0, #2
 800b3a2:	07da      	lsls	r2, r3, #31
 800b3a4:	d403      	bmi.n	800b3ae <__lo0bits+0x4e>
 800b3a6:	085b      	lsrs	r3, r3, #1
 800b3a8:	f100 0001 	add.w	r0, r0, #1
 800b3ac:	d005      	beq.n	800b3ba <__lo0bits+0x5a>
 800b3ae:	600b      	str	r3, [r1, #0]
 800b3b0:	4770      	bx	lr
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	e7e9      	b.n	800b38a <__lo0bits+0x2a>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	4770      	bx	lr
 800b3ba:	2020      	movs	r0, #32
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <__i2b>:
 800b3c0:	b510      	push	{r4, lr}
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	f7ff feb9 	bl	800b13c <_Balloc>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	b928      	cbnz	r0, 800b3da <__i2b+0x1a>
 800b3ce:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <__i2b+0x24>)
 800b3d0:	4805      	ldr	r0, [pc, #20]	; (800b3e8 <__i2b+0x28>)
 800b3d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3d6:	f001 fa83 	bl	800c8e0 <__assert_func>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	6144      	str	r4, [r0, #20]
 800b3de:	6103      	str	r3, [r0, #16]
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800ce08 	.word	0x0800ce08
 800b3e8:	0800cef8 	.word	0x0800cef8

0800b3ec <__multiply>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	4691      	mov	r9, r2
 800b3f2:	690a      	ldr	r2, [r1, #16]
 800b3f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	bfb8      	it	lt
 800b3fc:	460b      	movlt	r3, r1
 800b3fe:	460c      	mov	r4, r1
 800b400:	bfbc      	itt	lt
 800b402:	464c      	movlt	r4, r9
 800b404:	4699      	movlt	r9, r3
 800b406:	6927      	ldr	r7, [r4, #16]
 800b408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b40c:	68a3      	ldr	r3, [r4, #8]
 800b40e:	6861      	ldr	r1, [r4, #4]
 800b410:	eb07 060a 	add.w	r6, r7, sl
 800b414:	42b3      	cmp	r3, r6
 800b416:	b085      	sub	sp, #20
 800b418:	bfb8      	it	lt
 800b41a:	3101      	addlt	r1, #1
 800b41c:	f7ff fe8e 	bl	800b13c <_Balloc>
 800b420:	b930      	cbnz	r0, 800b430 <__multiply+0x44>
 800b422:	4602      	mov	r2, r0
 800b424:	4b44      	ldr	r3, [pc, #272]	; (800b538 <__multiply+0x14c>)
 800b426:	4845      	ldr	r0, [pc, #276]	; (800b53c <__multiply+0x150>)
 800b428:	f240 115d 	movw	r1, #349	; 0x15d
 800b42c:	f001 fa58 	bl	800c8e0 <__assert_func>
 800b430:	f100 0514 	add.w	r5, r0, #20
 800b434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b438:	462b      	mov	r3, r5
 800b43a:	2200      	movs	r2, #0
 800b43c:	4543      	cmp	r3, r8
 800b43e:	d321      	bcc.n	800b484 <__multiply+0x98>
 800b440:	f104 0314 	add.w	r3, r4, #20
 800b444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b448:	f109 0314 	add.w	r3, r9, #20
 800b44c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b450:	9202      	str	r2, [sp, #8]
 800b452:	1b3a      	subs	r2, r7, r4
 800b454:	3a15      	subs	r2, #21
 800b456:	f022 0203 	bic.w	r2, r2, #3
 800b45a:	3204      	adds	r2, #4
 800b45c:	f104 0115 	add.w	r1, r4, #21
 800b460:	428f      	cmp	r7, r1
 800b462:	bf38      	it	cc
 800b464:	2204      	movcc	r2, #4
 800b466:	9201      	str	r2, [sp, #4]
 800b468:	9a02      	ldr	r2, [sp, #8]
 800b46a:	9303      	str	r3, [sp, #12]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d80c      	bhi.n	800b48a <__multiply+0x9e>
 800b470:	2e00      	cmp	r6, #0
 800b472:	dd03      	ble.n	800b47c <__multiply+0x90>
 800b474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d05a      	beq.n	800b532 <__multiply+0x146>
 800b47c:	6106      	str	r6, [r0, #16]
 800b47e:	b005      	add	sp, #20
 800b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b484:	f843 2b04 	str.w	r2, [r3], #4
 800b488:	e7d8      	b.n	800b43c <__multiply+0x50>
 800b48a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b48e:	f1ba 0f00 	cmp.w	sl, #0
 800b492:	d024      	beq.n	800b4de <__multiply+0xf2>
 800b494:	f104 0e14 	add.w	lr, r4, #20
 800b498:	46a9      	mov	r9, r5
 800b49a:	f04f 0c00 	mov.w	ip, #0
 800b49e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4a2:	f8d9 1000 	ldr.w	r1, [r9]
 800b4a6:	fa1f fb82 	uxth.w	fp, r2
 800b4aa:	b289      	uxth	r1, r1
 800b4ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4b4:	f8d9 2000 	ldr.w	r2, [r9]
 800b4b8:	4461      	add	r1, ip
 800b4ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4be:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4c6:	b289      	uxth	r1, r1
 800b4c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4cc:	4577      	cmp	r7, lr
 800b4ce:	f849 1b04 	str.w	r1, [r9], #4
 800b4d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4d6:	d8e2      	bhi.n	800b49e <__multiply+0xb2>
 800b4d8:	9a01      	ldr	r2, [sp, #4]
 800b4da:	f845 c002 	str.w	ip, [r5, r2]
 800b4de:	9a03      	ldr	r2, [sp, #12]
 800b4e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	f1b9 0f00 	cmp.w	r9, #0
 800b4ea:	d020      	beq.n	800b52e <__multiply+0x142>
 800b4ec:	6829      	ldr	r1, [r5, #0]
 800b4ee:	f104 0c14 	add.w	ip, r4, #20
 800b4f2:	46ae      	mov	lr, r5
 800b4f4:	f04f 0a00 	mov.w	sl, #0
 800b4f8:	f8bc b000 	ldrh.w	fp, [ip]
 800b4fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b500:	fb09 220b 	mla	r2, r9, fp, r2
 800b504:	4492      	add	sl, r2
 800b506:	b289      	uxth	r1, r1
 800b508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b50c:	f84e 1b04 	str.w	r1, [lr], #4
 800b510:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b514:	f8be 1000 	ldrh.w	r1, [lr]
 800b518:	0c12      	lsrs	r2, r2, #16
 800b51a:	fb09 1102 	mla	r1, r9, r2, r1
 800b51e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b522:	4567      	cmp	r7, ip
 800b524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b528:	d8e6      	bhi.n	800b4f8 <__multiply+0x10c>
 800b52a:	9a01      	ldr	r2, [sp, #4]
 800b52c:	50a9      	str	r1, [r5, r2]
 800b52e:	3504      	adds	r5, #4
 800b530:	e79a      	b.n	800b468 <__multiply+0x7c>
 800b532:	3e01      	subs	r6, #1
 800b534:	e79c      	b.n	800b470 <__multiply+0x84>
 800b536:	bf00      	nop
 800b538:	0800ce08 	.word	0x0800ce08
 800b53c:	0800cef8 	.word	0x0800cef8

0800b540 <__pow5mult>:
 800b540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b544:	4615      	mov	r5, r2
 800b546:	f012 0203 	ands.w	r2, r2, #3
 800b54a:	4606      	mov	r6, r0
 800b54c:	460f      	mov	r7, r1
 800b54e:	d007      	beq.n	800b560 <__pow5mult+0x20>
 800b550:	4c25      	ldr	r4, [pc, #148]	; (800b5e8 <__pow5mult+0xa8>)
 800b552:	3a01      	subs	r2, #1
 800b554:	2300      	movs	r3, #0
 800b556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b55a:	f7ff fe51 	bl	800b200 <__multadd>
 800b55e:	4607      	mov	r7, r0
 800b560:	10ad      	asrs	r5, r5, #2
 800b562:	d03d      	beq.n	800b5e0 <__pow5mult+0xa0>
 800b564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b566:	b97c      	cbnz	r4, 800b588 <__pow5mult+0x48>
 800b568:	2010      	movs	r0, #16
 800b56a:	f7fc f969 	bl	8007840 <malloc>
 800b56e:	4602      	mov	r2, r0
 800b570:	6270      	str	r0, [r6, #36]	; 0x24
 800b572:	b928      	cbnz	r0, 800b580 <__pow5mult+0x40>
 800b574:	4b1d      	ldr	r3, [pc, #116]	; (800b5ec <__pow5mult+0xac>)
 800b576:	481e      	ldr	r0, [pc, #120]	; (800b5f0 <__pow5mult+0xb0>)
 800b578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b57c:	f001 f9b0 	bl	800c8e0 <__assert_func>
 800b580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b584:	6004      	str	r4, [r0, #0]
 800b586:	60c4      	str	r4, [r0, #12]
 800b588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b58c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b590:	b94c      	cbnz	r4, 800b5a6 <__pow5mult+0x66>
 800b592:	f240 2171 	movw	r1, #625	; 0x271
 800b596:	4630      	mov	r0, r6
 800b598:	f7ff ff12 	bl	800b3c0 <__i2b>
 800b59c:	2300      	movs	r3, #0
 800b59e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	6003      	str	r3, [r0, #0]
 800b5a6:	f04f 0900 	mov.w	r9, #0
 800b5aa:	07eb      	lsls	r3, r5, #31
 800b5ac:	d50a      	bpl.n	800b5c4 <__pow5mult+0x84>
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7ff ff1a 	bl	800b3ec <__multiply>
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	4680      	mov	r8, r0
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7ff fdfd 	bl	800b1bc <_Bfree>
 800b5c2:	4647      	mov	r7, r8
 800b5c4:	106d      	asrs	r5, r5, #1
 800b5c6:	d00b      	beq.n	800b5e0 <__pow5mult+0xa0>
 800b5c8:	6820      	ldr	r0, [r4, #0]
 800b5ca:	b938      	cbnz	r0, 800b5dc <__pow5mult+0x9c>
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7ff ff0b 	bl	800b3ec <__multiply>
 800b5d6:	6020      	str	r0, [r4, #0]
 800b5d8:	f8c0 9000 	str.w	r9, [r0]
 800b5dc:	4604      	mov	r4, r0
 800b5de:	e7e4      	b.n	800b5aa <__pow5mult+0x6a>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e6:	bf00      	nop
 800b5e8:	0800d048 	.word	0x0800d048
 800b5ec:	0800cd96 	.word	0x0800cd96
 800b5f0:	0800cef8 	.word	0x0800cef8

0800b5f4 <__lshift>:
 800b5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	6849      	ldr	r1, [r1, #4]
 800b5fc:	6923      	ldr	r3, [r4, #16]
 800b5fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b602:	68a3      	ldr	r3, [r4, #8]
 800b604:	4607      	mov	r7, r0
 800b606:	4691      	mov	r9, r2
 800b608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b60c:	f108 0601 	add.w	r6, r8, #1
 800b610:	42b3      	cmp	r3, r6
 800b612:	db0b      	blt.n	800b62c <__lshift+0x38>
 800b614:	4638      	mov	r0, r7
 800b616:	f7ff fd91 	bl	800b13c <_Balloc>
 800b61a:	4605      	mov	r5, r0
 800b61c:	b948      	cbnz	r0, 800b632 <__lshift+0x3e>
 800b61e:	4602      	mov	r2, r0
 800b620:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <__lshift+0xd8>)
 800b622:	482b      	ldr	r0, [pc, #172]	; (800b6d0 <__lshift+0xdc>)
 800b624:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b628:	f001 f95a 	bl	800c8e0 <__assert_func>
 800b62c:	3101      	adds	r1, #1
 800b62e:	005b      	lsls	r3, r3, #1
 800b630:	e7ee      	b.n	800b610 <__lshift+0x1c>
 800b632:	2300      	movs	r3, #0
 800b634:	f100 0114 	add.w	r1, r0, #20
 800b638:	f100 0210 	add.w	r2, r0, #16
 800b63c:	4618      	mov	r0, r3
 800b63e:	4553      	cmp	r3, sl
 800b640:	db37      	blt.n	800b6b2 <__lshift+0xbe>
 800b642:	6920      	ldr	r0, [r4, #16]
 800b644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b648:	f104 0314 	add.w	r3, r4, #20
 800b64c:	f019 091f 	ands.w	r9, r9, #31
 800b650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b658:	d02f      	beq.n	800b6ba <__lshift+0xc6>
 800b65a:	f1c9 0e20 	rsb	lr, r9, #32
 800b65e:	468a      	mov	sl, r1
 800b660:	f04f 0c00 	mov.w	ip, #0
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	fa02 f209 	lsl.w	r2, r2, r9
 800b66a:	ea42 020c 	orr.w	r2, r2, ip
 800b66e:	f84a 2b04 	str.w	r2, [sl], #4
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	4298      	cmp	r0, r3
 800b678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b67c:	d8f2      	bhi.n	800b664 <__lshift+0x70>
 800b67e:	1b03      	subs	r3, r0, r4
 800b680:	3b15      	subs	r3, #21
 800b682:	f023 0303 	bic.w	r3, r3, #3
 800b686:	3304      	adds	r3, #4
 800b688:	f104 0215 	add.w	r2, r4, #21
 800b68c:	4290      	cmp	r0, r2
 800b68e:	bf38      	it	cc
 800b690:	2304      	movcc	r3, #4
 800b692:	f841 c003 	str.w	ip, [r1, r3]
 800b696:	f1bc 0f00 	cmp.w	ip, #0
 800b69a:	d001      	beq.n	800b6a0 <__lshift+0xac>
 800b69c:	f108 0602 	add.w	r6, r8, #2
 800b6a0:	3e01      	subs	r6, #1
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	612e      	str	r6, [r5, #16]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	f7ff fd88 	bl	800b1bc <_Bfree>
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	e7c1      	b.n	800b63e <__lshift+0x4a>
 800b6ba:	3904      	subs	r1, #4
 800b6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6c4:	4298      	cmp	r0, r3
 800b6c6:	d8f9      	bhi.n	800b6bc <__lshift+0xc8>
 800b6c8:	e7ea      	b.n	800b6a0 <__lshift+0xac>
 800b6ca:	bf00      	nop
 800b6cc:	0800ce08 	.word	0x0800ce08
 800b6d0:	0800cef8 	.word	0x0800cef8

0800b6d4 <__mcmp>:
 800b6d4:	b530      	push	{r4, r5, lr}
 800b6d6:	6902      	ldr	r2, [r0, #16]
 800b6d8:	690c      	ldr	r4, [r1, #16]
 800b6da:	1b12      	subs	r2, r2, r4
 800b6dc:	d10e      	bne.n	800b6fc <__mcmp+0x28>
 800b6de:	f100 0314 	add.w	r3, r0, #20
 800b6e2:	3114      	adds	r1, #20
 800b6e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6f4:	42a5      	cmp	r5, r4
 800b6f6:	d003      	beq.n	800b700 <__mcmp+0x2c>
 800b6f8:	d305      	bcc.n	800b706 <__mcmp+0x32>
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	bd30      	pop	{r4, r5, pc}
 800b700:	4283      	cmp	r3, r0
 800b702:	d3f3      	bcc.n	800b6ec <__mcmp+0x18>
 800b704:	e7fa      	b.n	800b6fc <__mcmp+0x28>
 800b706:	f04f 32ff 	mov.w	r2, #4294967295
 800b70a:	e7f7      	b.n	800b6fc <__mcmp+0x28>

0800b70c <__mdiff>:
 800b70c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b710:	460c      	mov	r4, r1
 800b712:	4606      	mov	r6, r0
 800b714:	4611      	mov	r1, r2
 800b716:	4620      	mov	r0, r4
 800b718:	4690      	mov	r8, r2
 800b71a:	f7ff ffdb 	bl	800b6d4 <__mcmp>
 800b71e:	1e05      	subs	r5, r0, #0
 800b720:	d110      	bne.n	800b744 <__mdiff+0x38>
 800b722:	4629      	mov	r1, r5
 800b724:	4630      	mov	r0, r6
 800b726:	f7ff fd09 	bl	800b13c <_Balloc>
 800b72a:	b930      	cbnz	r0, 800b73a <__mdiff+0x2e>
 800b72c:	4b3a      	ldr	r3, [pc, #232]	; (800b818 <__mdiff+0x10c>)
 800b72e:	4602      	mov	r2, r0
 800b730:	f240 2132 	movw	r1, #562	; 0x232
 800b734:	4839      	ldr	r0, [pc, #228]	; (800b81c <__mdiff+0x110>)
 800b736:	f001 f8d3 	bl	800c8e0 <__assert_func>
 800b73a:	2301      	movs	r3, #1
 800b73c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b744:	bfa4      	itt	ge
 800b746:	4643      	movge	r3, r8
 800b748:	46a0      	movge	r8, r4
 800b74a:	4630      	mov	r0, r6
 800b74c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b750:	bfa6      	itte	ge
 800b752:	461c      	movge	r4, r3
 800b754:	2500      	movge	r5, #0
 800b756:	2501      	movlt	r5, #1
 800b758:	f7ff fcf0 	bl	800b13c <_Balloc>
 800b75c:	b920      	cbnz	r0, 800b768 <__mdiff+0x5c>
 800b75e:	4b2e      	ldr	r3, [pc, #184]	; (800b818 <__mdiff+0x10c>)
 800b760:	4602      	mov	r2, r0
 800b762:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b766:	e7e5      	b.n	800b734 <__mdiff+0x28>
 800b768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b76c:	6926      	ldr	r6, [r4, #16]
 800b76e:	60c5      	str	r5, [r0, #12]
 800b770:	f104 0914 	add.w	r9, r4, #20
 800b774:	f108 0514 	add.w	r5, r8, #20
 800b778:	f100 0e14 	add.w	lr, r0, #20
 800b77c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b784:	f108 0210 	add.w	r2, r8, #16
 800b788:	46f2      	mov	sl, lr
 800b78a:	2100      	movs	r1, #0
 800b78c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b794:	fa1f f883 	uxth.w	r8, r3
 800b798:	fa11 f18b 	uxtah	r1, r1, fp
 800b79c:	0c1b      	lsrs	r3, r3, #16
 800b79e:	eba1 0808 	sub.w	r8, r1, r8
 800b7a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7aa:	fa1f f888 	uxth.w	r8, r8
 800b7ae:	1419      	asrs	r1, r3, #16
 800b7b0:	454e      	cmp	r6, r9
 800b7b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7b6:	f84a 3b04 	str.w	r3, [sl], #4
 800b7ba:	d8e7      	bhi.n	800b78c <__mdiff+0x80>
 800b7bc:	1b33      	subs	r3, r6, r4
 800b7be:	3b15      	subs	r3, #21
 800b7c0:	f023 0303 	bic.w	r3, r3, #3
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	3415      	adds	r4, #21
 800b7c8:	42a6      	cmp	r6, r4
 800b7ca:	bf38      	it	cc
 800b7cc:	2304      	movcc	r3, #4
 800b7ce:	441d      	add	r5, r3
 800b7d0:	4473      	add	r3, lr
 800b7d2:	469e      	mov	lr, r3
 800b7d4:	462e      	mov	r6, r5
 800b7d6:	4566      	cmp	r6, ip
 800b7d8:	d30e      	bcc.n	800b7f8 <__mdiff+0xec>
 800b7da:	f10c 0203 	add.w	r2, ip, #3
 800b7de:	1b52      	subs	r2, r2, r5
 800b7e0:	f022 0203 	bic.w	r2, r2, #3
 800b7e4:	3d03      	subs	r5, #3
 800b7e6:	45ac      	cmp	ip, r5
 800b7e8:	bf38      	it	cc
 800b7ea:	2200      	movcc	r2, #0
 800b7ec:	441a      	add	r2, r3
 800b7ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7f2:	b17b      	cbz	r3, 800b814 <__mdiff+0x108>
 800b7f4:	6107      	str	r7, [r0, #16]
 800b7f6:	e7a3      	b.n	800b740 <__mdiff+0x34>
 800b7f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7fc:	fa11 f288 	uxtah	r2, r1, r8
 800b800:	1414      	asrs	r4, r2, #16
 800b802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b806:	b292      	uxth	r2, r2
 800b808:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b80c:	f84e 2b04 	str.w	r2, [lr], #4
 800b810:	1421      	asrs	r1, r4, #16
 800b812:	e7e0      	b.n	800b7d6 <__mdiff+0xca>
 800b814:	3f01      	subs	r7, #1
 800b816:	e7ea      	b.n	800b7ee <__mdiff+0xe2>
 800b818:	0800ce08 	.word	0x0800ce08
 800b81c:	0800cef8 	.word	0x0800cef8

0800b820 <__ulp>:
 800b820:	b082      	sub	sp, #8
 800b822:	ed8d 0b00 	vstr	d0, [sp]
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	4912      	ldr	r1, [pc, #72]	; (800b874 <__ulp+0x54>)
 800b82a:	4019      	ands	r1, r3
 800b82c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b830:	2900      	cmp	r1, #0
 800b832:	dd05      	ble.n	800b840 <__ulp+0x20>
 800b834:	2200      	movs	r2, #0
 800b836:	460b      	mov	r3, r1
 800b838:	ec43 2b10 	vmov	d0, r2, r3
 800b83c:	b002      	add	sp, #8
 800b83e:	4770      	bx	lr
 800b840:	4249      	negs	r1, r1
 800b842:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b846:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b84a:	f04f 0200 	mov.w	r2, #0
 800b84e:	f04f 0300 	mov.w	r3, #0
 800b852:	da04      	bge.n	800b85e <__ulp+0x3e>
 800b854:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b858:	fa41 f300 	asr.w	r3, r1, r0
 800b85c:	e7ec      	b.n	800b838 <__ulp+0x18>
 800b85e:	f1a0 0114 	sub.w	r1, r0, #20
 800b862:	291e      	cmp	r1, #30
 800b864:	bfda      	itte	le
 800b866:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b86a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b86e:	2101      	movgt	r1, #1
 800b870:	460a      	mov	r2, r1
 800b872:	e7e1      	b.n	800b838 <__ulp+0x18>
 800b874:	7ff00000 	.word	0x7ff00000

0800b878 <__b2d>:
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	6905      	ldr	r5, [r0, #16]
 800b87c:	f100 0714 	add.w	r7, r0, #20
 800b880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b884:	1f2e      	subs	r6, r5, #4
 800b886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7ff fd48 	bl	800b320 <__hi0bits>
 800b890:	f1c0 0320 	rsb	r3, r0, #32
 800b894:	280a      	cmp	r0, #10
 800b896:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b914 <__b2d+0x9c>
 800b89a:	600b      	str	r3, [r1, #0]
 800b89c:	dc14      	bgt.n	800b8c8 <__b2d+0x50>
 800b89e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b8a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b8a6:	42b7      	cmp	r7, r6
 800b8a8:	ea41 030c 	orr.w	r3, r1, ip
 800b8ac:	bf34      	ite	cc
 800b8ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8b2:	2100      	movcs	r1, #0
 800b8b4:	3015      	adds	r0, #21
 800b8b6:	fa04 f000 	lsl.w	r0, r4, r0
 800b8ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800b8be:	ea40 0201 	orr.w	r2, r0, r1
 800b8c2:	ec43 2b10 	vmov	d0, r2, r3
 800b8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c8:	42b7      	cmp	r7, r6
 800b8ca:	bf3a      	itte	cc
 800b8cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b8d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b8d4:	2100      	movcs	r1, #0
 800b8d6:	380b      	subs	r0, #11
 800b8d8:	d017      	beq.n	800b90a <__b2d+0x92>
 800b8da:	f1c0 0c20 	rsb	ip, r0, #32
 800b8de:	fa04 f500 	lsl.w	r5, r4, r0
 800b8e2:	42be      	cmp	r6, r7
 800b8e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b8e8:	ea45 0504 	orr.w	r5, r5, r4
 800b8ec:	bf8c      	ite	hi
 800b8ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b8f2:	2400      	movls	r4, #0
 800b8f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b8f8:	fa01 f000 	lsl.w	r0, r1, r0
 800b8fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800b900:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b904:	ea40 0204 	orr.w	r2, r0, r4
 800b908:	e7db      	b.n	800b8c2 <__b2d+0x4a>
 800b90a:	ea44 030c 	orr.w	r3, r4, ip
 800b90e:	460a      	mov	r2, r1
 800b910:	e7d7      	b.n	800b8c2 <__b2d+0x4a>
 800b912:	bf00      	nop
 800b914:	3ff00000 	.word	0x3ff00000

0800b918 <__d2b>:
 800b918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b91c:	4689      	mov	r9, r1
 800b91e:	2101      	movs	r1, #1
 800b920:	ec57 6b10 	vmov	r6, r7, d0
 800b924:	4690      	mov	r8, r2
 800b926:	f7ff fc09 	bl	800b13c <_Balloc>
 800b92a:	4604      	mov	r4, r0
 800b92c:	b930      	cbnz	r0, 800b93c <__d2b+0x24>
 800b92e:	4602      	mov	r2, r0
 800b930:	4b25      	ldr	r3, [pc, #148]	; (800b9c8 <__d2b+0xb0>)
 800b932:	4826      	ldr	r0, [pc, #152]	; (800b9cc <__d2b+0xb4>)
 800b934:	f240 310a 	movw	r1, #778	; 0x30a
 800b938:	f000 ffd2 	bl	800c8e0 <__assert_func>
 800b93c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b944:	bb35      	cbnz	r5, 800b994 <__d2b+0x7c>
 800b946:	2e00      	cmp	r6, #0
 800b948:	9301      	str	r3, [sp, #4]
 800b94a:	d028      	beq.n	800b99e <__d2b+0x86>
 800b94c:	4668      	mov	r0, sp
 800b94e:	9600      	str	r6, [sp, #0]
 800b950:	f7ff fd06 	bl	800b360 <__lo0bits>
 800b954:	9900      	ldr	r1, [sp, #0]
 800b956:	b300      	cbz	r0, 800b99a <__d2b+0x82>
 800b958:	9a01      	ldr	r2, [sp, #4]
 800b95a:	f1c0 0320 	rsb	r3, r0, #32
 800b95e:	fa02 f303 	lsl.w	r3, r2, r3
 800b962:	430b      	orrs	r3, r1
 800b964:	40c2      	lsrs	r2, r0
 800b966:	6163      	str	r3, [r4, #20]
 800b968:	9201      	str	r2, [sp, #4]
 800b96a:	9b01      	ldr	r3, [sp, #4]
 800b96c:	61a3      	str	r3, [r4, #24]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	bf14      	ite	ne
 800b972:	2202      	movne	r2, #2
 800b974:	2201      	moveq	r2, #1
 800b976:	6122      	str	r2, [r4, #16]
 800b978:	b1d5      	cbz	r5, 800b9b0 <__d2b+0x98>
 800b97a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b97e:	4405      	add	r5, r0
 800b980:	f8c9 5000 	str.w	r5, [r9]
 800b984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b988:	f8c8 0000 	str.w	r0, [r8]
 800b98c:	4620      	mov	r0, r4
 800b98e:	b003      	add	sp, #12
 800b990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b998:	e7d5      	b.n	800b946 <__d2b+0x2e>
 800b99a:	6161      	str	r1, [r4, #20]
 800b99c:	e7e5      	b.n	800b96a <__d2b+0x52>
 800b99e:	a801      	add	r0, sp, #4
 800b9a0:	f7ff fcde 	bl	800b360 <__lo0bits>
 800b9a4:	9b01      	ldr	r3, [sp, #4]
 800b9a6:	6163      	str	r3, [r4, #20]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	6122      	str	r2, [r4, #16]
 800b9ac:	3020      	adds	r0, #32
 800b9ae:	e7e3      	b.n	800b978 <__d2b+0x60>
 800b9b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9b8:	f8c9 0000 	str.w	r0, [r9]
 800b9bc:	6918      	ldr	r0, [r3, #16]
 800b9be:	f7ff fcaf 	bl	800b320 <__hi0bits>
 800b9c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9c6:	e7df      	b.n	800b988 <__d2b+0x70>
 800b9c8:	0800ce08 	.word	0x0800ce08
 800b9cc:	0800cef8 	.word	0x0800cef8

0800b9d0 <__ratio>:
 800b9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	4688      	mov	r8, r1
 800b9d6:	4669      	mov	r1, sp
 800b9d8:	4681      	mov	r9, r0
 800b9da:	f7ff ff4d 	bl	800b878 <__b2d>
 800b9de:	a901      	add	r1, sp, #4
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	ec55 4b10 	vmov	r4, r5, d0
 800b9e6:	f7ff ff47 	bl	800b878 <__b2d>
 800b9ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b9f2:	eba3 0c02 	sub.w	ip, r3, r2
 800b9f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9fa:	1a9b      	subs	r3, r3, r2
 800b9fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba00:	ec51 0b10 	vmov	r0, r1, d0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	bfd6      	itet	le
 800ba08:	460a      	movle	r2, r1
 800ba0a:	462a      	movgt	r2, r5
 800ba0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba10:	468b      	mov	fp, r1
 800ba12:	462f      	mov	r7, r5
 800ba14:	bfd4      	ite	le
 800ba16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba1e:	4620      	mov	r0, r4
 800ba20:	ee10 2a10 	vmov	r2, s0
 800ba24:	465b      	mov	r3, fp
 800ba26:	4639      	mov	r1, r7
 800ba28:	f7f4 ff10 	bl	800084c <__aeabi_ddiv>
 800ba2c:	ec41 0b10 	vmov	d0, r0, r1
 800ba30:	b003      	add	sp, #12
 800ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba36 <__copybits>:
 800ba36:	3901      	subs	r1, #1
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	1149      	asrs	r1, r1, #5
 800ba3c:	6914      	ldr	r4, [r2, #16]
 800ba3e:	3101      	adds	r1, #1
 800ba40:	f102 0314 	add.w	r3, r2, #20
 800ba44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba4c:	1f05      	subs	r5, r0, #4
 800ba4e:	42a3      	cmp	r3, r4
 800ba50:	d30c      	bcc.n	800ba6c <__copybits+0x36>
 800ba52:	1aa3      	subs	r3, r4, r2
 800ba54:	3b11      	subs	r3, #17
 800ba56:	f023 0303 	bic.w	r3, r3, #3
 800ba5a:	3211      	adds	r2, #17
 800ba5c:	42a2      	cmp	r2, r4
 800ba5e:	bf88      	it	hi
 800ba60:	2300      	movhi	r3, #0
 800ba62:	4418      	add	r0, r3
 800ba64:	2300      	movs	r3, #0
 800ba66:	4288      	cmp	r0, r1
 800ba68:	d305      	bcc.n	800ba76 <__copybits+0x40>
 800ba6a:	bd70      	pop	{r4, r5, r6, pc}
 800ba6c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba70:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba74:	e7eb      	b.n	800ba4e <__copybits+0x18>
 800ba76:	f840 3b04 	str.w	r3, [r0], #4
 800ba7a:	e7f4      	b.n	800ba66 <__copybits+0x30>

0800ba7c <__any_on>:
 800ba7c:	f100 0214 	add.w	r2, r0, #20
 800ba80:	6900      	ldr	r0, [r0, #16]
 800ba82:	114b      	asrs	r3, r1, #5
 800ba84:	4298      	cmp	r0, r3
 800ba86:	b510      	push	{r4, lr}
 800ba88:	db11      	blt.n	800baae <__any_on+0x32>
 800ba8a:	dd0a      	ble.n	800baa2 <__any_on+0x26>
 800ba8c:	f011 011f 	ands.w	r1, r1, #31
 800ba90:	d007      	beq.n	800baa2 <__any_on+0x26>
 800ba92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba96:	fa24 f001 	lsr.w	r0, r4, r1
 800ba9a:	fa00 f101 	lsl.w	r1, r0, r1
 800ba9e:	428c      	cmp	r4, r1
 800baa0:	d10b      	bne.n	800baba <__any_on+0x3e>
 800baa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d803      	bhi.n	800bab2 <__any_on+0x36>
 800baaa:	2000      	movs	r0, #0
 800baac:	bd10      	pop	{r4, pc}
 800baae:	4603      	mov	r3, r0
 800bab0:	e7f7      	b.n	800baa2 <__any_on+0x26>
 800bab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bab6:	2900      	cmp	r1, #0
 800bab8:	d0f5      	beq.n	800baa6 <__any_on+0x2a>
 800baba:	2001      	movs	r0, #1
 800babc:	e7f6      	b.n	800baac <__any_on+0x30>

0800babe <_calloc_r>:
 800babe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bac0:	fba1 2402 	umull	r2, r4, r1, r2
 800bac4:	b94c      	cbnz	r4, 800bada <_calloc_r+0x1c>
 800bac6:	4611      	mov	r1, r2
 800bac8:	9201      	str	r2, [sp, #4]
 800baca:	f7fb ff43 	bl	8007954 <_malloc_r>
 800bace:	9a01      	ldr	r2, [sp, #4]
 800bad0:	4605      	mov	r5, r0
 800bad2:	b930      	cbnz	r0, 800bae2 <_calloc_r+0x24>
 800bad4:	4628      	mov	r0, r5
 800bad6:	b003      	add	sp, #12
 800bad8:	bd30      	pop	{r4, r5, pc}
 800bada:	220c      	movs	r2, #12
 800badc:	6002      	str	r2, [r0, #0]
 800bade:	2500      	movs	r5, #0
 800bae0:	e7f8      	b.n	800bad4 <_calloc_r+0x16>
 800bae2:	4621      	mov	r1, r4
 800bae4:	f7fb fec2 	bl	800786c <memset>
 800bae8:	e7f4      	b.n	800bad4 <_calloc_r+0x16>

0800baea <__ssputs_r>:
 800baea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baee:	688e      	ldr	r6, [r1, #8]
 800baf0:	429e      	cmp	r6, r3
 800baf2:	4682      	mov	sl, r0
 800baf4:	460c      	mov	r4, r1
 800baf6:	4690      	mov	r8, r2
 800baf8:	461f      	mov	r7, r3
 800bafa:	d838      	bhi.n	800bb6e <__ssputs_r+0x84>
 800bafc:	898a      	ldrh	r2, [r1, #12]
 800bafe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb02:	d032      	beq.n	800bb6a <__ssputs_r+0x80>
 800bb04:	6825      	ldr	r5, [r4, #0]
 800bb06:	6909      	ldr	r1, [r1, #16]
 800bb08:	eba5 0901 	sub.w	r9, r5, r1
 800bb0c:	6965      	ldr	r5, [r4, #20]
 800bb0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb16:	3301      	adds	r3, #1
 800bb18:	444b      	add	r3, r9
 800bb1a:	106d      	asrs	r5, r5, #1
 800bb1c:	429d      	cmp	r5, r3
 800bb1e:	bf38      	it	cc
 800bb20:	461d      	movcc	r5, r3
 800bb22:	0553      	lsls	r3, r2, #21
 800bb24:	d531      	bpl.n	800bb8a <__ssputs_r+0xa0>
 800bb26:	4629      	mov	r1, r5
 800bb28:	f7fb ff14 	bl	8007954 <_malloc_r>
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	b950      	cbnz	r0, 800bb46 <__ssputs_r+0x5c>
 800bb30:	230c      	movs	r3, #12
 800bb32:	f8ca 3000 	str.w	r3, [sl]
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb46:	6921      	ldr	r1, [r4, #16]
 800bb48:	464a      	mov	r2, r9
 800bb4a:	f7fb fe81 	bl	8007850 <memcpy>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	6126      	str	r6, [r4, #16]
 800bb5c:	6165      	str	r5, [r4, #20]
 800bb5e:	444e      	add	r6, r9
 800bb60:	eba5 0509 	sub.w	r5, r5, r9
 800bb64:	6026      	str	r6, [r4, #0]
 800bb66:	60a5      	str	r5, [r4, #8]
 800bb68:	463e      	mov	r6, r7
 800bb6a:	42be      	cmp	r6, r7
 800bb6c:	d900      	bls.n	800bb70 <__ssputs_r+0x86>
 800bb6e:	463e      	mov	r6, r7
 800bb70:	6820      	ldr	r0, [r4, #0]
 800bb72:	4632      	mov	r2, r6
 800bb74:	4641      	mov	r1, r8
 800bb76:	f000 ff05 	bl	800c984 <memmove>
 800bb7a:	68a3      	ldr	r3, [r4, #8]
 800bb7c:	1b9b      	subs	r3, r3, r6
 800bb7e:	60a3      	str	r3, [r4, #8]
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	4433      	add	r3, r6
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	2000      	movs	r0, #0
 800bb88:	e7db      	b.n	800bb42 <__ssputs_r+0x58>
 800bb8a:	462a      	mov	r2, r5
 800bb8c:	f000 ff14 	bl	800c9b8 <_realloc_r>
 800bb90:	4606      	mov	r6, r0
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d1e1      	bne.n	800bb5a <__ssputs_r+0x70>
 800bb96:	6921      	ldr	r1, [r4, #16]
 800bb98:	4650      	mov	r0, sl
 800bb9a:	f7fb fe6f 	bl	800787c <_free_r>
 800bb9e:	e7c7      	b.n	800bb30 <__ssputs_r+0x46>

0800bba0 <_svfiprintf_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	4698      	mov	r8, r3
 800bba6:	898b      	ldrh	r3, [r1, #12]
 800bba8:	061b      	lsls	r3, r3, #24
 800bbaa:	b09d      	sub	sp, #116	; 0x74
 800bbac:	4607      	mov	r7, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	4614      	mov	r4, r2
 800bbb2:	d50e      	bpl.n	800bbd2 <_svfiprintf_r+0x32>
 800bbb4:	690b      	ldr	r3, [r1, #16]
 800bbb6:	b963      	cbnz	r3, 800bbd2 <_svfiprintf_r+0x32>
 800bbb8:	2140      	movs	r1, #64	; 0x40
 800bbba:	f7fb fecb 	bl	8007954 <_malloc_r>
 800bbbe:	6028      	str	r0, [r5, #0]
 800bbc0:	6128      	str	r0, [r5, #16]
 800bbc2:	b920      	cbnz	r0, 800bbce <_svfiprintf_r+0x2e>
 800bbc4:	230c      	movs	r3, #12
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbcc:	e0d1      	b.n	800bd72 <_svfiprintf_r+0x1d2>
 800bbce:	2340      	movs	r3, #64	; 0x40
 800bbd0:	616b      	str	r3, [r5, #20]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd6:	2320      	movs	r3, #32
 800bbd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbe0:	2330      	movs	r3, #48	; 0x30
 800bbe2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd8c <_svfiprintf_r+0x1ec>
 800bbe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbea:	f04f 0901 	mov.w	r9, #1
 800bbee:	4623      	mov	r3, r4
 800bbf0:	469a      	mov	sl, r3
 800bbf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf6:	b10a      	cbz	r2, 800bbfc <_svfiprintf_r+0x5c>
 800bbf8:	2a25      	cmp	r2, #37	; 0x25
 800bbfa:	d1f9      	bne.n	800bbf0 <_svfiprintf_r+0x50>
 800bbfc:	ebba 0b04 	subs.w	fp, sl, r4
 800bc00:	d00b      	beq.n	800bc1a <_svfiprintf_r+0x7a>
 800bc02:	465b      	mov	r3, fp
 800bc04:	4622      	mov	r2, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff ff6e 	bl	800baea <__ssputs_r>
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f000 80aa 	beq.w	800bd68 <_svfiprintf_r+0x1c8>
 800bc14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc16:	445a      	add	r2, fp
 800bc18:	9209      	str	r2, [sp, #36]	; 0x24
 800bc1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80a2 	beq.w	800bd68 <_svfiprintf_r+0x1c8>
 800bc24:	2300      	movs	r3, #0
 800bc26:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc2e:	f10a 0a01 	add.w	sl, sl, #1
 800bc32:	9304      	str	r3, [sp, #16]
 800bc34:	9307      	str	r3, [sp, #28]
 800bc36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc3a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc3c:	4654      	mov	r4, sl
 800bc3e:	2205      	movs	r2, #5
 800bc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc44:	4851      	ldr	r0, [pc, #324]	; (800bd8c <_svfiprintf_r+0x1ec>)
 800bc46:	f7f4 facb 	bl	80001e0 <memchr>
 800bc4a:	9a04      	ldr	r2, [sp, #16]
 800bc4c:	b9d8      	cbnz	r0, 800bc86 <_svfiprintf_r+0xe6>
 800bc4e:	06d0      	lsls	r0, r2, #27
 800bc50:	bf44      	itt	mi
 800bc52:	2320      	movmi	r3, #32
 800bc54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc58:	0711      	lsls	r1, r2, #28
 800bc5a:	bf44      	itt	mi
 800bc5c:	232b      	movmi	r3, #43	; 0x2b
 800bc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc62:	f89a 3000 	ldrb.w	r3, [sl]
 800bc66:	2b2a      	cmp	r3, #42	; 0x2a
 800bc68:	d015      	beq.n	800bc96 <_svfiprintf_r+0xf6>
 800bc6a:	9a07      	ldr	r2, [sp, #28]
 800bc6c:	4654      	mov	r4, sl
 800bc6e:	2000      	movs	r0, #0
 800bc70:	f04f 0c0a 	mov.w	ip, #10
 800bc74:	4621      	mov	r1, r4
 800bc76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc7a:	3b30      	subs	r3, #48	; 0x30
 800bc7c:	2b09      	cmp	r3, #9
 800bc7e:	d94e      	bls.n	800bd1e <_svfiprintf_r+0x17e>
 800bc80:	b1b0      	cbz	r0, 800bcb0 <_svfiprintf_r+0x110>
 800bc82:	9207      	str	r2, [sp, #28]
 800bc84:	e014      	b.n	800bcb0 <_svfiprintf_r+0x110>
 800bc86:	eba0 0308 	sub.w	r3, r0, r8
 800bc8a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	9304      	str	r3, [sp, #16]
 800bc92:	46a2      	mov	sl, r4
 800bc94:	e7d2      	b.n	800bc3c <_svfiprintf_r+0x9c>
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	1d19      	adds	r1, r3, #4
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	9103      	str	r1, [sp, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	bfbb      	ittet	lt
 800bca2:	425b      	neglt	r3, r3
 800bca4:	f042 0202 	orrlt.w	r2, r2, #2
 800bca8:	9307      	strge	r3, [sp, #28]
 800bcaa:	9307      	strlt	r3, [sp, #28]
 800bcac:	bfb8      	it	lt
 800bcae:	9204      	strlt	r2, [sp, #16]
 800bcb0:	7823      	ldrb	r3, [r4, #0]
 800bcb2:	2b2e      	cmp	r3, #46	; 0x2e
 800bcb4:	d10c      	bne.n	800bcd0 <_svfiprintf_r+0x130>
 800bcb6:	7863      	ldrb	r3, [r4, #1]
 800bcb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcba:	d135      	bne.n	800bd28 <_svfiprintf_r+0x188>
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	1d1a      	adds	r2, r3, #4
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	9203      	str	r2, [sp, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	bfb8      	it	lt
 800bcc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bccc:	3402      	adds	r4, #2
 800bcce:	9305      	str	r3, [sp, #20]
 800bcd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd9c <_svfiprintf_r+0x1fc>
 800bcd4:	7821      	ldrb	r1, [r4, #0]
 800bcd6:	2203      	movs	r2, #3
 800bcd8:	4650      	mov	r0, sl
 800bcda:	f7f4 fa81 	bl	80001e0 <memchr>
 800bcde:	b140      	cbz	r0, 800bcf2 <_svfiprintf_r+0x152>
 800bce0:	2340      	movs	r3, #64	; 0x40
 800bce2:	eba0 000a 	sub.w	r0, r0, sl
 800bce6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcea:	9b04      	ldr	r3, [sp, #16]
 800bcec:	4303      	orrs	r3, r0
 800bcee:	3401      	adds	r4, #1
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf6:	4826      	ldr	r0, [pc, #152]	; (800bd90 <_svfiprintf_r+0x1f0>)
 800bcf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcfc:	2206      	movs	r2, #6
 800bcfe:	f7f4 fa6f 	bl	80001e0 <memchr>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d038      	beq.n	800bd78 <_svfiprintf_r+0x1d8>
 800bd06:	4b23      	ldr	r3, [pc, #140]	; (800bd94 <_svfiprintf_r+0x1f4>)
 800bd08:	bb1b      	cbnz	r3, 800bd52 <_svfiprintf_r+0x1b2>
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	f023 0307 	bic.w	r3, r3, #7
 800bd12:	3308      	adds	r3, #8
 800bd14:	9303      	str	r3, [sp, #12]
 800bd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd18:	4433      	add	r3, r6
 800bd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd1c:	e767      	b.n	800bbee <_svfiprintf_r+0x4e>
 800bd1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd22:	460c      	mov	r4, r1
 800bd24:	2001      	movs	r0, #1
 800bd26:	e7a5      	b.n	800bc74 <_svfiprintf_r+0xd4>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	3401      	adds	r4, #1
 800bd2c:	9305      	str	r3, [sp, #20]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	f04f 0c0a 	mov.w	ip, #10
 800bd34:	4620      	mov	r0, r4
 800bd36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd3a:	3a30      	subs	r2, #48	; 0x30
 800bd3c:	2a09      	cmp	r2, #9
 800bd3e:	d903      	bls.n	800bd48 <_svfiprintf_r+0x1a8>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d0c5      	beq.n	800bcd0 <_svfiprintf_r+0x130>
 800bd44:	9105      	str	r1, [sp, #20]
 800bd46:	e7c3      	b.n	800bcd0 <_svfiprintf_r+0x130>
 800bd48:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e7f0      	b.n	800bd34 <_svfiprintf_r+0x194>
 800bd52:	ab03      	add	r3, sp, #12
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	462a      	mov	r2, r5
 800bd58:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <_svfiprintf_r+0x1f8>)
 800bd5a:	a904      	add	r1, sp, #16
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	f7fb ff0d 	bl	8007b7c <_printf_float>
 800bd62:	1c42      	adds	r2, r0, #1
 800bd64:	4606      	mov	r6, r0
 800bd66:	d1d6      	bne.n	800bd16 <_svfiprintf_r+0x176>
 800bd68:	89ab      	ldrh	r3, [r5, #12]
 800bd6a:	065b      	lsls	r3, r3, #25
 800bd6c:	f53f af2c 	bmi.w	800bbc8 <_svfiprintf_r+0x28>
 800bd70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd72:	b01d      	add	sp, #116	; 0x74
 800bd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd78:	ab03      	add	r3, sp, #12
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <_svfiprintf_r+0x1f8>)
 800bd80:	a904      	add	r1, sp, #16
 800bd82:	4638      	mov	r0, r7
 800bd84:	f7fc f99e 	bl	80080c4 <_printf_i>
 800bd88:	e7eb      	b.n	800bd62 <_svfiprintf_r+0x1c2>
 800bd8a:	bf00      	nop
 800bd8c:	0800d054 	.word	0x0800d054
 800bd90:	0800d05e 	.word	0x0800d05e
 800bd94:	08007b7d 	.word	0x08007b7d
 800bd98:	0800baeb 	.word	0x0800baeb
 800bd9c:	0800d05a 	.word	0x0800d05a

0800bda0 <_sungetc_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	1c4b      	adds	r3, r1, #1
 800bda4:	4614      	mov	r4, r2
 800bda6:	d103      	bne.n	800bdb0 <_sungetc_r+0x10>
 800bda8:	f04f 35ff 	mov.w	r5, #4294967295
 800bdac:	4628      	mov	r0, r5
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	8993      	ldrh	r3, [r2, #12]
 800bdb2:	f023 0320 	bic.w	r3, r3, #32
 800bdb6:	8193      	strh	r3, [r2, #12]
 800bdb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdba:	6852      	ldr	r2, [r2, #4]
 800bdbc:	b2cd      	uxtb	r5, r1
 800bdbe:	b18b      	cbz	r3, 800bde4 <_sungetc_r+0x44>
 800bdc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	dd08      	ble.n	800bdd8 <_sungetc_r+0x38>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	1e5a      	subs	r2, r3, #1
 800bdca:	6022      	str	r2, [r4, #0]
 800bdcc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bdd0:	6863      	ldr	r3, [r4, #4]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	6063      	str	r3, [r4, #4]
 800bdd6:	e7e9      	b.n	800bdac <_sungetc_r+0xc>
 800bdd8:	4621      	mov	r1, r4
 800bdda:	f000 fd39 	bl	800c850 <__submore>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d0f1      	beq.n	800bdc6 <_sungetc_r+0x26>
 800bde2:	e7e1      	b.n	800bda8 <_sungetc_r+0x8>
 800bde4:	6921      	ldr	r1, [r4, #16]
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	b151      	cbz	r1, 800be00 <_sungetc_r+0x60>
 800bdea:	4299      	cmp	r1, r3
 800bdec:	d208      	bcs.n	800be00 <_sungetc_r+0x60>
 800bdee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bdf2:	42a9      	cmp	r1, r5
 800bdf4:	d104      	bne.n	800be00 <_sungetc_r+0x60>
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	3201      	adds	r2, #1
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	6062      	str	r2, [r4, #4]
 800bdfe:	e7d5      	b.n	800bdac <_sungetc_r+0xc>
 800be00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800be04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be08:	6363      	str	r3, [r4, #52]	; 0x34
 800be0a:	2303      	movs	r3, #3
 800be0c:	63a3      	str	r3, [r4, #56]	; 0x38
 800be0e:	4623      	mov	r3, r4
 800be10:	f803 5f46 	strb.w	r5, [r3, #70]!
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	2301      	movs	r3, #1
 800be18:	e7dc      	b.n	800bdd4 <_sungetc_r+0x34>

0800be1a <__ssrefill_r>:
 800be1a:	b510      	push	{r4, lr}
 800be1c:	460c      	mov	r4, r1
 800be1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800be20:	b169      	cbz	r1, 800be3e <__ssrefill_r+0x24>
 800be22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be26:	4299      	cmp	r1, r3
 800be28:	d001      	beq.n	800be2e <__ssrefill_r+0x14>
 800be2a:	f7fb fd27 	bl	800787c <_free_r>
 800be2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be30:	6063      	str	r3, [r4, #4]
 800be32:	2000      	movs	r0, #0
 800be34:	6360      	str	r0, [r4, #52]	; 0x34
 800be36:	b113      	cbz	r3, 800be3e <__ssrefill_r+0x24>
 800be38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	bd10      	pop	{r4, pc}
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	2300      	movs	r3, #0
 800be44:	6063      	str	r3, [r4, #4]
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	f043 0320 	orr.w	r3, r3, #32
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295
 800be52:	e7f3      	b.n	800be3c <__ssrefill_r+0x22>

0800be54 <__ssvfiscanf_r>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	460c      	mov	r4, r1
 800be5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800be5e:	2100      	movs	r1, #0
 800be60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800be64:	49a6      	ldr	r1, [pc, #664]	; (800c100 <__ssvfiscanf_r+0x2ac>)
 800be66:	91a0      	str	r1, [sp, #640]	; 0x280
 800be68:	f10d 0804 	add.w	r8, sp, #4
 800be6c:	49a5      	ldr	r1, [pc, #660]	; (800c104 <__ssvfiscanf_r+0x2b0>)
 800be6e:	4fa6      	ldr	r7, [pc, #664]	; (800c108 <__ssvfiscanf_r+0x2b4>)
 800be70:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c10c <__ssvfiscanf_r+0x2b8>
 800be74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800be78:	4606      	mov	r6, r0
 800be7a:	91a1      	str	r1, [sp, #644]	; 0x284
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	7813      	ldrb	r3, [r2, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 815a 	beq.w	800c13a <__ssvfiscanf_r+0x2e6>
 800be86:	5dd9      	ldrb	r1, [r3, r7]
 800be88:	f011 0108 	ands.w	r1, r1, #8
 800be8c:	f102 0501 	add.w	r5, r2, #1
 800be90:	d019      	beq.n	800bec6 <__ssvfiscanf_r+0x72>
 800be92:	6863      	ldr	r3, [r4, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd0f      	ble.n	800beb8 <__ssvfiscanf_r+0x64>
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	781a      	ldrb	r2, [r3, #0]
 800be9c:	5cba      	ldrb	r2, [r7, r2]
 800be9e:	0712      	lsls	r2, r2, #28
 800bea0:	d401      	bmi.n	800bea6 <__ssvfiscanf_r+0x52>
 800bea2:	462a      	mov	r2, r5
 800bea4:	e7eb      	b.n	800be7e <__ssvfiscanf_r+0x2a>
 800bea6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bea8:	3201      	adds	r2, #1
 800beaa:	9245      	str	r2, [sp, #276]	; 0x114
 800beac:	6862      	ldr	r2, [r4, #4]
 800beae:	3301      	adds	r3, #1
 800beb0:	3a01      	subs	r2, #1
 800beb2:	6062      	str	r2, [r4, #4]
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	e7ec      	b.n	800be92 <__ssvfiscanf_r+0x3e>
 800beb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800beba:	4621      	mov	r1, r4
 800bebc:	4630      	mov	r0, r6
 800bebe:	4798      	blx	r3
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d0e9      	beq.n	800be98 <__ssvfiscanf_r+0x44>
 800bec4:	e7ed      	b.n	800bea2 <__ssvfiscanf_r+0x4e>
 800bec6:	2b25      	cmp	r3, #37	; 0x25
 800bec8:	d012      	beq.n	800bef0 <__ssvfiscanf_r+0x9c>
 800beca:	469a      	mov	sl, r3
 800becc:	6863      	ldr	r3, [r4, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f340 8091 	ble.w	800bff6 <__ssvfiscanf_r+0x1a2>
 800bed4:	6822      	ldr	r2, [r4, #0]
 800bed6:	7813      	ldrb	r3, [r2, #0]
 800bed8:	4553      	cmp	r3, sl
 800beda:	f040 812e 	bne.w	800c13a <__ssvfiscanf_r+0x2e6>
 800bede:	6863      	ldr	r3, [r4, #4]
 800bee0:	3b01      	subs	r3, #1
 800bee2:	6063      	str	r3, [r4, #4]
 800bee4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bee6:	3201      	adds	r2, #1
 800bee8:	3301      	adds	r3, #1
 800beea:	6022      	str	r2, [r4, #0]
 800beec:	9345      	str	r3, [sp, #276]	; 0x114
 800beee:	e7d8      	b.n	800bea2 <__ssvfiscanf_r+0x4e>
 800bef0:	9141      	str	r1, [sp, #260]	; 0x104
 800bef2:	9143      	str	r1, [sp, #268]	; 0x10c
 800bef4:	7853      	ldrb	r3, [r2, #1]
 800bef6:	2b2a      	cmp	r3, #42	; 0x2a
 800bef8:	bf02      	ittt	eq
 800befa:	2310      	moveq	r3, #16
 800befc:	1c95      	addeq	r5, r2, #2
 800befe:	9341      	streq	r3, [sp, #260]	; 0x104
 800bf00:	220a      	movs	r2, #10
 800bf02:	46aa      	mov	sl, r5
 800bf04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bf08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bf0c:	2b09      	cmp	r3, #9
 800bf0e:	d91d      	bls.n	800bf4c <__ssvfiscanf_r+0xf8>
 800bf10:	487e      	ldr	r0, [pc, #504]	; (800c10c <__ssvfiscanf_r+0x2b8>)
 800bf12:	2203      	movs	r2, #3
 800bf14:	f7f4 f964 	bl	80001e0 <memchr>
 800bf18:	b140      	cbz	r0, 800bf2c <__ssvfiscanf_r+0xd8>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	eba0 0009 	sub.w	r0, r0, r9
 800bf20:	fa03 f000 	lsl.w	r0, r3, r0
 800bf24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bf26:	4318      	orrs	r0, r3
 800bf28:	9041      	str	r0, [sp, #260]	; 0x104
 800bf2a:	4655      	mov	r5, sl
 800bf2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf30:	2b78      	cmp	r3, #120	; 0x78
 800bf32:	d806      	bhi.n	800bf42 <__ssvfiscanf_r+0xee>
 800bf34:	2b57      	cmp	r3, #87	; 0x57
 800bf36:	d810      	bhi.n	800bf5a <__ssvfiscanf_r+0x106>
 800bf38:	2b25      	cmp	r3, #37	; 0x25
 800bf3a:	d0c6      	beq.n	800beca <__ssvfiscanf_r+0x76>
 800bf3c:	d856      	bhi.n	800bfec <__ssvfiscanf_r+0x198>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d064      	beq.n	800c00c <__ssvfiscanf_r+0x1b8>
 800bf42:	2303      	movs	r3, #3
 800bf44:	9347      	str	r3, [sp, #284]	; 0x11c
 800bf46:	230a      	movs	r3, #10
 800bf48:	9342      	str	r3, [sp, #264]	; 0x108
 800bf4a:	e071      	b.n	800c030 <__ssvfiscanf_r+0x1dc>
 800bf4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bf4e:	fb02 1103 	mla	r1, r2, r3, r1
 800bf52:	3930      	subs	r1, #48	; 0x30
 800bf54:	9143      	str	r1, [sp, #268]	; 0x10c
 800bf56:	4655      	mov	r5, sl
 800bf58:	e7d3      	b.n	800bf02 <__ssvfiscanf_r+0xae>
 800bf5a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bf5e:	2a20      	cmp	r2, #32
 800bf60:	d8ef      	bhi.n	800bf42 <__ssvfiscanf_r+0xee>
 800bf62:	a101      	add	r1, pc, #4	; (adr r1, 800bf68 <__ssvfiscanf_r+0x114>)
 800bf64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf68:	0800c01b 	.word	0x0800c01b
 800bf6c:	0800bf43 	.word	0x0800bf43
 800bf70:	0800bf43 	.word	0x0800bf43
 800bf74:	0800c079 	.word	0x0800c079
 800bf78:	0800bf43 	.word	0x0800bf43
 800bf7c:	0800bf43 	.word	0x0800bf43
 800bf80:	0800bf43 	.word	0x0800bf43
 800bf84:	0800bf43 	.word	0x0800bf43
 800bf88:	0800bf43 	.word	0x0800bf43
 800bf8c:	0800bf43 	.word	0x0800bf43
 800bf90:	0800bf43 	.word	0x0800bf43
 800bf94:	0800c08f 	.word	0x0800c08f
 800bf98:	0800c065 	.word	0x0800c065
 800bf9c:	0800bff3 	.word	0x0800bff3
 800bfa0:	0800bff3 	.word	0x0800bff3
 800bfa4:	0800bff3 	.word	0x0800bff3
 800bfa8:	0800bf43 	.word	0x0800bf43
 800bfac:	0800c069 	.word	0x0800c069
 800bfb0:	0800bf43 	.word	0x0800bf43
 800bfb4:	0800bf43 	.word	0x0800bf43
 800bfb8:	0800bf43 	.word	0x0800bf43
 800bfbc:	0800bf43 	.word	0x0800bf43
 800bfc0:	0800c09f 	.word	0x0800c09f
 800bfc4:	0800c071 	.word	0x0800c071
 800bfc8:	0800c013 	.word	0x0800c013
 800bfcc:	0800bf43 	.word	0x0800bf43
 800bfd0:	0800bf43 	.word	0x0800bf43
 800bfd4:	0800c09b 	.word	0x0800c09b
 800bfd8:	0800bf43 	.word	0x0800bf43
 800bfdc:	0800c065 	.word	0x0800c065
 800bfe0:	0800bf43 	.word	0x0800bf43
 800bfe4:	0800bf43 	.word	0x0800bf43
 800bfe8:	0800c01b 	.word	0x0800c01b
 800bfec:	3b45      	subs	r3, #69	; 0x45
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d8a7      	bhi.n	800bf42 <__ssvfiscanf_r+0xee>
 800bff2:	2305      	movs	r3, #5
 800bff4:	e01b      	b.n	800c02e <__ssvfiscanf_r+0x1da>
 800bff6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bff8:	4621      	mov	r1, r4
 800bffa:	4630      	mov	r0, r6
 800bffc:	4798      	blx	r3
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f af68 	beq.w	800bed4 <__ssvfiscanf_r+0x80>
 800c004:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c006:	2800      	cmp	r0, #0
 800c008:	f040 808d 	bne.w	800c126 <__ssvfiscanf_r+0x2d2>
 800c00c:	f04f 30ff 	mov.w	r0, #4294967295
 800c010:	e08f      	b.n	800c132 <__ssvfiscanf_r+0x2de>
 800c012:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c014:	f042 0220 	orr.w	r2, r2, #32
 800c018:	9241      	str	r2, [sp, #260]	; 0x104
 800c01a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c01c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c020:	9241      	str	r2, [sp, #260]	; 0x104
 800c022:	2210      	movs	r2, #16
 800c024:	2b6f      	cmp	r3, #111	; 0x6f
 800c026:	9242      	str	r2, [sp, #264]	; 0x108
 800c028:	bf34      	ite	cc
 800c02a:	2303      	movcc	r3, #3
 800c02c:	2304      	movcs	r3, #4
 800c02e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c030:	6863      	ldr	r3, [r4, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	dd42      	ble.n	800c0bc <__ssvfiscanf_r+0x268>
 800c036:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c038:	0659      	lsls	r1, r3, #25
 800c03a:	d404      	bmi.n	800c046 <__ssvfiscanf_r+0x1f2>
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	781a      	ldrb	r2, [r3, #0]
 800c040:	5cba      	ldrb	r2, [r7, r2]
 800c042:	0712      	lsls	r2, r2, #28
 800c044:	d441      	bmi.n	800c0ca <__ssvfiscanf_r+0x276>
 800c046:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c048:	2b02      	cmp	r3, #2
 800c04a:	dc50      	bgt.n	800c0ee <__ssvfiscanf_r+0x29a>
 800c04c:	466b      	mov	r3, sp
 800c04e:	4622      	mov	r2, r4
 800c050:	a941      	add	r1, sp, #260	; 0x104
 800c052:	4630      	mov	r0, r6
 800c054:	f000 f9d0 	bl	800c3f8 <_scanf_chars>
 800c058:	2801      	cmp	r0, #1
 800c05a:	d06e      	beq.n	800c13a <__ssvfiscanf_r+0x2e6>
 800c05c:	2802      	cmp	r0, #2
 800c05e:	f47f af20 	bne.w	800bea2 <__ssvfiscanf_r+0x4e>
 800c062:	e7cf      	b.n	800c004 <__ssvfiscanf_r+0x1b0>
 800c064:	220a      	movs	r2, #10
 800c066:	e7dd      	b.n	800c024 <__ssvfiscanf_r+0x1d0>
 800c068:	2300      	movs	r3, #0
 800c06a:	9342      	str	r3, [sp, #264]	; 0x108
 800c06c:	2303      	movs	r3, #3
 800c06e:	e7de      	b.n	800c02e <__ssvfiscanf_r+0x1da>
 800c070:	2308      	movs	r3, #8
 800c072:	9342      	str	r3, [sp, #264]	; 0x108
 800c074:	2304      	movs	r3, #4
 800c076:	e7da      	b.n	800c02e <__ssvfiscanf_r+0x1da>
 800c078:	4629      	mov	r1, r5
 800c07a:	4640      	mov	r0, r8
 800c07c:	f000 fb28 	bl	800c6d0 <__sccl>
 800c080:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c086:	9341      	str	r3, [sp, #260]	; 0x104
 800c088:	4605      	mov	r5, r0
 800c08a:	2301      	movs	r3, #1
 800c08c:	e7cf      	b.n	800c02e <__ssvfiscanf_r+0x1da>
 800c08e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c094:	9341      	str	r3, [sp, #260]	; 0x104
 800c096:	2300      	movs	r3, #0
 800c098:	e7c9      	b.n	800c02e <__ssvfiscanf_r+0x1da>
 800c09a:	2302      	movs	r3, #2
 800c09c:	e7c7      	b.n	800c02e <__ssvfiscanf_r+0x1da>
 800c09e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c0a0:	06c3      	lsls	r3, r0, #27
 800c0a2:	f53f aefe 	bmi.w	800bea2 <__ssvfiscanf_r+0x4e>
 800c0a6:	9b00      	ldr	r3, [sp, #0]
 800c0a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0aa:	1d19      	adds	r1, r3, #4
 800c0ac:	9100      	str	r1, [sp, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f010 0f01 	tst.w	r0, #1
 800c0b4:	bf14      	ite	ne
 800c0b6:	801a      	strhne	r2, [r3, #0]
 800c0b8:	601a      	streq	r2, [r3, #0]
 800c0ba:	e6f2      	b.n	800bea2 <__ssvfiscanf_r+0x4e>
 800c0bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4798      	blx	r3
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d0b6      	beq.n	800c036 <__ssvfiscanf_r+0x1e2>
 800c0c8:	e79c      	b.n	800c004 <__ssvfiscanf_r+0x1b0>
 800c0ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0cc:	3201      	adds	r2, #1
 800c0ce:	9245      	str	r2, [sp, #276]	; 0x114
 800c0d0:	6862      	ldr	r2, [r4, #4]
 800c0d2:	3a01      	subs	r2, #1
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	6062      	str	r2, [r4, #4]
 800c0d8:	dd02      	ble.n	800c0e0 <__ssvfiscanf_r+0x28c>
 800c0da:	3301      	adds	r3, #1
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	e7ad      	b.n	800c03c <__ssvfiscanf_r+0x1e8>
 800c0e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	4798      	blx	r3
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d0a7      	beq.n	800c03c <__ssvfiscanf_r+0x1e8>
 800c0ec:	e78a      	b.n	800c004 <__ssvfiscanf_r+0x1b0>
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	dc0e      	bgt.n	800c110 <__ssvfiscanf_r+0x2bc>
 800c0f2:	466b      	mov	r3, sp
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	a941      	add	r1, sp, #260	; 0x104
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f000 f9d7 	bl	800c4ac <_scanf_i>
 800c0fe:	e7ab      	b.n	800c058 <__ssvfiscanf_r+0x204>
 800c100:	0800bda1 	.word	0x0800bda1
 800c104:	0800be1b 	.word	0x0800be1b
 800c108:	0800cc89 	.word	0x0800cc89
 800c10c:	0800d05a 	.word	0x0800d05a
 800c110:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <__ssvfiscanf_r+0x2ec>)
 800c112:	2b00      	cmp	r3, #0
 800c114:	f43f aec5 	beq.w	800bea2 <__ssvfiscanf_r+0x4e>
 800c118:	466b      	mov	r3, sp
 800c11a:	4622      	mov	r2, r4
 800c11c:	a941      	add	r1, sp, #260	; 0x104
 800c11e:	4630      	mov	r0, r6
 800c120:	f7fc f8f6 	bl	8008310 <_scanf_float>
 800c124:	e798      	b.n	800c058 <__ssvfiscanf_r+0x204>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c12c:	bf18      	it	ne
 800c12e:	f04f 30ff 	movne.w	r0, #4294967295
 800c132:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c13c:	e7f9      	b.n	800c132 <__ssvfiscanf_r+0x2de>
 800c13e:	bf00      	nop
 800c140:	08008311 	.word	0x08008311

0800c144 <__sfputc_r>:
 800c144:	6893      	ldr	r3, [r2, #8]
 800c146:	3b01      	subs	r3, #1
 800c148:	2b00      	cmp	r3, #0
 800c14a:	b410      	push	{r4}
 800c14c:	6093      	str	r3, [r2, #8]
 800c14e:	da08      	bge.n	800c162 <__sfputc_r+0x1e>
 800c150:	6994      	ldr	r4, [r2, #24]
 800c152:	42a3      	cmp	r3, r4
 800c154:	db01      	blt.n	800c15a <__sfputc_r+0x16>
 800c156:	290a      	cmp	r1, #10
 800c158:	d103      	bne.n	800c162 <__sfputc_r+0x1e>
 800c15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c15e:	f7fd bacb 	b.w	80096f8 <__swbuf_r>
 800c162:	6813      	ldr	r3, [r2, #0]
 800c164:	1c58      	adds	r0, r3, #1
 800c166:	6010      	str	r0, [r2, #0]
 800c168:	7019      	strb	r1, [r3, #0]
 800c16a:	4608      	mov	r0, r1
 800c16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <__sfputs_r>:
 800c172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c174:	4606      	mov	r6, r0
 800c176:	460f      	mov	r7, r1
 800c178:	4614      	mov	r4, r2
 800c17a:	18d5      	adds	r5, r2, r3
 800c17c:	42ac      	cmp	r4, r5
 800c17e:	d101      	bne.n	800c184 <__sfputs_r+0x12>
 800c180:	2000      	movs	r0, #0
 800c182:	e007      	b.n	800c194 <__sfputs_r+0x22>
 800c184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c188:	463a      	mov	r2, r7
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7ff ffda 	bl	800c144 <__sfputc_r>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d1f3      	bne.n	800c17c <__sfputs_r+0xa>
 800c194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c198 <_vfiprintf_r>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	460d      	mov	r5, r1
 800c19e:	b09d      	sub	sp, #116	; 0x74
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	4698      	mov	r8, r3
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	b118      	cbz	r0, 800c1b0 <_vfiprintf_r+0x18>
 800c1a8:	6983      	ldr	r3, [r0, #24]
 800c1aa:	b90b      	cbnz	r3, 800c1b0 <_vfiprintf_r+0x18>
 800c1ac:	f7fe fb1c 	bl	800a7e8 <__sinit>
 800c1b0:	4b89      	ldr	r3, [pc, #548]	; (800c3d8 <_vfiprintf_r+0x240>)
 800c1b2:	429d      	cmp	r5, r3
 800c1b4:	d11b      	bne.n	800c1ee <_vfiprintf_r+0x56>
 800c1b6:	6875      	ldr	r5, [r6, #4]
 800c1b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ba:	07d9      	lsls	r1, r3, #31
 800c1bc:	d405      	bmi.n	800c1ca <_vfiprintf_r+0x32>
 800c1be:	89ab      	ldrh	r3, [r5, #12]
 800c1c0:	059a      	lsls	r2, r3, #22
 800c1c2:	d402      	bmi.n	800c1ca <_vfiprintf_r+0x32>
 800c1c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1c6:	f7fe ff20 	bl	800b00a <__retarget_lock_acquire_recursive>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	071b      	lsls	r3, r3, #28
 800c1ce:	d501      	bpl.n	800c1d4 <_vfiprintf_r+0x3c>
 800c1d0:	692b      	ldr	r3, [r5, #16]
 800c1d2:	b9eb      	cbnz	r3, 800c210 <_vfiprintf_r+0x78>
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f7fd faf2 	bl	80097c0 <__swsetup_r>
 800c1dc:	b1c0      	cbz	r0, 800c210 <_vfiprintf_r+0x78>
 800c1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1e0:	07dc      	lsls	r4, r3, #31
 800c1e2:	d50e      	bpl.n	800c202 <_vfiprintf_r+0x6a>
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b01d      	add	sp, #116	; 0x74
 800c1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ee:	4b7b      	ldr	r3, [pc, #492]	; (800c3dc <_vfiprintf_r+0x244>)
 800c1f0:	429d      	cmp	r5, r3
 800c1f2:	d101      	bne.n	800c1f8 <_vfiprintf_r+0x60>
 800c1f4:	68b5      	ldr	r5, [r6, #8]
 800c1f6:	e7df      	b.n	800c1b8 <_vfiprintf_r+0x20>
 800c1f8:	4b79      	ldr	r3, [pc, #484]	; (800c3e0 <_vfiprintf_r+0x248>)
 800c1fa:	429d      	cmp	r5, r3
 800c1fc:	bf08      	it	eq
 800c1fe:	68f5      	ldreq	r5, [r6, #12]
 800c200:	e7da      	b.n	800c1b8 <_vfiprintf_r+0x20>
 800c202:	89ab      	ldrh	r3, [r5, #12]
 800c204:	0598      	lsls	r0, r3, #22
 800c206:	d4ed      	bmi.n	800c1e4 <_vfiprintf_r+0x4c>
 800c208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20a:	f7fe feff 	bl	800b00c <__retarget_lock_release_recursive>
 800c20e:	e7e9      	b.n	800c1e4 <_vfiprintf_r+0x4c>
 800c210:	2300      	movs	r3, #0
 800c212:	9309      	str	r3, [sp, #36]	; 0x24
 800c214:	2320      	movs	r3, #32
 800c216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c21e:	2330      	movs	r3, #48	; 0x30
 800c220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c3e4 <_vfiprintf_r+0x24c>
 800c224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c228:	f04f 0901 	mov.w	r9, #1
 800c22c:	4623      	mov	r3, r4
 800c22e:	469a      	mov	sl, r3
 800c230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c234:	b10a      	cbz	r2, 800c23a <_vfiprintf_r+0xa2>
 800c236:	2a25      	cmp	r2, #37	; 0x25
 800c238:	d1f9      	bne.n	800c22e <_vfiprintf_r+0x96>
 800c23a:	ebba 0b04 	subs.w	fp, sl, r4
 800c23e:	d00b      	beq.n	800c258 <_vfiprintf_r+0xc0>
 800c240:	465b      	mov	r3, fp
 800c242:	4622      	mov	r2, r4
 800c244:	4629      	mov	r1, r5
 800c246:	4630      	mov	r0, r6
 800c248:	f7ff ff93 	bl	800c172 <__sfputs_r>
 800c24c:	3001      	adds	r0, #1
 800c24e:	f000 80aa 	beq.w	800c3a6 <_vfiprintf_r+0x20e>
 800c252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c254:	445a      	add	r2, fp
 800c256:	9209      	str	r2, [sp, #36]	; 0x24
 800c258:	f89a 3000 	ldrb.w	r3, [sl]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 80a2 	beq.w	800c3a6 <_vfiprintf_r+0x20e>
 800c262:	2300      	movs	r3, #0
 800c264:	f04f 32ff 	mov.w	r2, #4294967295
 800c268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c26c:	f10a 0a01 	add.w	sl, sl, #1
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	9307      	str	r3, [sp, #28]
 800c274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c278:	931a      	str	r3, [sp, #104]	; 0x68
 800c27a:	4654      	mov	r4, sl
 800c27c:	2205      	movs	r2, #5
 800c27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c282:	4858      	ldr	r0, [pc, #352]	; (800c3e4 <_vfiprintf_r+0x24c>)
 800c284:	f7f3 ffac 	bl	80001e0 <memchr>
 800c288:	9a04      	ldr	r2, [sp, #16]
 800c28a:	b9d8      	cbnz	r0, 800c2c4 <_vfiprintf_r+0x12c>
 800c28c:	06d1      	lsls	r1, r2, #27
 800c28e:	bf44      	itt	mi
 800c290:	2320      	movmi	r3, #32
 800c292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c296:	0713      	lsls	r3, r2, #28
 800c298:	bf44      	itt	mi
 800c29a:	232b      	movmi	r3, #43	; 0x2b
 800c29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a6:	d015      	beq.n	800c2d4 <_vfiprintf_r+0x13c>
 800c2a8:	9a07      	ldr	r2, [sp, #28]
 800c2aa:	4654      	mov	r4, sl
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	f04f 0c0a 	mov.w	ip, #10
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b8:	3b30      	subs	r3, #48	; 0x30
 800c2ba:	2b09      	cmp	r3, #9
 800c2bc:	d94e      	bls.n	800c35c <_vfiprintf_r+0x1c4>
 800c2be:	b1b0      	cbz	r0, 800c2ee <_vfiprintf_r+0x156>
 800c2c0:	9207      	str	r2, [sp, #28]
 800c2c2:	e014      	b.n	800c2ee <_vfiprintf_r+0x156>
 800c2c4:	eba0 0308 	sub.w	r3, r0, r8
 800c2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	9304      	str	r3, [sp, #16]
 800c2d0:	46a2      	mov	sl, r4
 800c2d2:	e7d2      	b.n	800c27a <_vfiprintf_r+0xe2>
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	1d19      	adds	r1, r3, #4
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	9103      	str	r1, [sp, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfbb      	ittet	lt
 800c2e0:	425b      	neglt	r3, r3
 800c2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e6:	9307      	strge	r3, [sp, #28]
 800c2e8:	9307      	strlt	r3, [sp, #28]
 800c2ea:	bfb8      	it	lt
 800c2ec:	9204      	strlt	r2, [sp, #16]
 800c2ee:	7823      	ldrb	r3, [r4, #0]
 800c2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c2f2:	d10c      	bne.n	800c30e <_vfiprintf_r+0x176>
 800c2f4:	7863      	ldrb	r3, [r4, #1]
 800c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f8:	d135      	bne.n	800c366 <_vfiprintf_r+0x1ce>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	1d1a      	adds	r2, r3, #4
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	9203      	str	r2, [sp, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	bfb8      	it	lt
 800c306:	f04f 33ff 	movlt.w	r3, #4294967295
 800c30a:	3402      	adds	r4, #2
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c3f4 <_vfiprintf_r+0x25c>
 800c312:	7821      	ldrb	r1, [r4, #0]
 800c314:	2203      	movs	r2, #3
 800c316:	4650      	mov	r0, sl
 800c318:	f7f3 ff62 	bl	80001e0 <memchr>
 800c31c:	b140      	cbz	r0, 800c330 <_vfiprintf_r+0x198>
 800c31e:	2340      	movs	r3, #64	; 0x40
 800c320:	eba0 000a 	sub.w	r0, r0, sl
 800c324:	fa03 f000 	lsl.w	r0, r3, r0
 800c328:	9b04      	ldr	r3, [sp, #16]
 800c32a:	4303      	orrs	r3, r0
 800c32c:	3401      	adds	r4, #1
 800c32e:	9304      	str	r3, [sp, #16]
 800c330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c334:	482c      	ldr	r0, [pc, #176]	; (800c3e8 <_vfiprintf_r+0x250>)
 800c336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c33a:	2206      	movs	r2, #6
 800c33c:	f7f3 ff50 	bl	80001e0 <memchr>
 800c340:	2800      	cmp	r0, #0
 800c342:	d03f      	beq.n	800c3c4 <_vfiprintf_r+0x22c>
 800c344:	4b29      	ldr	r3, [pc, #164]	; (800c3ec <_vfiprintf_r+0x254>)
 800c346:	bb1b      	cbnz	r3, 800c390 <_vfiprintf_r+0x1f8>
 800c348:	9b03      	ldr	r3, [sp, #12]
 800c34a:	3307      	adds	r3, #7
 800c34c:	f023 0307 	bic.w	r3, r3, #7
 800c350:	3308      	adds	r3, #8
 800c352:	9303      	str	r3, [sp, #12]
 800c354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c356:	443b      	add	r3, r7
 800c358:	9309      	str	r3, [sp, #36]	; 0x24
 800c35a:	e767      	b.n	800c22c <_vfiprintf_r+0x94>
 800c35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c360:	460c      	mov	r4, r1
 800c362:	2001      	movs	r0, #1
 800c364:	e7a5      	b.n	800c2b2 <_vfiprintf_r+0x11a>
 800c366:	2300      	movs	r3, #0
 800c368:	3401      	adds	r4, #1
 800c36a:	9305      	str	r3, [sp, #20]
 800c36c:	4619      	mov	r1, r3
 800c36e:	f04f 0c0a 	mov.w	ip, #10
 800c372:	4620      	mov	r0, r4
 800c374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c378:	3a30      	subs	r2, #48	; 0x30
 800c37a:	2a09      	cmp	r2, #9
 800c37c:	d903      	bls.n	800c386 <_vfiprintf_r+0x1ee>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0c5      	beq.n	800c30e <_vfiprintf_r+0x176>
 800c382:	9105      	str	r1, [sp, #20]
 800c384:	e7c3      	b.n	800c30e <_vfiprintf_r+0x176>
 800c386:	fb0c 2101 	mla	r1, ip, r1, r2
 800c38a:	4604      	mov	r4, r0
 800c38c:	2301      	movs	r3, #1
 800c38e:	e7f0      	b.n	800c372 <_vfiprintf_r+0x1da>
 800c390:	ab03      	add	r3, sp, #12
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	462a      	mov	r2, r5
 800c396:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <_vfiprintf_r+0x258>)
 800c398:	a904      	add	r1, sp, #16
 800c39a:	4630      	mov	r0, r6
 800c39c:	f7fb fbee 	bl	8007b7c <_printf_float>
 800c3a0:	4607      	mov	r7, r0
 800c3a2:	1c78      	adds	r0, r7, #1
 800c3a4:	d1d6      	bne.n	800c354 <_vfiprintf_r+0x1bc>
 800c3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3a8:	07d9      	lsls	r1, r3, #31
 800c3aa:	d405      	bmi.n	800c3b8 <_vfiprintf_r+0x220>
 800c3ac:	89ab      	ldrh	r3, [r5, #12]
 800c3ae:	059a      	lsls	r2, r3, #22
 800c3b0:	d402      	bmi.n	800c3b8 <_vfiprintf_r+0x220>
 800c3b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3b4:	f7fe fe2a 	bl	800b00c <__retarget_lock_release_recursive>
 800c3b8:	89ab      	ldrh	r3, [r5, #12]
 800c3ba:	065b      	lsls	r3, r3, #25
 800c3bc:	f53f af12 	bmi.w	800c1e4 <_vfiprintf_r+0x4c>
 800c3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3c2:	e711      	b.n	800c1e8 <_vfiprintf_r+0x50>
 800c3c4:	ab03      	add	r3, sp, #12
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	462a      	mov	r2, r5
 800c3ca:	4b09      	ldr	r3, [pc, #36]	; (800c3f0 <_vfiprintf_r+0x258>)
 800c3cc:	a904      	add	r1, sp, #16
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7fb fe78 	bl	80080c4 <_printf_i>
 800c3d4:	e7e4      	b.n	800c3a0 <_vfiprintf_r+0x208>
 800c3d6:	bf00      	nop
 800c3d8:	0800ce3c 	.word	0x0800ce3c
 800c3dc:	0800ce5c 	.word	0x0800ce5c
 800c3e0:	0800ce1c 	.word	0x0800ce1c
 800c3e4:	0800d054 	.word	0x0800d054
 800c3e8:	0800d05e 	.word	0x0800d05e
 800c3ec:	08007b7d 	.word	0x08007b7d
 800c3f0:	0800c173 	.word	0x0800c173
 800c3f4:	0800d05a 	.word	0x0800d05a

0800c3f8 <_scanf_chars>:
 800c3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3fc:	4615      	mov	r5, r2
 800c3fe:	688a      	ldr	r2, [r1, #8]
 800c400:	4680      	mov	r8, r0
 800c402:	460c      	mov	r4, r1
 800c404:	b932      	cbnz	r2, 800c414 <_scanf_chars+0x1c>
 800c406:	698a      	ldr	r2, [r1, #24]
 800c408:	2a00      	cmp	r2, #0
 800c40a:	bf0c      	ite	eq
 800c40c:	2201      	moveq	r2, #1
 800c40e:	f04f 32ff 	movne.w	r2, #4294967295
 800c412:	608a      	str	r2, [r1, #8]
 800c414:	6822      	ldr	r2, [r4, #0]
 800c416:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c4a8 <_scanf_chars+0xb0>
 800c41a:	06d1      	lsls	r1, r2, #27
 800c41c:	bf5f      	itttt	pl
 800c41e:	681a      	ldrpl	r2, [r3, #0]
 800c420:	1d11      	addpl	r1, r2, #4
 800c422:	6019      	strpl	r1, [r3, #0]
 800c424:	6816      	ldrpl	r6, [r2, #0]
 800c426:	2700      	movs	r7, #0
 800c428:	69a0      	ldr	r0, [r4, #24]
 800c42a:	b188      	cbz	r0, 800c450 <_scanf_chars+0x58>
 800c42c:	2801      	cmp	r0, #1
 800c42e:	d107      	bne.n	800c440 <_scanf_chars+0x48>
 800c430:	682a      	ldr	r2, [r5, #0]
 800c432:	7811      	ldrb	r1, [r2, #0]
 800c434:	6962      	ldr	r2, [r4, #20]
 800c436:	5c52      	ldrb	r2, [r2, r1]
 800c438:	b952      	cbnz	r2, 800c450 <_scanf_chars+0x58>
 800c43a:	2f00      	cmp	r7, #0
 800c43c:	d031      	beq.n	800c4a2 <_scanf_chars+0xaa>
 800c43e:	e022      	b.n	800c486 <_scanf_chars+0x8e>
 800c440:	2802      	cmp	r0, #2
 800c442:	d120      	bne.n	800c486 <_scanf_chars+0x8e>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c44c:	071b      	lsls	r3, r3, #28
 800c44e:	d41a      	bmi.n	800c486 <_scanf_chars+0x8e>
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	06da      	lsls	r2, r3, #27
 800c454:	bf5e      	ittt	pl
 800c456:	682b      	ldrpl	r3, [r5, #0]
 800c458:	781b      	ldrbpl	r3, [r3, #0]
 800c45a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c45e:	682a      	ldr	r2, [r5, #0]
 800c460:	686b      	ldr	r3, [r5, #4]
 800c462:	3201      	adds	r2, #1
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	68a2      	ldr	r2, [r4, #8]
 800c468:	3b01      	subs	r3, #1
 800c46a:	3a01      	subs	r2, #1
 800c46c:	606b      	str	r3, [r5, #4]
 800c46e:	3701      	adds	r7, #1
 800c470:	60a2      	str	r2, [r4, #8]
 800c472:	b142      	cbz	r2, 800c486 <_scanf_chars+0x8e>
 800c474:	2b00      	cmp	r3, #0
 800c476:	dcd7      	bgt.n	800c428 <_scanf_chars+0x30>
 800c478:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c47c:	4629      	mov	r1, r5
 800c47e:	4640      	mov	r0, r8
 800c480:	4798      	blx	r3
 800c482:	2800      	cmp	r0, #0
 800c484:	d0d0      	beq.n	800c428 <_scanf_chars+0x30>
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	f013 0310 	ands.w	r3, r3, #16
 800c48c:	d105      	bne.n	800c49a <_scanf_chars+0xa2>
 800c48e:	68e2      	ldr	r2, [r4, #12]
 800c490:	3201      	adds	r2, #1
 800c492:	60e2      	str	r2, [r4, #12]
 800c494:	69a2      	ldr	r2, [r4, #24]
 800c496:	b102      	cbz	r2, 800c49a <_scanf_chars+0xa2>
 800c498:	7033      	strb	r3, [r6, #0]
 800c49a:	6923      	ldr	r3, [r4, #16]
 800c49c:	443b      	add	r3, r7
 800c49e:	6123      	str	r3, [r4, #16]
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800cc89 	.word	0x0800cc89

0800c4ac <_scanf_i>:
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	4698      	mov	r8, r3
 800c4b2:	4b76      	ldr	r3, [pc, #472]	; (800c68c <_scanf_i+0x1e0>)
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	4682      	mov	sl, r0
 800c4b8:	4616      	mov	r6, r2
 800c4ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4be:	b087      	sub	sp, #28
 800c4c0:	ab03      	add	r3, sp, #12
 800c4c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c4c6:	4b72      	ldr	r3, [pc, #456]	; (800c690 <_scanf_i+0x1e4>)
 800c4c8:	69a1      	ldr	r1, [r4, #24]
 800c4ca:	4a72      	ldr	r2, [pc, #456]	; (800c694 <_scanf_i+0x1e8>)
 800c4cc:	2903      	cmp	r1, #3
 800c4ce:	bf18      	it	ne
 800c4d0:	461a      	movne	r2, r3
 800c4d2:	68a3      	ldr	r3, [r4, #8]
 800c4d4:	9201      	str	r2, [sp, #4]
 800c4d6:	1e5a      	subs	r2, r3, #1
 800c4d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c4dc:	bf88      	it	hi
 800c4de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c4e2:	4627      	mov	r7, r4
 800c4e4:	bf82      	ittt	hi
 800c4e6:	eb03 0905 	addhi.w	r9, r3, r5
 800c4ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c4ee:	60a3      	strhi	r3, [r4, #8]
 800c4f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c4f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c4f8:	bf98      	it	ls
 800c4fa:	f04f 0900 	movls.w	r9, #0
 800c4fe:	6023      	str	r3, [r4, #0]
 800c500:	463d      	mov	r5, r7
 800c502:	f04f 0b00 	mov.w	fp, #0
 800c506:	6831      	ldr	r1, [r6, #0]
 800c508:	ab03      	add	r3, sp, #12
 800c50a:	7809      	ldrb	r1, [r1, #0]
 800c50c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c510:	2202      	movs	r2, #2
 800c512:	f7f3 fe65 	bl	80001e0 <memchr>
 800c516:	b328      	cbz	r0, 800c564 <_scanf_i+0xb8>
 800c518:	f1bb 0f01 	cmp.w	fp, #1
 800c51c:	d159      	bne.n	800c5d2 <_scanf_i+0x126>
 800c51e:	6862      	ldr	r2, [r4, #4]
 800c520:	b92a      	cbnz	r2, 800c52e <_scanf_i+0x82>
 800c522:	6822      	ldr	r2, [r4, #0]
 800c524:	2308      	movs	r3, #8
 800c526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c52a:	6063      	str	r3, [r4, #4]
 800c52c:	6022      	str	r2, [r4, #0]
 800c52e:	6822      	ldr	r2, [r4, #0]
 800c530:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c534:	6022      	str	r2, [r4, #0]
 800c536:	68a2      	ldr	r2, [r4, #8]
 800c538:	1e51      	subs	r1, r2, #1
 800c53a:	60a1      	str	r1, [r4, #8]
 800c53c:	b192      	cbz	r2, 800c564 <_scanf_i+0xb8>
 800c53e:	6832      	ldr	r2, [r6, #0]
 800c540:	1c51      	adds	r1, r2, #1
 800c542:	6031      	str	r1, [r6, #0]
 800c544:	7812      	ldrb	r2, [r2, #0]
 800c546:	f805 2b01 	strb.w	r2, [r5], #1
 800c54a:	6872      	ldr	r2, [r6, #4]
 800c54c:	3a01      	subs	r2, #1
 800c54e:	2a00      	cmp	r2, #0
 800c550:	6072      	str	r2, [r6, #4]
 800c552:	dc07      	bgt.n	800c564 <_scanf_i+0xb8>
 800c554:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c558:	4631      	mov	r1, r6
 800c55a:	4650      	mov	r0, sl
 800c55c:	4790      	blx	r2
 800c55e:	2800      	cmp	r0, #0
 800c560:	f040 8085 	bne.w	800c66e <_scanf_i+0x1c2>
 800c564:	f10b 0b01 	add.w	fp, fp, #1
 800c568:	f1bb 0f03 	cmp.w	fp, #3
 800c56c:	d1cb      	bne.n	800c506 <_scanf_i+0x5a>
 800c56e:	6863      	ldr	r3, [r4, #4]
 800c570:	b90b      	cbnz	r3, 800c576 <_scanf_i+0xca>
 800c572:	230a      	movs	r3, #10
 800c574:	6063      	str	r3, [r4, #4]
 800c576:	6863      	ldr	r3, [r4, #4]
 800c578:	4947      	ldr	r1, [pc, #284]	; (800c698 <_scanf_i+0x1ec>)
 800c57a:	6960      	ldr	r0, [r4, #20]
 800c57c:	1ac9      	subs	r1, r1, r3
 800c57e:	f000 f8a7 	bl	800c6d0 <__sccl>
 800c582:	f04f 0b00 	mov.w	fp, #0
 800c586:	68a3      	ldr	r3, [r4, #8]
 800c588:	6822      	ldr	r2, [r4, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d03d      	beq.n	800c60a <_scanf_i+0x15e>
 800c58e:	6831      	ldr	r1, [r6, #0]
 800c590:	6960      	ldr	r0, [r4, #20]
 800c592:	f891 c000 	ldrb.w	ip, [r1]
 800c596:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d035      	beq.n	800c60a <_scanf_i+0x15e>
 800c59e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c5a2:	d124      	bne.n	800c5ee <_scanf_i+0x142>
 800c5a4:	0510      	lsls	r0, r2, #20
 800c5a6:	d522      	bpl.n	800c5ee <_scanf_i+0x142>
 800c5a8:	f10b 0b01 	add.w	fp, fp, #1
 800c5ac:	f1b9 0f00 	cmp.w	r9, #0
 800c5b0:	d003      	beq.n	800c5ba <_scanf_i+0x10e>
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5b8:	60a3      	str	r3, [r4, #8]
 800c5ba:	6873      	ldr	r3, [r6, #4]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	6073      	str	r3, [r6, #4]
 800c5c2:	dd1b      	ble.n	800c5fc <_scanf_i+0x150>
 800c5c4:	6833      	ldr	r3, [r6, #0]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	6033      	str	r3, [r6, #0]
 800c5ca:	68a3      	ldr	r3, [r4, #8]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	60a3      	str	r3, [r4, #8]
 800c5d0:	e7d9      	b.n	800c586 <_scanf_i+0xda>
 800c5d2:	f1bb 0f02 	cmp.w	fp, #2
 800c5d6:	d1ae      	bne.n	800c536 <_scanf_i+0x8a>
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c5de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c5e2:	d1bf      	bne.n	800c564 <_scanf_i+0xb8>
 800c5e4:	2310      	movs	r3, #16
 800c5e6:	6063      	str	r3, [r4, #4]
 800c5e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5ec:	e7a2      	b.n	800c534 <_scanf_i+0x88>
 800c5ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c5f2:	6022      	str	r2, [r4, #0]
 800c5f4:	780b      	ldrb	r3, [r1, #0]
 800c5f6:	f805 3b01 	strb.w	r3, [r5], #1
 800c5fa:	e7de      	b.n	800c5ba <_scanf_i+0x10e>
 800c5fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c600:	4631      	mov	r1, r6
 800c602:	4650      	mov	r0, sl
 800c604:	4798      	blx	r3
 800c606:	2800      	cmp	r0, #0
 800c608:	d0df      	beq.n	800c5ca <_scanf_i+0x11e>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	05db      	lsls	r3, r3, #23
 800c60e:	d50d      	bpl.n	800c62c <_scanf_i+0x180>
 800c610:	42bd      	cmp	r5, r7
 800c612:	d909      	bls.n	800c628 <_scanf_i+0x17c>
 800c614:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c618:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c61c:	4632      	mov	r2, r6
 800c61e:	4650      	mov	r0, sl
 800c620:	4798      	blx	r3
 800c622:	f105 39ff 	add.w	r9, r5, #4294967295
 800c626:	464d      	mov	r5, r9
 800c628:	42bd      	cmp	r5, r7
 800c62a:	d02d      	beq.n	800c688 <_scanf_i+0x1dc>
 800c62c:	6822      	ldr	r2, [r4, #0]
 800c62e:	f012 0210 	ands.w	r2, r2, #16
 800c632:	d113      	bne.n	800c65c <_scanf_i+0x1b0>
 800c634:	702a      	strb	r2, [r5, #0]
 800c636:	6863      	ldr	r3, [r4, #4]
 800c638:	9e01      	ldr	r6, [sp, #4]
 800c63a:	4639      	mov	r1, r7
 800c63c:	4650      	mov	r0, sl
 800c63e:	47b0      	blx	r6
 800c640:	6821      	ldr	r1, [r4, #0]
 800c642:	f8d8 3000 	ldr.w	r3, [r8]
 800c646:	f011 0f20 	tst.w	r1, #32
 800c64a:	d013      	beq.n	800c674 <_scanf_i+0x1c8>
 800c64c:	1d1a      	adds	r2, r3, #4
 800c64e:	f8c8 2000 	str.w	r2, [r8]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6018      	str	r0, [r3, #0]
 800c656:	68e3      	ldr	r3, [r4, #12]
 800c658:	3301      	adds	r3, #1
 800c65a:	60e3      	str	r3, [r4, #12]
 800c65c:	1bed      	subs	r5, r5, r7
 800c65e:	44ab      	add	fp, r5
 800c660:	6925      	ldr	r5, [r4, #16]
 800c662:	445d      	add	r5, fp
 800c664:	6125      	str	r5, [r4, #16]
 800c666:	2000      	movs	r0, #0
 800c668:	b007      	add	sp, #28
 800c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	f04f 0b00 	mov.w	fp, #0
 800c672:	e7ca      	b.n	800c60a <_scanf_i+0x15e>
 800c674:	1d1a      	adds	r2, r3, #4
 800c676:	f8c8 2000 	str.w	r2, [r8]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f011 0f01 	tst.w	r1, #1
 800c680:	bf14      	ite	ne
 800c682:	8018      	strhne	r0, [r3, #0]
 800c684:	6018      	streq	r0, [r3, #0]
 800c686:	e7e6      	b.n	800c656 <_scanf_i+0x1aa>
 800c688:	2001      	movs	r0, #1
 800c68a:	e7ed      	b.n	800c668 <_scanf_i+0x1bc>
 800c68c:	0800cba8 	.word	0x0800cba8
 800c690:	0800c84d 	.word	0x0800c84d
 800c694:	080096f5 	.word	0x080096f5
 800c698:	0800d07e 	.word	0x0800d07e

0800c69c <_read_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4d07      	ldr	r5, [pc, #28]	; (800c6bc <_read_r+0x20>)
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	602a      	str	r2, [r5, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f7f5 f89e 	bl	80017ec <_read>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d102      	bne.n	800c6ba <_read_r+0x1e>
 800c6b4:	682b      	ldr	r3, [r5, #0]
 800c6b6:	b103      	cbz	r3, 800c6ba <_read_r+0x1e>
 800c6b8:	6023      	str	r3, [r4, #0]
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	200007c8 	.word	0x200007c8

0800c6c0 <nan>:
 800c6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c6c8 <nan+0x8>
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	00000000 	.word	0x00000000
 800c6cc:	7ff80000 	.word	0x7ff80000

0800c6d0 <__sccl>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	780b      	ldrb	r3, [r1, #0]
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	2b5e      	cmp	r3, #94	; 0x5e
 800c6d8:	bf0b      	itete	eq
 800c6da:	784b      	ldrbeq	r3, [r1, #1]
 800c6dc:	1c48      	addne	r0, r1, #1
 800c6de:	1c88      	addeq	r0, r1, #2
 800c6e0:	2200      	movne	r2, #0
 800c6e2:	bf08      	it	eq
 800c6e4:	2201      	moveq	r2, #1
 800c6e6:	1e61      	subs	r1, r4, #1
 800c6e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c6ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c6f0:	42a9      	cmp	r1, r5
 800c6f2:	d1fb      	bne.n	800c6ec <__sccl+0x1c>
 800c6f4:	b90b      	cbnz	r3, 800c6fa <__sccl+0x2a>
 800c6f6:	3801      	subs	r0, #1
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	f082 0201 	eor.w	r2, r2, #1
 800c6fe:	54e2      	strb	r2, [r4, r3]
 800c700:	4605      	mov	r5, r0
 800c702:	4628      	mov	r0, r5
 800c704:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c708:	292d      	cmp	r1, #45	; 0x2d
 800c70a:	d006      	beq.n	800c71a <__sccl+0x4a>
 800c70c:	295d      	cmp	r1, #93	; 0x5d
 800c70e:	d0f3      	beq.n	800c6f8 <__sccl+0x28>
 800c710:	b909      	cbnz	r1, 800c716 <__sccl+0x46>
 800c712:	4628      	mov	r0, r5
 800c714:	e7f0      	b.n	800c6f8 <__sccl+0x28>
 800c716:	460b      	mov	r3, r1
 800c718:	e7f1      	b.n	800c6fe <__sccl+0x2e>
 800c71a:	786e      	ldrb	r6, [r5, #1]
 800c71c:	2e5d      	cmp	r6, #93	; 0x5d
 800c71e:	d0fa      	beq.n	800c716 <__sccl+0x46>
 800c720:	42b3      	cmp	r3, r6
 800c722:	dcf8      	bgt.n	800c716 <__sccl+0x46>
 800c724:	3502      	adds	r5, #2
 800c726:	4619      	mov	r1, r3
 800c728:	3101      	adds	r1, #1
 800c72a:	428e      	cmp	r6, r1
 800c72c:	5462      	strb	r2, [r4, r1]
 800c72e:	dcfb      	bgt.n	800c728 <__sccl+0x58>
 800c730:	1af1      	subs	r1, r6, r3
 800c732:	3901      	subs	r1, #1
 800c734:	1c58      	adds	r0, r3, #1
 800c736:	42b3      	cmp	r3, r6
 800c738:	bfa8      	it	ge
 800c73a:	2100      	movge	r1, #0
 800c73c:	1843      	adds	r3, r0, r1
 800c73e:	e7e0      	b.n	800c702 <__sccl+0x32>

0800c740 <strncmp>:
 800c740:	b510      	push	{r4, lr}
 800c742:	b17a      	cbz	r2, 800c764 <strncmp+0x24>
 800c744:	4603      	mov	r3, r0
 800c746:	3901      	subs	r1, #1
 800c748:	1884      	adds	r4, r0, r2
 800c74a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c74e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c752:	4290      	cmp	r0, r2
 800c754:	d101      	bne.n	800c75a <strncmp+0x1a>
 800c756:	42a3      	cmp	r3, r4
 800c758:	d101      	bne.n	800c75e <strncmp+0x1e>
 800c75a:	1a80      	subs	r0, r0, r2
 800c75c:	bd10      	pop	{r4, pc}
 800c75e:	2800      	cmp	r0, #0
 800c760:	d1f3      	bne.n	800c74a <strncmp+0xa>
 800c762:	e7fa      	b.n	800c75a <strncmp+0x1a>
 800c764:	4610      	mov	r0, r2
 800c766:	e7f9      	b.n	800c75c <strncmp+0x1c>

0800c768 <_strtoul_l.constprop.0>:
 800c768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c76c:	4f36      	ldr	r7, [pc, #216]	; (800c848 <_strtoul_l.constprop.0+0xe0>)
 800c76e:	4686      	mov	lr, r0
 800c770:	460d      	mov	r5, r1
 800c772:	4628      	mov	r0, r5
 800c774:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c778:	5de6      	ldrb	r6, [r4, r7]
 800c77a:	f016 0608 	ands.w	r6, r6, #8
 800c77e:	d1f8      	bne.n	800c772 <_strtoul_l.constprop.0+0xa>
 800c780:	2c2d      	cmp	r4, #45	; 0x2d
 800c782:	d12f      	bne.n	800c7e4 <_strtoul_l.constprop.0+0x7c>
 800c784:	782c      	ldrb	r4, [r5, #0]
 800c786:	2601      	movs	r6, #1
 800c788:	1c85      	adds	r5, r0, #2
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d057      	beq.n	800c83e <_strtoul_l.constprop.0+0xd6>
 800c78e:	2b10      	cmp	r3, #16
 800c790:	d109      	bne.n	800c7a6 <_strtoul_l.constprop.0+0x3e>
 800c792:	2c30      	cmp	r4, #48	; 0x30
 800c794:	d107      	bne.n	800c7a6 <_strtoul_l.constprop.0+0x3e>
 800c796:	7828      	ldrb	r0, [r5, #0]
 800c798:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c79c:	2858      	cmp	r0, #88	; 0x58
 800c79e:	d149      	bne.n	800c834 <_strtoul_l.constprop.0+0xcc>
 800c7a0:	786c      	ldrb	r4, [r5, #1]
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	3502      	adds	r5, #2
 800c7a6:	f04f 38ff 	mov.w	r8, #4294967295
 800c7aa:	2700      	movs	r7, #0
 800c7ac:	fbb8 f8f3 	udiv	r8, r8, r3
 800c7b0:	fb03 f908 	mul.w	r9, r3, r8
 800c7b4:	ea6f 0909 	mvn.w	r9, r9
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c7be:	f1bc 0f09 	cmp.w	ip, #9
 800c7c2:	d814      	bhi.n	800c7ee <_strtoul_l.constprop.0+0x86>
 800c7c4:	4664      	mov	r4, ip
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	dd22      	ble.n	800c810 <_strtoul_l.constprop.0+0xa8>
 800c7ca:	2f00      	cmp	r7, #0
 800c7cc:	db1d      	blt.n	800c80a <_strtoul_l.constprop.0+0xa2>
 800c7ce:	4580      	cmp	r8, r0
 800c7d0:	d31b      	bcc.n	800c80a <_strtoul_l.constprop.0+0xa2>
 800c7d2:	d101      	bne.n	800c7d8 <_strtoul_l.constprop.0+0x70>
 800c7d4:	45a1      	cmp	r9, r4
 800c7d6:	db18      	blt.n	800c80a <_strtoul_l.constprop.0+0xa2>
 800c7d8:	fb00 4003 	mla	r0, r0, r3, r4
 800c7dc:	2701      	movs	r7, #1
 800c7de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7e2:	e7ea      	b.n	800c7ba <_strtoul_l.constprop.0+0x52>
 800c7e4:	2c2b      	cmp	r4, #43	; 0x2b
 800c7e6:	bf04      	itt	eq
 800c7e8:	782c      	ldrbeq	r4, [r5, #0]
 800c7ea:	1c85      	addeq	r5, r0, #2
 800c7ec:	e7cd      	b.n	800c78a <_strtoul_l.constprop.0+0x22>
 800c7ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c7f2:	f1bc 0f19 	cmp.w	ip, #25
 800c7f6:	d801      	bhi.n	800c7fc <_strtoul_l.constprop.0+0x94>
 800c7f8:	3c37      	subs	r4, #55	; 0x37
 800c7fa:	e7e4      	b.n	800c7c6 <_strtoul_l.constprop.0+0x5e>
 800c7fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c800:	f1bc 0f19 	cmp.w	ip, #25
 800c804:	d804      	bhi.n	800c810 <_strtoul_l.constprop.0+0xa8>
 800c806:	3c57      	subs	r4, #87	; 0x57
 800c808:	e7dd      	b.n	800c7c6 <_strtoul_l.constprop.0+0x5e>
 800c80a:	f04f 37ff 	mov.w	r7, #4294967295
 800c80e:	e7e6      	b.n	800c7de <_strtoul_l.constprop.0+0x76>
 800c810:	2f00      	cmp	r7, #0
 800c812:	da07      	bge.n	800c824 <_strtoul_l.constprop.0+0xbc>
 800c814:	2322      	movs	r3, #34	; 0x22
 800c816:	f8ce 3000 	str.w	r3, [lr]
 800c81a:	f04f 30ff 	mov.w	r0, #4294967295
 800c81e:	b932      	cbnz	r2, 800c82e <_strtoul_l.constprop.0+0xc6>
 800c820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c824:	b106      	cbz	r6, 800c828 <_strtoul_l.constprop.0+0xc0>
 800c826:	4240      	negs	r0, r0
 800c828:	2a00      	cmp	r2, #0
 800c82a:	d0f9      	beq.n	800c820 <_strtoul_l.constprop.0+0xb8>
 800c82c:	b107      	cbz	r7, 800c830 <_strtoul_l.constprop.0+0xc8>
 800c82e:	1e69      	subs	r1, r5, #1
 800c830:	6011      	str	r1, [r2, #0]
 800c832:	e7f5      	b.n	800c820 <_strtoul_l.constprop.0+0xb8>
 800c834:	2430      	movs	r4, #48	; 0x30
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1b5      	bne.n	800c7a6 <_strtoul_l.constprop.0+0x3e>
 800c83a:	2308      	movs	r3, #8
 800c83c:	e7b3      	b.n	800c7a6 <_strtoul_l.constprop.0+0x3e>
 800c83e:	2c30      	cmp	r4, #48	; 0x30
 800c840:	d0a9      	beq.n	800c796 <_strtoul_l.constprop.0+0x2e>
 800c842:	230a      	movs	r3, #10
 800c844:	e7af      	b.n	800c7a6 <_strtoul_l.constprop.0+0x3e>
 800c846:	bf00      	nop
 800c848:	0800cc89 	.word	0x0800cc89

0800c84c <_strtoul_r>:
 800c84c:	f7ff bf8c 	b.w	800c768 <_strtoul_l.constprop.0>

0800c850 <__submore>:
 800c850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c854:	460c      	mov	r4, r1
 800c856:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c85c:	4299      	cmp	r1, r3
 800c85e:	d11d      	bne.n	800c89c <__submore+0x4c>
 800c860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c864:	f7fb f876 	bl	8007954 <_malloc_r>
 800c868:	b918      	cbnz	r0, 800c872 <__submore+0x22>
 800c86a:	f04f 30ff 	mov.w	r0, #4294967295
 800c86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c876:	63a3      	str	r3, [r4, #56]	; 0x38
 800c878:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c87c:	6360      	str	r0, [r4, #52]	; 0x34
 800c87e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c882:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c886:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c88a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c88e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c892:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c896:	6020      	str	r0, [r4, #0]
 800c898:	2000      	movs	r0, #0
 800c89a:	e7e8      	b.n	800c86e <__submore+0x1e>
 800c89c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c89e:	0077      	lsls	r7, r6, #1
 800c8a0:	463a      	mov	r2, r7
 800c8a2:	f000 f889 	bl	800c9b8 <_realloc_r>
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d0de      	beq.n	800c86a <__submore+0x1a>
 800c8ac:	eb00 0806 	add.w	r8, r0, r6
 800c8b0:	4601      	mov	r1, r0
 800c8b2:	4632      	mov	r2, r6
 800c8b4:	4640      	mov	r0, r8
 800c8b6:	f7fa ffcb 	bl	8007850 <memcpy>
 800c8ba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c8be:	f8c4 8000 	str.w	r8, [r4]
 800c8c2:	e7e9      	b.n	800c898 <__submore+0x48>

0800c8c4 <__ascii_wctomb>:
 800c8c4:	b149      	cbz	r1, 800c8da <__ascii_wctomb+0x16>
 800c8c6:	2aff      	cmp	r2, #255	; 0xff
 800c8c8:	bf85      	ittet	hi
 800c8ca:	238a      	movhi	r3, #138	; 0x8a
 800c8cc:	6003      	strhi	r3, [r0, #0]
 800c8ce:	700a      	strbls	r2, [r1, #0]
 800c8d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8d4:	bf98      	it	ls
 800c8d6:	2001      	movls	r0, #1
 800c8d8:	4770      	bx	lr
 800c8da:	4608      	mov	r0, r1
 800c8dc:	4770      	bx	lr
	...

0800c8e0 <__assert_func>:
 800c8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	4b09      	ldr	r3, [pc, #36]	; (800c90c <__assert_func+0x2c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	68d8      	ldr	r0, [r3, #12]
 800c8ee:	b14c      	cbz	r4, 800c904 <__assert_func+0x24>
 800c8f0:	4b07      	ldr	r3, [pc, #28]	; (800c910 <__assert_func+0x30>)
 800c8f2:	9100      	str	r1, [sp, #0]
 800c8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8f8:	4906      	ldr	r1, [pc, #24]	; (800c914 <__assert_func+0x34>)
 800c8fa:	462b      	mov	r3, r5
 800c8fc:	f000 f80e 	bl	800c91c <fiprintf>
 800c900:	f000 f889 	bl	800ca16 <abort>
 800c904:	4b04      	ldr	r3, [pc, #16]	; (800c918 <__assert_func+0x38>)
 800c906:	461c      	mov	r4, r3
 800c908:	e7f3      	b.n	800c8f2 <__assert_func+0x12>
 800c90a:	bf00      	nop
 800c90c:	2000000c 	.word	0x2000000c
 800c910:	0800d080 	.word	0x0800d080
 800c914:	0800d08d 	.word	0x0800d08d
 800c918:	0800d0bb 	.word	0x0800d0bb

0800c91c <fiprintf>:
 800c91c:	b40e      	push	{r1, r2, r3}
 800c91e:	b503      	push	{r0, r1, lr}
 800c920:	4601      	mov	r1, r0
 800c922:	ab03      	add	r3, sp, #12
 800c924:	4805      	ldr	r0, [pc, #20]	; (800c93c <fiprintf+0x20>)
 800c926:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92a:	6800      	ldr	r0, [r0, #0]
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	f7ff fc33 	bl	800c198 <_vfiprintf_r>
 800c932:	b002      	add	sp, #8
 800c934:	f85d eb04 	ldr.w	lr, [sp], #4
 800c938:	b003      	add	sp, #12
 800c93a:	4770      	bx	lr
 800c93c:	2000000c 	.word	0x2000000c

0800c940 <_fstat_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	; (800c960 <_fstat_r+0x20>)
 800c944:	2300      	movs	r3, #0
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	4611      	mov	r1, r2
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	f7f4 ff92 	bl	8001876 <_fstat>
 800c952:	1c43      	adds	r3, r0, #1
 800c954:	d102      	bne.n	800c95c <_fstat_r+0x1c>
 800c956:	682b      	ldr	r3, [r5, #0]
 800c958:	b103      	cbz	r3, 800c95c <_fstat_r+0x1c>
 800c95a:	6023      	str	r3, [r4, #0]
 800c95c:	bd38      	pop	{r3, r4, r5, pc}
 800c95e:	bf00      	nop
 800c960:	200007c8 	.word	0x200007c8

0800c964 <_isatty_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d06      	ldr	r5, [pc, #24]	; (800c980 <_isatty_r+0x1c>)
 800c968:	2300      	movs	r3, #0
 800c96a:	4604      	mov	r4, r0
 800c96c:	4608      	mov	r0, r1
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	f7f4 ff91 	bl	8001896 <_isatty>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d102      	bne.n	800c97e <_isatty_r+0x1a>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b103      	cbz	r3, 800c97e <_isatty_r+0x1a>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	200007c8 	.word	0x200007c8

0800c984 <memmove>:
 800c984:	4288      	cmp	r0, r1
 800c986:	b510      	push	{r4, lr}
 800c988:	eb01 0402 	add.w	r4, r1, r2
 800c98c:	d902      	bls.n	800c994 <memmove+0x10>
 800c98e:	4284      	cmp	r4, r0
 800c990:	4623      	mov	r3, r4
 800c992:	d807      	bhi.n	800c9a4 <memmove+0x20>
 800c994:	1e43      	subs	r3, r0, #1
 800c996:	42a1      	cmp	r1, r4
 800c998:	d008      	beq.n	800c9ac <memmove+0x28>
 800c99a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c99e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9a2:	e7f8      	b.n	800c996 <memmove+0x12>
 800c9a4:	4402      	add	r2, r0
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	428a      	cmp	r2, r1
 800c9aa:	d100      	bne.n	800c9ae <memmove+0x2a>
 800c9ac:	bd10      	pop	{r4, pc}
 800c9ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9b6:	e7f7      	b.n	800c9a8 <memmove+0x24>

0800c9b8 <_realloc_r>:
 800c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9bc:	4680      	mov	r8, r0
 800c9be:	4614      	mov	r4, r2
 800c9c0:	460e      	mov	r6, r1
 800c9c2:	b921      	cbnz	r1, 800c9ce <_realloc_r+0x16>
 800c9c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	f7fa bfc3 	b.w	8007954 <_malloc_r>
 800c9ce:	b92a      	cbnz	r2, 800c9dc <_realloc_r+0x24>
 800c9d0:	f7fa ff54 	bl	800787c <_free_r>
 800c9d4:	4625      	mov	r5, r4
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	f000 f822 	bl	800ca24 <_malloc_usable_size_r>
 800c9e0:	4284      	cmp	r4, r0
 800c9e2:	4607      	mov	r7, r0
 800c9e4:	d802      	bhi.n	800c9ec <_realloc_r+0x34>
 800c9e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9ea:	d812      	bhi.n	800ca12 <_realloc_r+0x5a>
 800c9ec:	4621      	mov	r1, r4
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	f7fa ffb0 	bl	8007954 <_malloc_r>
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	2800      	cmp	r0, #0
 800c9f8:	d0ed      	beq.n	800c9d6 <_realloc_r+0x1e>
 800c9fa:	42bc      	cmp	r4, r7
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4631      	mov	r1, r6
 800ca00:	bf28      	it	cs
 800ca02:	463a      	movcs	r2, r7
 800ca04:	f7fa ff24 	bl	8007850 <memcpy>
 800ca08:	4631      	mov	r1, r6
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	f7fa ff36 	bl	800787c <_free_r>
 800ca10:	e7e1      	b.n	800c9d6 <_realloc_r+0x1e>
 800ca12:	4635      	mov	r5, r6
 800ca14:	e7df      	b.n	800c9d6 <_realloc_r+0x1e>

0800ca16 <abort>:
 800ca16:	b508      	push	{r3, lr}
 800ca18:	2006      	movs	r0, #6
 800ca1a:	f000 f833 	bl	800ca84 <raise>
 800ca1e:	2001      	movs	r0, #1
 800ca20:	f7f4 feda 	bl	80017d8 <_exit>

0800ca24 <_malloc_usable_size_r>:
 800ca24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca28:	1f18      	subs	r0, r3, #4
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	bfbc      	itt	lt
 800ca2e:	580b      	ldrlt	r3, [r1, r0]
 800ca30:	18c0      	addlt	r0, r0, r3
 800ca32:	4770      	bx	lr

0800ca34 <_raise_r>:
 800ca34:	291f      	cmp	r1, #31
 800ca36:	b538      	push	{r3, r4, r5, lr}
 800ca38:	4604      	mov	r4, r0
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	d904      	bls.n	800ca48 <_raise_r+0x14>
 800ca3e:	2316      	movs	r3, #22
 800ca40:	6003      	str	r3, [r0, #0]
 800ca42:	f04f 30ff 	mov.w	r0, #4294967295
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca4a:	b112      	cbz	r2, 800ca52 <_raise_r+0x1e>
 800ca4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca50:	b94b      	cbnz	r3, 800ca66 <_raise_r+0x32>
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 f830 	bl	800cab8 <_getpid_r>
 800ca58:	462a      	mov	r2, r5
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca62:	f000 b817 	b.w	800ca94 <_kill_r>
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d00a      	beq.n	800ca80 <_raise_r+0x4c>
 800ca6a:	1c59      	adds	r1, r3, #1
 800ca6c:	d103      	bne.n	800ca76 <_raise_r+0x42>
 800ca6e:	2316      	movs	r3, #22
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	2001      	movs	r0, #1
 800ca74:	e7e7      	b.n	800ca46 <_raise_r+0x12>
 800ca76:	2400      	movs	r4, #0
 800ca78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	4798      	blx	r3
 800ca80:	2000      	movs	r0, #0
 800ca82:	e7e0      	b.n	800ca46 <_raise_r+0x12>

0800ca84 <raise>:
 800ca84:	4b02      	ldr	r3, [pc, #8]	; (800ca90 <raise+0xc>)
 800ca86:	4601      	mov	r1, r0
 800ca88:	6818      	ldr	r0, [r3, #0]
 800ca8a:	f7ff bfd3 	b.w	800ca34 <_raise_r>
 800ca8e:	bf00      	nop
 800ca90:	2000000c 	.word	0x2000000c

0800ca94 <_kill_r>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	4d07      	ldr	r5, [pc, #28]	; (800cab4 <_kill_r+0x20>)
 800ca98:	2300      	movs	r3, #0
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	f7f4 fe89 	bl	80017b8 <_kill>
 800caa6:	1c43      	adds	r3, r0, #1
 800caa8:	d102      	bne.n	800cab0 <_kill_r+0x1c>
 800caaa:	682b      	ldr	r3, [r5, #0]
 800caac:	b103      	cbz	r3, 800cab0 <_kill_r+0x1c>
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	bd38      	pop	{r3, r4, r5, pc}
 800cab2:	bf00      	nop
 800cab4:	200007c8 	.word	0x200007c8

0800cab8 <_getpid_r>:
 800cab8:	f7f4 be76 	b.w	80017a8 <_getpid>

0800cabc <_init>:
 800cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cabe:	bf00      	nop
 800cac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cac2:	bc08      	pop	{r3}
 800cac4:	469e      	mov	lr, r3
 800cac6:	4770      	bx	lr

0800cac8 <_fini>:
 800cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caca:	bf00      	nop
 800cacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cace:	bc08      	pop	{r3}
 800cad0:	469e      	mov	lr, r3
 800cad2:	4770      	bx	lr
