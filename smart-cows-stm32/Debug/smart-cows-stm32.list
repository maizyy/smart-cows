
smart-cows-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800cd58  0800cd58  0001cd58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3c4  0800d3c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3c4  0800d3c4  0001d3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3cc  0800d3cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3cc  0800d3cc  0001d3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3d0  0800d3d0  0001d3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  200001e0  0800d5b4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0800d5b4  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174c9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003465  00000000  00000000  000376d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0003bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae86  00000000  00000000  0003cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e93  00000000  00000000  00067d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001051c6  00000000  00000000  0007ebc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183d87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e4  00000000  00000000  00183dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd3c 	.word	0x0800cd3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cd3c 	.word	0x0800cd3c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <MX_ADC1_Init+0xfc>)
 800103c:	4a36      	ldr	r2, [pc, #216]	; (8001118 <MX_ADC1_Init+0x100>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_ADC1_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <MX_ADC1_Init+0xfc>)
 800105a:	2204      	movs	r2, #4
 800105c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001060:	2200      	movs	r2, #0
 8001062:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001066:	2200      	movs	r2, #0
 8001068:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_ADC1_Init+0xfc>)
 800106c:	2201      	movs	r2, #1
 800106e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_ADC1_Init+0xfc>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_ADC1_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ADC1_Init+0xfc>)
 800109c:	221c      	movs	r2, #28
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010b6:	f001 f909 	bl	80022cc <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010c0:	f000 fb18 	bl	80016f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010d0:	f002 f97a 	bl	80033c8 <HAL_ADCEx_MultiModeConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010da:	f000 fb0b 	bl	80016f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC1_Init+0x104>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010e6:	2307      	movs	r3, #7
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	237f      	movs	r3, #127	; 0x7f
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010fc:	f001 fbdc 	bl	80028b8 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8001106:	f000 faf5 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001fc 	.word	0x200001fc
 8001118:	50040000 	.word	0x50040000
 800111c:	04300002 	.word	0x04300002

08001120 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ac      	sub	sp, #176	; 0xb0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2288      	movs	r2, #136	; 0x88
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f006 fcc7 	bl	8007ad4 <memset>
  if(adcHandle->Instance==ADC1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_ADC_MspInit+0xc8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d146      	bne.n	80011de <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001154:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800115a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 32;
 8001166:	2320      	movs	r3, #32
 8001168:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fc2d 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800118c:	f000 fab2 	bl	80016f4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 8001196:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800119a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c6:	230b      	movs	r3, #11
 80011c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_ADC_MspInit+0xd0>)
 80011da:	f002 fb35 	bl	8003848 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011de:	bf00      	nop
 80011e0:	37b0      	adds	r7, #176	; 0xb0
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	50040000 	.word	0x50040000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000800 	.word	0x48000800

080011f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_GPIO_Init+0x78>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <MX_GPIO_Init+0x78>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_GPIO_Init+0x78>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_GPIO_Init+0x78>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <MX_GPIO_Init+0x78>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_GPIO_Init+0x78>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f002 fcab 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f002 faf2 	bl	8003848 <HAL_GPIO_Init>

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000

08001270 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2201      	movs	r2, #1
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001280:	4837      	ldr	r0, [pc, #220]	; (8001360 <HAL_UART_RxCpltCallback+0xf0>)
 8001282:	f004 fa9d 	bl	80057c0 <HAL_UART_Transmit>

	if(huart == &huart1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a36      	ldr	r2, [pc, #216]	; (8001364 <HAL_UART_RxCpltCallback+0xf4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d156      	bne.n	800133c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (rxData == '\r' || rxData == '\n') {
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b0d      	cmp	r3, #13
 8001294:	d003      	beq.n	800129e <HAL_UART_RxCpltCallback+0x2e>
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b0a      	cmp	r3, #10
 800129c:	d13e      	bne.n	800131c <HAL_UART_RxCpltCallback+0xac>
			if(line_length > 0) {
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d04a      	beq.n	800133c <HAL_UART_RxCpltCallback+0xcc>
				line_buffer[line_length] = '\0';
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	54d1      	strb	r1, [r2, r3]
				if(strcmp(line_buffer, JOIN_ALREADY) == 0) {
 80012b0:	492f      	ldr	r1, [pc, #188]	; (8001370 <HAL_UART_RxCpltCallback+0x100>)
 80012b2:	482e      	ldr	r0, [pc, #184]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012b4:	f7fe ff8c 	bl	80001d0 <strcmp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_UART_RxCpltCallback+0x5c>
					connectedToNetwork = true;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_UART_RxCpltCallback+0x104>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
					networkStatusReceived = true;
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_UART_RxCpltCallback+0x108>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e023      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else if(strcmp(line_buffer, NETWORK_JOINED) == 0) {
 80012cc:	492b      	ldr	r1, [pc, #172]	; (800137c <HAL_UART_RxCpltCallback+0x10c>)
 80012ce:	4827      	ldr	r0, [pc, #156]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012d0:	f7fe ff7e 	bl	80001d0 <strcmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <HAL_UART_RxCpltCallback+0x72>
					connectedToNetwork = true;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_UART_RxCpltCallback+0x104>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e018      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else if (strcmp(line_buffer, JOIN_DONE) == 0) {
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <HAL_UART_RxCpltCallback+0x110>)
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012e6:	f7fe ff73 	bl	80001d0 <strcmp>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <HAL_UART_RxCpltCallback+0x88>
					networkStatusReceived = true;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_UART_RxCpltCallback+0x108>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e00d      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else if (strcmp(line_buffer, MSG_DONE) == 0) {
 80012f8:	4922      	ldr	r1, [pc, #136]	; (8001384 <HAL_UART_RxCpltCallback+0x114>)
 80012fa:	481c      	ldr	r0, [pc, #112]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012fc:	f7fe ff68 	bl	80001d0 <strcmp>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d103      	bne.n	800130e <HAL_UART_RxCpltCallback+0x9e>
					messageDoneStatusReceived = true;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_UART_RxCpltCallback+0x118>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e002      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else {
					configStatusReceived = true;
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_UART_RxCpltCallback+0x11c>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
				}
				line_length = 0;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
			if(line_length > 0) {
 800131a:	e00f      	b.n	800133c <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else {
			if(line_length >= LINE_MAX_LENGTH) {
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b3b      	cmp	r3, #59	; 0x3b
 8001322:	d902      	bls.n	800132a <HAL_UART_RxCpltCallback+0xba>
				line_length = 0;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
			}
			line_buffer[line_length++] = rxData;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	490d      	ldr	r1, [pc, #52]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 8001332:	600a      	str	r2, [r1, #0]
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001336:	7811      	ldrb	r1, [r2, #0]
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 800133a:	54d1      	strb	r1, [r2, r3]
		}
	}

	if (huart == &huart3)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_UART_RxCpltCallback+0x120>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <HAL_UART_RxCpltCallback+0xda>
	{
		GPS_UART_Callback(&rxData);
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001346:	f006 fb0f 	bl	8007968 <GPS_UART_Callback>
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	4903      	ldr	r1, [pc, #12]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_UART_RxCpltCallback+0xf4>)
 8001350:	f004 faca 	bl	80058e8 <HAL_UART_Receive_IT>

}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000264 	.word	0x20000264
 8001360:	2000035c 	.word	0x2000035c
 8001364:	200002d8 	.word	0x200002d8
 8001368:	200002a8 	.word	0x200002a8
 800136c:	20000268 	.word	0x20000268
 8001370:	0800cd58 	.word	0x0800cd58
 8001374:	20000260 	.word	0x20000260
 8001378:	20000261 	.word	0x20000261
 800137c:	0800cd70 	.word	0x0800cd70
 8001380:	0800cd88 	.word	0x0800cd88
 8001384:	0800cd94 	.word	0x0800cd94
 8001388:	20000263 	.word	0x20000263
 800138c:	20000262 	.word	0x20000262
 8001390:	200003e0 	.word	0x200003e0

08001394 <HAL_Delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 800139c:	f000 fd80 	bl	8001ea0 <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

	if(wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d00b      	beq.n	80013c6 <HAL_Delay+0x32>
	{
		wait += (uint32_t)uwTickFreq;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_Delay+0x4c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
	}

	while((HAL_GetTick() - tickstart) < wait)
 80013ba:	e004      	b.n	80013c6 <HAL_Delay+0x32>
	{
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013bc:	2101      	movs	r1, #1
 80013be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013c2:	f002 fc13 	bl	8003bec <HAL_PWR_EnterSLEEPMode>
	while((HAL_GetTick() - tickstart) < wait)
 80013c6:	f000 fd6b 	bl	8001ea0 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d8f2      	bhi.n	80013bc <HAL_Delay+0x28>
	}
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000008 	.word	0x20000008

080013e4 <__io_putchar>:

int __io_putchar(int ch)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b0a      	cmp	r3, #10
 80013f0:	d109      	bne.n	8001406 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 80013f2:	230d      	movs	r3, #13
 80013f4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);	// 1 - lora / 2 - pc
 80013f6:	f107 010f 	add.w	r1, r7, #15
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2201      	movs	r2, #1
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <__io_putchar+0x3c>)
 8001402:	f004 f9dd 	bl	80057c0 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // 1 - lora / 2 - pc
 8001406:	1d39      	adds	r1, r7, #4
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	2201      	movs	r2, #1
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <__io_putchar+0x3c>)
 8001410:	f004 f9d6 	bl	80057c0 <HAL_UART_Transmit>
	return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002d8 	.word	0x200002d8

08001424 <sendConfigMessageToLora>:

void sendConfigMessageToLora(const char* msg)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	configStatusReceived = false;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <sendConfigMessageToLora+0x34>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
	printf(msg);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f007 f9d0 	bl	80087d8 <iprintf>
	while(!configStatusReceived){
 8001438:	bf00      	nop
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <sendConfigMessageToLora+0x34>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f8      	bne.n	800143a <sendConfigMessageToLora+0x16>
	}
	configStatusReceived = false;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <sendConfigMessageToLora+0x34>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000262 	.word	0x20000262

0800145c <sendJoinRequestToLora>:

void sendJoinRequestToLora()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	printf("AT+JOIN\r\n");
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <sendJoinRequestToLora+0x24>)
 8001462:	f007 fa3f 	bl	80088e4 <puts>
	while(!networkStatusReceived){
 8001466:	bf00      	nop
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <sendJoinRequestToLora+0x28>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f083 0301 	eor.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f8      	bne.n	8001468 <sendJoinRequestToLora+0xc>
	}
	networkStatusReceived = false;
 8001476:	4b03      	ldr	r3, [pc, #12]	; (8001484 <sendJoinRequestToLora+0x28>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	0800cda0 	.word	0x0800cda0
 8001484:	20000261 	.word	0x20000261

08001488 <goToDeepSleep>:

void goToDeepSleep() {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	  sendConfigMessageToLora("AT+LOWPOWER=AUTOON\r\n");
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <goToDeepSleep+0x24>)
 800148e:	f7ff ffc9 	bl	8001424 <sendConfigMessageToLora>
	  HAL_Delay(10);
 8001492:	200a      	movs	r0, #10
 8001494:	f7ff ff7e 	bl	8001394 <HAL_Delay>
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, TIME_SLEEP, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001498:	2204      	movs	r2, #4
 800149a:	2114      	movs	r1, #20
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <goToDeepSleep+0x28>)
 800149e:	f004 f87d 	bl	800559c <HAL_RTCEx_SetWakeUpTimer_IT>
	  HAL_PWR_EnterSTANDBYMode();
 80014a2:	f002 fbd7 	bl	8003c54 <HAL_PWR_EnterSTANDBYMode>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	0800cdac 	.word	0x0800cdac
 80014b0:	200002b0 	.word	0x200002b0

080014b4 <connectToLora>:

void connectToLora()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	connectionRequestCounter++;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <connectToLora+0x60>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <connectToLora+0x60>)
 80014c0:	6013      	str	r3, [r2, #0]
	sendJoinRequestToLora();
 80014c2:	f7ff ffcb 	bl	800145c <sendJoinRequestToLora>

	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 80014c6:	e012      	b.n	80014ee <connectToLora+0x3a>
//		sendConfigMessageToLora("AT+ID=DevEui\r\n");
//		sendConfigMessageToLora("AT+ID=AppEui\r\n");
//		sendConfigMessageToLora("AT+LW=VER\r\n");

		sendConfigMessageToLora("AT+DR=EU868\r\n");
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <connectToLora+0x64>)
 80014ca:	f7ff ffab 	bl	8001424 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+CH=NUM,0-2\r\n");
 80014ce:	4813      	ldr	r0, [pc, #76]	; (800151c <connectToLora+0x68>)
 80014d0:	f7ff ffa8 	bl	8001424 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+MODE=LWOTAA\r\n");
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <connectToLora+0x6c>)
 80014d6:	f7ff ffa5 	bl	8001424 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+KEY=APPKEY,\"F4D4B405FF7AB3C3DF60C78F399B1E3C\"\r\n");
 80014da:	4812      	ldr	r0, [pc, #72]	; (8001524 <connectToLora+0x70>)
 80014dc:	f7ff ffa2 	bl	8001424 <sendConfigMessageToLora>
		sendJoinRequestToLora();
 80014e0:	f7ff ffbc 	bl	800145c <sendJoinRequestToLora>

		connectionRequestCounter++;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <connectToLora+0x60>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <connectToLora+0x60>)
 80014ec:	6013      	str	r3, [r2, #0]
	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <connectToLora+0x74>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f083 0301 	eor.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <connectToLora+0x50>
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <connectToLora+0x60>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b04      	cmp	r3, #4
 8001502:	dde1      	ble.n	80014c8 <connectToLora+0x14>
	}

	if(connectionRequestCounter == MAX_ATTEMPTS_CONNECTION) {
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <connectToLora+0x60>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d101      	bne.n	8001510 <connectToLora+0x5c>
		goToDeepSleep();
 800150c:	f7ff ffbc 	bl	8001488 <goToDeepSleep>
	}
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002ac 	.word	0x200002ac
 8001518:	0800cdc4 	.word	0x0800cdc4
 800151c:	0800cdd4 	.word	0x0800cdd4
 8001520:	0800cde4 	.word	0x0800cde4
 8001524:	0800cdf8 	.word	0x0800cdf8
 8001528:	20000260 	.word	0x20000260

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001530:	b08c      	sub	sp, #48	; 0x30
 8001532:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fc4b 	bl	8001dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f886 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f7ff fe5a 	bl	80011f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001540:	f000 fabe 	bl	8001ac0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001544:	f000 fa8c 	bl	8001a60 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001548:	f7ff fd66 	bl	8001018 <MX_ADC1_Init>
  MX_RTC_Init();
 800154c:	f000 f8d8 	bl	8001700 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001550:	f000 fae6 	bl	8001b20 <MX_USART3_UART_Init>
//
//  if (ds18b20_read_address(ds1) != HAL_OK) {
//    Error_Handler();
//  }

  char *str = "Wakeup from the STANDBY MODE\n";
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <main+0xf4>)
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001558:	69f8      	ldr	r0, [r7, #28]
 800155a:	f7fe fe43 	bl	80001e4 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	69f9      	ldr	r1, [r7, #28]
 8001568:	482e      	ldr	r0, [pc, #184]	; (8001624 <main+0xf8>)
 800156a:	f004 f929 	bl	80057c0 <HAL_UART_Transmit>
  battery_init(&hadc1, HAL_MAX_DELAY);
 800156e:	f04f 31ff 	mov.w	r1, #4294967295
 8001572:	482d      	ldr	r0, [pc, #180]	; (8001628 <main+0xfc>)
 8001574:	f006 f8ee 	bl	8007754 <battery_init>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	492c      	ldr	r1, [pc, #176]	; (800162c <main+0x100>)
 800157c:	482c      	ldr	r0, [pc, #176]	; (8001630 <main+0x104>)
 800157e:	f004 f9b3 	bl	80058e8 <HAL_UART_Receive_IT>

  /* Wyłączenie trybu LOW-POWER (lora) */
  HAL_Delay(1500);
 8001582:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001586:	f7ff ff05 	bl	8001394 <HAL_Delay>
  sendConfigMessageToLora("ÿÿÿÿAT+LOWPOWER=AUTOOFF\r\n");
 800158a:	482a      	ldr	r0, [pc, #168]	; (8001634 <main+0x108>)
 800158c:	f7ff ff4a 	bl	8001424 <sendConfigMessageToLora>

  connectToLora();
 8001590:	f7ff ff90 	bl	80014b4 <connectToLora>

  GPS_Init(&rxData);
 8001594:	4825      	ldr	r0, [pc, #148]	; (800162c <main+0x100>)
 8001596:	f006 f9d1 	bl	800793c <GPS_Init>
  GPS_Init(&rxData);
 800159a:	4824      	ldr	r0, [pc, #144]	; (800162c <main+0x100>)
 800159c:	f006 f9ce 	bl	800793c <GPS_Init>
//	printf("Sensor error... \r\n");
//	else
//	printf("T1 = %.1f*C\r\n", temp);


	  if(gpsDataReady)
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <main+0x10c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0fb      	beq.n	80015a0 <main+0x74>
	  {
		  /* Pomiary i wysyłanie danych do TTN */

		  float voltage = battery_getBatteryVolts();
 80015a8:	f006 f90f 	bl	80077ca <battery_getBatteryVolts>
 80015ac:	ed87 0a06 	vstr	s0, [r7, #24]
		  int batteryLevel = battery_getBatteryChargeLevel();
 80015b0:	f006 f8ea 	bl	8007788 <battery_getBatteryChargeLevel>
 80015b4:	6178      	str	r0, [r7, #20]

		  float temperature = 38;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <main+0x110>)
 80015b8:	613b      	str	r3, [r7, #16]
		  Position currentPosition;
		  GPS_getCurrentPosition(&currentPosition);
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4618      	mov	r0, r3
 80015be:	f006 fa3d 	bl	8007a3c <GPS_getCurrentPosition>

		  printf("AT+MSG=%d_%f_%f_%f\r\n", batteryLevel, temperature, currentPosition.longitude, currentPosition.latitude);
 80015c2:	6938      	ldr	r0, [r7, #16]
 80015c4:	f7fe ffd0 	bl	8000568 <__aeabi_f2d>
 80015c8:	4680      	mov	r8, r0
 80015ca:	4689      	mov	r9, r1
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffca 	bl	8000568 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffc4 	bl	8000568 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015e8:	e9cd 4500 	strd	r4, r5, [sp]
 80015ec:	4642      	mov	r2, r8
 80015ee:	464b      	mov	r3, r9
 80015f0:	6979      	ldr	r1, [r7, #20]
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <main+0x114>)
 80015f4:	f007 f8f0 	bl	80087d8 <iprintf>

		  HAL_Delay(1000);
 80015f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fc:	f7ff feca 	bl	8001394 <HAL_Delay>

		  char *str2 = "STANDBY MODE is ON\n";
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <main+0x118>)
 8001602:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7fe fded 	bl	80001e4 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <main+0xf8>)
 8001616:	f004 f8d3 	bl	80057c0 <HAL_UART_Transmit>
		  goToDeepSleep();
 800161a:	f7ff ff35 	bl	8001488 <goToDeepSleep>
	  if(gpsDataReady)
 800161e:	e7bf      	b.n	80015a0 <main+0x74>
 8001620:	0800ce2c 	.word	0x0800ce2c
 8001624:	2000035c 	.word	0x2000035c
 8001628:	200001fc 	.word	0x200001fc
 800162c:	20000264 	.word	0x20000264
 8001630:	200002d8 	.word	0x200002d8
 8001634:	0800ce4c 	.word	0x0800ce4c
 8001638:	20000798 	.word	0x20000798
 800163c:	42180000 	.word	0x42180000
 8001640:	0800ce6c 	.word	0x0800ce6c
 8001644:	0800ce84 	.word	0x0800ce84

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	; 0x58
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2244      	movs	r2, #68	; 0x44
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fa3c 	bl	8007ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800166a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800166e:	f002 fb19 	bl	8003ca4 <HAL_PWREx_ControlVoltageScaling>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001678:	f000 f83c 	bl	80016f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800167c:	f002 faa6 	bl	8003bcc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <SystemClock_Config+0xa8>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <SystemClock_Config+0xa8>)
 8001688:	f023 0318 	bic.w	r3, r3, #24
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001690:	2314      	movs	r3, #20
 8001692:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016a0:	2360      	movs	r3, #96	; 0x60
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fb97 	bl	8003de0 <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016b8:	f000 f81c 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016bc:	230f      	movs	r3, #15
 80016be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 ff5f 	bl	8004598 <HAL_RCC_ClockConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016e0:	f000 f808 	bl	80016f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016e4:	f003 fc66 	bl	8004fb4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016e8:	bf00      	nop
 80016ea:	3758      	adds	r7, #88	; 0x58
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	e7fe      	b.n	80016fc <Error_Handler+0x8>
	...

08001700 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_RTC_Init+0x48>)
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <MX_RTC_Init+0x4c>)
 8001708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_RTC_Init+0x48>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <MX_RTC_Init+0x48>)
 8001712:	227f      	movs	r2, #127	; 0x7f
 8001714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_RTC_Init+0x48>)
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_RTC_Init+0x48>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_RTC_Init+0x48>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_RTC_Init+0x48>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_RTC_Init+0x48>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_RTC_Init+0x48>)
 8001736:	f003 fe1f 	bl	8005378 <HAL_RTC_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001740:	f7ff ffd8 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002b0 	.word	0x200002b0
 800174c:	40002800 	.word	0x40002800

08001750 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0a4      	sub	sp, #144	; 0x90
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	2288      	movs	r2, #136	; 0x88
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f006 f9b7 	bl	8007ad4 <memset>
  if(rtcHandle->Instance==RTC)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_RTC_MspInit+0x6c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d120      	bne.n	80017b2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f92c 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800178e:	f7ff ffb1 	bl	80016f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RTC_MspInit+0x70>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001798:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_RTC_MspInit+0x70>)
 800179a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2003      	movs	r0, #3
 80017a8:	f001 ff99 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f001 ffb2 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3790      	adds	r7, #144	; 0x90
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40002800 	.word	0x40002800
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_MspInit+0x44>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x44>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <NMI_Handler+0x4>

08001812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <MemManage_Handler+0x4>

0800181e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <UsageFault_Handler+0x4>

0800182a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 fb0e 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <RTC_WKUP_IRQHandler+0x10>)
 8001866:	f003 ff2d 	bl	80056c4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002b0 	.word	0x200002b0

08001874 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <USART1_IRQHandler+0x10>)
 800187a:	f004 f88b 	bl	8005994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002d8 	.word	0x200002d8

08001888 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <USART2_IRQHandler+0x10>)
 800188e:	f004 f881 	bl	8005994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000035c 	.word	0x2000035c

0800189c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART3_IRQHandler+0x10>)
 80018a2:	f004 f877 	bl	8005994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200003e0 	.word	0x200003e0

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ca:	f006 f8cb 	bl	8007a64 <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
	return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit (int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018f2:	e7fe      	b.n	80018f2 <_exit+0x12>

080018f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
	}

return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e009      	b.n	8001954 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fd4b 	bl	80013e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf1      	blt.n	8001940 <_write+0x12>
	}
	return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_close>:

int _close(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	605a      	str	r2, [r3, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f006 f830 	bl	8007a64 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20018000 	.word	0x20018000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200002d4 	.word	0x200002d4
 8001a38:	20000808 	.word	0x20000808

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <MX_USART1_UART_Init+0x5c>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART1_UART_Init+0x58>)
 8001aa4:	f003 fe3e 	bl	8005724 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aae:	f7ff fe21 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002d8 	.word	0x200002d8
 8001abc:	40013800 	.word	0x40013800

08001ac0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MX_USART2_UART_Init+0x5c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART2_UART_Init+0x58>)
 8001b04:	f003 fe0e 	bl	8005724 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b0e:	f7ff fdf1 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000035c 	.word	0x2000035c
 8001b1c:	40004400 	.word	0x40004400

08001b20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <MX_USART3_UART_Init+0x5c>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART3_UART_Init+0x58>)
 8001b64:	f003 fdde 	bl	8005724 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f7ff fdc1 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200003e0 	.word	0x200003e0
 8001b7c:	40004800 	.word	0x40004800

08001b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0b0      	sub	sp, #192	; 0xc0
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9c:	2288      	movs	r2, #136	; 0x88
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f005 ff97 	bl	8007ad4 <memset>
  if(uartHandle->Instance==USART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6f      	ldr	r2, [pc, #444]	; (8001d68 <HAL_UART_MspInit+0x1e8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d145      	bne.n	8001c3c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 ff0f 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc8:	f7ff fd94 	bl	80016f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bcc:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	4a66      	ldr	r2, [pc, #408]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd8:	4b64      	ldr	r3, [pc, #400]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be0:	623b      	str	r3, [r7, #32]
 8001be2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bfc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c16:	2307      	movs	r3, #7
 8001c18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f001 fe0f 	bl	8003848 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2025      	movs	r0, #37	; 0x25
 8001c30:	f001 fd55 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c34:	2025      	movs	r0, #37	; 0x25
 8001c36:	f001 fd6e 	bl	8003716 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c3a:	e091      	b.n	8001d60 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4b      	ldr	r2, [pc, #300]	; (8001d70 <HAL_UART_MspInit+0x1f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d144      	bne.n	8001cd0 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 fec4 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001c5e:	f7ff fd49 	bl	80016f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c62:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	4a41      	ldr	r2, [pc, #260]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a3b      	ldr	r2, [pc, #236]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c92:	230c      	movs	r3, #12
 8001c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001caa:	2307      	movs	r3, #7
 8001cac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cba:	f001 fdc5 	bl	8003848 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2026      	movs	r0, #38	; 0x26
 8001cc4:	f001 fd0b 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cc8:	2026      	movs	r0, #38	; 0x26
 8001cca:	f001 fd24 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8001cce:	e047      	b.n	8001d60 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_UART_MspInit+0x1f4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d142      	bne.n	8001d60 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fe7a 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001cf2:	f7ff fcff 	bl	80016f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_UART_MspInit+0x1ec>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d26:	2330      	movs	r3, #48	; 0x30
 8001d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d3e:	2307      	movs	r3, #7
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <HAL_UART_MspInit+0x1f8>)
 8001d4c:	f001 fd7c 	bl	8003848 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	2027      	movs	r0, #39	; 0x27
 8001d56:	f001 fcc2 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d5a:	2027      	movs	r0, #39	; 0x27
 8001d5c:	f001 fcdb 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8001d60:	bf00      	nop
 8001d62:	37c0      	adds	r7, #192	; 0xc0
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40004400 	.word	0x40004400
 8001d74:	40004800 	.word	0x40004800
 8001d78:	48000800 	.word	0x48000800

08001d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d80:	f7ff fe5c 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d86:	490d      	ldr	r1, [pc, #52]	; (8001dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <LoopForever+0xe>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d9c:	4c0a      	ldr	r4, [pc, #40]	; (8001dc8 <LoopForever+0x16>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001daa:	f005 fe61 	bl	8007a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dae:	f7ff fbbd 	bl	800152c <main>

08001db2 <LoopForever>:

LoopForever:
    b LoopForever
 8001db2:	e7fe      	b.n	8001db2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001db4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001dc0:	0800d3d4 	.word	0x0800d3d4
  ldr r2, =_sbss
 8001dc4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001dc8:	20000808 	.word	0x20000808

08001dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC1_2_IRQHandler>

08001dce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f001 fc75 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dde:	200f      	movs	r0, #15
 8001de0:	f000 f80e 	bl	8001e00 <HAL_InitTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e001      	b.n	8001df4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df0:	f7ff fce8 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df4:	79fb      	ldrb	r3, [r7, #7]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_InitTick+0x6c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d023      	beq.n	8001e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_InitTick+0x70>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_InitTick+0x6c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fc81 	bl	8003732 <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d809      	bhi.n	8001e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f001 fc4b 	bl	80036de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <HAL_InitTick+0x74>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e007      	b.n	8001e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e004      	b.n	8001e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e001      	b.n	8001e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000464 	.word	0x20000464

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000464 	.word	0x20000464

08001eb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3360      	adds	r3, #96	; 0x60
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <LL_ADC_SetOffset+0x44>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f58:	bf00      	nop
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	03fff000 	.word	0x03fff000

08001f68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3360      	adds	r3, #96	; 0x60
 8001f76:	461a      	mov	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3360      	adds	r3, #96	; 0x60
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3330      	adds	r3, #48	; 0x30
 8002000:	461a      	mov	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	4413      	add	r3, r2
 800200e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	211f      	movs	r1, #31
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	f003 011f 	and.w	r1, r3, #31
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3314      	adds	r3, #20
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	0e5b      	lsrs	r3, r3, #25
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	0d1b      	lsrs	r3, r3, #20
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2107      	movs	r1, #7
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	401a      	ands	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0d1b      	lsrs	r3, r3, #20
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0318 	and.w	r3, r3, #24
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020c4:	40d9      	lsrs	r1, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	400b      	ands	r3, r1
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	0007ffff 	.word	0x0007ffff

080020e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 031f 	and.w	r3, r3, #31
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6093      	str	r3, [r2, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002158:	d101      	bne.n	800215e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800217c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002180:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021a8:	d101      	bne.n	80021ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f8:	f043 0202 	orr.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <LL_ADC_IsEnabled+0x18>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <LL_ADC_IsEnabled+0x1a>
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d101      	bne.n	800224a <LL_ADC_IsDisableOngoing+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_IsDisableOngoing+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226c:	f043 0204 	orr.w	r2, r3, #4
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b04      	cmp	r3, #4
 8002292:	d101      	bne.n	8002298 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d101      	bne.n	80022be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e136      	b.n	8002554 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7fe ff13 	bl	8001120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff19 	bl	8002144 <LL_ADC_IsDeepPowerDownEnabled>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff feff 	bl	8002120 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff34 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d115      	bne.n	800235e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff18 	bl	800216c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800233c:	4b87      	ldr	r3, [pc, #540]	; (800255c <HAL_ADC_Init+0x290>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	4a87      	ldr	r2, [pc, #540]	; (8002560 <HAL_ADC_Init+0x294>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	3301      	adds	r3, #1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002350:	e002      	b.n	8002358 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff16 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff76 	bl	8002280 <LL_ADC_REG_IsConversionOngoing>
 8002394:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 80cf 	bne.w	8002542 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80cb 	bne.w	8002542 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023b4:	f043 0202 	orr.w	r2, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff23 	bl	800220c <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d115      	bne.n	80023f8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023cc:	4865      	ldr	r0, [pc, #404]	; (8002564 <HAL_ADC_Init+0x298>)
 80023ce:	f7ff ff1d 	bl	800220c <LL_ADC_IsEnabled>
 80023d2:	4604      	mov	r4, r0
 80023d4:	4864      	ldr	r0, [pc, #400]	; (8002568 <HAL_ADC_Init+0x29c>)
 80023d6:	f7ff ff19 	bl	800220c <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	431c      	orrs	r4, r3
 80023de:	4863      	ldr	r0, [pc, #396]	; (800256c <HAL_ADC_Init+0x2a0>)
 80023e0:	f7ff ff14 	bl	800220c <LL_ADC_IsEnabled>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4323      	orrs	r3, r4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4619      	mov	r1, r3
 80023f2:	485f      	ldr	r0, [pc, #380]	; (8002570 <HAL_ADC_Init+0x2a4>)
 80023f4:	f7ff fd60 	bl	8001eb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e5b      	ldrb	r3, [r3, #25]
 80023fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002402:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002408:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800240e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d106      	bne.n	8002434 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	3b01      	subs	r3, #1
 800242c:	045b      	lsls	r3, r3, #17
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4b47      	ldr	r3, [pc, #284]	; (8002574 <HAL_ADC_Init+0x2a8>)
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	430b      	orrs	r3, r1
 8002462:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff09 	bl	8002280 <LL_ADC_REG_IsConversionOngoing>
 800246e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff16 	bl	80022a6 <LL_ADC_INJ_IsConversionOngoing>
 800247a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d13d      	bne.n	80024fe <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d13a      	bne.n	80024fe <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800248c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002494:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a4:	f023 0302 	bic.w	r3, r3, #2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	69b9      	ldr	r1, [r7, #24]
 80024ae:	430b      	orrs	r3, r1
 80024b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d118      	bne.n	80024ee <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024c6:	f023 0304 	bic.w	r3, r3, #4
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024de:	430a      	orrs	r2, r1
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	611a      	str	r2, [r3, #16]
 80024ec:	e007      	b.n	80024fe <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10c      	bne.n	8002520 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	f023 010f 	bic.w	r1, r3, #15
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
 800251e:	e007      	b.n	8002530 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 020f 	bic.w	r2, r2, #15
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	f023 0303 	bic.w	r3, r3, #3
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
 8002540:	e007      	b.n	8002552 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002552:	7ffb      	ldrb	r3, [r7, #31]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3724      	adds	r7, #36	; 0x24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	20000000 	.word	0x20000000
 8002560:	053e2d63 	.word	0x053e2d63
 8002564:	50040000 	.word	0x50040000
 8002568:	50040100 	.word	0x50040100
 800256c:	50040200 	.word	0x50040200
 8002570:	50040300 	.word	0x50040300
 8002574:	fff0c007 	.word	0xfff0c007

08002578 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002580:	4857      	ldr	r0, [pc, #348]	; (80026e0 <HAL_ADC_Start+0x168>)
 8002582:	f7ff fdb1 	bl	80020e8 <LL_ADC_GetMultimode>
 8002586:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe77 	bl	8002280 <LL_ADC_REG_IsConversionOngoing>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 809c 	bne.w	80026d2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_Start+0x30>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e097      	b.n	80026d8 <HAL_ADC_Start+0x160>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fd71 	bl	8003098 <ADC_Enable>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 8083 	bne.w	80026c8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a42      	ldr	r2, [pc, #264]	; (80026e4 <HAL_ADC_Start+0x16c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d002      	beq.n	80025e6 <HAL_ADC_Start+0x6e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e000      	b.n	80025e8 <HAL_ADC_Start+0x70>
 80025e6:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <HAL_ADC_Start+0x170>)
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d002      	beq.n	80025f6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260e:	d106      	bne.n	800261e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	f023 0206 	bic.w	r2, r3, #6
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	; 0x58
 800261c:	e002      	b.n	8002624 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	221c      	movs	r2, #28
 800262a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <HAL_ADC_Start+0x16c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d002      	beq.n	8002644 <HAL_ADC_Start+0xcc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	e000      	b.n	8002646 <HAL_ADC_Start+0xce>
 8002644:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <HAL_ADC_Start+0x170>)
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	4293      	cmp	r3, r2
 800264c:	d008      	beq.n	8002660 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d002      	beq.n	8002660 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b09      	cmp	r3, #9
 800265e:	d114      	bne.n	800268a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002676:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fde8 	bl	8002258 <LL_ADC_REG_StartConversion>
 8002688:	e025      	b.n	80026d6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <HAL_ADC_Start+0x16c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d002      	beq.n	80026a6 <HAL_ADC_Start+0x12e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e000      	b.n	80026a8 <HAL_ADC_Start+0x130>
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_ADC_Start+0x170>)
 80026a8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00f      	beq.n	80026d6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
 80026c6:	e006      	b.n	80026d6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80026d0:	e001      	b.n	80026d6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
 80026d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	50040300 	.word	0x50040300
 80026e4:	50040100 	.word	0x50040100
 80026e8:	50040000 	.word	0x50040000

080026ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f6:	4866      	ldr	r0, [pc, #408]	; (8002890 <HAL_ADC_PollForConversion+0x1a4>)
 80026f8:	f7ff fcf6 	bl	80020e8 <LL_ADC_GetMultimode>
 80026fc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b08      	cmp	r3, #8
 8002704:	d102      	bne.n	800270c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002706:	2308      	movs	r3, #8
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e02a      	b.n	8002762 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d002      	beq.n	800271e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b09      	cmp	r3, #9
 800271c:	d111      	bne.n	8002742 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0a4      	b.n	8002886 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800273c:	2304      	movs	r3, #4
 800273e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002740:	e00f      	b.n	8002762 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002742:	4853      	ldr	r0, [pc, #332]	; (8002890 <HAL_ADC_PollForConversion+0x1a4>)
 8002744:	f7ff fcde 	bl	8002104 <LL_ADC_GetMultiDMATransfer>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f043 0220 	orr.w	r2, r3, #32
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e093      	b.n	8002886 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800275e:	2304      	movs	r3, #4
 8002760:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002762:	f7ff fb9d 	bl	8001ea0 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002768:	e021      	b.n	80027ae <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d01d      	beq.n	80027ae <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002772:	f7ff fb95 	bl	8001ea0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <HAL_ADC_PollForConversion+0x9c>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d112      	bne.n	80027ae <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f043 0204 	orr.w	r2, r3, #4
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e06b      	b.n	8002886 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0d6      	beq.n	800276a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fbfc 	bl	8001fca <LL_ADC_REG_IsTriggerSourceSWStart>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01c      	beq.n	8002812 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7e5b      	ldrb	r3, [r3, #25]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d118      	bne.n	8002812 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d111      	bne.n	8002812 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_ADC_PollForConversion+0x1a8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d002      	beq.n	8002822 <HAL_ADC_PollForConversion+0x136>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	e000      	b.n	8002824 <HAL_ADC_PollForConversion+0x138>
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_ADC_PollForConversion+0x1ac>)
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	4293      	cmp	r3, r2
 800282a:	d008      	beq.n	800283e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d002      	beq.n	800283e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b09      	cmp	r3, #9
 800283c:	d104      	bne.n	8002848 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e00c      	b.n	8002862 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a11      	ldr	r2, [pc, #68]	; (8002894 <HAL_ADC_PollForConversion+0x1a8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <HAL_ADC_PollForConversion+0x16c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e000      	b.n	800285a <HAL_ADC_PollForConversion+0x16e>
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_ADC_PollForConversion+0x1ac>)
 800285a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d104      	bne.n	8002872 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2208      	movs	r2, #8
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e008      	b.n	8002884 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	220c      	movs	r2, #12
 8002882:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	50040300 	.word	0x50040300
 8002894:	50040100 	.word	0x50040100
 8002898:	50040000 	.word	0x50040000

0800289c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b0b6      	sub	sp, #216	; 0xd8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x22>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e3c7      	b.n	800306a <HAL_ADC_ConfigChannel+0x7b2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fcca 	bl	8002280 <LL_ADC_REG_IsConversionOngoing>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 83a8 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d824      	bhi.n	8002946 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	3b02      	subs	r3, #2
 8002902:	2b03      	cmp	r3, #3
 8002904:	d81b      	bhi.n	800293e <HAL_ADC_ConfigChannel+0x86>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <HAL_ADC_ConfigChannel+0x54>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002925 	.word	0x08002925
 8002914:	0800292d 	.word	0x0800292d
 8002918:	08002935 	.word	0x08002935
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	220c      	movs	r2, #12
 8002920:	605a      	str	r2, [r3, #4]
          break;
 8002922:	e011      	b.n	8002948 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2212      	movs	r2, #18
 8002928:	605a      	str	r2, [r3, #4]
          break;
 800292a:	e00d      	b.n	8002948 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2218      	movs	r2, #24
 8002930:	605a      	str	r2, [r3, #4]
          break;
 8002932:	e009      	b.n	8002948 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293a:	605a      	str	r2, [r3, #4]
          break;
 800293c:	e004      	b.n	8002948 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2206      	movs	r2, #6
 8002942:	605a      	str	r2, [r3, #4]
          break;
 8002944:	e000      	b.n	8002948 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002946:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	f7ff fb4b 	bl	8001ff0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fc8e 	bl	8002280 <LL_ADC_REG_IsConversionOngoing>
 8002964:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fc9a 	bl	80022a6 <LL_ADC_INJ_IsConversionOngoing>
 8002972:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002976:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 81a6 	bne.w	8002ccc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 81a1 	bne.w	8002ccc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	461a      	mov	r2, r3
 8002998:	f7ff fb56 	bl	8002048 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	08db      	lsrs	r3, r3, #3
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d00a      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029ce:	f7ff faa7 	bl	8001f20 <LL_ADC_SetOffset>
 80029d2:	e17b      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fac4 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x148>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fab9 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	0e9b      	lsrs	r3, r3, #26
 80029fa:	f003 021f 	and.w	r2, r3, #31
 80029fe:	e01e      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x186>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff faae 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e004      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x19e>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	e018      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x1d0>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	e004      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fa7d 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fa61 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x20e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fa56 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	0e9b      	lsrs	r3, r3, #26
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	e01e      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x24c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fa4b 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ae4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e004      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x264>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	e018      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x296>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e004      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d106      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fa1a 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2102      	movs	r1, #2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f9fe 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x2d4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f9f3 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	f003 021f 	and.w	r2, r3, #31
 8002b8a:	e01e      	b.n	8002bca <HAL_ADC_ConfigChannel+0x312>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f9e8 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e004      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x32a>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	e016      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x358>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002c02:	2320      	movs	r3, #32
 8002c04:	e004      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f9b9 	bl	8001f94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2103      	movs	r1, #3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f99d 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x396>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2103      	movs	r1, #3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f992 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	e017      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x3c6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2103      	movs	r1, #3
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f987 	bl	8001f68 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c68:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e003      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x3de>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	e011      	b.n	8002cba <HAL_ADC_ConfigChannel+0x402>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e003      	b.n	8002cba <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f964 	bl	8001f94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fa9b 	bl	800220c <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 813f 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f7ff f9d8 	bl	80020a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a8e      	ldr	r2, [pc, #568]	; (8002f30 <HAL_ADC_ConfigChannel+0x678>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	f040 8130 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10b      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x46c>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e019      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x4a0>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e003      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2b09      	cmp	r3, #9
 8002d50:	bf94      	ite	ls
 8002d52:	2301      	movls	r3, #1
 8002d54:	2300      	movhi	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d079      	beq.n	8002e50 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d107      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x4c0>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	069b      	lsls	r3, r3, #26
 8002d72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d76:	e015      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x4ec>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d90:	2320      	movs	r3, #32
 8002d92:	e003      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	069b      	lsls	r3, r3, #26
 8002da0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x50c>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	3301      	adds	r3, #1
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	e017      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x53c>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	ea42 0103 	orr.w	r1, r2, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x562>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	051b      	lsls	r3, r3, #20
 8002e18:	e018      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x594>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e003      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	e080      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x5b4>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	3301      	adds	r3, #1
 8002e64:	069b      	lsls	r3, r3, #26
 8002e66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e6a:	e015      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x5e0>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e84:	2320      	movs	r3, #32
 8002e86:	e003      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	069b      	lsls	r3, r3, #26
 8002e94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x600>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	e017      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x630>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	ea42 0103 	orr.w	r1, r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x65c>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b1e      	subs	r3, #30
 8002f0c:	051b      	lsls	r3, r3, #20
 8002f0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f12:	e01d      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x698>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	613b      	str	r3, [r7, #16]
  return result;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e005      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x684>
 8002f30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 021f 	and.w	r2, r3, #31
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	3b1e      	subs	r3, #30
 8002f4a:	051b      	lsls	r3, r3, #20
 8002f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f50:	430b      	orrs	r3, r1
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	6892      	ldr	r2, [r2, #8]
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7ff f876 	bl	8002048 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d07a      	beq.n	800305e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f68:	4843      	ldr	r0, [pc, #268]	; (8003078 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f6a:	f7fe ffcb 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 8002f6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_ADC_ConfigChannel+0x7c4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d12c      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d126      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3c      	ldr	r2, [pc, #240]	; (8003080 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x6e4>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d15d      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4834      	ldr	r0, [pc, #208]	; (8003078 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fa8:	f7fe ff99 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	4a36      	ldr	r2, [pc, #216]	; (800308c <HAL_ADC_ConfigChannel+0x7d4>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fc6:	e002      	b.n	8002fce <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f9      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd4:	e040      	b.n	8003058 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2d      	ldr	r2, [pc, #180]	; (8003090 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d118      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x75a>
 8002fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d112      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a23      	ldr	r2, [pc, #140]	; (8003080 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x748>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a22      	ldr	r2, [pc, #136]	; (8003084 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d12d      	bne.n	800305c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003008:	4619      	mov	r1, r3
 800300a:	481b      	ldr	r0, [pc, #108]	; (8003078 <HAL_ADC_ConfigChannel+0x7c0>)
 800300c:	f7fe ff67 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003010:	e024      	b.n	800305c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <HAL_ADC_ConfigChannel+0x7dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d120      	bne.n	800305e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800301c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d11a      	bne.n	800305e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <HAL_ADC_ConfigChannel+0x7c8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d115      	bne.n	800305e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800303a:	4619      	mov	r1, r3
 800303c:	480e      	ldr	r0, [pc, #56]	; (8003078 <HAL_ADC_ConfigChannel+0x7c0>)
 800303e:	f7fe ff4e 	bl	8001ede <LL_ADC_SetCommonPathInternalCh>
 8003042:	e00c      	b.n	800305e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003056:	e002      	b.n	800305e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003066:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800306a:	4618      	mov	r0, r3
 800306c:	37d8      	adds	r7, #216	; 0xd8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	80080000 	.word	0x80080000
 8003078:	50040300 	.word	0x50040300
 800307c:	c7520000 	.word	0xc7520000
 8003080:	50040000 	.word	0x50040000
 8003084:	50040200 	.word	0x50040200
 8003088:	20000000 	.word	0x20000000
 800308c:	053e2d63 	.word	0x053e2d63
 8003090:	cb840000 	.word	0xcb840000
 8003094:	80000001 	.word	0x80000001

08003098 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f8af 	bl	800220c <LL_ADC_IsEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d169      	bne.n	8003188 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <ADC_Enable+0xfc>)
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e055      	b.n	800318a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f86a 	bl	80021bc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030e8:	482b      	ldr	r0, [pc, #172]	; (8003198 <ADC_Enable+0x100>)
 80030ea:	f7fe ff0b 	bl	8001f04 <LL_ADC_GetCommonPathInternalCh>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <ADC_Enable+0x104>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <ADC_Enable+0x108>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003112:	e002      	b.n	800311a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3b01      	subs	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003120:	f7fe febe 	bl	8001ea0 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003126:	e028      	b.n	800317a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff f86d 	bl	800220c <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff f83d 	bl	80021bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003142:	f7fe fead 	bl	8001ea0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d914      	bls.n	800317a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d00d      	beq.n	800317a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d1cf      	bne.n	8003128 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	8000003f 	.word	0x8000003f
 8003198:	50040300 	.word	0x50040300
 800319c:	20000000 	.word	0x20000000
 80031a0:	053e2d63 	.word	0x053e2d63

080031a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff f83e 	bl	8002232 <LL_ADC_IsDisableOngoing>
 80031b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f825 	bl	800220c <LL_ADC_IsEnabled>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d047      	beq.n	8003258 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d144      	bne.n	8003258 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030d 	and.w	r3, r3, #13
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10c      	bne.n	80031f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe ffff 	bl	80021e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2203      	movs	r2, #3
 80031ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ee:	f7fe fe57 	bl	8001ea0 <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031f4:	e029      	b.n	800324a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e023      	b.n	800325a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003212:	f7fe fe45 	bl	8001ea0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d914      	bls.n	800324a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e007      	b.n	800325a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1dc      	bne.n	8003212 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <LL_ADC_IsEnabled>:
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <LL_ADC_IsEnabled+0x18>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <LL_ADC_IsEnabled+0x1a>
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_StartCalibration>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800329a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	609a      	str	r2, [r3, #8]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_ADC_IsCalibrationOnGoing>:
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ce:	d101      	bne.n	80032d4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d101      	bne.n	80032fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_ADCEx_Calibration_Start+0x1c>
 8003320:	2302      	movs	r3, #2
 8003322:	e04d      	b.n	80033c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff39 	bl	80031a4 <ADC_Disable>
 8003332:	4603      	mov	r3, r0
 8003334:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d136      	bne.n	80033aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003344:	f023 0302 	bic.w	r3, r3, #2
 8003348:	f043 0202 	orr.w	r2, r3, #2
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff96 	bl	8003288 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800335c:	e014      	b.n	8003388 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3301      	adds	r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800336a:	d30d      	bcc.n	8003388 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f023 0312 	bic.w	r3, r3, #18
 8003374:	f043 0210 	orr.w	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e01b      	b.n	80033c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff94 	bl	80032ba <LL_ADC_IsCalibrationOnGoing>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e2      	bne.n	800335e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f023 0303 	bic.w	r3, r3, #3
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
 80033a8:	e005      	b.n	80033b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f043 0210 	orr.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b09f      	sub	sp, #124	; 0x7c
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e093      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80033ee:	2300      	movs	r3, #0
 80033f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80033f2:	2300      	movs	r3, #0
 80033f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a47      	ldr	r2, [pc, #284]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	e001      	b.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e072      	b.n	800350e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff59 	bl	80032e2 <LL_ADC_REG_IsConversionOngoing>
 8003430:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff53 	bl	80032e2 <LL_ADC_REG_IsConversionOngoing>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d154      	bne.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003444:	2b00      	cmp	r3, #0
 8003446:	d151      	bne.n	80034ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003448:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800344a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02c      	beq.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003466:	035b      	lsls	r3, r3, #13
 8003468:	430b      	orrs	r3, r1
 800346a:	431a      	orrs	r2, r3
 800346c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003470:	4829      	ldr	r0, [pc, #164]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003472:	f7ff fef6 	bl	8003262 <LL_ADC_IsEnabled>
 8003476:	4604      	mov	r4, r0
 8003478:	4828      	ldr	r0, [pc, #160]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800347a:	f7ff fef2 	bl	8003262 <LL_ADC_IsEnabled>
 800347e:	4603      	mov	r3, r0
 8003480:	431c      	orrs	r4, r3
 8003482:	4828      	ldr	r0, [pc, #160]	; (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003484:	f7ff feed 	bl	8003262 <LL_ADC_IsEnabled>
 8003488:	4603      	mov	r3, r0
 800348a:	4323      	orrs	r3, r4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d137      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003498:	f023 030f 	bic.w	r3, r3, #15
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	6811      	ldr	r1, [r2, #0]
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	6892      	ldr	r2, [r2, #8]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ac:	e028      	b.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ba:	4817      	ldr	r0, [pc, #92]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034bc:	f7ff fed1 	bl	8003262 <LL_ADC_IsEnabled>
 80034c0:	4604      	mov	r4, r0
 80034c2:	4816      	ldr	r0, [pc, #88]	; (800351c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034c4:	f7ff fecd 	bl	8003262 <LL_ADC_IsEnabled>
 80034c8:	4603      	mov	r3, r0
 80034ca:	431c      	orrs	r4, r3
 80034cc:	4815      	ldr	r0, [pc, #84]	; (8003524 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034ce:	f7ff fec8 	bl	8003262 <LL_ADC_IsEnabled>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4323      	orrs	r3, r4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d112      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034e2:	f023 030f 	bic.w	r3, r3, #15
 80034e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ea:	e009      	b.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034fe:	e000      	b.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003500:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800350a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800350e:	4618      	mov	r0, r3
 8003510:	377c      	adds	r7, #124	; 0x7c
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}
 8003516:	bf00      	nop
 8003518:	50040000 	.word	0x50040000
 800351c:	50040100 	.word	0x50040100
 8003520:	50040300 	.word	0x50040300
 8003524:	50040200 	.word	0x50040200

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	; (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	; (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff29 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff3e 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff31 	bl	800358c <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa2 	bl	8003684 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d008      	beq.n	8003774 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2204      	movs	r2, #4
 8003766:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e022      	b.n	80037ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 020e 	bic.w	r2, r2, #14
 8003782:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	f003 021c 	and.w	r2, r3, #28
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f202 	lsl.w	r2, r1, r2
 80037a6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d005      	beq.n	80037ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2204      	movs	r2, #4
 80037e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e029      	b.n	800383e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 020e 	bic.w	r2, r2, #14
 80037f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f003 021c 	and.w	r2, r3, #28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
    }
  }
  return status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003856:	e17f      	b.n	8003b58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	4013      	ands	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8171 	beq.w	8003b52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d005      	beq.n	8003888 <HAL_GPIO_Init+0x40>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d130      	bne.n	80038ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	2203      	movs	r2, #3
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038be:	2201      	movs	r2, #1
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	091b      	lsrs	r3, r3, #4
 80038d4:	f003 0201 	and.w	r2, r3, #1
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d118      	bne.n	8003928 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038fc:	2201      	movs	r2, #1
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f003 0201 	and.w	r2, r3, #1
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b03      	cmp	r3, #3
 8003932:	d017      	beq.n	8003964 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d123      	bne.n	80039b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	6939      	ldr	r1, [r7, #16]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0203 	and.w	r2, r3, #3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80ac 	beq.w	8003b52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <HAL_GPIO_Init+0x330>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fe:	4a5e      	ldr	r2, [pc, #376]	; (8003b78 <HAL_GPIO_Init+0x330>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6613      	str	r3, [r2, #96]	; 0x60
 8003a06:	4b5c      	ldr	r3, [pc, #368]	; (8003b78 <HAL_GPIO_Init+0x330>)
 8003a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a12:	4a5a      	ldr	r2, [pc, #360]	; (8003b7c <HAL_GPIO_Init+0x334>)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a3c:	d025      	beq.n	8003a8a <HAL_GPIO_Init+0x242>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4f      	ldr	r2, [pc, #316]	; (8003b80 <HAL_GPIO_Init+0x338>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d01f      	beq.n	8003a86 <HAL_GPIO_Init+0x23e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4e      	ldr	r2, [pc, #312]	; (8003b84 <HAL_GPIO_Init+0x33c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d019      	beq.n	8003a82 <HAL_GPIO_Init+0x23a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4d      	ldr	r2, [pc, #308]	; (8003b88 <HAL_GPIO_Init+0x340>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <HAL_GPIO_Init+0x236>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4c      	ldr	r2, [pc, #304]	; (8003b8c <HAL_GPIO_Init+0x344>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00d      	beq.n	8003a7a <HAL_GPIO_Init+0x232>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4b      	ldr	r2, [pc, #300]	; (8003b90 <HAL_GPIO_Init+0x348>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <HAL_GPIO_Init+0x22e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4a      	ldr	r2, [pc, #296]	; (8003b94 <HAL_GPIO_Init+0x34c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_GPIO_Init+0x22a>
 8003a6e:	2306      	movs	r3, #6
 8003a70:	e00c      	b.n	8003a8c <HAL_GPIO_Init+0x244>
 8003a72:	2307      	movs	r3, #7
 8003a74:	e00a      	b.n	8003a8c <HAL_GPIO_Init+0x244>
 8003a76:	2305      	movs	r3, #5
 8003a78:	e008      	b.n	8003a8c <HAL_GPIO_Init+0x244>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x244>
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e004      	b.n	8003a8c <HAL_GPIO_Init+0x244>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e002      	b.n	8003a8c <HAL_GPIO_Init+0x244>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x244>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	f002 0203 	and.w	r2, r2, #3
 8003a92:	0092      	lsls	r2, r2, #2
 8003a94:	4093      	lsls	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a9c:	4937      	ldr	r1, [pc, #220]	; (8003b7c <HAL_GPIO_Init+0x334>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ace:	4a32      	ldr	r2, [pc, #200]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ad4:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af8:	4a27      	ldr	r2, [pc, #156]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003afe:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b22:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b28:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <HAL_GPIO_Init+0x350>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	3301      	adds	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f47f ae78 	bne.w	8003858 <HAL_GPIO_Init+0x10>
  }
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	48000400 	.word	0x48000400
 8003b84:	48000800 	.word	0x48000800
 8003b88:	48000c00 	.word	0x48000c00
 8003b8c:	48001000 	.word	0x48001000
 8003b90:	48001400 	.word	0x48001400
 8003b94:	48001800 	.word	0x48001800
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bac:	787b      	ldrb	r3, [r7, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40007000 	.word	0x40007000

08003bec <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_PWR_EnterSLEEPMode+0x60>)
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0a:	d10e      	bne.n	8003c2a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003c0c:	f000 f8b0 	bl	8003d70 <HAL_PWREx_DisableLowPowerRunMode>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003c16:	e016      	b.n	8003c46 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_PWR_EnterSLEEPMode+0x60>)
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c24:	d001      	beq.n	8003c2a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003c26:	f000 f893 	bl	8003d50 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003c3c:	bf30      	wfi
 8003c3e:	e002      	b.n	8003c46 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003c40:	bf40      	sev
    __WFE();
 8003c42:	bf20      	wfe
    __WFE();
 8003c44:	bf20      	wfe
  }

}
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003c62:	f043 0303 	orr.w	r3, r3, #3
 8003c66:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003c74:	bf30      	wfi
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40007000 	.word	0x40007000
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40007000 	.word	0x40007000

08003ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb2:	d130      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb4:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc0:	d038      	beq.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cca:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2232      	movs	r2, #50	; 0x32
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0c9b      	lsrs	r3, r3, #18
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce8:	e002      	b.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf0:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfc:	d102      	bne.n	8003d04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f2      	bne.n	8003cea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d10:	d110      	bne.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e00f      	b.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d007      	beq.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d2c:	4a05      	ldr	r2, [pc, #20]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40007000 	.word	0x40007000
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	431bde83 	.word	0x431bde83

08003d50 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5e:	6013      	str	r3, [r2, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40007000 	.word	0x40007000

08003d70 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d80:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2232      	movs	r2, #50	; 0x32
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9b      	lsrs	r3, r3, #18
 8003d94:	3301      	adds	r3, #1
 8003d96:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003d98:	e002      	b.n	8003da0 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dac:	d102      	bne.n	8003db4 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f2      	bne.n	8003d9a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc0:	d101      	bne.n	8003dc6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e000      	b.n	8003dc8 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	431bde83 	.word	0x431bde83

08003de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e3ca      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	4b97      	ldr	r3, [pc, #604]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dfc:	4b94      	ldr	r3, [pc, #592]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80e4 	beq.w	8003fdc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_RCC_OscConfig+0x4a>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	f040 808b 	bne.w	8003f38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 8087 	bne.w	8003f38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e2a:	4b89      	ldr	r3, [pc, #548]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x62>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e3a2      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	4b82      	ldr	r3, [pc, #520]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_RCC_OscConfig+0x7c>
 8003e52:	4b7f      	ldr	r3, [pc, #508]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5a:	e005      	b.n	8003e68 <HAL_RCC_OscConfig+0x88>
 8003e5c:	4b7c      	ldr	r3, [pc, #496]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d223      	bcs.n	8003eb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fd55 	bl	8004920 <RCC_SetFlashLatencyFromMSIRange>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e383      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e80:	4b73      	ldr	r3, [pc, #460]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a72      	ldr	r2, [pc, #456]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e86:	f043 0308 	orr.w	r3, r3, #8
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b70      	ldr	r3, [pc, #448]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	496d      	ldr	r1, [pc, #436]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e9e:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	4968      	ldr	r1, [pc, #416]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
 8003eb2:	e025      	b.n	8003f00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb4:	4b66      	ldr	r3, [pc, #408]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a65      	ldr	r2, [pc, #404]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b63      	ldr	r3, [pc, #396]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4960      	ldr	r1, [pc, #384]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	495b      	ldr	r1, [pc, #364]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fd15 	bl	8004920 <RCC_SetFlashLatencyFromMSIRange>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e343      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f00:	f000 fc4a 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b52      	ldr	r3, [pc, #328]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	4950      	ldr	r1, [pc, #320]	; (8004054 <HAL_RCC_OscConfig+0x274>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	4a4e      	ldr	r2, [pc, #312]	; (8004058 <HAL_RCC_OscConfig+0x278>)
 8003f1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f20:	4b4e      	ldr	r3, [pc, #312]	; (800405c <HAL_RCC_OscConfig+0x27c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd ff6b 	bl	8001e00 <HAL_InitTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d052      	beq.n	8003fda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	e327      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d032      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a42      	ldr	r2, [pc, #264]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd ffa8 	bl	8001ea0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f54:	f7fd ffa4 	bl	8001ea0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e310      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f66:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f72:	4b37      	ldr	r3, [pc, #220]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a36      	ldr	r2, [pc, #216]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f78:	f043 0308 	orr.w	r3, r3, #8
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4931      	ldr	r1, [pc, #196]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f90:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	492c      	ldr	r1, [pc, #176]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
 8003fa4:	e01a      	b.n	8003fdc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a29      	ldr	r2, [pc, #164]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fb2:	f7fd ff75 	bl	8001ea0 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fba:	f7fd ff71 	bl	8001ea0 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e2dd      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x1da>
 8003fd8:	e000      	b.n	8003fdc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d074      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d005      	beq.n	8003ffa <HAL_RCC_OscConfig+0x21a>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	d10e      	bne.n	8004012 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d10b      	bne.n	8004012 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d064      	beq.n	80040d0 <HAL_RCC_OscConfig+0x2f0>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d160      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e2ba      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x24a>
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e026      	b.n	8004078 <HAL_RCC_OscConfig+0x298>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004032:	d115      	bne.n	8004060 <HAL_RCC_OscConfig+0x280>
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a05      	ldr	r2, [pc, #20]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 800403a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a02      	ldr	r2, [pc, #8]	; (8004050 <HAL_RCC_OscConfig+0x270>)
 8004046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e014      	b.n	8004078 <HAL_RCC_OscConfig+0x298>
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	0800ceb8 	.word	0x0800ceb8
 8004058:	20000000 	.word	0x20000000
 800405c:	20000004 	.word	0x20000004
 8004060:	4ba0      	ldr	r3, [pc, #640]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a9f      	ldr	r2, [pc, #636]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b9d      	ldr	r3, [pc, #628]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a9c      	ldr	r2, [pc, #624]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd ff0e 	bl	8001ea0 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fd ff0a 	bl	8001ea0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e276      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800409a:	4b92      	ldr	r3, [pc, #584]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x2a8>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd fefa 	bl	8001ea0 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fd fef6 	bl	8001ea0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e262      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c2:	4b88      	ldr	r3, [pc, #544]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2d0>
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d060      	beq.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_OscConfig+0x310>
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d119      	bne.n	800411e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d116      	bne.n	800411e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f0:	4b7c      	ldr	r3, [pc, #496]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_OscConfig+0x328>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e23f      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	4973      	ldr	r1, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	e040      	b.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d023      	beq.n	800416e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004126:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6e      	ldr	r2, [pc, #440]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fd feb5 	bl	8001ea0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fd feb1 	bl	8001ea0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e21d      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800414c:	4b65      	ldr	r3, [pc, #404]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b62      	ldr	r3, [pc, #392]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	495f      	ldr	r1, [pc, #380]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
 800416c:	e018      	b.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a5c      	ldr	r2, [pc, #368]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd fe91 	bl	8001ea0 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004182:	f7fd fe8d 	bl	8001ea0 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e1f9      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f0      	bne.n	8004182 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03c      	beq.n	8004226 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01c      	beq.n	80041ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b4:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	4a4a      	ldr	r2, [pc, #296]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fe6c 	bl	8001ea0 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fd fe68 	bl	8001ea0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e1d4      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ef      	beq.n	80041cc <HAL_RCC_OscConfig+0x3ec>
 80041ec:	e01b      	b.n	8004226 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	4a3b      	ldr	r2, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fd fe4f 	bl	8001ea0 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004206:	f7fd fe4b 	bl	8001ea0 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e1b7      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004218:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ef      	bne.n	8004206 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80a6 	beq.w	8004380 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10d      	bne.n	8004260 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 800424a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424e:	6593      	str	r3, [r2, #88]	; 0x58
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425c:	2301      	movs	r3, #1
 800425e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCC_OscConfig+0x508>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d118      	bne.n	800429e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800426c:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_RCC_OscConfig+0x508>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <HAL_RCC_OscConfig+0x508>)
 8004272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004276:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004278:	f7fd fe12 	bl	8001ea0 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004280:	f7fd fe0e 	bl	8001ea0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e17a      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_RCC_OscConfig+0x508>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d108      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4d8>
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	4a0d      	ldr	r2, [pc, #52]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b6:	e029      	b.n	800430c <HAL_RCC_OscConfig+0x52c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d115      	bne.n	80042ec <HAL_RCC_OscConfig+0x50c>
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	4a03      	ldr	r2, [pc, #12]	; (80042e4 <HAL_RCC_OscConfig+0x504>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e0:	e014      	b.n	800430c <HAL_RCC_OscConfig+0x52c>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40007000 	.word	0x40007000
 80042ec:	4b9c      	ldr	r3, [pc, #624]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	4a9b      	ldr	r2, [pc, #620]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fc:	4b98      	ldr	r3, [pc, #608]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	4a97      	ldr	r2, [pc, #604]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d016      	beq.n	8004342 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd fdc4 	bl	8001ea0 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fd fdc0 	bl	8001ea0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e12a      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004332:	4b8b      	ldr	r3, [pc, #556]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ed      	beq.n	800431c <HAL_RCC_OscConfig+0x53c>
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fd fdad 	bl	8001ea0 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fd fda9 	bl	8001ea0 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e113      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004360:	4b7f      	ldr	r3, [pc, #508]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1ed      	bne.n	800434a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436e:	7ffb      	ldrb	r3, [r7, #31]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b7a      	ldr	r3, [pc, #488]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	4a79      	ldr	r2, [pc, #484]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80fe 	beq.w	8004586 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	2b02      	cmp	r3, #2
 8004390:	f040 80d0 	bne.w	8004534 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004394:	4b72      	ldr	r3, [pc, #456]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0203 	and.w	r2, r3, #3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d130      	bne.n	800440a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	3b01      	subs	r3, #1
 80043b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d127      	bne.n	800440a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d11f      	bne.n	800440a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d4:	2a07      	cmp	r2, #7
 80043d6:	bf14      	ite	ne
 80043d8:	2201      	movne	r2, #1
 80043da:	2200      	moveq	r2, #0
 80043dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043de:	4293      	cmp	r3, r2
 80043e0:	d113      	bne.n	800440a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d109      	bne.n	800440a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d06e      	beq.n	80044e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d069      	beq.n	80044e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004410:	4b53      	ldr	r3, [pc, #332]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800441c:	4b50      	ldr	r3, [pc, #320]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0ad      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800442c:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a4b      	ldr	r2, [pc, #300]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004436:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004438:	f7fd fd32 	bl	8001ea0 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004440:	f7fd fd2e 	bl	8001ea0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e09a      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004452:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800445e:	4b40      	ldr	r3, [pc, #256]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	4b40      	ldr	r3, [pc, #256]	; (8004564 <HAL_RCC_OscConfig+0x784>)
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800446e:	3a01      	subs	r2, #1
 8004470:	0112      	lsls	r2, r2, #4
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004478:	0212      	lsls	r2, r2, #8
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004480:	0852      	lsrs	r2, r2, #1
 8004482:	3a01      	subs	r2, #1
 8004484:	0552      	lsls	r2, r2, #21
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800448c:	0852      	lsrs	r2, r2, #1
 800448e:	3a01      	subs	r2, #1
 8004490:	0652      	lsls	r2, r2, #25
 8004492:	4311      	orrs	r1, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004498:	0912      	lsrs	r2, r2, #4
 800449a:	0452      	lsls	r2, r2, #17
 800449c:	430a      	orrs	r2, r1
 800449e:	4930      	ldr	r1, [pc, #192]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044a4:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044bc:	f7fd fcf0 	bl	8001ea0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fd fcec 	bl	8001ea0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e058      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044e2:	e050      	b.n	8004586 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e04f      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d148      	bne.n	8004586 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 80044fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a16      	ldr	r2, [pc, #88]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800450c:	f7fd fcc8 	bl	8001ea0 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd fcc4 	bl	8001ea0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e030      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004526:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x734>
 8004532:	e028      	b.n	8004586 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d023      	beq.n	8004582 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a08      	ldr	r2, [pc, #32]	; (8004560 <HAL_RCC_OscConfig+0x780>)
 8004540:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004546:	f7fd fcab 	bl	8001ea0 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800454c:	e00c      	b.n	8004568 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454e:	f7fd fca7 	bl	8001ea0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d905      	bls.n	8004568 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e013      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
 8004560:	40021000 	.word	0x40021000
 8004564:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCC_OscConfig+0x7b0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ec      	bne.n	800454e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_RCC_OscConfig+0x7b0>)
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	4905      	ldr	r1, [pc, #20]	; (8004590 <HAL_RCC_OscConfig+0x7b0>)
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCC_OscConfig+0x7b4>)
 800457c:	4013      	ands	r3, r2
 800457e:	60cb      	str	r3, [r1, #12]
 8004580:	e001      	b.n	8004586 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	feeefffc 	.word	0xfeeefffc

08004598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0e7      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b75      	ldr	r3, [pc, #468]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d910      	bls.n	80045dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b72      	ldr	r3, [pc, #456]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 0207 	bic.w	r2, r3, #7
 80045c2:	4970      	ldr	r1, [pc, #448]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b6e      	ldr	r3, [pc, #440]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0cf      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d908      	bls.n	800460a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f8:	4b63      	ldr	r3, [pc, #396]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4960      	ldr	r1, [pc, #384]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d04c      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b03      	cmp	r3, #3
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461e:	4b5a      	ldr	r3, [pc, #360]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d121      	bne.n	800466e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0a6      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d107      	bne.n	8004646 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004636:	4b54      	ldr	r3, [pc, #336]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d115      	bne.n	800466e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e09a      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800464e:	4b4e      	ldr	r3, [pc, #312]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e08e      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e086      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b46      	ldr	r3, [pc, #280]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4943      	ldr	r1, [pc, #268]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004680:	f7fd fc0e 	bl	8001ea0 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fd fc0a 	bl	8001ea0 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e06e      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	4b31      	ldr	r3, [pc, #196]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d208      	bcs.n	80046de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	492b      	ldr	r1, [pc, #172]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046de:	4b29      	ldr	r3, [pc, #164]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d210      	bcs.n	800470e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 0207 	bic.w	r2, r3, #7
 80046f4:	4923      	ldr	r1, [pc, #140]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fc:	4b21      	ldr	r3, [pc, #132]	; (8004784 <HAL_RCC_ClockConfig+0x1ec>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e036      	b.n	800477c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471a:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4918      	ldr	r1, [pc, #96]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4910      	ldr	r1, [pc, #64]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800474c:	f000 f824 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <HAL_RCC_ClockConfig+0x1f0>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	490b      	ldr	r1, [pc, #44]	; (800478c <HAL_RCC_ClockConfig+0x1f4>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1f8>)
 800476a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1fc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fd fb45 	bl	8001e00 <HAL_InitTick>
 8004776:	4603      	mov	r3, r0
 8004778:	72fb      	strb	r3, [r7, #11]

  return status;
 800477a:	7afb      	ldrb	r3, [r7, #11]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40022000 	.word	0x40022000
 8004788:	40021000 	.word	0x40021000
 800478c:	0800ceb8 	.word	0x0800ceb8
 8004790:	20000000 	.word	0x20000000
 8004794:	20000004 	.word	0x20000004

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a6:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b0:	4b3b      	ldr	r3, [pc, #236]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x34>
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d121      	bne.n	800480a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d11e      	bne.n	800480a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047cc:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047d8:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	e005      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047f4:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10d      	bne.n	8004820 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d102      	bne.n	8004816 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004810:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e004      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d101      	bne.n	8004820 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800481c:	4b23      	ldr	r3, [pc, #140]	; (80048ac <HAL_RCC_GetSysClockFreq+0x114>)
 800481e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d134      	bne.n	8004890 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d003      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0xa6>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d003      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0xac>
 800483c:	e005      	b.n	800484a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004840:	617b      	str	r3, [r7, #20]
      break;
 8004842:	e005      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004846:	617b      	str	r3, [r7, #20]
      break;
 8004848:	e002      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	617b      	str	r3, [r7, #20]
      break;
 800484e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	3301      	adds	r3, #1
 800485c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	fb03 f202 	mul.w	r2, r3, r2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	0e5b      	lsrs	r3, r3, #25
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	3301      	adds	r3, #1
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004890:	69bb      	ldr	r3, [r7, #24]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3724      	adds	r7, #36	; 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	0800ced0 	.word	0x0800ced0
 80048a8:	00f42400 	.word	0x00f42400
 80048ac:	007a1200 	.word	0x007a1200

080048b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048b6:	681b      	ldr	r3, [r3, #0]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000000 	.word	0x20000000

080048c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048cc:	f7ff fff0 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	4904      	ldr	r1, [pc, #16]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	0800cec8 	.word	0x0800cec8

080048f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048f8:	f7ff ffda 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0adb      	lsrs	r3, r3, #11
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4904      	ldr	r1, [pc, #16]	; (800491c <HAL_RCC_GetPCLK2Freq+0x28>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	0800cec8 	.word	0x0800cec8

08004920 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004938:	f7ff f9a6 	bl	8003c88 <HAL_PWREx_GetVoltageRange>
 800493c:	6178      	str	r0, [r7, #20]
 800493e:	e014      	b.n	800496a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	6593      	str	r3, [r2, #88]	; 0x58
 800494c:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004958:	f7ff f996 	bl	8003c88 <HAL_PWREx_GetVoltageRange>
 800495c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800495e:	4b1e      	ldr	r3, [pc, #120]	; (80049d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004968:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004970:	d10b      	bne.n	800498a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d919      	bls.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2ba0      	cmp	r3, #160	; 0xa0
 800497c:	d902      	bls.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800497e:	2302      	movs	r3, #2
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	e013      	b.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004984:	2301      	movs	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	e010      	b.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b80      	cmp	r3, #128	; 0x80
 800498e:	d902      	bls.n	8004996 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004990:	2303      	movs	r3, #3
 8004992:	613b      	str	r3, [r7, #16]
 8004994:	e00a      	b.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b80      	cmp	r3, #128	; 0x80
 800499a:	d102      	bne.n	80049a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800499c:	2302      	movs	r3, #2
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	e004      	b.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b70      	cmp	r3, #112	; 0x70
 80049a6:	d101      	bne.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049a8:	2301      	movs	r3, #1
 80049aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f023 0207 	bic.w	r2, r3, #7
 80049b4:	4909      	ldr	r1, [pc, #36]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d001      	beq.n	80049ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40022000 	.word	0x40022000

080049e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049e8:	2300      	movs	r3, #0
 80049ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ec:	2300      	movs	r3, #0
 80049ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d041      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a04:	d02a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a0a:	d824      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a10:	d008      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a16:	d81e      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a20:	d010      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a22:	e018      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a24:	4b86      	ldr	r3, [pc, #536]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a85      	ldr	r2, [pc, #532]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a30:	e015      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 facb 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a42:	e00c      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3320      	adds	r3, #32
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fbb6 	bl	80051bc <RCCEx_PLLSAI2_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a64:	4b76      	ldr	r3, [pc, #472]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a72:	4973      	ldr	r1, [pc, #460]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a7a:	e001      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d041      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a94:	d02a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a9a:	d824      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004aa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aa6:	d81e      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab0:	d010      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ab2:	e018      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ab4:	4b62      	ldr	r3, [pc, #392]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a61      	ldr	r2, [pc, #388]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ac0:	e015      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa83 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ad2:	e00c      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3320      	adds	r3, #32
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fb6e 	bl	80051bc <RCCEx_PLLSAI2_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ae4:	e003      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	74fb      	strb	r3, [r7, #19]
      break;
 8004aea:	e000      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004af4:	4b52      	ldr	r3, [pc, #328]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b02:	494f      	ldr	r1, [pc, #316]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b0a:	e001      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a0 	beq.w	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b22:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	4a40      	ldr	r2, [pc, #256]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6593      	str	r3, [r2, #88]	; 0x58
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b50:	2301      	movs	r3, #1
 8004b52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b54:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a3a      	ldr	r2, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b60:	f7fd f99e 	bl	8001ea0 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b66:	e009      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b68:	f7fd f99a 	bl	8001ea0 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d902      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	74fb      	strb	r3, [r7, #19]
        break;
 8004b7a:	e005      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b7c:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d15c      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b8e:	4b2c      	ldr	r3, [pc, #176]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01f      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d019      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bac:	4b24      	ldr	r3, [pc, #144]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	4a20      	ldr	r2, [pc, #128]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d016      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fd f959 	bl	8001ea0 <HAL_GetTick>
 8004bee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf0:	e00b      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fd f955 	bl	8001ea0 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d902      	bls.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	74fb      	strb	r3, [r7, #19]
            break;
 8004c08:	e006      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ec      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c18:	7cfb      	ldrb	r3, [r7, #19]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2e:	4904      	ldr	r1, [pc, #16]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c36:	e009      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c38:	7cfb      	ldrb	r3, [r7, #19]
 8004c3a:	74bb      	strb	r3, [r7, #18]
 8004c3c:	e006      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c3e:	bf00      	nop
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c4c:	7c7b      	ldrb	r3, [r7, #17]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d105      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c52:	4b9e      	ldr	r3, [pc, #632]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	4a9d      	ldr	r2, [pc, #628]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c6a:	4b98      	ldr	r3, [pc, #608]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f023 0203 	bic.w	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	4994      	ldr	r1, [pc, #592]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c8c:	4b8f      	ldr	r3, [pc, #572]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 020c 	bic.w	r2, r3, #12
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	498c      	ldr	r1, [pc, #560]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cae:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	4983      	ldr	r1, [pc, #524]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	497b      	ldr	r1, [pc, #492]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d00:	4972      	ldr	r1, [pc, #456]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d14:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	496a      	ldr	r1, [pc, #424]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d36:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	4961      	ldr	r1, [pc, #388]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d58:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	4959      	ldr	r1, [pc, #356]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d7a:	4b54      	ldr	r3, [pc, #336]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	4950      	ldr	r1, [pc, #320]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	4948      	ldr	r1, [pc, #288]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dbe:	4b43      	ldr	r3, [pc, #268]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	493f      	ldr	r1, [pc, #252]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d028      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de0:	4b3a      	ldr	r3, [pc, #232]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dee:	4937      	ldr	r1, [pc, #220]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0a:	60d3      	str	r3, [r2, #12]
 8004e0c:	e011      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f8d8 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e3e:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	491f      	ldr	r1, [pc, #124]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5c:	d106      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e68:	60d3      	str	r3, [r2, #12]
 8004e6a:	e011      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f8a9 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02b      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eaa:	4908      	ldr	r1, [pc, #32]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eba:	d109      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a02      	ldr	r2, [pc, #8]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec6:	60d3      	str	r3, [r2, #12]
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f877 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02f      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0e:	4928      	ldr	r1, [pc, #160]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1e:	d10d      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	2102      	movs	r1, #2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f854 	bl	8004fd4 <RCCEx_PLLSAI1_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d014      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
 8004f3a:	e011      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3320      	adds	r3, #32
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 f935 	bl	80051bc <RCCEx_PLLSAI2_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7a:	490d      	ldr	r1, [pc, #52]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9e:	4904      	ldr	r1, [pc, #16]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fa6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fbe:	f043 0304 	orr.w	r3, r3, #4
 8004fc2:	6013      	str	r3, [r2, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fe2:	4b75      	ldr	r3, [pc, #468]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fee:	4b72      	ldr	r3, [pc, #456]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0203 	and.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d10d      	bne.n	800501a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
       ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005006:	4b6c      	ldr	r3, [pc, #432]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
       ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d047      	beq.n	80050aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
 800501e:	e044      	b.n	80050aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d018      	beq.n	800505a <RCCEx_PLLSAI1_Config+0x86>
 8005028:	2b03      	cmp	r3, #3
 800502a:	d825      	bhi.n	8005078 <RCCEx_PLLSAI1_Config+0xa4>
 800502c:	2b01      	cmp	r3, #1
 800502e:	d002      	beq.n	8005036 <RCCEx_PLLSAI1_Config+0x62>
 8005030:	2b02      	cmp	r3, #2
 8005032:	d009      	beq.n	8005048 <RCCEx_PLLSAI1_Config+0x74>
 8005034:	e020      	b.n	8005078 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005036:	4b60      	ldr	r3, [pc, #384]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11d      	bne.n	800507e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005046:	e01a      	b.n	800507e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005048:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005050:	2b00      	cmp	r3, #0
 8005052:	d116      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005058:	e013      	b.n	8005082 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800505a:	4b57      	ldr	r3, [pc, #348]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005076:	e006      	b.n	8005086 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e004      	b.n	8005088 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005086:	bf00      	nop
    }

    if(status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	430b      	orrs	r3, r1
 80050a4:	4944      	ldr	r1, [pc, #272]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d17d      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050b0:	4b41      	ldr	r3, [pc, #260]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a40      	ldr	r2, [pc, #256]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fc fef0 	bl	8001ea0 <HAL_GetTick>
 80050c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c2:	e009      	b.n	80050d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050c4:	f7fc feec 	bl	8001ea0 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d902      	bls.n	80050d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	73fb      	strb	r3, [r7, #15]
        break;
 80050d6:	e005      	b.n	80050e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050d8:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ef      	bne.n	80050c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d160      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d111      	bne.n	8005114 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6892      	ldr	r2, [r2, #8]
 8005100:	0211      	lsls	r1, r2, #8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68d2      	ldr	r2, [r2, #12]
 8005106:	0912      	lsrs	r2, r2, #4
 8005108:	0452      	lsls	r2, r2, #17
 800510a:	430a      	orrs	r2, r1
 800510c:	492a      	ldr	r1, [pc, #168]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	610b      	str	r3, [r1, #16]
 8005112:	e027      	b.n	8005164 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d112      	bne.n	8005140 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800511a:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005122:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6892      	ldr	r2, [r2, #8]
 800512a:	0211      	lsls	r1, r2, #8
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6912      	ldr	r2, [r2, #16]
 8005130:	0852      	lsrs	r2, r2, #1
 8005132:	3a01      	subs	r2, #1
 8005134:	0552      	lsls	r2, r2, #21
 8005136:	430a      	orrs	r2, r1
 8005138:	491f      	ldr	r1, [pc, #124]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
 800513e:	e011      	b.n	8005164 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	0211      	lsls	r1, r2, #8
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6952      	ldr	r2, [r2, #20]
 8005156:	0852      	lsrs	r2, r2, #1
 8005158:	3a01      	subs	r2, #1
 800515a:	0652      	lsls	r2, r2, #25
 800515c:	430a      	orrs	r2, r1
 800515e:	4916      	ldr	r1, [pc, #88]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005160:	4313      	orrs	r3, r2
 8005162:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800516e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7fc fe96 	bl	8001ea0 <HAL_GetTick>
 8005174:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005176:	e009      	b.n	800518c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005178:	f7fc fe92 	bl	8001ea0 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d902      	bls.n	800518c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	73fb      	strb	r3, [r7, #15]
          break;
 800518a:	e005      	b.n	8005198 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ef      	beq.n	8005178 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	4904      	ldr	r1, [pc, #16]	; (80051b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000

080051bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ca:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d018      	beq.n	8005208 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051d6:	4b67      	ldr	r3, [pc, #412]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0203 	and.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d10d      	bne.n	8005202 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
       ||
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051ee:	4b61      	ldr	r3, [pc, #388]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
       ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d047      	beq.n	8005292 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
 8005206:	e044      	b.n	8005292 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d018      	beq.n	8005242 <RCCEx_PLLSAI2_Config+0x86>
 8005210:	2b03      	cmp	r3, #3
 8005212:	d825      	bhi.n	8005260 <RCCEx_PLLSAI2_Config+0xa4>
 8005214:	2b01      	cmp	r3, #1
 8005216:	d002      	beq.n	800521e <RCCEx_PLLSAI2_Config+0x62>
 8005218:	2b02      	cmp	r3, #2
 800521a:	d009      	beq.n	8005230 <RCCEx_PLLSAI2_Config+0x74>
 800521c:	e020      	b.n	8005260 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800521e:	4b55      	ldr	r3, [pc, #340]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11d      	bne.n	8005266 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522e:	e01a      	b.n	8005266 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005230:	4b50      	ldr	r3, [pc, #320]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	2b00      	cmp	r3, #0
 800523a:	d116      	bne.n	800526a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005240:	e013      	b.n	800526a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005242:	4b4c      	ldr	r3, [pc, #304]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800524e:	4b49      	ldr	r3, [pc, #292]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800525e:	e006      	b.n	800526e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	e004      	b.n	8005270 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005266:	bf00      	nop
 8005268:	e002      	b.n	8005270 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800526e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005276:	4b3f      	ldr	r3, [pc, #252]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	430b      	orrs	r3, r1
 800528c:	4939      	ldr	r1, [pc, #228]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528e:	4313      	orrs	r3, r2
 8005290:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d167      	bne.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a35      	ldr	r2, [pc, #212]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fc fdfc 	bl	8001ea0 <HAL_GetTick>
 80052a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052aa:	e009      	b.n	80052c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052ac:	f7fc fdf8 	bl	8001ea0 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d902      	bls.n	80052c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	73fb      	strb	r3, [r7, #15]
        break;
 80052be:	e005      	b.n	80052cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052c0:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ef      	bne.n	80052ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d14a      	bne.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d111      	bne.n	80052fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052d8:	4b26      	ldr	r3, [pc, #152]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	0211      	lsls	r1, r2, #8
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68d2      	ldr	r2, [r2, #12]
 80052ee:	0912      	lsrs	r2, r2, #4
 80052f0:	0452      	lsls	r2, r2, #17
 80052f2:	430a      	orrs	r2, r1
 80052f4:	491f      	ldr	r1, [pc, #124]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	614b      	str	r3, [r1, #20]
 80052fa:	e011      	b.n	8005320 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052fc:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
 800530c:	0211      	lsls	r1, r2, #8
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6912      	ldr	r2, [r2, #16]
 8005312:	0852      	lsrs	r2, r2, #1
 8005314:	3a01      	subs	r2, #1
 8005316:	0652      	lsls	r2, r2, #25
 8005318:	430a      	orrs	r2, r1
 800531a:	4916      	ldr	r1, [pc, #88]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800531c:	4313      	orrs	r3, r2
 800531e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005320:	4b14      	ldr	r3, [pc, #80]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a13      	ldr	r2, [pc, #76]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fc fdb8 	bl	8001ea0 <HAL_GetTick>
 8005330:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005332:	e009      	b.n	8005348 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005334:	f7fc fdb4 	bl	8001ea0 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d902      	bls.n	8005348 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	73fb      	strb	r3, [r7, #15]
          break;
 8005346:	e005      	b.n	8005354 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ef      	beq.n	8005334 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4904      	ldr	r1, [pc, #16]	; (8005374 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005364:	4313      	orrs	r3, r2
 8005366:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000

08005378 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06c      	beq.n	8005464 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc f9d6 	bl	8001750 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	22ca      	movs	r2, #202	; 0xca
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2253      	movs	r2, #83	; 0x53
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f87c 	bl	80054ba <RTC_EnterInitMode>
 80053c2:	4603      	mov	r3, r0
 80053c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d14b      	bne.n	8005464 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053de:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6899      	ldr	r1, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68d2      	ldr	r2, [r2, #12]
 8005406:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6919      	ldr	r1, [r3, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	041a      	lsls	r2, r3, #16
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f87f 	bl	8005520 <RTC_ExitInitMode>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d11b      	bne.n	8005464 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0203 	bic.w	r2, r2, #3
 800543a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	22ff      	movs	r2, #255	; 0xff
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005484:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005486:	f7fc fd0b 	bl	8001ea0 <HAL_GetTick>
 800548a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800548c:	e009      	b.n	80054a2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800548e:	f7fc fd07 	bl	8001ea0 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549c:	d901      	bls.n	80054a2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e007      	b.n	80054b2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0ee      	beq.n	800548e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d120      	bne.n	8005516 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295
 80054dc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80054de:	f7fc fcdf 	bl	8001ea0 <HAL_GetTick>
 80054e2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80054e4:	e00d      	b.n	8005502 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80054e6:	f7fc fcdb 	bl	8001ea0 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f4:	d905      	bls.n	8005502 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2203      	movs	r2, #3
 80054fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <RTC_EnterInitMode+0x5c>
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b03      	cmp	r3, #3
 8005514:	d1e7      	bne.n	80054e6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <RTC_ExitInitMode+0x78>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <RTC_ExitInitMode+0x78>)
 8005532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005536:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005538:	4b17      	ldr	r3, [pc, #92]	; (8005598 <RTC_ExitInitMode+0x78>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10c      	bne.n	800555e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff92 	bl	800546e <HAL_RTC_WaitForSynchro>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01e      	beq.n	800558e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2203      	movs	r2, #3
 8005554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e017      	b.n	800558e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <RTC_ExitInitMode+0x78>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <RTC_ExitInitMode+0x78>)
 8005564:	f023 0320 	bic.w	r3, r3, #32
 8005568:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ff7f 	bl	800546e <HAL_RTC_WaitForSynchro>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2203      	movs	r2, #3
 800557a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <RTC_ExitInitMode+0x78>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	4a04      	ldr	r2, [pc, #16]	; (8005598 <RTC_ExitInitMode+0x78>)
 8005588:	f043 0320 	orr.w	r3, r3, #32
 800558c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40002800 	.word	0x40002800

0800559c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e07f      	b.n	80056b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	22ca      	movs	r2, #202	; 0xca
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2253      	movs	r2, #83	; 0x53
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80055f6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d120      	bne.n	8005648 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005606:	f7fc fc4b 	bl	8001ea0 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800560c:	e015      	b.n	800563a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800560e:	f7fc fc47 	bl	8001ea0 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561c:	d90d      	bls.n	800563a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	22ff      	movs	r2, #255	; 0xff
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2203      	movs	r2, #3
 800562a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e03d      	b.n	80056b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0e2      	beq.n	800560e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 0107 	bic.w	r1, r3, #7
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005664:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800566a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800567a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40010400 	.word	0x40010400

080056c4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80056cc:	4b0f      	ldr	r3, [pc, #60]	; (800570c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80056ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056d2:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80056f2:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f80b 	bl	8005710 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40010400 	.word	0x40010400

08005710 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e040      	b.n	80057b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fa1a 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	; 0x24
 8005750:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0201 	bic.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fc18 	bl	8005f98 <UART_SetConfig>
 8005768:	4603      	mov	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e022      	b.n	80057b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fec4 	bl	8006508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800578e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800579e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 ff4b 	bl	800664c <UART_CheckIdleState>
 80057b6:	4603      	mov	r3, r0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	; 0x28
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	f040 8082 	bne.w	80058de <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_UART_Transmit+0x26>
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e07a      	b.n	80058e0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Transmit+0x38>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e073      	b.n	80058e0 <HAL_UART_Transmit+0x120>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2221      	movs	r2, #33	; 0x21
 800580c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580e:	f7fc fb47 	bl	8001ea0 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d108      	bne.n	8005840 <HAL_UART_Transmit+0x80>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e003      	b.n	8005848 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005850:	e02d      	b.n	80058ae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2200      	movs	r2, #0
 800585a:	2180      	movs	r1, #128	; 0x80
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 ff3e 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e039      	b.n	80058e0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10b      	bne.n	800588a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	881a      	ldrh	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587e:	b292      	uxth	r2, r2
 8005880:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3302      	adds	r3, #2
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e008      	b.n	800589c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b292      	uxth	r2, r2
 8005894:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3301      	adds	r3, #1
 800589a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1cb      	bne.n	8005852 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2140      	movs	r1, #64	; 0x40
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 ff0a 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e005      	b.n	80058e0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2220      	movs	r2, #32
 80058d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d142      	bne.n	8005984 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_Receive_IT+0x22>
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e03b      	b.n	8005986 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_UART_Receive_IT+0x34>
 8005918:	2302      	movs	r3, #2
 800591a:	e034      	b.n	8005986 <HAL_UART_Receive_IT+0x9e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a18      	ldr	r2, [pc, #96]	; (8005990 <HAL_UART_Receive_IT+0xa8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01f      	beq.n	8005974 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d018      	beq.n	8005974 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	613b      	str	r3, [r7, #16]
   return(result);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	623b      	str	r3, [r7, #32]
 8005962:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	69f9      	ldr	r1, [r7, #28]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	61bb      	str	r3, [r7, #24]
   return(result);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e6      	bne.n	8005942 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	461a      	mov	r2, r3
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 ff74 	bl	8006868 <UART_Start_Receive_IT>
 8005980:	4603      	mov	r3, r0
 8005982:	e000      	b.n	8005986 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3728      	adds	r7, #40	; 0x28
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40008000 	.word	0x40008000

08005994 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b0ba      	sub	sp, #232	; 0xe8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80059be:	f640 030f 	movw	r3, #2063	; 0x80f
 80059c2:	4013      	ands	r3, r2
 80059c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d115      	bne.n	80059fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 82a6 	beq.w	8005f3e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
      }
      return;
 80059fa:	e2a0      	b.n	8005f3e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80059fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8117 	beq.w	8005c34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a16:	4b85      	ldr	r3, [pc, #532]	; (8005c2c <HAL_UART_IRQHandler+0x298>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 810a 	beq.w	8005c34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d011      	beq.n	8005a50 <HAL_UART_IRQHandler+0xbc>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d011      	beq.n	8005a80 <HAL_UART_IRQHandler+0xec>
 8005a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d011      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x11c>
 8005a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aa6:	f043 0202 	orr.w	r2, r3, #2
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d017      	beq.n	8005aec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005acc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2208      	movs	r2, #8
 8005ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae2:	f043 0208 	orr.w	r2, r3, #8
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d012      	beq.n	8005b1e <HAL_UART_IRQHandler+0x18a>
 8005af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b14:	f043 0220 	orr.w	r2, r3, #32
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 820c 	beq.w	8005f42 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00d      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d04f      	beq.n	8005c16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 ff40 	bl	80069fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d141      	bne.n	8005c0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1d9      	bne.n	8005b8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d013      	beq.n	8005c06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <HAL_UART_IRQHandler+0x29c>)
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fd fdeb 	bl	80037c6 <HAL_DMA_Abort_IT>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d017      	beq.n	8005c26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005c00:	4610      	mov	r0, r2
 8005c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c04:	e00f      	b.n	8005c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f9b0 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	e00b      	b.n	8005c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9ac 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e007      	b.n	8005c26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9a8 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005c24:	e18d      	b.n	8005f42 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c26:	bf00      	nop
    return;
 8005c28:	e18b      	b.n	8005f42 <HAL_UART_IRQHandler+0x5ae>
 8005c2a:	bf00      	nop
 8005c2c:	04000120 	.word	0x04000120
 8005c30:	08006ac3 	.word	0x08006ac3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	f040 8146 	bne.w	8005eca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 813f 	beq.w	8005eca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8138 	beq.w	8005eca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2210      	movs	r2, #16
 8005c60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	f040 80b4 	bne.w	8005dda <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 815f 	beq.w	8005f46 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c92:	429a      	cmp	r2, r3
 8005c94:	f080 8157 	bcs.w	8005f46 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 8085 	bne.w	8005dbe <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ce2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1da      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e1      	bne.n	8005cfe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d44:	e853 3f00 	ldrex	r3, [r3]
 8005d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e3      	bne.n	8005d3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005da2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e4      	bne.n	8005d7e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fd fcc6 	bl	800374a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8d4 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dd8:	e0b5      	b.n	8005f46 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80a7 	beq.w	8005f4a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80a2 	beq.w	8005f4a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e28:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e30:	e841 2300 	strex	r3, r2, [r1]
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e4      	bne.n	8005e06 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3308      	adds	r3, #8
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e60:	633a      	str	r2, [r7, #48]	; 0x30
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e3      	bne.n	8005e3c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0310 	bic.w	r3, r3, #16
 8005e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	69b9      	ldr	r1, [r7, #24]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e4      	bne.n	8005e86 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f85c 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec8:	e03f      	b.n	8005f4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x560>
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005eea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 ff88 	bl	8006e02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef2:	e02d      	b.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01c      	beq.n	8005f4e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
    }
    return;
 8005f1c:	e017      	b.n	8005f4e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fdd9 	bl	8006aee <UART_EndTransmit_IT>
    return;
 8005f3c:	e008      	b.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005f3e:	bf00      	nop
 8005f40:	e006      	b.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005f42:	bf00      	nop
 8005f44:	e004      	b.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005f4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005f50:	37e8      	adds	r7, #232	; 0xe8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop

08005f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b08a      	sub	sp, #40	; 0x28
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4ba4      	ldr	r3, [pc, #656]	; (8006258 <UART_SetConfig+0x2c0>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a99      	ldr	r2, [pc, #612]	; (800625c <UART_SetConfig+0x2c4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006000:	4313      	orrs	r3, r2
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006014:	430a      	orrs	r2, r1
 8006016:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a90      	ldr	r2, [pc, #576]	; (8006260 <UART_SetConfig+0x2c8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d126      	bne.n	8006070 <UART_SetConfig+0xd8>
 8006022:	4b90      	ldr	r3, [pc, #576]	; (8006264 <UART_SetConfig+0x2cc>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	2b03      	cmp	r3, #3
 800602e:	d81b      	bhi.n	8006068 <UART_SetConfig+0xd0>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <UART_SetConfig+0xa0>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	08006049 	.word	0x08006049
 800603c:	08006059 	.word	0x08006059
 8006040:	08006051 	.word	0x08006051
 8006044:	08006061 	.word	0x08006061
 8006048:	2301      	movs	r3, #1
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604e:	e116      	b.n	800627e <UART_SetConfig+0x2e6>
 8006050:	2302      	movs	r3, #2
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e112      	b.n	800627e <UART_SetConfig+0x2e6>
 8006058:	2304      	movs	r3, #4
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e10e      	b.n	800627e <UART_SetConfig+0x2e6>
 8006060:	2308      	movs	r3, #8
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e10a      	b.n	800627e <UART_SetConfig+0x2e6>
 8006068:	2310      	movs	r3, #16
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e106      	b.n	800627e <UART_SetConfig+0x2e6>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a7c      	ldr	r2, [pc, #496]	; (8006268 <UART_SetConfig+0x2d0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d138      	bne.n	80060ec <UART_SetConfig+0x154>
 800607a:	4b7a      	ldr	r3, [pc, #488]	; (8006264 <UART_SetConfig+0x2cc>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b0c      	cmp	r3, #12
 8006086:	d82d      	bhi.n	80060e4 <UART_SetConfig+0x14c>
 8006088:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0xf8>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080060e5 	.word	0x080060e5
 8006098:	080060e5 	.word	0x080060e5
 800609c:	080060e5 	.word	0x080060e5
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080060e5 	.word	0x080060e5
 80060a8:	080060e5 	.word	0x080060e5
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	080060cd 	.word	0x080060cd
 80060b4:	080060e5 	.word	0x080060e5
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060dd 	.word	0x080060dd
 80060c4:	2300      	movs	r3, #0
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ca:	e0d8      	b.n	800627e <UART_SetConfig+0x2e6>
 80060cc:	2302      	movs	r3, #2
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d2:	e0d4      	b.n	800627e <UART_SetConfig+0x2e6>
 80060d4:	2304      	movs	r3, #4
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060da:	e0d0      	b.n	800627e <UART_SetConfig+0x2e6>
 80060dc:	2308      	movs	r3, #8
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e2:	e0cc      	b.n	800627e <UART_SetConfig+0x2e6>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ea:	e0c8      	b.n	800627e <UART_SetConfig+0x2e6>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a5e      	ldr	r2, [pc, #376]	; (800626c <UART_SetConfig+0x2d4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d125      	bne.n	8006142 <UART_SetConfig+0x1aa>
 80060f6:	4b5b      	ldr	r3, [pc, #364]	; (8006264 <UART_SetConfig+0x2cc>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006100:	2b30      	cmp	r3, #48	; 0x30
 8006102:	d016      	beq.n	8006132 <UART_SetConfig+0x19a>
 8006104:	2b30      	cmp	r3, #48	; 0x30
 8006106:	d818      	bhi.n	800613a <UART_SetConfig+0x1a2>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d00a      	beq.n	8006122 <UART_SetConfig+0x18a>
 800610c:	2b20      	cmp	r3, #32
 800610e:	d814      	bhi.n	800613a <UART_SetConfig+0x1a2>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <UART_SetConfig+0x182>
 8006114:	2b10      	cmp	r3, #16
 8006116:	d008      	beq.n	800612a <UART_SetConfig+0x192>
 8006118:	e00f      	b.n	800613a <UART_SetConfig+0x1a2>
 800611a:	2300      	movs	r3, #0
 800611c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006120:	e0ad      	b.n	800627e <UART_SetConfig+0x2e6>
 8006122:	2302      	movs	r3, #2
 8006124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006128:	e0a9      	b.n	800627e <UART_SetConfig+0x2e6>
 800612a:	2304      	movs	r3, #4
 800612c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006130:	e0a5      	b.n	800627e <UART_SetConfig+0x2e6>
 8006132:	2308      	movs	r3, #8
 8006134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006138:	e0a1      	b.n	800627e <UART_SetConfig+0x2e6>
 800613a:	2310      	movs	r3, #16
 800613c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006140:	e09d      	b.n	800627e <UART_SetConfig+0x2e6>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4a      	ldr	r2, [pc, #296]	; (8006270 <UART_SetConfig+0x2d8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d125      	bne.n	8006198 <UART_SetConfig+0x200>
 800614c:	4b45      	ldr	r3, [pc, #276]	; (8006264 <UART_SetConfig+0x2cc>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006156:	2bc0      	cmp	r3, #192	; 0xc0
 8006158:	d016      	beq.n	8006188 <UART_SetConfig+0x1f0>
 800615a:	2bc0      	cmp	r3, #192	; 0xc0
 800615c:	d818      	bhi.n	8006190 <UART_SetConfig+0x1f8>
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d00a      	beq.n	8006178 <UART_SetConfig+0x1e0>
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d814      	bhi.n	8006190 <UART_SetConfig+0x1f8>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <UART_SetConfig+0x1d8>
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d008      	beq.n	8006180 <UART_SetConfig+0x1e8>
 800616e:	e00f      	b.n	8006190 <UART_SetConfig+0x1f8>
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006176:	e082      	b.n	800627e <UART_SetConfig+0x2e6>
 8006178:	2302      	movs	r3, #2
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617e:	e07e      	b.n	800627e <UART_SetConfig+0x2e6>
 8006180:	2304      	movs	r3, #4
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006186:	e07a      	b.n	800627e <UART_SetConfig+0x2e6>
 8006188:	2308      	movs	r3, #8
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618e:	e076      	b.n	800627e <UART_SetConfig+0x2e6>
 8006190:	2310      	movs	r3, #16
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006196:	e072      	b.n	800627e <UART_SetConfig+0x2e6>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a35      	ldr	r2, [pc, #212]	; (8006274 <UART_SetConfig+0x2dc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d12a      	bne.n	80061f8 <UART_SetConfig+0x260>
 80061a2:	4b30      	ldr	r3, [pc, #192]	; (8006264 <UART_SetConfig+0x2cc>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b0:	d01a      	beq.n	80061e8 <UART_SetConfig+0x250>
 80061b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b6:	d81b      	bhi.n	80061f0 <UART_SetConfig+0x258>
 80061b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061bc:	d00c      	beq.n	80061d8 <UART_SetConfig+0x240>
 80061be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c2:	d815      	bhi.n	80061f0 <UART_SetConfig+0x258>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <UART_SetConfig+0x238>
 80061c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061cc:	d008      	beq.n	80061e0 <UART_SetConfig+0x248>
 80061ce:	e00f      	b.n	80061f0 <UART_SetConfig+0x258>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d6:	e052      	b.n	800627e <UART_SetConfig+0x2e6>
 80061d8:	2302      	movs	r3, #2
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061de:	e04e      	b.n	800627e <UART_SetConfig+0x2e6>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e6:	e04a      	b.n	800627e <UART_SetConfig+0x2e6>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ee:	e046      	b.n	800627e <UART_SetConfig+0x2e6>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f6:	e042      	b.n	800627e <UART_SetConfig+0x2e6>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a17      	ldr	r2, [pc, #92]	; (800625c <UART_SetConfig+0x2c4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d13a      	bne.n	8006278 <UART_SetConfig+0x2e0>
 8006202:	4b18      	ldr	r3, [pc, #96]	; (8006264 <UART_SetConfig+0x2cc>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800620c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006210:	d01a      	beq.n	8006248 <UART_SetConfig+0x2b0>
 8006212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006216:	d81b      	bhi.n	8006250 <UART_SetConfig+0x2b8>
 8006218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621c:	d00c      	beq.n	8006238 <UART_SetConfig+0x2a0>
 800621e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006222:	d815      	bhi.n	8006250 <UART_SetConfig+0x2b8>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <UART_SetConfig+0x298>
 8006228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622c:	d008      	beq.n	8006240 <UART_SetConfig+0x2a8>
 800622e:	e00f      	b.n	8006250 <UART_SetConfig+0x2b8>
 8006230:	2300      	movs	r3, #0
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006236:	e022      	b.n	800627e <UART_SetConfig+0x2e6>
 8006238:	2302      	movs	r3, #2
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623e:	e01e      	b.n	800627e <UART_SetConfig+0x2e6>
 8006240:	2304      	movs	r3, #4
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	e01a      	b.n	800627e <UART_SetConfig+0x2e6>
 8006248:	2308      	movs	r3, #8
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624e:	e016      	b.n	800627e <UART_SetConfig+0x2e6>
 8006250:	2310      	movs	r3, #16
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006256:	e012      	b.n	800627e <UART_SetConfig+0x2e6>
 8006258:	efff69f3 	.word	0xefff69f3
 800625c:	40008000 	.word	0x40008000
 8006260:	40013800 	.word	0x40013800
 8006264:	40021000 	.word	0x40021000
 8006268:	40004400 	.word	0x40004400
 800626c:	40004800 	.word	0x40004800
 8006270:	40004c00 	.word	0x40004c00
 8006274:	40005000 	.word	0x40005000
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a9f      	ldr	r2, [pc, #636]	; (8006500 <UART_SetConfig+0x568>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d17a      	bne.n	800637e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800628c:	2b08      	cmp	r3, #8
 800628e:	d824      	bhi.n	80062da <UART_SetConfig+0x342>
 8006290:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x300>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062db 	.word	0x080062db
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062db 	.word	0x080062db
 80062a8:	080062cb 	.word	0x080062cb
 80062ac:	080062db 	.word	0x080062db
 80062b0:	080062db 	.word	0x080062db
 80062b4:	080062db 	.word	0x080062db
 80062b8:	080062d3 	.word	0x080062d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062bc:	f7fe fb04 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 80062c0:	61f8      	str	r0, [r7, #28]
        break;
 80062c2:	e010      	b.n	80062e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c4:	4b8f      	ldr	r3, [pc, #572]	; (8006504 <UART_SetConfig+0x56c>)
 80062c6:	61fb      	str	r3, [r7, #28]
        break;
 80062c8:	e00d      	b.n	80062e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ca:	f7fe fa65 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 80062ce:	61f8      	str	r0, [r7, #28]
        break;
 80062d0:	e009      	b.n	80062e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d6:	61fb      	str	r3, [r7, #28]
        break;
 80062d8:	e005      	b.n	80062e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80fb 	beq.w	80064e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4413      	add	r3, r2
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d305      	bcc.n	800630a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	429a      	cmp	r2, r3
 8006308:	d903      	bls.n	8006312 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006310:	e0e8      	b.n	80064e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	2200      	movs	r2, #0
 8006316:	461c      	mov	r4, r3
 8006318:	4615      	mov	r5, r2
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	022b      	lsls	r3, r5, #8
 8006324:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006328:	0222      	lsls	r2, r4, #8
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	6849      	ldr	r1, [r1, #4]
 800632e:	0849      	lsrs	r1, r1, #1
 8006330:	2000      	movs	r0, #0
 8006332:	4688      	mov	r8, r1
 8006334:	4681      	mov	r9, r0
 8006336:	eb12 0a08 	adds.w	sl, r2, r8
 800633a:	eb43 0b09 	adc.w	fp, r3, r9
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634c:	4650      	mov	r0, sl
 800634e:	4659      	mov	r1, fp
 8006350:	f7fa fcaa 	bl	8000ca8 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4613      	mov	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006362:	d308      	bcc.n	8006376 <UART_SetConfig+0x3de>
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636a:	d204      	bcs.n	8006376 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	60da      	str	r2, [r3, #12]
 8006374:	e0b6      	b.n	80064e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800637c:	e0b2      	b.n	80064e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006386:	d15e      	bne.n	8006446 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800638c:	2b08      	cmp	r3, #8
 800638e:	d828      	bhi.n	80063e2 <UART_SetConfig+0x44a>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x400>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063bd 	.word	0x080063bd
 800639c:	080063c5 	.word	0x080063c5
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	080063e3 	.word	0x080063e3
 80063a8:	080063d3 	.word	0x080063d3
 80063ac:	080063e3 	.word	0x080063e3
 80063b0:	080063e3 	.word	0x080063e3
 80063b4:	080063e3 	.word	0x080063e3
 80063b8:	080063db 	.word	0x080063db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063bc:	f7fe fa84 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 80063c0:	61f8      	str	r0, [r7, #28]
        break;
 80063c2:	e014      	b.n	80063ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c4:	f7fe fa96 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 80063c8:	61f8      	str	r0, [r7, #28]
        break;
 80063ca:	e010      	b.n	80063ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063cc:	4b4d      	ldr	r3, [pc, #308]	; (8006504 <UART_SetConfig+0x56c>)
 80063ce:	61fb      	str	r3, [r7, #28]
        break;
 80063d0:	e00d      	b.n	80063ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d2:	f7fe f9e1 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 80063d6:	61f8      	str	r0, [r7, #28]
        break;
 80063d8:	e009      	b.n	80063ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063de:	61fb      	str	r3, [r7, #28]
        break;
 80063e0:	e005      	b.n	80063ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d077      	beq.n	80064e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	005a      	lsls	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	085b      	lsrs	r3, r3, #1
 80063fe:	441a      	add	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	fbb2 f3f3 	udiv	r3, r2, r3
 8006408:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b0f      	cmp	r3, #15
 800640e:	d916      	bls.n	800643e <UART_SetConfig+0x4a6>
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006416:	d212      	bcs.n	800643e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f023 030f 	bic.w	r3, r3, #15
 8006420:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	085b      	lsrs	r3, r3, #1
 8006426:	b29b      	uxth	r3, r3
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	b29a      	uxth	r2, r3
 800642e:	8afb      	ldrh	r3, [r7, #22]
 8006430:	4313      	orrs	r3, r2
 8006432:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	8afa      	ldrh	r2, [r7, #22]
 800643a:	60da      	str	r2, [r3, #12]
 800643c:	e052      	b.n	80064e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006444:	e04e      	b.n	80064e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800644a:	2b08      	cmp	r3, #8
 800644c:	d827      	bhi.n	800649e <UART_SetConfig+0x506>
 800644e:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0x4bc>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006479 	.word	0x08006479
 8006458:	08006481 	.word	0x08006481
 800645c:	08006489 	.word	0x08006489
 8006460:	0800649f 	.word	0x0800649f
 8006464:	0800648f 	.word	0x0800648f
 8006468:	0800649f 	.word	0x0800649f
 800646c:	0800649f 	.word	0x0800649f
 8006470:	0800649f 	.word	0x0800649f
 8006474:	08006497 	.word	0x08006497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006478:	f7fe fa26 	bl	80048c8 <HAL_RCC_GetPCLK1Freq>
 800647c:	61f8      	str	r0, [r7, #28]
        break;
 800647e:	e014      	b.n	80064aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006480:	f7fe fa38 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 8006484:	61f8      	str	r0, [r7, #28]
        break;
 8006486:	e010      	b.n	80064aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006488:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <UART_SetConfig+0x56c>)
 800648a:	61fb      	str	r3, [r7, #28]
        break;
 800648c:	e00d      	b.n	80064aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800648e:	f7fe f983 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8006492:	61f8      	str	r0, [r7, #28]
        break;
 8006494:	e009      	b.n	80064aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649a:	61fb      	str	r3, [r7, #28]
        break;
 800649c:	e005      	b.n	80064aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064a8:	bf00      	nop
    }

    if (pclk != 0U)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d019      	beq.n	80064e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	085a      	lsrs	r2, r3, #1
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	441a      	add	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b0f      	cmp	r3, #15
 80064c8:	d909      	bls.n	80064de <UART_SetConfig+0x546>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d0:	d205      	bcs.n	80064de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60da      	str	r2, [r3, #12]
 80064dc:	e002      	b.n	80064e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3728      	adds	r7, #40	; 0x28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064fe:	bf00      	nop
 8006500:	40008000 	.word	0x40008000
 8006504:	00f42400 	.word	0x00f42400

08006508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01a      	beq.n	800661e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006606:	d10a      	bne.n	800661e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af02      	add	r7, sp, #8
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800665c:	f7fb fc20 	bl	8001ea0 <HAL_GetTick>
 8006660:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b08      	cmp	r3, #8
 800666e:	d10e      	bne.n	800668e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f82d 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e023      	b.n	80066d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b04      	cmp	r3, #4
 800669a:	d10e      	bne.n	80066ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f817 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e00d      	b.n	80066d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b09c      	sub	sp, #112	; 0x70
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ee:	e0a5      	b.n	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	f000 80a1 	beq.w	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7fb fbd1 	bl	8001ea0 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <UART_WaitOnFlagUntilTimeout+0x32>
 800670a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800670c:	2b00      	cmp	r3, #0
 800670e:	d13e      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800671e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006724:	667b      	str	r3, [r7, #100]	; 0x64
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006730:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800673c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006762:	64ba      	str	r2, [r7, #72]	; 0x48
 8006764:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e067      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d04f      	beq.n	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067aa:	d147      	bne.n	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
 80067d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e6      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	613b      	str	r3, [r7, #16]
   return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006808:	623a      	str	r2, [r7, #32]
 800680a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	69f9      	ldr	r1, [r7, #28]
 800680e:	6a3a      	ldr	r2, [r7, #32]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	61bb      	str	r3, [r7, #24]
   return(result);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e5      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e010      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69da      	ldr	r2, [r3, #28]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	4013      	ands	r3, r2
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	429a      	cmp	r2, r3
 8006858:	f43f af4a 	beq.w	80066f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3770      	adds	r7, #112	; 0x70
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006868:	b480      	push	{r7}
 800686a:	b097      	sub	sp, #92	; 0x5c
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	4613      	mov	r3, r2
 8006874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689a:	d10e      	bne.n	80068ba <UART_Start_Receive_IT+0x52>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <UART_Start_Receive_IT+0x48>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068ae:	e02d      	b.n	800690c <UART_Start_Receive_IT+0xa4>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	22ff      	movs	r2, #255	; 0xff
 80068b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068b8:	e028      	b.n	800690c <UART_Start_Receive_IT+0xa4>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10d      	bne.n	80068de <UART_Start_Receive_IT+0x76>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <UART_Start_Receive_IT+0x6c>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068d2:	e01b      	b.n	800690c <UART_Start_Receive_IT+0xa4>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	227f      	movs	r2, #127	; 0x7f
 80068d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068dc:	e016      	b.n	800690c <UART_Start_Receive_IT+0xa4>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e6:	d10d      	bne.n	8006904 <UART_Start_Receive_IT+0x9c>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <UART_Start_Receive_IT+0x92>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	227f      	movs	r2, #127	; 0x7f
 80068f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068f8:	e008      	b.n	800690c <UART_Start_Receive_IT+0xa4>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	223f      	movs	r2, #63	; 0x3f
 80068fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006902:	e003      	b.n	800690c <UART_Start_Receive_IT+0xa4>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2222      	movs	r2, #34	; 0x22
 8006918:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	657b      	str	r3, [r7, #84]	; 0x54
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800693a:	64ba      	str	r2, [r7, #72]	; 0x48
 800693c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e5      	bne.n	800691a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006956:	d107      	bne.n	8006968 <UART_Start_Receive_IT+0x100>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d103      	bne.n	8006968 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a24      	ldr	r2, [pc, #144]	; (80069f4 <UART_Start_Receive_IT+0x18c>)
 8006964:	665a      	str	r2, [r3, #100]	; 0x64
 8006966:	e002      	b.n	800696e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <UART_Start_Receive_IT+0x190>)
 800696c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d019      	beq.n	80069b2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
 800699e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_Start_Receive_IT+0x116>
 80069b0:	e018      	b.n	80069e4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f043 0320 	orr.w	r3, r3, #32
 80069c6:	653b      	str	r3, [r7, #80]	; 0x50
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	6a3a      	ldr	r2, [r7, #32]
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e6      	bne.n	80069b2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	375c      	adds	r7, #92	; 0x5c
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	08006ca3 	.word	0x08006ca3
 80069f8:	08006b43 	.word	0x08006b43

080069fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b095      	sub	sp, #84	; 0x54
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
 8006a24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e5      	bne.n	8006a36 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d118      	bne.n	8006aa4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f023 0310 	bic.w	r3, r3, #16
 8006a86:	647b      	str	r3, [r7, #68]	; 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6979      	ldr	r1, [r7, #20]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ab6:	bf00      	nop
 8006ab8:	3754      	adds	r7, #84	; 0x54
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7ff fa43 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b088      	sub	sp, #32
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0a:	61fb      	str	r3, [r7, #28]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6979      	ldr	r1, [r7, #20]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	613b      	str	r3, [r7, #16]
   return(result);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e6      	bne.n	8006af6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff fa0f 	bl	8005f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b3a:	bf00      	nop
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b096      	sub	sp, #88	; 0x58
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b58:	2b22      	cmp	r3, #34	; 0x22
 8006b5a:	f040 8094 	bne.w	8006c86 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b6c:	b2d9      	uxtb	r1, r3
 8006b6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	400a      	ands	r2, r1
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d179      	bne.n	8006c9a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bba:	653b      	str	r3, [r7, #80]	; 0x50
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	623b      	str	r3, [r7, #32]
   return(result);
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf8:	633a      	str	r2, [r7, #48]	; 0x30
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d12e      	bne.n	8006c7e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0310 	bic.w	r3, r3, #16
 8006c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	617b      	str	r3, [r7, #20]
   return(result);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e6      	bne.n	8006c26 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d103      	bne.n	8006c6e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff f982 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c7c:	e00d      	b.n	8006c9a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fa faf6 	bl	8001270 <HAL_UART_RxCpltCallback>
}
 8006c84:	e009      	b.n	8006c9a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	8b1b      	ldrh	r3, [r3, #24]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0208 	orr.w	r2, r2, #8
 8006c96:	b292      	uxth	r2, r2
 8006c98:	831a      	strh	r2, [r3, #24]
}
 8006c9a:	bf00      	nop
 8006c9c:	3758      	adds	r7, #88	; 0x58
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b096      	sub	sp, #88	; 0x58
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb8:	2b22      	cmp	r3, #34	; 0x22
 8006cba:	f040 8094 	bne.w	8006de6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006cc4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ccc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006cd2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce2:	1c9a      	adds	r2, r3, #2
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d179      	bne.n	8006dfa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d24:	643b      	str	r3, [r7, #64]	; 0x40
 8006d26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e6      	bne.n	8006d06 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e5      	bne.n	8006d38 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d12e      	bne.n	8006dde <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 0310 	bic.w	r3, r3, #16
 8006d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6979      	ldr	r1, [r7, #20]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	613b      	str	r3, [r7, #16]
   return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e6      	bne.n	8006d86 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d103      	bne.n	8006dce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff f8d2 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ddc:	e00d      	b.n	8006dfa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fa fa46 	bl	8001270 <HAL_UART_RxCpltCallback>
}
 8006de4:	e009      	b.n	8006dfa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	8b1b      	ldrh	r3, [r3, #24]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0208 	orr.w	r2, r2, #8
 8006df6:	b292      	uxth	r2, r2
 8006df8:	831a      	strh	r2, [r3, #24]
}
 8006dfa:	bf00      	nop
 8006dfc:	3758      	adds	r7, #88	; 0x58
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <_initVoltsArray>:

/*
 * Private functions
 */

static void _initVoltsArray(void){
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
    _vs[0] = 3.200; 
 8006e1c:	49b4      	ldr	r1, [pc, #720]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e1e:	a36e      	add	r3, pc, #440	; (adr r3, 8006fd8 <_initVoltsArray+0x1c0>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	e9c1 2300 	strd	r2, r3, [r1]
    _vs[1] = 3.250; _vs[2] = 3.300; _vs[3] = 3.350; _vs[4] = 3.400; _vs[5] = 3.450;
 8006e28:	49b1      	ldr	r1, [pc, #708]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	4bb1      	ldr	r3, [pc, #708]	; (80070f4 <_initVoltsArray+0x2dc>)
 8006e30:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006e34:	49ae      	ldr	r1, [pc, #696]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e36:	a36a      	add	r3, pc, #424	; (adr r3, 8006fe0 <_initVoltsArray+0x1c8>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006e40:	49ab      	ldr	r1, [pc, #684]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e42:	a369      	add	r3, pc, #420	; (adr r3, 8006fe8 <_initVoltsArray+0x1d0>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8006e4c:	49a8      	ldr	r1, [pc, #672]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e4e:	a368      	add	r3, pc, #416	; (adr r3, 8006ff0 <_initVoltsArray+0x1d8>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8006e58:	49a5      	ldr	r1, [pc, #660]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e5a:	a367      	add	r3, pc, #412	; (adr r3, 8006ff8 <_initVoltsArray+0x1e0>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    _vs[6] = 3.500; _vs[7] = 3.550; _vs[8] = 3.600; _vs[9] = 3.650; _vs[10] = 3.700;
 8006e64:	49a2      	ldr	r1, [pc, #648]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	4ba3      	ldr	r3, [pc, #652]	; (80070f8 <_initVoltsArray+0x2e0>)
 8006e6c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8006e70:	499f      	ldr	r1, [pc, #636]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e72:	a363      	add	r3, pc, #396	; (adr r3, 8007000 <_initVoltsArray+0x1e8>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006e7c:	499c      	ldr	r1, [pc, #624]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e7e:	a362      	add	r3, pc, #392	; (adr r3, 8007008 <_initVoltsArray+0x1f0>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8006e88:	4999      	ldr	r1, [pc, #612]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e8a:	a361      	add	r3, pc, #388	; (adr r3, 8007010 <_initVoltsArray+0x1f8>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006e94:	4996      	ldr	r1, [pc, #600]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006e96:	a360      	add	r3, pc, #384	; (adr r3, 8007018 <_initVoltsArray+0x200>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    _vs[11] = 3.703; _vs[12] = 3.706; _vs[13] = 3.710; _vs[14] = 3.713; _vs[15] = 3.716;
 8006ea0:	4993      	ldr	r1, [pc, #588]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006ea2:	a35f      	add	r3, pc, #380	; (adr r3, 8007020 <_initVoltsArray+0x208>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8006eac:	4990      	ldr	r1, [pc, #576]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006eae:	a35e      	add	r3, pc, #376	; (adr r3, 8007028 <_initVoltsArray+0x210>)
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006eb8:	498d      	ldr	r1, [pc, #564]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006eba:	a35d      	add	r3, pc, #372	; (adr r3, 8007030 <_initVoltsArray+0x218>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006ec4:	498a      	ldr	r1, [pc, #552]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006ec6:	a35c      	add	r3, pc, #368	; (adr r3, 8007038 <_initVoltsArray+0x220>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006ed0:	4987      	ldr	r1, [pc, #540]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006ed2:	a35b      	add	r3, pc, #364	; (adr r3, 8007040 <_initVoltsArray+0x228>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    _vs[16] = 3.719; _vs[17] = 3.723; _vs[18] = 3.726; _vs[19] = 3.729; _vs[20] = 3.732;
 8006edc:	4984      	ldr	r1, [pc, #528]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006ede:	a35a      	add	r3, pc, #360	; (adr r3, 8007048 <_initVoltsArray+0x230>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006ee8:	4981      	ldr	r1, [pc, #516]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006eea:	a359      	add	r3, pc, #356	; (adr r3, 8007050 <_initVoltsArray+0x238>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8006ef4:	497e      	ldr	r1, [pc, #504]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006ef6:	a358      	add	r3, pc, #352	; (adr r3, 8007058 <_initVoltsArray+0x240>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8006f00:	497b      	ldr	r1, [pc, #492]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f02:	a357      	add	r3, pc, #348	; (adr r3, 8007060 <_initVoltsArray+0x248>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8006f0c:	4978      	ldr	r1, [pc, #480]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f0e:	a356      	add	r3, pc, #344	; (adr r3, 8007068 <_initVoltsArray+0x250>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    _vs[21] = 3.735; _vs[22] = 3.739; _vs[23] = 3.742; _vs[24] = 3.745; _vs[25] = 3.748;
 8006f18:	4975      	ldr	r1, [pc, #468]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f1a:	a355      	add	r3, pc, #340	; (adr r3, 8007070 <_initVoltsArray+0x258>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8006f24:	4972      	ldr	r1, [pc, #456]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f26:	a354      	add	r3, pc, #336	; (adr r3, 8007078 <_initVoltsArray+0x260>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
 8006f30:	496f      	ldr	r1, [pc, #444]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f32:	a353      	add	r3, pc, #332	; (adr r3, 8007080 <_initVoltsArray+0x268>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8006f3c:	496c      	ldr	r1, [pc, #432]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f3e:	a352      	add	r3, pc, #328	; (adr r3, 8007088 <_initVoltsArray+0x270>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8006f48:	4969      	ldr	r1, [pc, #420]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f4a:	a351      	add	r3, pc, #324	; (adr r3, 8007090 <_initVoltsArray+0x278>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    _vs[26] = 3.752; _vs[27] = 3.755; _vs[28] = 3.758; _vs[29] = 3.761; _vs[30] = 3.765;
 8006f54:	4966      	ldr	r1, [pc, #408]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f56:	a350      	add	r3, pc, #320	; (adr r3, 8007098 <_initVoltsArray+0x280>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
 8006f60:	4963      	ldr	r1, [pc, #396]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f62:	a34f      	add	r3, pc, #316	; (adr r3, 80070a0 <_initVoltsArray+0x288>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8006f6c:	4960      	ldr	r1, [pc, #384]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f6e:	a34e      	add	r3, pc, #312	; (adr r3, 80070a8 <_initVoltsArray+0x290>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8006f78:	495d      	ldr	r1, [pc, #372]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f7a:	a34d      	add	r3, pc, #308	; (adr r3, 80070b0 <_initVoltsArray+0x298>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 8006f84:	495a      	ldr	r1, [pc, #360]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f86:	a34c      	add	r3, pc, #304	; (adr r3, 80070b8 <_initVoltsArray+0x2a0>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    _vs[31] = 3.768; _vs[32] = 3.771; _vs[33] = 3.774; _vs[34] = 3.777; _vs[35] = 3.781;
 8006f90:	4957      	ldr	r1, [pc, #348]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f92:	a34b      	add	r3, pc, #300	; (adr r3, 80070c0 <_initVoltsArray+0x2a8>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8006f9c:	4954      	ldr	r1, [pc, #336]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006f9e:	a34a      	add	r3, pc, #296	; (adr r3, 80070c8 <_initVoltsArray+0x2b0>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
 8006fa8:	4951      	ldr	r1, [pc, #324]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006faa:	a349      	add	r3, pc, #292	; (adr r3, 80070d0 <_initVoltsArray+0x2b8>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 8006fb4:	494e      	ldr	r1, [pc, #312]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006fb6:	a348      	add	r3, pc, #288	; (adr r3, 80070d8 <_initVoltsArray+0x2c0>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 8006fc0:	494b      	ldr	r1, [pc, #300]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006fc2:	a347      	add	r3, pc, #284	; (adr r3, 80070e0 <_initVoltsArray+0x2c8>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    _vs[36] = 3.784; _vs[37] = 3.787; _vs[38] = 3.790; _vs[39] = 3.794; _vs[40] = 3.797;
 8006fcc:	4948      	ldr	r1, [pc, #288]	; (80070f0 <_initVoltsArray+0x2d8>)
 8006fce:	a346      	add	r3, pc, #280	; (adr r3, 80070e8 <_initVoltsArray+0x2d0>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	e092      	b.n	80070fc <_initVoltsArray+0x2e4>
 8006fd6:	bf00      	nop
 8006fd8:	9999999a 	.word	0x9999999a
 8006fdc:	40099999 	.word	0x40099999
 8006fe0:	66666666 	.word	0x66666666
 8006fe4:	400a6666 	.word	0x400a6666
 8006fe8:	cccccccd 	.word	0xcccccccd
 8006fec:	400acccc 	.word	0x400acccc
 8006ff0:	33333333 	.word	0x33333333
 8006ff4:	400b3333 	.word	0x400b3333
 8006ff8:	9999999a 	.word	0x9999999a
 8006ffc:	400b9999 	.word	0x400b9999
 8007000:	66666666 	.word	0x66666666
 8007004:	400c6666 	.word	0x400c6666
 8007008:	cccccccd 	.word	0xcccccccd
 800700c:	400ccccc 	.word	0x400ccccc
 8007010:	33333333 	.word	0x33333333
 8007014:	400d3333 	.word	0x400d3333
 8007018:	9999999a 	.word	0x9999999a
 800701c:	400d9999 	.word	0x400d9999
 8007020:	76c8b439 	.word	0x76c8b439
 8007024:	400d9fbe 	.word	0x400d9fbe
 8007028:	53f7ced9 	.word	0x53f7ced9
 800702c:	400da5e3 	.word	0x400da5e3
 8007030:	7ae147ae 	.word	0x7ae147ae
 8007034:	400dae14 	.word	0x400dae14
 8007038:	5810624e 	.word	0x5810624e
 800703c:	400db439 	.word	0x400db439
 8007040:	353f7cee 	.word	0x353f7cee
 8007044:	400dba5e 	.word	0x400dba5e
 8007048:	126e978d 	.word	0x126e978d
 800704c:	400dc083 	.word	0x400dc083
 8007050:	39581062 	.word	0x39581062
 8007054:	400dc8b4 	.word	0x400dc8b4
 8007058:	16872b02 	.word	0x16872b02
 800705c:	400dced9 	.word	0x400dced9
 8007060:	f3b645a2 	.word	0xf3b645a2
 8007064:	400dd4fd 	.word	0x400dd4fd
 8007068:	d0e56042 	.word	0xd0e56042
 800706c:	400ddb22 	.word	0x400ddb22
 8007070:	ae147ae1 	.word	0xae147ae1
 8007074:	400de147 	.word	0x400de147
 8007078:	d4fdf3b6 	.word	0xd4fdf3b6
 800707c:	400de978 	.word	0x400de978
 8007080:	b22d0e56 	.word	0xb22d0e56
 8007084:	400def9d 	.word	0x400def9d
 8007088:	8f5c28f6 	.word	0x8f5c28f6
 800708c:	400df5c2 	.word	0x400df5c2
 8007090:	6c8b4396 	.word	0x6c8b4396
 8007094:	400dfbe7 	.word	0x400dfbe7
 8007098:	9374bc6a 	.word	0x9374bc6a
 800709c:	400e0418 	.word	0x400e0418
 80070a0:	70a3d70a 	.word	0x70a3d70a
 80070a4:	400e0a3d 	.word	0x400e0a3d
 80070a8:	4dd2f1aa 	.word	0x4dd2f1aa
 80070ac:	400e1062 	.word	0x400e1062
 80070b0:	2b020c4a 	.word	0x2b020c4a
 80070b4:	400e1687 	.word	0x400e1687
 80070b8:	51eb851f 	.word	0x51eb851f
 80070bc:	400e1eb8 	.word	0x400e1eb8
 80070c0:	2f1a9fbe 	.word	0x2f1a9fbe
 80070c4:	400e24dd 	.word	0x400e24dd
 80070c8:	0c49ba5e 	.word	0x0c49ba5e
 80070cc:	400e2b02 	.word	0x400e2b02
 80070d0:	e978d4fe 	.word	0xe978d4fe
 80070d4:	400e3126 	.word	0x400e3126
 80070d8:	c6a7ef9e 	.word	0xc6a7ef9e
 80070dc:	400e374b 	.word	0x400e374b
 80070e0:	ed916873 	.word	0xed916873
 80070e4:	400e3f7c 	.word	0x400e3f7c
 80070e8:	cac08312 	.word	0xcac08312
 80070ec:	400e45a1 	.word	0x400e45a1
 80070f0:	20000468 	.word	0x20000468
 80070f4:	400a0000 	.word	0x400a0000
 80070f8:	400c0000 	.word	0x400c0000
 80070fc:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8007100:	49b5      	ldr	r1, [pc, #724]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007102:	a36d      	add	r3, pc, #436	; (adr r3, 80072b8 <_initVoltsArray+0x4a0>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
 800710c:	49b2      	ldr	r1, [pc, #712]	; (80073d8 <_initVoltsArray+0x5c0>)
 800710e:	a36c      	add	r3, pc, #432	; (adr r3, 80072c0 <_initVoltsArray+0x4a8>)
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 8007118:	49af      	ldr	r1, [pc, #700]	; (80073d8 <_initVoltsArray+0x5c0>)
 800711a:	a36b      	add	r3, pc, #428	; (adr r3, 80072c8 <_initVoltsArray+0x4b0>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 8007124:	49ac      	ldr	r1, [pc, #688]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007126:	a36a      	add	r3, pc, #424	; (adr r3, 80072d0 <_initVoltsArray+0x4b8>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    _vs[41] = 3.800; _vs[42] = 3.805; _vs[43] = 3.811; _vs[44] = 3.816; _vs[45] = 3.821;
 8007130:	49a9      	ldr	r1, [pc, #676]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007132:	a369      	add	r3, pc, #420	; (adr r3, 80072d8 <_initVoltsArray+0x4c0>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 800713c:	49a6      	ldr	r1, [pc, #664]	; (80073d8 <_initVoltsArray+0x5c0>)
 800713e:	a368      	add	r3, pc, #416	; (adr r3, 80072e0 <_initVoltsArray+0x4c8>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
 8007148:	49a3      	ldr	r1, [pc, #652]	; (80073d8 <_initVoltsArray+0x5c0>)
 800714a:	a367      	add	r3, pc, #412	; (adr r3, 80072e8 <_initVoltsArray+0x4d0>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
 8007154:	49a0      	ldr	r1, [pc, #640]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007156:	a366      	add	r3, pc, #408	; (adr r3, 80072f0 <_initVoltsArray+0x4d8>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
 8007160:	499d      	ldr	r1, [pc, #628]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007162:	a365      	add	r3, pc, #404	; (adr r3, 80072f8 <_initVoltsArray+0x4e0>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
    _vs[46] = 3.826; _vs[47] = 3.832; _vs[48] = 3.837; _vs[49] = 3.842; _vs[50] = 3.847;
 800716c:	499a      	ldr	r1, [pc, #616]	; (80073d8 <_initVoltsArray+0x5c0>)
 800716e:	a364      	add	r3, pc, #400	; (adr r3, 8007300 <_initVoltsArray+0x4e8>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
 8007178:	4997      	ldr	r1, [pc, #604]	; (80073d8 <_initVoltsArray+0x5c0>)
 800717a:	a363      	add	r3, pc, #396	; (adr r3, 8007308 <_initVoltsArray+0x4f0>)
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 8007184:	4994      	ldr	r1, [pc, #592]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007186:	a362      	add	r3, pc, #392	; (adr r3, 8007310 <_initVoltsArray+0x4f8>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 8007190:	4991      	ldr	r1, [pc, #580]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007192:	a361      	add	r3, pc, #388	; (adr r3, 8007318 <_initVoltsArray+0x500>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 800719c:	498e      	ldr	r1, [pc, #568]	; (80073d8 <_initVoltsArray+0x5c0>)
 800719e:	a360      	add	r3, pc, #384	; (adr r3, 8007320 <_initVoltsArray+0x508>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
    _vs[51] = 3.853; _vs[52] = 3.858; _vs[53] = 3.863; _vs[54] = 3.868; _vs[55] = 3.874;
 80071a8:	498b      	ldr	r1, [pc, #556]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071aa:	a35f      	add	r3, pc, #380	; (adr r3, 8007328 <_initVoltsArray+0x510>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
 80071b4:	4988      	ldr	r1, [pc, #544]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071b6:	a35e      	add	r3, pc, #376	; (adr r3, 8007330 <_initVoltsArray+0x518>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
 80071c0:	4985      	ldr	r1, [pc, #532]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071c2:	a35d      	add	r3, pc, #372	; (adr r3, 8007338 <_initVoltsArray+0x520>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 80071cc:	4982      	ldr	r1, [pc, #520]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071ce:	a35c      	add	r3, pc, #368	; (adr r3, 8007340 <_initVoltsArray+0x528>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 80071d8:	497f      	ldr	r1, [pc, #508]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071da:	a35b      	add	r3, pc, #364	; (adr r3, 8007348 <_initVoltsArray+0x530>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    _vs[56] = 3.879; _vs[57] = 3.884; _vs[58] = 3.889; _vs[59] = 3.895; _vs[60] = 3.900;
 80071e4:	497c      	ldr	r1, [pc, #496]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071e6:	a35a      	add	r3, pc, #360	; (adr r3, 8007350 <_initVoltsArray+0x538>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 80071f0:	4979      	ldr	r1, [pc, #484]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071f2:	a359      	add	r3, pc, #356	; (adr r3, 8007358 <_initVoltsArray+0x540>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
 80071fc:	4976      	ldr	r1, [pc, #472]	; (80073d8 <_initVoltsArray+0x5c0>)
 80071fe:	a358      	add	r3, pc, #352	; (adr r3, 8007360 <_initVoltsArray+0x548>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
 8007208:	4973      	ldr	r1, [pc, #460]	; (80073d8 <_initVoltsArray+0x5c0>)
 800720a:	a357      	add	r3, pc, #348	; (adr r3, 8007368 <_initVoltsArray+0x550>)
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 8007214:	4970      	ldr	r1, [pc, #448]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007216:	a356      	add	r3, pc, #344	; (adr r3, 8007370 <_initVoltsArray+0x558>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    _vs[61] = 3.906; _vs[62] = 3.911; _vs[63] = 3.917; _vs[64] = 3.922; _vs[65] = 3.928;
 8007220:	496d      	ldr	r1, [pc, #436]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007222:	a355      	add	r3, pc, #340	; (adr r3, 8007378 <_initVoltsArray+0x560>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
 800722c:	496a      	ldr	r1, [pc, #424]	; (80073d8 <_initVoltsArray+0x5c0>)
 800722e:	a354      	add	r3, pc, #336	; (adr r3, 8007380 <_initVoltsArray+0x568>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
 8007238:	4967      	ldr	r1, [pc, #412]	; (80073d8 <_initVoltsArray+0x5c0>)
 800723a:	a353      	add	r3, pc, #332	; (adr r3, 8007388 <_initVoltsArray+0x570>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
 8007244:	4964      	ldr	r1, [pc, #400]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007246:	a352      	add	r3, pc, #328	; (adr r3, 8007390 <_initVoltsArray+0x578>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200
 8007250:	4961      	ldr	r1, [pc, #388]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007252:	a351      	add	r3, pc, #324	; (adr r3, 8007398 <_initVoltsArray+0x580>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    _vs[66] = 3.933; _vs[67] = 3.939; _vs[68] = 3.944; _vs[69] = 3.950; _vs[70] = 3.956;
 800725c:	495e      	ldr	r1, [pc, #376]	; (80073d8 <_initVoltsArray+0x5c0>)
 800725e:	a350      	add	r3, pc, #320	; (adr r3, 80073a0 <_initVoltsArray+0x588>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
 8007268:	495b      	ldr	r1, [pc, #364]	; (80073d8 <_initVoltsArray+0x5c0>)
 800726a:	a34f      	add	r3, pc, #316	; (adr r3, 80073a8 <_initVoltsArray+0x590>)
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 8007274:	4958      	ldr	r1, [pc, #352]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007276:	a34e      	add	r3, pc, #312	; (adr r3, 80073b0 <_initVoltsArray+0x598>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
 8007280:	4955      	ldr	r1, [pc, #340]	; (80073d8 <_initVoltsArray+0x5c0>)
 8007282:	a34d      	add	r3, pc, #308	; (adr r3, 80073b8 <_initVoltsArray+0x5a0>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 800728c:	4952      	ldr	r1, [pc, #328]	; (80073d8 <_initVoltsArray+0x5c0>)
 800728e:	a34c      	add	r3, pc, #304	; (adr r3, 80073c0 <_initVoltsArray+0x5a8>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    _vs[71] = 3.961; _vs[72] = 3.967; _vs[73] = 3.972; _vs[74] = 3.978; _vs[75] = 3.983;
 8007298:	494f      	ldr	r1, [pc, #316]	; (80073d8 <_initVoltsArray+0x5c0>)
 800729a:	a34b      	add	r3, pc, #300	; (adr r3, 80073c8 <_initVoltsArray+0x5b0>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
 80072a4:	494c      	ldr	r1, [pc, #304]	; (80073d8 <_initVoltsArray+0x5c0>)
 80072a6:	a34a      	add	r3, pc, #296	; (adr r3, 80073d0 <_initVoltsArray+0x5b8>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
 80072b0:	e094      	b.n	80073dc <_initVoltsArray+0x5c4>
 80072b2:	bf00      	nop
 80072b4:	f3af 8000 	nop.w
 80072b8:	a7ef9db2 	.word	0xa7ef9db2
 80072bc:	400e4bc6 	.word	0x400e4bc6
 80072c0:	851eb852 	.word	0x851eb852
 80072c4:	400e51eb 	.word	0x400e51eb
 80072c8:	ac083127 	.word	0xac083127
 80072cc:	400e5a1c 	.word	0x400e5a1c
 80072d0:	89374bc7 	.word	0x89374bc7
 80072d4:	400e6041 	.word	0x400e6041
 80072d8:	66666666 	.word	0x66666666
 80072dc:	400e6666 	.word	0x400e6666
 80072e0:	d70a3d71 	.word	0xd70a3d71
 80072e4:	400e70a3 	.word	0x400e70a3
 80072e8:	916872b0 	.word	0x916872b0
 80072ec:	400e7ced 	.word	0x400e7ced
 80072f0:	020c49ba 	.word	0x020c49ba
 80072f4:	400e872b 	.word	0x400e872b
 80072f8:	72b020c5 	.word	0x72b020c5
 80072fc:	400e9168 	.word	0x400e9168
 8007300:	e353f7cf 	.word	0xe353f7cf
 8007304:	400e9ba5 	.word	0x400e9ba5
 8007308:	9db22d0e 	.word	0x9db22d0e
 800730c:	400ea7ef 	.word	0x400ea7ef
 8007310:	0e560419 	.word	0x0e560419
 8007314:	400eb22d 	.word	0x400eb22d
 8007318:	7ef9db23 	.word	0x7ef9db23
 800731c:	400ebc6a 	.word	0x400ebc6a
 8007320:	ef9db22d 	.word	0xef9db22d
 8007324:	400ec6a7 	.word	0x400ec6a7
 8007328:	a9fbe76d 	.word	0xa9fbe76d
 800732c:	400ed2f1 	.word	0x400ed2f1
 8007330:	1a9fbe77 	.word	0x1a9fbe77
 8007334:	400edd2f 	.word	0x400edd2f
 8007338:	8b439581 	.word	0x8b439581
 800733c:	400ee76c 	.word	0x400ee76c
 8007340:	fbe76c8b 	.word	0xfbe76c8b
 8007344:	400ef1a9 	.word	0x400ef1a9
 8007348:	b645a1cb 	.word	0xb645a1cb
 800734c:	400efdf3 	.word	0x400efdf3
 8007350:	26e978d5 	.word	0x26e978d5
 8007354:	400f0831 	.word	0x400f0831
 8007358:	978d4fdf 	.word	0x978d4fdf
 800735c:	400f126e 	.word	0x400f126e
 8007360:	083126e9 	.word	0x083126e9
 8007364:	400f1cac 	.word	0x400f1cac
 8007368:	c28f5c29 	.word	0xc28f5c29
 800736c:	400f28f5 	.word	0x400f28f5
 8007370:	33333333 	.word	0x33333333
 8007374:	400f3333 	.word	0x400f3333
 8007378:	ed916873 	.word	0xed916873
 800737c:	400f3f7c 	.word	0x400f3f7c
 8007380:	5e353f7d 	.word	0x5e353f7d
 8007384:	400f49ba 	.word	0x400f49ba
 8007388:	189374bc 	.word	0x189374bc
 800738c:	400f5604 	.word	0x400f5604
 8007390:	89374bc7 	.word	0x89374bc7
 8007394:	400f6041 	.word	0x400f6041
 8007398:	43958106 	.word	0x43958106
 800739c:	400f6c8b 	.word	0x400f6c8b
 80073a0:	b4395810 	.word	0xb4395810
 80073a4:	400f76c8 	.word	0x400f76c8
 80073a8:	6e978d50 	.word	0x6e978d50
 80073ac:	400f8312 	.word	0x400f8312
 80073b0:	df3b645a 	.word	0xdf3b645a
 80073b4:	400f8d4f 	.word	0x400f8d4f
 80073b8:	9999999a 	.word	0x9999999a
 80073bc:	400f9999 	.word	0x400f9999
 80073c0:	53f7ced9 	.word	0x53f7ced9
 80073c4:	400fa5e3 	.word	0x400fa5e3
 80073c8:	c49ba5e3 	.word	0xc49ba5e3
 80073cc:	400fb020 	.word	0x400fb020
 80073d0:	7ef9db23 	.word	0x7ef9db23
 80073d4:	400fbc6a 	.word	0x400fbc6a
 80073d8:	20000468 	.word	0x20000468
 80073dc:	498c      	ldr	r1, [pc, #560]	; (8007610 <_initVoltsArray+0x7f8>)
 80073de:	a356      	add	r3, pc, #344	; (adr r3, 8007538 <_initVoltsArray+0x720>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
 80073e8:	4989      	ldr	r1, [pc, #548]	; (8007610 <_initVoltsArray+0x7f8>)
 80073ea:	a355      	add	r3, pc, #340	; (adr r3, 8007540 <_initVoltsArray+0x728>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 80073f4:	4986      	ldr	r1, [pc, #536]	; (8007610 <_initVoltsArray+0x7f8>)
 80073f6:	a354      	add	r3, pc, #336	; (adr r3, 8007548 <_initVoltsArray+0x730>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
    _vs[76] = 3.989; _vs[77] = 3.994; _vs[78] = 4.000; _vs[79] = 4.008; _vs[80] = 4.015;
 8007400:	4983      	ldr	r1, [pc, #524]	; (8007610 <_initVoltsArray+0x7f8>)
 8007402:	a353      	add	r3, pc, #332	; (adr r3, 8007550 <_initVoltsArray+0x738>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 800740c:	4980      	ldr	r1, [pc, #512]	; (8007610 <_initVoltsArray+0x7f8>)
 800740e:	a352      	add	r3, pc, #328	; (adr r3, 8007558 <_initVoltsArray+0x740>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
 8007418:	497d      	ldr	r1, [pc, #500]	; (8007610 <_initVoltsArray+0x7f8>)
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	4b7d      	ldr	r3, [pc, #500]	; (8007614 <_initVoltsArray+0x7fc>)
 8007420:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
 8007424:	497a      	ldr	r1, [pc, #488]	; (8007610 <_initVoltsArray+0x7f8>)
 8007426:	a34e      	add	r3, pc, #312	; (adr r3, 8007560 <_initVoltsArray+0x748>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
 8007430:	4977      	ldr	r1, [pc, #476]	; (8007610 <_initVoltsArray+0x7f8>)
 8007432:	a34d      	add	r3, pc, #308	; (adr r3, 8007568 <_initVoltsArray+0x750>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
    _vs[81] = 4.023; _vs[82] = 4.031; _vs[83] = 4.038; _vs[84] = 4.046; _vs[85] = 4.054;
 800743c:	4974      	ldr	r1, [pc, #464]	; (8007610 <_initVoltsArray+0x7f8>)
 800743e:	a34c      	add	r3, pc, #304	; (adr r3, 8007570 <_initVoltsArray+0x758>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
 8007448:	4971      	ldr	r1, [pc, #452]	; (8007610 <_initVoltsArray+0x7f8>)
 800744a:	a34b      	add	r3, pc, #300	; (adr r3, 8007578 <_initVoltsArray+0x760>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
 8007454:	496e      	ldr	r1, [pc, #440]	; (8007610 <_initVoltsArray+0x7f8>)
 8007456:	a34a      	add	r3, pc, #296	; (adr r3, 8007580 <_initVoltsArray+0x768>)
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
 8007460:	496b      	ldr	r1, [pc, #428]	; (8007610 <_initVoltsArray+0x7f8>)
 8007462:	a349      	add	r3, pc, #292	; (adr r3, 8007588 <_initVoltsArray+0x770>)
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
 800746c:	4968      	ldr	r1, [pc, #416]	; (8007610 <_initVoltsArray+0x7f8>)
 800746e:	a348      	add	r3, pc, #288	; (adr r3, 8007590 <_initVoltsArray+0x778>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
    _vs[86] = 4.062; _vs[87] = 4.069; _vs[88] = 4.077; _vs[89] = 4.085; _vs[90] = 4.092;
 8007478:	4965      	ldr	r1, [pc, #404]	; (8007610 <_initVoltsArray+0x7f8>)
 800747a:	a347      	add	r3, pc, #284	; (adr r3, 8007598 <_initVoltsArray+0x780>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
 8007484:	4962      	ldr	r1, [pc, #392]	; (8007610 <_initVoltsArray+0x7f8>)
 8007486:	a346      	add	r3, pc, #280	; (adr r3, 80075a0 <_initVoltsArray+0x788>)
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
 8007490:	495f      	ldr	r1, [pc, #380]	; (8007610 <_initVoltsArray+0x7f8>)
 8007492:	a345      	add	r3, pc, #276	; (adr r3, 80075a8 <_initVoltsArray+0x790>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
 800749c:	495c      	ldr	r1, [pc, #368]	; (8007610 <_initVoltsArray+0x7f8>)
 800749e:	a344      	add	r3, pc, #272	; (adr r3, 80075b0 <_initVoltsArray+0x798>)
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
 80074a8:	4959      	ldr	r1, [pc, #356]	; (8007610 <_initVoltsArray+0x7f8>)
 80074aa:	a343      	add	r3, pc, #268	; (adr r3, 80075b8 <_initVoltsArray+0x7a0>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
    _vs[91] = 4.100; _vs[92] = 4.111; _vs[93] = 4.122; _vs[94] = 4.133; _vs[95] = 4.144;
 80074b4:	4956      	ldr	r1, [pc, #344]	; (8007610 <_initVoltsArray+0x7f8>)
 80074b6:	a342      	add	r3, pc, #264	; (adr r3, 80075c0 <_initVoltsArray+0x7a8>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 80074c0:	4953      	ldr	r1, [pc, #332]	; (8007610 <_initVoltsArray+0x7f8>)
 80074c2:	a341      	add	r3, pc, #260	; (adr r3, 80075c8 <_initVoltsArray+0x7b0>)
 80074c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c8:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0
 80074cc:	4950      	ldr	r1, [pc, #320]	; (8007610 <_initVoltsArray+0x7f8>)
 80074ce:	a340      	add	r3, pc, #256	; (adr r3, 80075d0 <_initVoltsArray+0x7b8>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
 80074d8:	494d      	ldr	r1, [pc, #308]	; (8007610 <_initVoltsArray+0x7f8>)
 80074da:	a33f      	add	r3, pc, #252	; (adr r3, 80075d8 <_initVoltsArray+0x7c0>)
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 80074e4:	494a      	ldr	r1, [pc, #296]	; (8007610 <_initVoltsArray+0x7f8>)
 80074e6:	a33e      	add	r3, pc, #248	; (adr r3, 80075e0 <_initVoltsArray+0x7c8>)
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    _vs[96] = 4.156; _vs[97] = 4.167; _vs[98] = 4.178; _vs[99] = 4.189; _vs[100] = 4.200;
 80074f0:	4947      	ldr	r1, [pc, #284]	; (8007610 <_initVoltsArray+0x7f8>)
 80074f2:	a33d      	add	r3, pc, #244	; (adr r3, 80075e8 <_initVoltsArray+0x7d0>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	e9c1 23c0 	strd	r2, r3, [r1, #768]	; 0x300
 80074fc:	4944      	ldr	r1, [pc, #272]	; (8007610 <_initVoltsArray+0x7f8>)
 80074fe:	a33c      	add	r3, pc, #240	; (adr r3, 80075f0 <_initVoltsArray+0x7d8>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	e9c1 23c2 	strd	r2, r3, [r1, #776]	; 0x308
 8007508:	4941      	ldr	r1, [pc, #260]	; (8007610 <_initVoltsArray+0x7f8>)
 800750a:	a33b      	add	r3, pc, #236	; (adr r3, 80075f8 <_initVoltsArray+0x7e0>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310
 8007514:	493e      	ldr	r1, [pc, #248]	; (8007610 <_initVoltsArray+0x7f8>)
 8007516:	a33a      	add	r3, pc, #232	; (adr r3, 8007600 <_initVoltsArray+0x7e8>)
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	e9c1 23c6 	strd	r2, r3, [r1, #792]	; 0x318
 8007520:	493b      	ldr	r1, [pc, #236]	; (8007610 <_initVoltsArray+0x7f8>)
 8007522:	a339      	add	r3, pc, #228	; (adr r3, 8007608 <_initVoltsArray+0x7f0>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
}
 800752c:	bf00      	nop
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	ef9db22d 	.word	0xef9db22d
 800753c:	400fc6a7 	.word	0x400fc6a7
 8007540:	a9fbe76d 	.word	0xa9fbe76d
 8007544:	400fd2f1 	.word	0x400fd2f1
 8007548:	1a9fbe77 	.word	0x1a9fbe77
 800754c:	400fdd2f 	.word	0x400fdd2f
 8007550:	d4fdf3b6 	.word	0xd4fdf3b6
 8007554:	400fe978 	.word	0x400fe978
 8007558:	45a1cac1 	.word	0x45a1cac1
 800755c:	400ff3b6 	.word	0x400ff3b6
 8007560:	26e978d5 	.word	0x26e978d5
 8007564:	40100831 	.word	0x40100831
 8007568:	28f5c28f 	.word	0x28f5c28f
 800756c:	40100f5c 	.word	0x40100f5c
 8007570:	4fdf3b64 	.word	0x4fdf3b64
 8007574:	4010178d 	.word	0x4010178d
 8007578:	76c8b439 	.word	0x76c8b439
 800757c:	40101fbe 	.word	0x40101fbe
 8007580:	78d4fdf4 	.word	0x78d4fdf4
 8007584:	401026e9 	.word	0x401026e9
 8007588:	9fbe76c9 	.word	0x9fbe76c9
 800758c:	40102f1a 	.word	0x40102f1a
 8007590:	c6a7ef9e 	.word	0xc6a7ef9e
 8007594:	4010374b 	.word	0x4010374b
 8007598:	ed916873 	.word	0xed916873
 800759c:	40103f7c 	.word	0x40103f7c
 80075a0:	ef9db22d 	.word	0xef9db22d
 80075a4:	401046a7 	.word	0x401046a7
 80075a8:	16872b02 	.word	0x16872b02
 80075ac:	40104ed9 	.word	0x40104ed9
 80075b0:	3d70a3d7 	.word	0x3d70a3d7
 80075b4:	4010570a 	.word	0x4010570a
 80075b8:	3f7ced91 	.word	0x3f7ced91
 80075bc:	40105e35 	.word	0x40105e35
 80075c0:	66666666 	.word	0x66666666
 80075c4:	40106666 	.word	0x40106666
 80075c8:	fbe76c8b 	.word	0xfbe76c8b
 80075cc:	401071a9 	.word	0x401071a9
 80075d0:	916872b0 	.word	0x916872b0
 80075d4:	40107ced 	.word	0x40107ced
 80075d8:	26e978d5 	.word	0x26e978d5
 80075dc:	40108831 	.word	0x40108831
 80075e0:	bc6a7efa 	.word	0xbc6a7efa
 80075e4:	40109374 	.word	0x40109374
 80075e8:	76c8b439 	.word	0x76c8b439
 80075ec:	40109fbe 	.word	0x40109fbe
 80075f0:	0c49ba5e 	.word	0x0c49ba5e
 80075f4:	4010ab02 	.word	0x4010ab02
 80075f8:	a1cac083 	.word	0xa1cac083
 80075fc:	4010b645 	.word	0x4010b645
 8007600:	374bc6a8 	.word	0x374bc6a8
 8007604:	4010c189 	.word	0x4010c189
 8007608:	cccccccd 	.word	0xcccccccd
 800760c:	4010cccc 	.word	0x4010cccc
 8007610:	20000468 	.word	0x20000468
 8007614:	40100000 	.word	0x40100000

08007618 <_analogRead>:

static uint32_t _analogRead(void) {
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
    HAL_ADC_Start(_hadc);
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <_analogRead+0x30>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f7fa ffa9 	bl	8002578 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(_hadc, _timeout);
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <_analogRead+0x30>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a08      	ldr	r2, [pc, #32]	; (800764c <_analogRead+0x34>)
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	4611      	mov	r1, r2
 8007630:	4618      	mov	r0, r3
 8007632:	f7fb f85b 	bl	80026ec <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(_hadc);
 8007636:	4b04      	ldr	r3, [pc, #16]	; (8007648 <_analogRead+0x30>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f7fb f92e 	bl	800289c <HAL_ADC_GetValue>
 8007640:	4603      	mov	r3, r0
}
 8007642:	4618      	mov	r0, r3
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000794 	.word	0x20000794
 800764c:	20000790 	.word	0x20000790

08007650 <_analogReadToVolts>:

static float _analogReadToVolts(uint32_t readValue) {
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  float volts = 2.0f * readValue * 3.3f / 4096.0f;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007662:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007666:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007690 <_analogReadToVolts+0x40>
 800766a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800766e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007694 <_analogReadToVolts+0x44>
 8007672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007676:	edc7 7a03 	vstr	s15, [r7, #12]
  return volts;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	ee07 3a90 	vmov	s15, r3
}
 8007680:	eeb0 0a67 	vmov.f32	s0, s15
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40533333 	.word	0x40533333
 8007694:	45800000 	.word	0x45800000

08007698 <_getChargeLevel>:

static int _getChargeLevel(float volts) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	ed87 0a01 	vstr	s0, [r7, #4]
  int idx = 50;
 80076a2:	2332      	movs	r3, #50	; 0x32
 80076a4:	617b      	str	r3, [r7, #20]
  int prev = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
  int half = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
  if (volts >= 4.2){
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7f8 ff5a 	bl	8000568 <__aeabi_f2d>
 80076b4:	a323      	add	r3, pc, #140	; (adr r3, 8007744 <_getChargeLevel+0xac>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f9 fa33 	bl	8000b24 <__aeabi_dcmpge>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <_getChargeLevel+0x30>
    return 100;
 80076c4:	2364      	movs	r3, #100	; 0x64
 80076c6:	e037      	b.n	8007738 <_getChargeLevel+0xa0>
  }
  if (volts <= 3.2){
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7f8 ff4d 	bl	8000568 <__aeabi_f2d>
 80076ce:	a31f      	add	r3, pc, #124	; (adr r3, 800774c <_getChargeLevel+0xb4>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f9 fa1c 	bl	8000b10 <__aeabi_dcmple>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d100      	bne.n	80076e0 <_getChargeLevel+0x48>
 80076de:	e001      	b.n	80076e4 <_getChargeLevel+0x4c>
    return 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e029      	b.n	8007738 <_getChargeLevel+0xa0>
  }
  while(1){
    half = abs(idx - prev) / 2;
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfb8      	it	lt
 80076ee:	425b      	neglt	r3, r3
 80076f0:	0fda      	lsrs	r2, r3, #31
 80076f2:	4413      	add	r3, r2
 80076f4:	105b      	asrs	r3, r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]
    prev = idx;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	613b      	str	r3, [r7, #16]
    if(volts >= _vs[idx]){
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7f8 ff33 	bl	8000568 <__aeabi_f2d>
 8007702:	4a0f      	ldr	r2, [pc, #60]	; (8007740 <_getChargeLevel+0xa8>)
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f9 fa09 	bl	8000b24 <__aeabi_dcmpge>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <_getChargeLevel+0x8a>
      idx = idx + half;
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	e003      	b.n	800772a <_getChargeLevel+0x92>
    }else{
      idx = idx - half;
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	617b      	str	r3, [r7, #20]
    }
    if (prev == idx){
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	429a      	cmp	r2, r3
 8007730:	d000      	beq.n	8007734 <_getChargeLevel+0x9c>
    half = abs(idx - prev) / 2;
 8007732:	e7d7      	b.n	80076e4 <_getChargeLevel+0x4c>
      break;
 8007734:	bf00      	nop
    }
  }
  return idx;
 8007736:	697b      	ldr	r3, [r7, #20]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000468 	.word	0x20000468
 8007744:	cccccccd 	.word	0xcccccccd
 8007748:	4010cccc 	.word	0x4010cccc
 800774c:	9999999a 	.word	0x9999999a
 8007750:	40099999 	.word	0x40099999

08007754 <battery_init>:

/*
 * Public functions
 */

void battery_init(ADC_HandleTypeDef* hadc, uint32_t timeout) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	_hadc = hadc;
 800775e:	4a08      	ldr	r2, [pc, #32]	; (8007780 <battery_init+0x2c>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6013      	str	r3, [r2, #0]
	_timeout = timeout;
 8007764:	4a07      	ldr	r2, [pc, #28]	; (8007784 <battery_init+0x30>)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6013      	str	r3, [r2, #0]
	_initVoltsArray();
 800776a:	f7ff fb55 	bl	8006e18 <_initVoltsArray>
    HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 800776e:	217f      	movs	r1, #127	; 0x7f
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fb fdc9 	bl	8003308 <HAL_ADCEx_Calibration_Start>
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000794 	.word	0x20000794
 8007784:	20000790 	.word	0x20000790

08007788 <battery_getBatteryChargeLevel>:


int battery_getBatteryChargeLevel(void) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 800778e:	f7ff ff43 	bl	8007618 <_analogRead>
 8007792:	6178      	str	r0, [r7, #20]
    double volts = _analogReadToVolts(readValue);
 8007794:	6978      	ldr	r0, [r7, #20]
 8007796:	f7ff ff5b 	bl	8007650 <_analogReadToVolts>
 800779a:	ee10 3a10 	vmov	r3, s0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7f8 fee2 	bl	8000568 <__aeabi_f2d>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int chargeLevel = _getChargeLevel(volts);
 80077ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077b0:	f7f9 fa2a 	bl	8000c08 <__aeabi_d2f>
 80077b4:	4603      	mov	r3, r0
 80077b6:	ee00 3a10 	vmov	s0, r3
 80077ba:	f7ff ff6d 	bl	8007698 <_getChargeLevel>
 80077be:	6078      	str	r0, [r7, #4]
    return chargeLevel;
 80077c0:	687b      	ldr	r3, [r7, #4]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <battery_getBatteryVolts>:

float battery_getBatteryVolts(void) {
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 80077d0:	f7ff ff22 	bl	8007618 <_analogRead>
 80077d4:	6078      	str	r0, [r7, #4]
    return _analogReadToVolts(readValue);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff ff3a 	bl	8007650 <_analogReadToVolts>
 80077dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80077e0:	eeb0 0a67 	vmov.f32	s0, s15
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <validateMessage>:
static uint8_t validateMessage();
static void parseGPGLLSentence();
static float changeCordsToDec(float deg_coord, char nsew);

static uint8_t validateMessage()
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0

	return (messageBuffer[0] == '$' &&
 80077f0:	4b10      	ldr	r3, [pc, #64]	; (8007834 <validateMessage+0x48>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
		messageBuffer[1] == 'G' &&
		messageBuffer[2] == 'P' &&
		messageBuffer[3] == 'G' &&
		messageBuffer[4] == 'L' &&
 80077f4:	2b24      	cmp	r3, #36	; 0x24
 80077f6:	d115      	bne.n	8007824 <validateMessage+0x38>
		messageBuffer[1] == 'G' &&
 80077f8:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <validateMessage+0x48>)
 80077fa:	785b      	ldrb	r3, [r3, #1]
	return (messageBuffer[0] == '$' &&
 80077fc:	2b47      	cmp	r3, #71	; 0x47
 80077fe:	d111      	bne.n	8007824 <validateMessage+0x38>
		messageBuffer[2] == 'P' &&
 8007800:	4b0c      	ldr	r3, [pc, #48]	; (8007834 <validateMessage+0x48>)
 8007802:	789b      	ldrb	r3, [r3, #2]
		messageBuffer[1] == 'G' &&
 8007804:	2b50      	cmp	r3, #80	; 0x50
 8007806:	d10d      	bne.n	8007824 <validateMessage+0x38>
		messageBuffer[3] == 'G' &&
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <validateMessage+0x48>)
 800780a:	78db      	ldrb	r3, [r3, #3]
		messageBuffer[2] == 'P' &&
 800780c:	2b47      	cmp	r3, #71	; 0x47
 800780e:	d109      	bne.n	8007824 <validateMessage+0x38>
		messageBuffer[4] == 'L' &&
 8007810:	4b08      	ldr	r3, [pc, #32]	; (8007834 <validateMessage+0x48>)
 8007812:	791b      	ldrb	r3, [r3, #4]
		messageBuffer[3] == 'G' &&
 8007814:	2b4c      	cmp	r3, #76	; 0x4c
 8007816:	d105      	bne.n	8007824 <validateMessage+0x38>
		messageBuffer[5] == 'L');
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <validateMessage+0x48>)
 800781a:	795b      	ldrb	r3, [r3, #5]
		messageBuffer[4] == 'L' &&
 800781c:	2b4c      	cmp	r3, #76	; 0x4c
 800781e:	d101      	bne.n	8007824 <validateMessage+0x38>
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <validateMessage+0x3a>
 8007824:	2300      	movs	r3, #0
 8007826:	b2db      	uxtb	r3, r3

}
 8007828:	4618      	mov	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	2000079c 	.word	0x2000079c

08007838 <parseGPGLLSentence>:

static void parseGPGLLSentence()
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af02      	add	r7, sp, #8
	float lat, lon;
    char sn, we;
	sscanf(messageBuffer, "$GPGLL,%f,%c,%f,%c", &lat, &sn, &lon, &we);
 800783e:	1df9      	adds	r1, r7, #7
 8007840:	f107 020c 	add.w	r2, r7, #12
 8007844:	1dbb      	adds	r3, r7, #6
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	f107 0308 	add.w	r3, r7, #8
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	460b      	mov	r3, r1
 8007850:	4910      	ldr	r1, [pc, #64]	; (8007894 <parseGPGLLSentence+0x5c>)
 8007852:	4811      	ldr	r0, [pc, #68]	; (8007898 <parseGPGLLSentence+0x60>)
 8007854:	f001 f874 	bl	8008940 <siscanf>
	currentPosition.latitude = (float) changeCordsToDec(lat, sn);
 8007858:	edd7 7a03 	vldr	s15, [r7, #12]
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	4618      	mov	r0, r3
 8007860:	eeb0 0a67 	vmov.f32	s0, s15
 8007864:	f000 f81c 	bl	80078a0 <changeCordsToDec>
 8007868:	eef0 7a40 	vmov.f32	s15, s0
 800786c:	4b0b      	ldr	r3, [pc, #44]	; (800789c <parseGPGLLSentence+0x64>)
 800786e:	edc3 7a00 	vstr	s15, [r3]
	currentPosition.longitude = (float) changeCordsToDec(lon, we);
 8007872:	edd7 7a02 	vldr	s15, [r7, #8]
 8007876:	79bb      	ldrb	r3, [r7, #6]
 8007878:	4618      	mov	r0, r3
 800787a:	eeb0 0a67 	vmov.f32	s0, s15
 800787e:	f000 f80f 	bl	80078a0 <changeCordsToDec>
 8007882:	eef0 7a40 	vmov.f32	s15, s0
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <parseGPGLLSentence+0x64>)
 8007888:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	0800ce98 	.word	0x0800ce98
 8007898:	2000079c 	.word	0x2000079c
 800789c:	200007f0 	.word	0x200007f0

080078a0 <changeCordsToDec>:

static float changeCordsToDec(float deg_coord, char nsew) {
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80078aa:	4603      	mov	r3, r0
 80078ac:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80078ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80078b2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8007934 <changeCordsToDec+0x94>
 80078b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078be:	ee17 3a90 	vmov	r3, s15
 80078c2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2264      	movs	r2, #100	; 0x64
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80078d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078dc:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80078e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80078e4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007938 <changeCordsToDec+0x98>
 80078e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078ec:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80078fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007902:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W')
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	2b53      	cmp	r3, #83	; 0x53
 800790a:	d002      	beq.n	8007912 <changeCordsToDec+0x72>
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	2b57      	cmp	r3, #87	; 0x57
 8007910:	d105      	bne.n	800791e <changeCordsToDec+0x7e>
    {
        decimal *= -1;
 8007912:	edd7 7a05 	vldr	s15, [r7, #20]
 8007916:	eef1 7a67 	vneg.f32	s15, s15
 800791a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	ee07 3a90 	vmov	s15, r3
}
 8007924:	eeb0 0a67 	vmov.f32	s0, s15
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	42c80000 	.word	0x42c80000
 8007938:	42700000 	.word	0x42700000

0800793c <GPS_Init>:
/*
 * public functions
 */

void GPS_Init(uint8_t *rxData)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	gpsDataReady = 0;
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <GPS_Init+0x24>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(GPS_USART, (uint8_t *) &rxData, 1);
 800794a:	1d3b      	adds	r3, r7, #4
 800794c:	2201      	movs	r2, #1
 800794e:	4619      	mov	r1, r3
 8007950:	4804      	ldr	r0, [pc, #16]	; (8007964 <GPS_Init+0x28>)
 8007952:	f7fd ffc9 	bl	80058e8 <HAL_UART_Receive_IT>
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000798 	.word	0x20000798
 8007964:	200003e0 	.word	0x200003e0

08007968 <GPS_UART_Callback>:


void GPS_UART_Callback(uint8_t *rxData)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

	if(mess_index == 0 && *rxData == '$')
 8007970:	4b2e      	ldr	r3, [pc, #184]	; (8007a2c <GPS_UART_Callback+0xc4>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d111      	bne.n	800799c <GPS_UART_Callback+0x34>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b24      	cmp	r3, #36	; 0x24
 800797e:	d10d      	bne.n	800799c <GPS_UART_Callback+0x34>
	{
		messageBuffer[mess_index] = *rxData;
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <GPS_UART_Callback+0xc4>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7819      	ldrb	r1, [r3, #0]
 800798a:	4b29      	ldr	r3, [pc, #164]	; (8007a30 <GPS_UART_Callback+0xc8>)
 800798c:	5499      	strb	r1, [r3, r2]
		++mess_index;
 800798e:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <GPS_UART_Callback+0xc4>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	b2da      	uxtb	r2, r3
 8007996:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <GPS_UART_Callback+0xc4>)
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	e039      	b.n	8007a10 <GPS_UART_Callback+0xa8>
	}
	else if (mess_index >= 1 && mess_index < sizeof(messageBuffer))
 800799c:	4b23      	ldr	r3, [pc, #140]	; (8007a2c <GPS_UART_Callback+0xc4>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d032      	beq.n	8007a0a <GPS_UART_Callback+0xa2>
 80079a4:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <GPS_UART_Callback+0xc4>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b4f      	cmp	r3, #79	; 0x4f
 80079aa:	d82e      	bhi.n	8007a0a <GPS_UART_Callback+0xa2>
	{
		if(*rxData == '\n' || *rxData == '\r')
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b0a      	cmp	r3, #10
 80079b2:	d003      	beq.n	80079bc <GPS_UART_Callback+0x54>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b0d      	cmp	r3, #13
 80079ba:	d118      	bne.n	80079ee <GPS_UART_Callback+0x86>
		{
			messageBuffer[mess_index] = '\0';
 80079bc:	4b1b      	ldr	r3, [pc, #108]	; (8007a2c <GPS_UART_Callback+0xc4>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <GPS_UART_Callback+0xc8>)
 80079c4:	2100      	movs	r1, #0
 80079c6:	5499      	strb	r1, [r3, r2]
			if(validateMessage())
 80079c8:	f7ff ff10 	bl	80077ec <validateMessage>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <GPS_UART_Callback+0x74>
			{
				parseGPGLLSentence();
 80079d2:	f7ff ff31 	bl	8007838 <parseGPGLLSentence>
				gpsDataReady = 1;
 80079d6:	4b17      	ldr	r3, [pc, #92]	; (8007a34 <GPS_UART_Callback+0xcc>)
 80079d8:	2201      	movs	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
			}
			mess_index = 0;
 80079dc:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <GPS_UART_Callback+0xc4>)
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
			memset(messageBuffer, 0 , sizeof(messageBuffer));
 80079e2:	2250      	movs	r2, #80	; 0x50
 80079e4:	2100      	movs	r1, #0
 80079e6:	4812      	ldr	r0, [pc, #72]	; (8007a30 <GPS_UART_Callback+0xc8>)
 80079e8:	f000 f874 	bl	8007ad4 <memset>
		if(*rxData == '\n' || *rxData == '\r')
 80079ec:	e010      	b.n	8007a10 <GPS_UART_Callback+0xa8>
		}
		else
		{
			messageBuffer[mess_index] = *rxData;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <GPS_UART_Callback+0xc4>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7819      	ldrb	r1, [r3, #0]
 80079f8:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <GPS_UART_Callback+0xc8>)
 80079fa:	5499      	strb	r1, [r3, r2]
			++mess_index;
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <GPS_UART_Callback+0xc4>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <GPS_UART_Callback+0xc4>)
 8007a06:	701a      	strb	r2, [r3, #0]
		if(*rxData == '\n' || *rxData == '\r')
 8007a08:	e002      	b.n	8007a10 <GPS_UART_Callback+0xa8>
		}
	}
	else
	{
		mess_index = 0;
 8007a0a:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <GPS_UART_Callback+0xc4>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
	}

	if(gpsDataReady == 0)
 8007a10:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <GPS_UART_Callback+0xcc>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <GPS_UART_Callback+0xba>
	{
		HAL_UART_Receive_IT(GPS_USART, (uint8_t *) rxData, 1);
 8007a18:	2201      	movs	r2, #1
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4806      	ldr	r0, [pc, #24]	; (8007a38 <GPS_UART_Callback+0xd0>)
 8007a1e:	f7fd ff63 	bl	80058e8 <HAL_UART_Receive_IT>
	}
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	200007ec 	.word	0x200007ec
 8007a30:	2000079c 	.word	0x2000079c
 8007a34:	20000798 	.word	0x20000798
 8007a38:	200003e0 	.word	0x200003e0

08007a3c <GPS_getCurrentPosition>:


void GPS_getCurrentPosition(Position *const position)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	memcpy(position, &currentPosition, sizeof(Position));
 8007a44:	2208      	movs	r2, #8
 8007a46:	4905      	ldr	r1, [pc, #20]	; (8007a5c <GPS_getCurrentPosition+0x20>)
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f835 	bl	8007ab8 <memcpy>
	gpsDataReady = 0;
 8007a4e:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <GPS_getCurrentPosition+0x24>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	200007f0 	.word	0x200007f0
 8007a60:	20000798 	.word	0x20000798

08007a64 <__errno>:
 8007a64:	4b01      	ldr	r3, [pc, #4]	; (8007a6c <__errno+0x8>)
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	2000000c 	.word	0x2000000c

08007a70 <__libc_init_array>:
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4d0d      	ldr	r5, [pc, #52]	; (8007aa8 <__libc_init_array+0x38>)
 8007a74:	4c0d      	ldr	r4, [pc, #52]	; (8007aac <__libc_init_array+0x3c>)
 8007a76:	1b64      	subs	r4, r4, r5
 8007a78:	10a4      	asrs	r4, r4, #2
 8007a7a:	2600      	movs	r6, #0
 8007a7c:	42a6      	cmp	r6, r4
 8007a7e:	d109      	bne.n	8007a94 <__libc_init_array+0x24>
 8007a80:	4d0b      	ldr	r5, [pc, #44]	; (8007ab0 <__libc_init_array+0x40>)
 8007a82:	4c0c      	ldr	r4, [pc, #48]	; (8007ab4 <__libc_init_array+0x44>)
 8007a84:	f005 f95a 	bl	800cd3c <_init>
 8007a88:	1b64      	subs	r4, r4, r5
 8007a8a:	10a4      	asrs	r4, r4, #2
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	42a6      	cmp	r6, r4
 8007a90:	d105      	bne.n	8007a9e <__libc_init_array+0x2e>
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
 8007a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a98:	4798      	blx	r3
 8007a9a:	3601      	adds	r6, #1
 8007a9c:	e7ee      	b.n	8007a7c <__libc_init_array+0xc>
 8007a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa2:	4798      	blx	r3
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	e7f2      	b.n	8007a8e <__libc_init_array+0x1e>
 8007aa8:	0800d3cc 	.word	0x0800d3cc
 8007aac:	0800d3cc 	.word	0x0800d3cc
 8007ab0:	0800d3cc 	.word	0x0800d3cc
 8007ab4:	0800d3d0 	.word	0x0800d3d0

08007ab8 <memcpy>:
 8007ab8:	440a      	add	r2, r1
 8007aba:	4291      	cmp	r1, r2
 8007abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac0:	d100      	bne.n	8007ac4 <memcpy+0xc>
 8007ac2:	4770      	bx	lr
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ace:	4291      	cmp	r1, r2
 8007ad0:	d1f9      	bne.n	8007ac6 <memcpy+0xe>
 8007ad2:	bd10      	pop	{r4, pc}

08007ad4 <memset>:
 8007ad4:	4402      	add	r2, r0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d100      	bne.n	8007ade <memset+0xa>
 8007adc:	4770      	bx	lr
 8007ade:	f803 1b01 	strb.w	r1, [r3], #1
 8007ae2:	e7f9      	b.n	8007ad8 <memset+0x4>

08007ae4 <__cvt>:
 8007ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	ec55 4b10 	vmov	r4, r5, d0
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	460e      	mov	r6, r1
 8007af0:	4619      	mov	r1, r3
 8007af2:	462b      	mov	r3, r5
 8007af4:	bfbb      	ittet	lt
 8007af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007afa:	461d      	movlt	r5, r3
 8007afc:	2300      	movge	r3, #0
 8007afe:	232d      	movlt	r3, #45	; 0x2d
 8007b00:	700b      	strb	r3, [r1, #0]
 8007b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b08:	4691      	mov	r9, r2
 8007b0a:	f023 0820 	bic.w	r8, r3, #32
 8007b0e:	bfbc      	itt	lt
 8007b10:	4622      	movlt	r2, r4
 8007b12:	4614      	movlt	r4, r2
 8007b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b18:	d005      	beq.n	8007b26 <__cvt+0x42>
 8007b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b1e:	d100      	bne.n	8007b22 <__cvt+0x3e>
 8007b20:	3601      	adds	r6, #1
 8007b22:	2102      	movs	r1, #2
 8007b24:	e000      	b.n	8007b28 <__cvt+0x44>
 8007b26:	2103      	movs	r1, #3
 8007b28:	ab03      	add	r3, sp, #12
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	ab02      	add	r3, sp, #8
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	ec45 4b10 	vmov	d0, r4, r5
 8007b34:	4653      	mov	r3, sl
 8007b36:	4632      	mov	r2, r6
 8007b38:	f001 ff92 	bl	8009a60 <_dtoa_r>
 8007b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b40:	4607      	mov	r7, r0
 8007b42:	d102      	bne.n	8007b4a <__cvt+0x66>
 8007b44:	f019 0f01 	tst.w	r9, #1
 8007b48:	d022      	beq.n	8007b90 <__cvt+0xac>
 8007b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b4e:	eb07 0906 	add.w	r9, r7, r6
 8007b52:	d110      	bne.n	8007b76 <__cvt+0x92>
 8007b54:	783b      	ldrb	r3, [r7, #0]
 8007b56:	2b30      	cmp	r3, #48	; 0x30
 8007b58:	d10a      	bne.n	8007b70 <__cvt+0x8c>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 ffc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b66:	b918      	cbnz	r0, 8007b70 <__cvt+0x8c>
 8007b68:	f1c6 0601 	rsb	r6, r6, #1
 8007b6c:	f8ca 6000 	str.w	r6, [sl]
 8007b70:	f8da 3000 	ldr.w	r3, [sl]
 8007b74:	4499      	add	r9, r3
 8007b76:	2200      	movs	r2, #0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	f7f8 ffb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b82:	b108      	cbz	r0, 8007b88 <__cvt+0xa4>
 8007b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b88:	2230      	movs	r2, #48	; 0x30
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	454b      	cmp	r3, r9
 8007b8e:	d307      	bcc.n	8007ba0 <__cvt+0xbc>
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b94:	1bdb      	subs	r3, r3, r7
 8007b96:	4638      	mov	r0, r7
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	b004      	add	sp, #16
 8007b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba0:	1c59      	adds	r1, r3, #1
 8007ba2:	9103      	str	r1, [sp, #12]
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e7f0      	b.n	8007b8a <__cvt+0xa6>

08007ba8 <__exponent>:
 8007ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007baa:	4603      	mov	r3, r0
 8007bac:	2900      	cmp	r1, #0
 8007bae:	bfb8      	it	lt
 8007bb0:	4249      	neglt	r1, r1
 8007bb2:	f803 2b02 	strb.w	r2, [r3], #2
 8007bb6:	bfb4      	ite	lt
 8007bb8:	222d      	movlt	r2, #45	; 0x2d
 8007bba:	222b      	movge	r2, #43	; 0x2b
 8007bbc:	2909      	cmp	r1, #9
 8007bbe:	7042      	strb	r2, [r0, #1]
 8007bc0:	dd2a      	ble.n	8007c18 <__exponent+0x70>
 8007bc2:	f10d 0407 	add.w	r4, sp, #7
 8007bc6:	46a4      	mov	ip, r4
 8007bc8:	270a      	movs	r7, #10
 8007bca:	46a6      	mov	lr, r4
 8007bcc:	460a      	mov	r2, r1
 8007bce:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8007bd6:	3530      	adds	r5, #48	; 0x30
 8007bd8:	2a63      	cmp	r2, #99	; 0x63
 8007bda:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007be2:	4631      	mov	r1, r6
 8007be4:	dcf1      	bgt.n	8007bca <__exponent+0x22>
 8007be6:	3130      	adds	r1, #48	; 0x30
 8007be8:	f1ae 0502 	sub.w	r5, lr, #2
 8007bec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bf0:	1c44      	adds	r4, r0, #1
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4561      	cmp	r1, ip
 8007bf6:	d30a      	bcc.n	8007c0e <__exponent+0x66>
 8007bf8:	f10d 0209 	add.w	r2, sp, #9
 8007bfc:	eba2 020e 	sub.w	r2, r2, lr
 8007c00:	4565      	cmp	r5, ip
 8007c02:	bf88      	it	hi
 8007c04:	2200      	movhi	r2, #0
 8007c06:	4413      	add	r3, r2
 8007c08:	1a18      	subs	r0, r3, r0
 8007c0a:	b003      	add	sp, #12
 8007c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c16:	e7ed      	b.n	8007bf4 <__exponent+0x4c>
 8007c18:	2330      	movs	r3, #48	; 0x30
 8007c1a:	3130      	adds	r1, #48	; 0x30
 8007c1c:	7083      	strb	r3, [r0, #2]
 8007c1e:	70c1      	strb	r1, [r0, #3]
 8007c20:	1d03      	adds	r3, r0, #4
 8007c22:	e7f1      	b.n	8007c08 <__exponent+0x60>

08007c24 <_printf_float>:
 8007c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	ed2d 8b02 	vpush	{d8}
 8007c2c:	b08d      	sub	sp, #52	; 0x34
 8007c2e:	460c      	mov	r4, r1
 8007c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c34:	4616      	mov	r6, r2
 8007c36:	461f      	mov	r7, r3
 8007c38:	4605      	mov	r5, r0
 8007c3a:	f003 fa25 	bl	800b088 <_localeconv_r>
 8007c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8007c42:	4650      	mov	r0, sl
 8007c44:	f7f8 face 	bl	80001e4 <strlen>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	f8d8 3000 	ldr.w	r3, [r8]
 8007c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c58:	3307      	adds	r3, #7
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	f103 0208 	add.w	r2, r3, #8
 8007c62:	f8c8 2000 	str.w	r2, [r8]
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c7c:	ee08 0a10 	vmov	s16, r0
 8007c80:	4b9f      	ldr	r3, [pc, #636]	; (8007f00 <_printf_float+0x2dc>)
 8007c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	f7f8 ff5f 	bl	8000b4c <__aeabi_dcmpun>
 8007c8e:	bb88      	cbnz	r0, 8007cf4 <_printf_float+0xd0>
 8007c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c94:	4b9a      	ldr	r3, [pc, #616]	; (8007f00 <_printf_float+0x2dc>)
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	f7f8 ff39 	bl	8000b10 <__aeabi_dcmple>
 8007c9e:	bb48      	cbnz	r0, 8007cf4 <_printf_float+0xd0>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 ff28 	bl	8000afc <__aeabi_dcmplt>
 8007cac:	b110      	cbz	r0, 8007cb4 <_printf_float+0x90>
 8007cae:	232d      	movs	r3, #45	; 0x2d
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb4:	4b93      	ldr	r3, [pc, #588]	; (8007f04 <_printf_float+0x2e0>)
 8007cb6:	4894      	ldr	r0, [pc, #592]	; (8007f08 <_printf_float+0x2e4>)
 8007cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cbc:	bf94      	ite	ls
 8007cbe:	4698      	movls	r8, r3
 8007cc0:	4680      	movhi	r8, r0
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	9b05      	ldr	r3, [sp, #20]
 8007cc8:	f023 0204 	bic.w	r2, r3, #4
 8007ccc:	6022      	str	r2, [r4, #0]
 8007cce:	f04f 0900 	mov.w	r9, #0
 8007cd2:	9700      	str	r7, [sp, #0]
 8007cd4:	4633      	mov	r3, r6
 8007cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f9d8 	bl	8008090 <_printf_common>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f040 8090 	bne.w	8007e06 <_printf_float+0x1e2>
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cea:	b00d      	add	sp, #52	; 0x34
 8007cec:	ecbd 8b02 	vpop	{d8}
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 ff26 	bl	8000b4c <__aeabi_dcmpun>
 8007d00:	b140      	cbz	r0, 8007d14 <_printf_float+0xf0>
 8007d02:	464b      	mov	r3, r9
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfbc      	itt	lt
 8007d08:	232d      	movlt	r3, #45	; 0x2d
 8007d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d0e:	487f      	ldr	r0, [pc, #508]	; (8007f0c <_printf_float+0x2e8>)
 8007d10:	4b7f      	ldr	r3, [pc, #508]	; (8007f10 <_printf_float+0x2ec>)
 8007d12:	e7d1      	b.n	8007cb8 <_printf_float+0x94>
 8007d14:	6863      	ldr	r3, [r4, #4]
 8007d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d1a:	9206      	str	r2, [sp, #24]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	d13f      	bne.n	8007da0 <_printf_float+0x17c>
 8007d20:	2306      	movs	r3, #6
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	9b05      	ldr	r3, [sp, #20]
 8007d26:	6861      	ldr	r1, [r4, #4]
 8007d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9303      	str	r3, [sp, #12]
 8007d30:	ab0a      	add	r3, sp, #40	; 0x28
 8007d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d36:	ab09      	add	r3, sp, #36	; 0x24
 8007d38:	ec49 8b10 	vmov	d0, r8, r9
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	6022      	str	r2, [r4, #0]
 8007d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d44:	4628      	mov	r0, r5
 8007d46:	f7ff fecd 	bl	8007ae4 <__cvt>
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4e:	2b47      	cmp	r3, #71	; 0x47
 8007d50:	4680      	mov	r8, r0
 8007d52:	d108      	bne.n	8007d66 <_printf_float+0x142>
 8007d54:	1cc8      	adds	r0, r1, #3
 8007d56:	db02      	blt.n	8007d5e <_printf_float+0x13a>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	dd41      	ble.n	8007de2 <_printf_float+0x1be>
 8007d5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d62:	fa5f fb8b 	uxtb.w	fp, fp
 8007d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d6a:	d820      	bhi.n	8007dae <_printf_float+0x18a>
 8007d6c:	3901      	subs	r1, #1
 8007d6e:	465a      	mov	r2, fp
 8007d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d74:	9109      	str	r1, [sp, #36]	; 0x24
 8007d76:	f7ff ff17 	bl	8007ba8 <__exponent>
 8007d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7c:	1813      	adds	r3, r2, r0
 8007d7e:	2a01      	cmp	r2, #1
 8007d80:	4681      	mov	r9, r0
 8007d82:	6123      	str	r3, [r4, #16]
 8007d84:	dc02      	bgt.n	8007d8c <_printf_float+0x168>
 8007d86:	6822      	ldr	r2, [r4, #0]
 8007d88:	07d2      	lsls	r2, r2, #31
 8007d8a:	d501      	bpl.n	8007d90 <_printf_float+0x16c>
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d09c      	beq.n	8007cd2 <_printf_float+0xae>
 8007d98:	232d      	movs	r3, #45	; 0x2d
 8007d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9e:	e798      	b.n	8007cd2 <_printf_float+0xae>
 8007da0:	9a06      	ldr	r2, [sp, #24]
 8007da2:	2a47      	cmp	r2, #71	; 0x47
 8007da4:	d1be      	bne.n	8007d24 <_printf_float+0x100>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1bc      	bne.n	8007d24 <_printf_float+0x100>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e7b9      	b.n	8007d22 <_printf_float+0xfe>
 8007dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007db2:	d118      	bne.n	8007de6 <_printf_float+0x1c2>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	6863      	ldr	r3, [r4, #4]
 8007db8:	dd0b      	ble.n	8007dd2 <_printf_float+0x1ae>
 8007dba:	6121      	str	r1, [r4, #16]
 8007dbc:	b913      	cbnz	r3, 8007dc4 <_printf_float+0x1a0>
 8007dbe:	6822      	ldr	r2, [r4, #0]
 8007dc0:	07d0      	lsls	r0, r2, #31
 8007dc2:	d502      	bpl.n	8007dca <_printf_float+0x1a6>
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	440b      	add	r3, r1
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dcc:	f04f 0900 	mov.w	r9, #0
 8007dd0:	e7de      	b.n	8007d90 <_printf_float+0x16c>
 8007dd2:	b913      	cbnz	r3, 8007dda <_printf_float+0x1b6>
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	07d2      	lsls	r2, r2, #31
 8007dd8:	d501      	bpl.n	8007dde <_printf_float+0x1ba>
 8007dda:	3302      	adds	r3, #2
 8007ddc:	e7f4      	b.n	8007dc8 <_printf_float+0x1a4>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7f2      	b.n	8007dc8 <_printf_float+0x1a4>
 8007de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	4299      	cmp	r1, r3
 8007dea:	db05      	blt.n	8007df8 <_printf_float+0x1d4>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	6121      	str	r1, [r4, #16]
 8007df0:	07d8      	lsls	r0, r3, #31
 8007df2:	d5ea      	bpl.n	8007dca <_printf_float+0x1a6>
 8007df4:	1c4b      	adds	r3, r1, #1
 8007df6:	e7e7      	b.n	8007dc8 <_printf_float+0x1a4>
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	bfd4      	ite	le
 8007dfc:	f1c1 0202 	rsble	r2, r1, #2
 8007e00:	2201      	movgt	r2, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	e7e0      	b.n	8007dc8 <_printf_float+0x1a4>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	055a      	lsls	r2, r3, #21
 8007e0a:	d407      	bmi.n	8007e1c <_printf_float+0x1f8>
 8007e0c:	6923      	ldr	r3, [r4, #16]
 8007e0e:	4642      	mov	r2, r8
 8007e10:	4631      	mov	r1, r6
 8007e12:	4628      	mov	r0, r5
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	d12c      	bne.n	8007e74 <_printf_float+0x250>
 8007e1a:	e764      	b.n	8007ce6 <_printf_float+0xc2>
 8007e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e20:	f240 80e0 	bls.w	8007fe4 <_printf_float+0x3c0>
 8007e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f7f8 fe5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d034      	beq.n	8007e9e <_printf_float+0x27a>
 8007e34:	4a37      	ldr	r2, [pc, #220]	; (8007f14 <_printf_float+0x2f0>)
 8007e36:	2301      	movs	r3, #1
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b8      	blx	r7
 8007e3e:	3001      	adds	r0, #1
 8007e40:	f43f af51 	beq.w	8007ce6 <_printf_float+0xc2>
 8007e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	db02      	blt.n	8007e52 <_printf_float+0x22e>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	07d8      	lsls	r0, r3, #31
 8007e50:	d510      	bpl.n	8007e74 <_printf_float+0x250>
 8007e52:	ee18 3a10 	vmov	r3, s16
 8007e56:	4652      	mov	r2, sl
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	47b8      	blx	r7
 8007e5e:	3001      	adds	r0, #1
 8007e60:	f43f af41 	beq.w	8007ce6 <_printf_float+0xc2>
 8007e64:	f04f 0800 	mov.w	r8, #0
 8007e68:	f104 091a 	add.w	r9, r4, #26
 8007e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	4543      	cmp	r3, r8
 8007e72:	dc09      	bgt.n	8007e88 <_printf_float+0x264>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	f100 8105 	bmi.w	8008086 <_printf_float+0x462>
 8007e7c:	68e0      	ldr	r0, [r4, #12]
 8007e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e80:	4298      	cmp	r0, r3
 8007e82:	bfb8      	it	lt
 8007e84:	4618      	movlt	r0, r3
 8007e86:	e730      	b.n	8007cea <_printf_float+0xc6>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f af27 	beq.w	8007ce6 <_printf_float+0xc2>
 8007e98:	f108 0801 	add.w	r8, r8, #1
 8007e9c:	e7e6      	b.n	8007e6c <_printf_float+0x248>
 8007e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc39      	bgt.n	8007f18 <_printf_float+0x2f4>
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <_printf_float+0x2f0>)
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f af19 	beq.w	8007ce6 <_printf_float+0xc2>
 8007eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	d102      	bne.n	8007ec2 <_printf_float+0x29e>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	07d9      	lsls	r1, r3, #31
 8007ec0:	d5d8      	bpl.n	8007e74 <_printf_float+0x250>
 8007ec2:	ee18 3a10 	vmov	r3, s16
 8007ec6:	4652      	mov	r2, sl
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f af09 	beq.w	8007ce6 <_printf_float+0xc2>
 8007ed4:	f04f 0900 	mov.w	r9, #0
 8007ed8:	f104 0a1a 	add.w	sl, r4, #26
 8007edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ede:	425b      	negs	r3, r3
 8007ee0:	454b      	cmp	r3, r9
 8007ee2:	dc01      	bgt.n	8007ee8 <_printf_float+0x2c4>
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee6:	e792      	b.n	8007e0e <_printf_float+0x1ea>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4652      	mov	r2, sl
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f aef7 	beq.w	8007ce6 <_printf_float+0xc2>
 8007ef8:	f109 0901 	add.w	r9, r9, #1
 8007efc:	e7ee      	b.n	8007edc <_printf_float+0x2b8>
 8007efe:	bf00      	nop
 8007f00:	7fefffff 	.word	0x7fefffff
 8007f04:	0800cf04 	.word	0x0800cf04
 8007f08:	0800cf08 	.word	0x0800cf08
 8007f0c:	0800cf10 	.word	0x0800cf10
 8007f10:	0800cf0c 	.word	0x0800cf0c
 8007f14:	0800d371 	.word	0x0800d371
 8007f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	bfa8      	it	ge
 8007f20:	461a      	movge	r2, r3
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	4691      	mov	r9, r2
 8007f26:	dc37      	bgt.n	8007f98 <_printf_float+0x374>
 8007f28:	f04f 0b00 	mov.w	fp, #0
 8007f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f30:	f104 021a 	add.w	r2, r4, #26
 8007f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	eba3 0309 	sub.w	r3, r3, r9
 8007f3c:	455b      	cmp	r3, fp
 8007f3e:	dc33      	bgt.n	8007fa8 <_printf_float+0x384>
 8007f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f44:	429a      	cmp	r2, r3
 8007f46:	db3b      	blt.n	8007fc0 <_printf_float+0x39c>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07da      	lsls	r2, r3, #31
 8007f4c:	d438      	bmi.n	8007fc0 <_printf_float+0x39c>
 8007f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f50:	9a05      	ldr	r2, [sp, #20]
 8007f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f54:	1a9a      	subs	r2, r3, r2
 8007f56:	eba3 0901 	sub.w	r9, r3, r1
 8007f5a:	4591      	cmp	r9, r2
 8007f5c:	bfa8      	it	ge
 8007f5e:	4691      	movge	r9, r2
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	dc35      	bgt.n	8007fd2 <_printf_float+0x3ae>
 8007f66:	f04f 0800 	mov.w	r8, #0
 8007f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f6e:	f104 0a1a 	add.w	sl, r4, #26
 8007f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	eba3 0309 	sub.w	r3, r3, r9
 8007f7c:	4543      	cmp	r3, r8
 8007f7e:	f77f af79 	ble.w	8007e74 <_printf_float+0x250>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4652      	mov	r2, sl
 8007f86:	4631      	mov	r1, r6
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b8      	blx	r7
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	f43f aeaa 	beq.w	8007ce6 <_printf_float+0xc2>
 8007f92:	f108 0801 	add.w	r8, r8, #1
 8007f96:	e7ec      	b.n	8007f72 <_printf_float+0x34e>
 8007f98:	4613      	mov	r3, r2
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	d1c0      	bne.n	8007f28 <_printf_float+0x304>
 8007fa6:	e69e      	b.n	8007ce6 <_printf_float+0xc2>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	9205      	str	r2, [sp, #20]
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f ae97 	beq.w	8007ce6 <_printf_float+0xc2>
 8007fb8:	9a05      	ldr	r2, [sp, #20]
 8007fba:	f10b 0b01 	add.w	fp, fp, #1
 8007fbe:	e7b9      	b.n	8007f34 <_printf_float+0x310>
 8007fc0:	ee18 3a10 	vmov	r3, s16
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d1be      	bne.n	8007f4e <_printf_float+0x32a>
 8007fd0:	e689      	b.n	8007ce6 <_printf_float+0xc2>
 8007fd2:	9a05      	ldr	r2, [sp, #20]
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	4442      	add	r2, r8
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d1c1      	bne.n	8007f66 <_printf_float+0x342>
 8007fe2:	e680      	b.n	8007ce6 <_printf_float+0xc2>
 8007fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fe6:	2a01      	cmp	r2, #1
 8007fe8:	dc01      	bgt.n	8007fee <_printf_float+0x3ca>
 8007fea:	07db      	lsls	r3, r3, #31
 8007fec:	d538      	bpl.n	8008060 <_printf_float+0x43c>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae74 	beq.w	8007ce6 <_printf_float+0xc2>
 8007ffe:	ee18 3a10 	vmov	r3, s16
 8008002:	4652      	mov	r2, sl
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f ae6b 	beq.w	8007ce6 <_printf_float+0xc2>
 8008010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	f7f8 fd66 	bl	8000ae8 <__aeabi_dcmpeq>
 800801c:	b9d8      	cbnz	r0, 8008056 <_printf_float+0x432>
 800801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008020:	f108 0201 	add.w	r2, r8, #1
 8008024:	3b01      	subs	r3, #1
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	d10e      	bne.n	800804e <_printf_float+0x42a>
 8008030:	e659      	b.n	8007ce6 <_printf_float+0xc2>
 8008032:	2301      	movs	r3, #1
 8008034:	4652      	mov	r2, sl
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f ae52 	beq.w	8007ce6 <_printf_float+0xc2>
 8008042:	f108 0801 	add.w	r8, r8, #1
 8008046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008048:	3b01      	subs	r3, #1
 800804a:	4543      	cmp	r3, r8
 800804c:	dcf1      	bgt.n	8008032 <_printf_float+0x40e>
 800804e:	464b      	mov	r3, r9
 8008050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008054:	e6dc      	b.n	8007e10 <_printf_float+0x1ec>
 8008056:	f04f 0800 	mov.w	r8, #0
 800805a:	f104 0a1a 	add.w	sl, r4, #26
 800805e:	e7f2      	b.n	8008046 <_printf_float+0x422>
 8008060:	2301      	movs	r3, #1
 8008062:	4642      	mov	r2, r8
 8008064:	e7df      	b.n	8008026 <_printf_float+0x402>
 8008066:	2301      	movs	r3, #1
 8008068:	464a      	mov	r2, r9
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f ae38 	beq.w	8007ce6 <_printf_float+0xc2>
 8008076:	f108 0801 	add.w	r8, r8, #1
 800807a:	68e3      	ldr	r3, [r4, #12]
 800807c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800807e:	1a5b      	subs	r3, r3, r1
 8008080:	4543      	cmp	r3, r8
 8008082:	dcf0      	bgt.n	8008066 <_printf_float+0x442>
 8008084:	e6fa      	b.n	8007e7c <_printf_float+0x258>
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	f104 0919 	add.w	r9, r4, #25
 800808e:	e7f4      	b.n	800807a <_printf_float+0x456>

08008090 <_printf_common>:
 8008090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	4616      	mov	r6, r2
 8008096:	4699      	mov	r9, r3
 8008098:	688a      	ldr	r2, [r1, #8]
 800809a:	690b      	ldr	r3, [r1, #16]
 800809c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080a0:	4293      	cmp	r3, r2
 80080a2:	bfb8      	it	lt
 80080a4:	4613      	movlt	r3, r2
 80080a6:	6033      	str	r3, [r6, #0]
 80080a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ac:	4607      	mov	r7, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b10a      	cbz	r2, 80080b6 <_printf_common+0x26>
 80080b2:	3301      	adds	r3, #1
 80080b4:	6033      	str	r3, [r6, #0]
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	0699      	lsls	r1, r3, #26
 80080ba:	bf42      	ittt	mi
 80080bc:	6833      	ldrmi	r3, [r6, #0]
 80080be:	3302      	addmi	r3, #2
 80080c0:	6033      	strmi	r3, [r6, #0]
 80080c2:	6825      	ldr	r5, [r4, #0]
 80080c4:	f015 0506 	ands.w	r5, r5, #6
 80080c8:	d106      	bne.n	80080d8 <_printf_common+0x48>
 80080ca:	f104 0a19 	add.w	sl, r4, #25
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	6832      	ldr	r2, [r6, #0]
 80080d2:	1a9b      	subs	r3, r3, r2
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	dc26      	bgt.n	8008126 <_printf_common+0x96>
 80080d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080dc:	1e13      	subs	r3, r2, #0
 80080de:	6822      	ldr	r2, [r4, #0]
 80080e0:	bf18      	it	ne
 80080e2:	2301      	movne	r3, #1
 80080e4:	0692      	lsls	r2, r2, #26
 80080e6:	d42b      	bmi.n	8008140 <_printf_common+0xb0>
 80080e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ec:	4649      	mov	r1, r9
 80080ee:	4638      	mov	r0, r7
 80080f0:	47c0      	blx	r8
 80080f2:	3001      	adds	r0, #1
 80080f4:	d01e      	beq.n	8008134 <_printf_common+0xa4>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	68e5      	ldr	r5, [r4, #12]
 80080fa:	6832      	ldr	r2, [r6, #0]
 80080fc:	f003 0306 	and.w	r3, r3, #6
 8008100:	2b04      	cmp	r3, #4
 8008102:	bf08      	it	eq
 8008104:	1aad      	subeq	r5, r5, r2
 8008106:	68a3      	ldr	r3, [r4, #8]
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	bf0c      	ite	eq
 800810c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008110:	2500      	movne	r5, #0
 8008112:	4293      	cmp	r3, r2
 8008114:	bfc4      	itt	gt
 8008116:	1a9b      	subgt	r3, r3, r2
 8008118:	18ed      	addgt	r5, r5, r3
 800811a:	2600      	movs	r6, #0
 800811c:	341a      	adds	r4, #26
 800811e:	42b5      	cmp	r5, r6
 8008120:	d11a      	bne.n	8008158 <_printf_common+0xc8>
 8008122:	2000      	movs	r0, #0
 8008124:	e008      	b.n	8008138 <_printf_common+0xa8>
 8008126:	2301      	movs	r3, #1
 8008128:	4652      	mov	r2, sl
 800812a:	4649      	mov	r1, r9
 800812c:	4638      	mov	r0, r7
 800812e:	47c0      	blx	r8
 8008130:	3001      	adds	r0, #1
 8008132:	d103      	bne.n	800813c <_printf_common+0xac>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813c:	3501      	adds	r5, #1
 800813e:	e7c6      	b.n	80080ce <_printf_common+0x3e>
 8008140:	18e1      	adds	r1, r4, r3
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	2030      	movs	r0, #48	; 0x30
 8008146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800814a:	4422      	add	r2, r4
 800814c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008154:	3302      	adds	r3, #2
 8008156:	e7c7      	b.n	80080e8 <_printf_common+0x58>
 8008158:	2301      	movs	r3, #1
 800815a:	4622      	mov	r2, r4
 800815c:	4649      	mov	r1, r9
 800815e:	4638      	mov	r0, r7
 8008160:	47c0      	blx	r8
 8008162:	3001      	adds	r0, #1
 8008164:	d0e6      	beq.n	8008134 <_printf_common+0xa4>
 8008166:	3601      	adds	r6, #1
 8008168:	e7d9      	b.n	800811e <_printf_common+0x8e>
	...

0800816c <_printf_i>:
 800816c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	7e0f      	ldrb	r7, [r1, #24]
 8008172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008174:	2f78      	cmp	r7, #120	; 0x78
 8008176:	4691      	mov	r9, r2
 8008178:	4680      	mov	r8, r0
 800817a:	460c      	mov	r4, r1
 800817c:	469a      	mov	sl, r3
 800817e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008182:	d807      	bhi.n	8008194 <_printf_i+0x28>
 8008184:	2f62      	cmp	r7, #98	; 0x62
 8008186:	d80a      	bhi.n	800819e <_printf_i+0x32>
 8008188:	2f00      	cmp	r7, #0
 800818a:	f000 80d8 	beq.w	800833e <_printf_i+0x1d2>
 800818e:	2f58      	cmp	r7, #88	; 0x58
 8008190:	f000 80a3 	beq.w	80082da <_printf_i+0x16e>
 8008194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800819c:	e03a      	b.n	8008214 <_printf_i+0xa8>
 800819e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081a2:	2b15      	cmp	r3, #21
 80081a4:	d8f6      	bhi.n	8008194 <_printf_i+0x28>
 80081a6:	a101      	add	r1, pc, #4	; (adr r1, 80081ac <_printf_i+0x40>)
 80081a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081ac:	08008205 	.word	0x08008205
 80081b0:	08008219 	.word	0x08008219
 80081b4:	08008195 	.word	0x08008195
 80081b8:	08008195 	.word	0x08008195
 80081bc:	08008195 	.word	0x08008195
 80081c0:	08008195 	.word	0x08008195
 80081c4:	08008219 	.word	0x08008219
 80081c8:	08008195 	.word	0x08008195
 80081cc:	08008195 	.word	0x08008195
 80081d0:	08008195 	.word	0x08008195
 80081d4:	08008195 	.word	0x08008195
 80081d8:	08008325 	.word	0x08008325
 80081dc:	08008249 	.word	0x08008249
 80081e0:	08008307 	.word	0x08008307
 80081e4:	08008195 	.word	0x08008195
 80081e8:	08008195 	.word	0x08008195
 80081ec:	08008347 	.word	0x08008347
 80081f0:	08008195 	.word	0x08008195
 80081f4:	08008249 	.word	0x08008249
 80081f8:	08008195 	.word	0x08008195
 80081fc:	08008195 	.word	0x08008195
 8008200:	0800830f 	.word	0x0800830f
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	1d1a      	adds	r2, r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	602a      	str	r2, [r5, #0]
 800820c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008214:	2301      	movs	r3, #1
 8008216:	e0a3      	b.n	8008360 <_printf_i+0x1f4>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	6829      	ldr	r1, [r5, #0]
 800821c:	0606      	lsls	r6, r0, #24
 800821e:	f101 0304 	add.w	r3, r1, #4
 8008222:	d50a      	bpl.n	800823a <_printf_i+0xce>
 8008224:	680e      	ldr	r6, [r1, #0]
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	2e00      	cmp	r6, #0
 800822a:	da03      	bge.n	8008234 <_printf_i+0xc8>
 800822c:	232d      	movs	r3, #45	; 0x2d
 800822e:	4276      	negs	r6, r6
 8008230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008234:	485e      	ldr	r0, [pc, #376]	; (80083b0 <_printf_i+0x244>)
 8008236:	230a      	movs	r3, #10
 8008238:	e019      	b.n	800826e <_printf_i+0x102>
 800823a:	680e      	ldr	r6, [r1, #0]
 800823c:	602b      	str	r3, [r5, #0]
 800823e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008242:	bf18      	it	ne
 8008244:	b236      	sxthne	r6, r6
 8008246:	e7ef      	b.n	8008228 <_printf_i+0xbc>
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	6820      	ldr	r0, [r4, #0]
 800824c:	1d19      	adds	r1, r3, #4
 800824e:	6029      	str	r1, [r5, #0]
 8008250:	0601      	lsls	r1, r0, #24
 8008252:	d501      	bpl.n	8008258 <_printf_i+0xec>
 8008254:	681e      	ldr	r6, [r3, #0]
 8008256:	e002      	b.n	800825e <_printf_i+0xf2>
 8008258:	0646      	lsls	r6, r0, #25
 800825a:	d5fb      	bpl.n	8008254 <_printf_i+0xe8>
 800825c:	881e      	ldrh	r6, [r3, #0]
 800825e:	4854      	ldr	r0, [pc, #336]	; (80083b0 <_printf_i+0x244>)
 8008260:	2f6f      	cmp	r7, #111	; 0x6f
 8008262:	bf0c      	ite	eq
 8008264:	2308      	moveq	r3, #8
 8008266:	230a      	movne	r3, #10
 8008268:	2100      	movs	r1, #0
 800826a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800826e:	6865      	ldr	r5, [r4, #4]
 8008270:	60a5      	str	r5, [r4, #8]
 8008272:	2d00      	cmp	r5, #0
 8008274:	bfa2      	ittt	ge
 8008276:	6821      	ldrge	r1, [r4, #0]
 8008278:	f021 0104 	bicge.w	r1, r1, #4
 800827c:	6021      	strge	r1, [r4, #0]
 800827e:	b90e      	cbnz	r6, 8008284 <_printf_i+0x118>
 8008280:	2d00      	cmp	r5, #0
 8008282:	d04d      	beq.n	8008320 <_printf_i+0x1b4>
 8008284:	4615      	mov	r5, r2
 8008286:	fbb6 f1f3 	udiv	r1, r6, r3
 800828a:	fb03 6711 	mls	r7, r3, r1, r6
 800828e:	5dc7      	ldrb	r7, [r0, r7]
 8008290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008294:	4637      	mov	r7, r6
 8008296:	42bb      	cmp	r3, r7
 8008298:	460e      	mov	r6, r1
 800829a:	d9f4      	bls.n	8008286 <_printf_i+0x11a>
 800829c:	2b08      	cmp	r3, #8
 800829e:	d10b      	bne.n	80082b8 <_printf_i+0x14c>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	07de      	lsls	r6, r3, #31
 80082a4:	d508      	bpl.n	80082b8 <_printf_i+0x14c>
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	6861      	ldr	r1, [r4, #4]
 80082aa:	4299      	cmp	r1, r3
 80082ac:	bfde      	ittt	le
 80082ae:	2330      	movle	r3, #48	; 0x30
 80082b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082b8:	1b52      	subs	r2, r2, r5
 80082ba:	6122      	str	r2, [r4, #16]
 80082bc:	f8cd a000 	str.w	sl, [sp]
 80082c0:	464b      	mov	r3, r9
 80082c2:	aa03      	add	r2, sp, #12
 80082c4:	4621      	mov	r1, r4
 80082c6:	4640      	mov	r0, r8
 80082c8:	f7ff fee2 	bl	8008090 <_printf_common>
 80082cc:	3001      	adds	r0, #1
 80082ce:	d14c      	bne.n	800836a <_printf_i+0x1fe>
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295
 80082d4:	b004      	add	sp, #16
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	4835      	ldr	r0, [pc, #212]	; (80083b0 <_printf_i+0x244>)
 80082dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082e0:	6829      	ldr	r1, [r5, #0]
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80082e8:	6029      	str	r1, [r5, #0]
 80082ea:	061d      	lsls	r5, r3, #24
 80082ec:	d514      	bpl.n	8008318 <_printf_i+0x1ac>
 80082ee:	07df      	lsls	r7, r3, #31
 80082f0:	bf44      	itt	mi
 80082f2:	f043 0320 	orrmi.w	r3, r3, #32
 80082f6:	6023      	strmi	r3, [r4, #0]
 80082f8:	b91e      	cbnz	r6, 8008302 <_printf_i+0x196>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	f023 0320 	bic.w	r3, r3, #32
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	2310      	movs	r3, #16
 8008304:	e7b0      	b.n	8008268 <_printf_i+0xfc>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	f043 0320 	orr.w	r3, r3, #32
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	2378      	movs	r3, #120	; 0x78
 8008310:	4828      	ldr	r0, [pc, #160]	; (80083b4 <_printf_i+0x248>)
 8008312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008316:	e7e3      	b.n	80082e0 <_printf_i+0x174>
 8008318:	0659      	lsls	r1, r3, #25
 800831a:	bf48      	it	mi
 800831c:	b2b6      	uxthmi	r6, r6
 800831e:	e7e6      	b.n	80082ee <_printf_i+0x182>
 8008320:	4615      	mov	r5, r2
 8008322:	e7bb      	b.n	800829c <_printf_i+0x130>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	6826      	ldr	r6, [r4, #0]
 8008328:	6961      	ldr	r1, [r4, #20]
 800832a:	1d18      	adds	r0, r3, #4
 800832c:	6028      	str	r0, [r5, #0]
 800832e:	0635      	lsls	r5, r6, #24
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	d501      	bpl.n	8008338 <_printf_i+0x1cc>
 8008334:	6019      	str	r1, [r3, #0]
 8008336:	e002      	b.n	800833e <_printf_i+0x1d2>
 8008338:	0670      	lsls	r0, r6, #25
 800833a:	d5fb      	bpl.n	8008334 <_printf_i+0x1c8>
 800833c:	8019      	strh	r1, [r3, #0]
 800833e:	2300      	movs	r3, #0
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	4615      	mov	r5, r2
 8008344:	e7ba      	b.n	80082bc <_printf_i+0x150>
 8008346:	682b      	ldr	r3, [r5, #0]
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	602a      	str	r2, [r5, #0]
 800834c:	681d      	ldr	r5, [r3, #0]
 800834e:	6862      	ldr	r2, [r4, #4]
 8008350:	2100      	movs	r1, #0
 8008352:	4628      	mov	r0, r5
 8008354:	f7f7 ff54 	bl	8000200 <memchr>
 8008358:	b108      	cbz	r0, 800835e <_printf_i+0x1f2>
 800835a:	1b40      	subs	r0, r0, r5
 800835c:	6060      	str	r0, [r4, #4]
 800835e:	6863      	ldr	r3, [r4, #4]
 8008360:	6123      	str	r3, [r4, #16]
 8008362:	2300      	movs	r3, #0
 8008364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008368:	e7a8      	b.n	80082bc <_printf_i+0x150>
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	462a      	mov	r2, r5
 800836e:	4649      	mov	r1, r9
 8008370:	4640      	mov	r0, r8
 8008372:	47d0      	blx	sl
 8008374:	3001      	adds	r0, #1
 8008376:	d0ab      	beq.n	80082d0 <_printf_i+0x164>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	079b      	lsls	r3, r3, #30
 800837c:	d413      	bmi.n	80083a6 <_printf_i+0x23a>
 800837e:	68e0      	ldr	r0, [r4, #12]
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	4298      	cmp	r0, r3
 8008384:	bfb8      	it	lt
 8008386:	4618      	movlt	r0, r3
 8008388:	e7a4      	b.n	80082d4 <_printf_i+0x168>
 800838a:	2301      	movs	r3, #1
 800838c:	4632      	mov	r2, r6
 800838e:	4649      	mov	r1, r9
 8008390:	4640      	mov	r0, r8
 8008392:	47d0      	blx	sl
 8008394:	3001      	adds	r0, #1
 8008396:	d09b      	beq.n	80082d0 <_printf_i+0x164>
 8008398:	3501      	adds	r5, #1
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	9903      	ldr	r1, [sp, #12]
 800839e:	1a5b      	subs	r3, r3, r1
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dcf2      	bgt.n	800838a <_printf_i+0x21e>
 80083a4:	e7eb      	b.n	800837e <_printf_i+0x212>
 80083a6:	2500      	movs	r5, #0
 80083a8:	f104 0619 	add.w	r6, r4, #25
 80083ac:	e7f5      	b.n	800839a <_printf_i+0x22e>
 80083ae:	bf00      	nop
 80083b0:	0800cf14 	.word	0x0800cf14
 80083b4:	0800cf25 	.word	0x0800cf25

080083b8 <_scanf_float>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	b087      	sub	sp, #28
 80083be:	4617      	mov	r7, r2
 80083c0:	9303      	str	r3, [sp, #12]
 80083c2:	688b      	ldr	r3, [r1, #8]
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083ca:	bf83      	ittte	hi
 80083cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083d0:	195b      	addhi	r3, r3, r5
 80083d2:	9302      	strhi	r3, [sp, #8]
 80083d4:	2300      	movls	r3, #0
 80083d6:	bf86      	itte	hi
 80083d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083dc:	608b      	strhi	r3, [r1, #8]
 80083de:	9302      	strls	r3, [sp, #8]
 80083e0:	680b      	ldr	r3, [r1, #0]
 80083e2:	468b      	mov	fp, r1
 80083e4:	2500      	movs	r5, #0
 80083e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80083ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80083ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083f2:	4680      	mov	r8, r0
 80083f4:	460c      	mov	r4, r1
 80083f6:	465e      	mov	r6, fp
 80083f8:	46aa      	mov	sl, r5
 80083fa:	46a9      	mov	r9, r5
 80083fc:	9501      	str	r5, [sp, #4]
 80083fe:	68a2      	ldr	r2, [r4, #8]
 8008400:	b152      	cbz	r2, 8008418 <_scanf_float+0x60>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b4e      	cmp	r3, #78	; 0x4e
 8008408:	d864      	bhi.n	80084d4 <_scanf_float+0x11c>
 800840a:	2b40      	cmp	r3, #64	; 0x40
 800840c:	d83c      	bhi.n	8008488 <_scanf_float+0xd0>
 800840e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008412:	b2c8      	uxtb	r0, r1
 8008414:	280e      	cmp	r0, #14
 8008416:	d93a      	bls.n	800848e <_scanf_float+0xd6>
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	d003      	beq.n	8008426 <_scanf_float+0x6e>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800842a:	f1ba 0f01 	cmp.w	sl, #1
 800842e:	f200 8113 	bhi.w	8008658 <_scanf_float+0x2a0>
 8008432:	455e      	cmp	r6, fp
 8008434:	f200 8105 	bhi.w	8008642 <_scanf_float+0x28a>
 8008438:	2501      	movs	r5, #1
 800843a:	4628      	mov	r0, r5
 800843c:	b007      	add	sp, #28
 800843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008442:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008446:	2a0d      	cmp	r2, #13
 8008448:	d8e6      	bhi.n	8008418 <_scanf_float+0x60>
 800844a:	a101      	add	r1, pc, #4	; (adr r1, 8008450 <_scanf_float+0x98>)
 800844c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008450:	0800858f 	.word	0x0800858f
 8008454:	08008419 	.word	0x08008419
 8008458:	08008419 	.word	0x08008419
 800845c:	08008419 	.word	0x08008419
 8008460:	080085ef 	.word	0x080085ef
 8008464:	080085c7 	.word	0x080085c7
 8008468:	08008419 	.word	0x08008419
 800846c:	08008419 	.word	0x08008419
 8008470:	0800859d 	.word	0x0800859d
 8008474:	08008419 	.word	0x08008419
 8008478:	08008419 	.word	0x08008419
 800847c:	08008419 	.word	0x08008419
 8008480:	08008419 	.word	0x08008419
 8008484:	08008555 	.word	0x08008555
 8008488:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800848c:	e7db      	b.n	8008446 <_scanf_float+0x8e>
 800848e:	290e      	cmp	r1, #14
 8008490:	d8c2      	bhi.n	8008418 <_scanf_float+0x60>
 8008492:	a001      	add	r0, pc, #4	; (adr r0, 8008498 <_scanf_float+0xe0>)
 8008494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008498:	08008547 	.word	0x08008547
 800849c:	08008419 	.word	0x08008419
 80084a0:	08008547 	.word	0x08008547
 80084a4:	080085db 	.word	0x080085db
 80084a8:	08008419 	.word	0x08008419
 80084ac:	080084f5 	.word	0x080084f5
 80084b0:	08008531 	.word	0x08008531
 80084b4:	08008531 	.word	0x08008531
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008531 	.word	0x08008531
 80084c0:	08008531 	.word	0x08008531
 80084c4:	08008531 	.word	0x08008531
 80084c8:	08008531 	.word	0x08008531
 80084cc:	08008531 	.word	0x08008531
 80084d0:	08008531 	.word	0x08008531
 80084d4:	2b6e      	cmp	r3, #110	; 0x6e
 80084d6:	d809      	bhi.n	80084ec <_scanf_float+0x134>
 80084d8:	2b60      	cmp	r3, #96	; 0x60
 80084da:	d8b2      	bhi.n	8008442 <_scanf_float+0x8a>
 80084dc:	2b54      	cmp	r3, #84	; 0x54
 80084de:	d077      	beq.n	80085d0 <_scanf_float+0x218>
 80084e0:	2b59      	cmp	r3, #89	; 0x59
 80084e2:	d199      	bne.n	8008418 <_scanf_float+0x60>
 80084e4:	2d07      	cmp	r5, #7
 80084e6:	d197      	bne.n	8008418 <_scanf_float+0x60>
 80084e8:	2508      	movs	r5, #8
 80084ea:	e029      	b.n	8008540 <_scanf_float+0x188>
 80084ec:	2b74      	cmp	r3, #116	; 0x74
 80084ee:	d06f      	beq.n	80085d0 <_scanf_float+0x218>
 80084f0:	2b79      	cmp	r3, #121	; 0x79
 80084f2:	e7f6      	b.n	80084e2 <_scanf_float+0x12a>
 80084f4:	6821      	ldr	r1, [r4, #0]
 80084f6:	05c8      	lsls	r0, r1, #23
 80084f8:	d51a      	bpl.n	8008530 <_scanf_float+0x178>
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008500:	6021      	str	r1, [r4, #0]
 8008502:	f109 0901 	add.w	r9, r9, #1
 8008506:	b11b      	cbz	r3, 8008510 <_scanf_float+0x158>
 8008508:	3b01      	subs	r3, #1
 800850a:	3201      	adds	r2, #1
 800850c:	9302      	str	r3, [sp, #8]
 800850e:	60a2      	str	r2, [r4, #8]
 8008510:	68a3      	ldr	r3, [r4, #8]
 8008512:	3b01      	subs	r3, #1
 8008514:	60a3      	str	r3, [r4, #8]
 8008516:	6923      	ldr	r3, [r4, #16]
 8008518:	3301      	adds	r3, #1
 800851a:	6123      	str	r3, [r4, #16]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3b01      	subs	r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	f340 8084 	ble.w	8008630 <_scanf_float+0x278>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	603b      	str	r3, [r7, #0]
 800852e:	e766      	b.n	80083fe <_scanf_float+0x46>
 8008530:	eb1a 0f05 	cmn.w	sl, r5
 8008534:	f47f af70 	bne.w	8008418 <_scanf_float+0x60>
 8008538:	6822      	ldr	r2, [r4, #0]
 800853a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800853e:	6022      	str	r2, [r4, #0]
 8008540:	f806 3b01 	strb.w	r3, [r6], #1
 8008544:	e7e4      	b.n	8008510 <_scanf_float+0x158>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	0610      	lsls	r0, r2, #24
 800854a:	f57f af65 	bpl.w	8008418 <_scanf_float+0x60>
 800854e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008552:	e7f4      	b.n	800853e <_scanf_float+0x186>
 8008554:	f1ba 0f00 	cmp.w	sl, #0
 8008558:	d10e      	bne.n	8008578 <_scanf_float+0x1c0>
 800855a:	f1b9 0f00 	cmp.w	r9, #0
 800855e:	d10e      	bne.n	800857e <_scanf_float+0x1c6>
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008566:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800856a:	d108      	bne.n	800857e <_scanf_float+0x1c6>
 800856c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008570:	6022      	str	r2, [r4, #0]
 8008572:	f04f 0a01 	mov.w	sl, #1
 8008576:	e7e3      	b.n	8008540 <_scanf_float+0x188>
 8008578:	f1ba 0f02 	cmp.w	sl, #2
 800857c:	d055      	beq.n	800862a <_scanf_float+0x272>
 800857e:	2d01      	cmp	r5, #1
 8008580:	d002      	beq.n	8008588 <_scanf_float+0x1d0>
 8008582:	2d04      	cmp	r5, #4
 8008584:	f47f af48 	bne.w	8008418 <_scanf_float+0x60>
 8008588:	3501      	adds	r5, #1
 800858a:	b2ed      	uxtb	r5, r5
 800858c:	e7d8      	b.n	8008540 <_scanf_float+0x188>
 800858e:	f1ba 0f01 	cmp.w	sl, #1
 8008592:	f47f af41 	bne.w	8008418 <_scanf_float+0x60>
 8008596:	f04f 0a02 	mov.w	sl, #2
 800859a:	e7d1      	b.n	8008540 <_scanf_float+0x188>
 800859c:	b97d      	cbnz	r5, 80085be <_scanf_float+0x206>
 800859e:	f1b9 0f00 	cmp.w	r9, #0
 80085a2:	f47f af3c 	bne.w	800841e <_scanf_float+0x66>
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085b0:	f47f af39 	bne.w	8008426 <_scanf_float+0x6e>
 80085b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085b8:	6022      	str	r2, [r4, #0]
 80085ba:	2501      	movs	r5, #1
 80085bc:	e7c0      	b.n	8008540 <_scanf_float+0x188>
 80085be:	2d03      	cmp	r5, #3
 80085c0:	d0e2      	beq.n	8008588 <_scanf_float+0x1d0>
 80085c2:	2d05      	cmp	r5, #5
 80085c4:	e7de      	b.n	8008584 <_scanf_float+0x1cc>
 80085c6:	2d02      	cmp	r5, #2
 80085c8:	f47f af26 	bne.w	8008418 <_scanf_float+0x60>
 80085cc:	2503      	movs	r5, #3
 80085ce:	e7b7      	b.n	8008540 <_scanf_float+0x188>
 80085d0:	2d06      	cmp	r5, #6
 80085d2:	f47f af21 	bne.w	8008418 <_scanf_float+0x60>
 80085d6:	2507      	movs	r5, #7
 80085d8:	e7b2      	b.n	8008540 <_scanf_float+0x188>
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	0591      	lsls	r1, r2, #22
 80085de:	f57f af1b 	bpl.w	8008418 <_scanf_float+0x60>
 80085e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80085e6:	6022      	str	r2, [r4, #0]
 80085e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80085ec:	e7a8      	b.n	8008540 <_scanf_float+0x188>
 80085ee:	6822      	ldr	r2, [r4, #0]
 80085f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80085f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80085f8:	d006      	beq.n	8008608 <_scanf_float+0x250>
 80085fa:	0550      	lsls	r0, r2, #21
 80085fc:	f57f af0c 	bpl.w	8008418 <_scanf_float+0x60>
 8008600:	f1b9 0f00 	cmp.w	r9, #0
 8008604:	f43f af0f 	beq.w	8008426 <_scanf_float+0x6e>
 8008608:	0591      	lsls	r1, r2, #22
 800860a:	bf58      	it	pl
 800860c:	9901      	ldrpl	r1, [sp, #4]
 800860e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008612:	bf58      	it	pl
 8008614:	eba9 0101 	subpl.w	r1, r9, r1
 8008618:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800861c:	bf58      	it	pl
 800861e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	f04f 0900 	mov.w	r9, #0
 8008628:	e78a      	b.n	8008540 <_scanf_float+0x188>
 800862a:	f04f 0a03 	mov.w	sl, #3
 800862e:	e787      	b.n	8008540 <_scanf_float+0x188>
 8008630:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008634:	4639      	mov	r1, r7
 8008636:	4640      	mov	r0, r8
 8008638:	4798      	blx	r3
 800863a:	2800      	cmp	r0, #0
 800863c:	f43f aedf 	beq.w	80083fe <_scanf_float+0x46>
 8008640:	e6ea      	b.n	8008418 <_scanf_float+0x60>
 8008642:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800864a:	463a      	mov	r2, r7
 800864c:	4640      	mov	r0, r8
 800864e:	4798      	blx	r3
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	3b01      	subs	r3, #1
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	e6ec      	b.n	8008432 <_scanf_float+0x7a>
 8008658:	1e6b      	subs	r3, r5, #1
 800865a:	2b06      	cmp	r3, #6
 800865c:	d825      	bhi.n	80086aa <_scanf_float+0x2f2>
 800865e:	2d02      	cmp	r5, #2
 8008660:	d836      	bhi.n	80086d0 <_scanf_float+0x318>
 8008662:	455e      	cmp	r6, fp
 8008664:	f67f aee8 	bls.w	8008438 <_scanf_float+0x80>
 8008668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800866c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008670:	463a      	mov	r2, r7
 8008672:	4640      	mov	r0, r8
 8008674:	4798      	blx	r3
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	3b01      	subs	r3, #1
 800867a:	6123      	str	r3, [r4, #16]
 800867c:	e7f1      	b.n	8008662 <_scanf_float+0x2aa>
 800867e:	9802      	ldr	r0, [sp, #8]
 8008680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008684:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008688:	9002      	str	r0, [sp, #8]
 800868a:	463a      	mov	r2, r7
 800868c:	4640      	mov	r0, r8
 800868e:	4798      	blx	r3
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	3b01      	subs	r3, #1
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	f10a 3aff 	add.w	sl, sl, #4294967295
 800869a:	fa5f fa8a 	uxtb.w	sl, sl
 800869e:	f1ba 0f02 	cmp.w	sl, #2
 80086a2:	d1ec      	bne.n	800867e <_scanf_float+0x2c6>
 80086a4:	3d03      	subs	r5, #3
 80086a6:	b2ed      	uxtb	r5, r5
 80086a8:	1b76      	subs	r6, r6, r5
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	05da      	lsls	r2, r3, #23
 80086ae:	d52f      	bpl.n	8008710 <_scanf_float+0x358>
 80086b0:	055b      	lsls	r3, r3, #21
 80086b2:	d510      	bpl.n	80086d6 <_scanf_float+0x31e>
 80086b4:	455e      	cmp	r6, fp
 80086b6:	f67f aebf 	bls.w	8008438 <_scanf_float+0x80>
 80086ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086c2:	463a      	mov	r2, r7
 80086c4:	4640      	mov	r0, r8
 80086c6:	4798      	blx	r3
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	e7f1      	b.n	80086b4 <_scanf_float+0x2fc>
 80086d0:	46aa      	mov	sl, r5
 80086d2:	9602      	str	r6, [sp, #8]
 80086d4:	e7df      	b.n	8008696 <_scanf_float+0x2de>
 80086d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	2965      	cmp	r1, #101	; 0x65
 80086de:	f103 33ff 	add.w	r3, r3, #4294967295
 80086e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80086e6:	6123      	str	r3, [r4, #16]
 80086e8:	d00c      	beq.n	8008704 <_scanf_float+0x34c>
 80086ea:	2945      	cmp	r1, #69	; 0x45
 80086ec:	d00a      	beq.n	8008704 <_scanf_float+0x34c>
 80086ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086f2:	463a      	mov	r2, r7
 80086f4:	4640      	mov	r0, r8
 80086f6:	4798      	blx	r3
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086fe:	3b01      	subs	r3, #1
 8008700:	1eb5      	subs	r5, r6, #2
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008708:	463a      	mov	r2, r7
 800870a:	4640      	mov	r0, r8
 800870c:	4798      	blx	r3
 800870e:	462e      	mov	r6, r5
 8008710:	6825      	ldr	r5, [r4, #0]
 8008712:	f015 0510 	ands.w	r5, r5, #16
 8008716:	d159      	bne.n	80087cc <_scanf_float+0x414>
 8008718:	7035      	strb	r5, [r6, #0]
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008724:	d11b      	bne.n	800875e <_scanf_float+0x3a6>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	454b      	cmp	r3, r9
 800872a:	eba3 0209 	sub.w	r2, r3, r9
 800872e:	d123      	bne.n	8008778 <_scanf_float+0x3c0>
 8008730:	2200      	movs	r2, #0
 8008732:	4659      	mov	r1, fp
 8008734:	4640      	mov	r0, r8
 8008736:	f000 ff99 	bl	800966c <_strtod_r>
 800873a:	6822      	ldr	r2, [r4, #0]
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	f012 0f02 	tst.w	r2, #2
 8008742:	ec57 6b10 	vmov	r6, r7, d0
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	d021      	beq.n	800878e <_scanf_float+0x3d6>
 800874a:	9903      	ldr	r1, [sp, #12]
 800874c:	1d1a      	adds	r2, r3, #4
 800874e:	600a      	str	r2, [r1, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	e9c3 6700 	strd	r6, r7, [r3]
 8008756:	68e3      	ldr	r3, [r4, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60e3      	str	r3, [r4, #12]
 800875c:	e66d      	b.n	800843a <_scanf_float+0x82>
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0e5      	beq.n	8008730 <_scanf_float+0x378>
 8008764:	9905      	ldr	r1, [sp, #20]
 8008766:	230a      	movs	r3, #10
 8008768:	462a      	mov	r2, r5
 800876a:	3101      	adds	r1, #1
 800876c:	4640      	mov	r0, r8
 800876e:	f001 f805 	bl	800977c <_strtol_r>
 8008772:	9b04      	ldr	r3, [sp, #16]
 8008774:	9e05      	ldr	r6, [sp, #20]
 8008776:	1ac2      	subs	r2, r0, r3
 8008778:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800877c:	429e      	cmp	r6, r3
 800877e:	bf28      	it	cs
 8008780:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008784:	4912      	ldr	r1, [pc, #72]	; (80087d0 <_scanf_float+0x418>)
 8008786:	4630      	mov	r0, r6
 8008788:	f000 f8ba 	bl	8008900 <siprintf>
 800878c:	e7d0      	b.n	8008730 <_scanf_float+0x378>
 800878e:	9903      	ldr	r1, [sp, #12]
 8008790:	f012 0f04 	tst.w	r2, #4
 8008794:	f103 0204 	add.w	r2, r3, #4
 8008798:	600a      	str	r2, [r1, #0]
 800879a:	d1d9      	bne.n	8008750 <_scanf_float+0x398>
 800879c:	f8d3 8000 	ldr.w	r8, [r3]
 80087a0:	ee10 2a10 	vmov	r2, s0
 80087a4:	ee10 0a10 	vmov	r0, s0
 80087a8:	463b      	mov	r3, r7
 80087aa:	4639      	mov	r1, r7
 80087ac:	f7f8 f9ce 	bl	8000b4c <__aeabi_dcmpun>
 80087b0:	b128      	cbz	r0, 80087be <_scanf_float+0x406>
 80087b2:	4808      	ldr	r0, [pc, #32]	; (80087d4 <_scanf_float+0x41c>)
 80087b4:	f000 f89e 	bl	80088f4 <nanf>
 80087b8:	ed88 0a00 	vstr	s0, [r8]
 80087bc:	e7cb      	b.n	8008756 <_scanf_float+0x39e>
 80087be:	4630      	mov	r0, r6
 80087c0:	4639      	mov	r1, r7
 80087c2:	f7f8 fa21 	bl	8000c08 <__aeabi_d2f>
 80087c6:	f8c8 0000 	str.w	r0, [r8]
 80087ca:	e7c4      	b.n	8008756 <_scanf_float+0x39e>
 80087cc:	2500      	movs	r5, #0
 80087ce:	e634      	b.n	800843a <_scanf_float+0x82>
 80087d0:	0800cf36 	.word	0x0800cf36
 80087d4:	0800d3c3 	.word	0x0800d3c3

080087d8 <iprintf>:
 80087d8:	b40f      	push	{r0, r1, r2, r3}
 80087da:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <iprintf+0x2c>)
 80087dc:	b513      	push	{r0, r1, r4, lr}
 80087de:	681c      	ldr	r4, [r3, #0]
 80087e0:	b124      	cbz	r4, 80087ec <iprintf+0x14>
 80087e2:	69a3      	ldr	r3, [r4, #24]
 80087e4:	b913      	cbnz	r3, 80087ec <iprintf+0x14>
 80087e6:	4620      	mov	r0, r4
 80087e8:	f002 f842 	bl	800a870 <__sinit>
 80087ec:	ab05      	add	r3, sp, #20
 80087ee:	9a04      	ldr	r2, [sp, #16]
 80087f0:	68a1      	ldr	r1, [r4, #8]
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	4620      	mov	r0, r4
 80087f6:	f003 fdf1 	bl	800c3dc <_vfiprintf_r>
 80087fa:	b002      	add	sp, #8
 80087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008800:	b004      	add	sp, #16
 8008802:	4770      	bx	lr
 8008804:	2000000c 	.word	0x2000000c

08008808 <_puts_r>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	460e      	mov	r6, r1
 800880c:	4605      	mov	r5, r0
 800880e:	b118      	cbz	r0, 8008818 <_puts_r+0x10>
 8008810:	6983      	ldr	r3, [r0, #24]
 8008812:	b90b      	cbnz	r3, 8008818 <_puts_r+0x10>
 8008814:	f002 f82c 	bl	800a870 <__sinit>
 8008818:	69ab      	ldr	r3, [r5, #24]
 800881a:	68ac      	ldr	r4, [r5, #8]
 800881c:	b913      	cbnz	r3, 8008824 <_puts_r+0x1c>
 800881e:	4628      	mov	r0, r5
 8008820:	f002 f826 	bl	800a870 <__sinit>
 8008824:	4b2c      	ldr	r3, [pc, #176]	; (80088d8 <_puts_r+0xd0>)
 8008826:	429c      	cmp	r4, r3
 8008828:	d120      	bne.n	800886c <_puts_r+0x64>
 800882a:	686c      	ldr	r4, [r5, #4]
 800882c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800882e:	07db      	lsls	r3, r3, #31
 8008830:	d405      	bmi.n	800883e <_puts_r+0x36>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	0598      	lsls	r0, r3, #22
 8008836:	d402      	bmi.n	800883e <_puts_r+0x36>
 8008838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800883a:	f002 fc2a 	bl	800b092 <__retarget_lock_acquire_recursive>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	0719      	lsls	r1, r3, #28
 8008842:	d51d      	bpl.n	8008880 <_puts_r+0x78>
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	b1db      	cbz	r3, 8008880 <_puts_r+0x78>
 8008848:	3e01      	subs	r6, #1
 800884a:	68a3      	ldr	r3, [r4, #8]
 800884c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008850:	3b01      	subs	r3, #1
 8008852:	60a3      	str	r3, [r4, #8]
 8008854:	bb39      	cbnz	r1, 80088a6 <_puts_r+0x9e>
 8008856:	2b00      	cmp	r3, #0
 8008858:	da38      	bge.n	80088cc <_puts_r+0xc4>
 800885a:	4622      	mov	r2, r4
 800885c:	210a      	movs	r1, #10
 800885e:	4628      	mov	r0, r5
 8008860:	f000 ff8e 	bl	8009780 <__swbuf_r>
 8008864:	3001      	adds	r0, #1
 8008866:	d011      	beq.n	800888c <_puts_r+0x84>
 8008868:	250a      	movs	r5, #10
 800886a:	e011      	b.n	8008890 <_puts_r+0x88>
 800886c:	4b1b      	ldr	r3, [pc, #108]	; (80088dc <_puts_r+0xd4>)
 800886e:	429c      	cmp	r4, r3
 8008870:	d101      	bne.n	8008876 <_puts_r+0x6e>
 8008872:	68ac      	ldr	r4, [r5, #8]
 8008874:	e7da      	b.n	800882c <_puts_r+0x24>
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <_puts_r+0xd8>)
 8008878:	429c      	cmp	r4, r3
 800887a:	bf08      	it	eq
 800887c:	68ec      	ldreq	r4, [r5, #12]
 800887e:	e7d5      	b.n	800882c <_puts_r+0x24>
 8008880:	4621      	mov	r1, r4
 8008882:	4628      	mov	r0, r5
 8008884:	f000 ffe0 	bl	8009848 <__swsetup_r>
 8008888:	2800      	cmp	r0, #0
 800888a:	d0dd      	beq.n	8008848 <_puts_r+0x40>
 800888c:	f04f 35ff 	mov.w	r5, #4294967295
 8008890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008892:	07da      	lsls	r2, r3, #31
 8008894:	d405      	bmi.n	80088a2 <_puts_r+0x9a>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	059b      	lsls	r3, r3, #22
 800889a:	d402      	bmi.n	80088a2 <_puts_r+0x9a>
 800889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800889e:	f002 fbf9 	bl	800b094 <__retarget_lock_release_recursive>
 80088a2:	4628      	mov	r0, r5
 80088a4:	bd70      	pop	{r4, r5, r6, pc}
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	da04      	bge.n	80088b4 <_puts_r+0xac>
 80088aa:	69a2      	ldr	r2, [r4, #24]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	dc06      	bgt.n	80088be <_puts_r+0xb6>
 80088b0:	290a      	cmp	r1, #10
 80088b2:	d004      	beq.n	80088be <_puts_r+0xb6>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	6022      	str	r2, [r4, #0]
 80088ba:	7019      	strb	r1, [r3, #0]
 80088bc:	e7c5      	b.n	800884a <_puts_r+0x42>
 80088be:	4622      	mov	r2, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 ff5d 	bl	8009780 <__swbuf_r>
 80088c6:	3001      	adds	r0, #1
 80088c8:	d1bf      	bne.n	800884a <_puts_r+0x42>
 80088ca:	e7df      	b.n	800888c <_puts_r+0x84>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	250a      	movs	r5, #10
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	6022      	str	r2, [r4, #0]
 80088d4:	701d      	strb	r5, [r3, #0]
 80088d6:	e7db      	b.n	8008890 <_puts_r+0x88>
 80088d8:	0800d144 	.word	0x0800d144
 80088dc:	0800d164 	.word	0x0800d164
 80088e0:	0800d124 	.word	0x0800d124

080088e4 <puts>:
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <puts+0xc>)
 80088e6:	4601      	mov	r1, r0
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	f7ff bf8d 	b.w	8008808 <_puts_r>
 80088ee:	bf00      	nop
 80088f0:	2000000c 	.word	0x2000000c

080088f4 <nanf>:
 80088f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088fc <nanf+0x8>
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	7fc00000 	.word	0x7fc00000

08008900 <siprintf>:
 8008900:	b40e      	push	{r1, r2, r3}
 8008902:	b500      	push	{lr}
 8008904:	b09c      	sub	sp, #112	; 0x70
 8008906:	ab1d      	add	r3, sp, #116	; 0x74
 8008908:	9002      	str	r0, [sp, #8]
 800890a:	9006      	str	r0, [sp, #24]
 800890c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008910:	4809      	ldr	r0, [pc, #36]	; (8008938 <siprintf+0x38>)
 8008912:	9107      	str	r1, [sp, #28]
 8008914:	9104      	str	r1, [sp, #16]
 8008916:	4909      	ldr	r1, [pc, #36]	; (800893c <siprintf+0x3c>)
 8008918:	f853 2b04 	ldr.w	r2, [r3], #4
 800891c:	9105      	str	r1, [sp, #20]
 800891e:	6800      	ldr	r0, [r0, #0]
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	a902      	add	r1, sp, #8
 8008924:	f003 fa5e 	bl	800bde4 <_svfiprintf_r>
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	b01c      	add	sp, #112	; 0x70
 8008930:	f85d eb04 	ldr.w	lr, [sp], #4
 8008934:	b003      	add	sp, #12
 8008936:	4770      	bx	lr
 8008938:	2000000c 	.word	0x2000000c
 800893c:	ffff0208 	.word	0xffff0208

08008940 <siscanf>:
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	b510      	push	{r4, lr}
 8008944:	b09f      	sub	sp, #124	; 0x7c
 8008946:	ac21      	add	r4, sp, #132	; 0x84
 8008948:	f44f 7101 	mov.w	r1, #516	; 0x204
 800894c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008950:	9201      	str	r2, [sp, #4]
 8008952:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008956:	9004      	str	r0, [sp, #16]
 8008958:	9008      	str	r0, [sp, #32]
 800895a:	f7f7 fc43 	bl	80001e4 <strlen>
 800895e:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <siscanf+0x50>)
 8008960:	9005      	str	r0, [sp, #20]
 8008962:	9009      	str	r0, [sp, #36]	; 0x24
 8008964:	930d      	str	r3, [sp, #52]	; 0x34
 8008966:	480b      	ldr	r0, [pc, #44]	; (8008994 <siscanf+0x54>)
 8008968:	9a01      	ldr	r2, [sp, #4]
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	9403      	str	r4, [sp, #12]
 800896e:	2300      	movs	r3, #0
 8008970:	9311      	str	r3, [sp, #68]	; 0x44
 8008972:	9316      	str	r3, [sp, #88]	; 0x58
 8008974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008978:	f8ad 301e 	strh.w	r3, [sp, #30]
 800897c:	a904      	add	r1, sp, #16
 800897e:	4623      	mov	r3, r4
 8008980:	f003 fb8a 	bl	800c098 <__ssvfiscanf_r>
 8008984:	b01f      	add	sp, #124	; 0x7c
 8008986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800898a:	b003      	add	sp, #12
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	080089bb 	.word	0x080089bb
 8008994:	2000000c 	.word	0x2000000c

08008998 <__sread>:
 8008998:	b510      	push	{r4, lr}
 800899a:	460c      	mov	r4, r1
 800899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a0:	f003 ff9e 	bl	800c8e0 <_read_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	bfab      	itete	ge
 80089a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089aa:	89a3      	ldrhlt	r3, [r4, #12]
 80089ac:	181b      	addge	r3, r3, r0
 80089ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089b2:	bfac      	ite	ge
 80089b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089b6:	81a3      	strhlt	r3, [r4, #12]
 80089b8:	bd10      	pop	{r4, pc}

080089ba <__seofread>:
 80089ba:	2000      	movs	r0, #0
 80089bc:	4770      	bx	lr

080089be <__swrite>:
 80089be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c2:	461f      	mov	r7, r3
 80089c4:	898b      	ldrh	r3, [r1, #12]
 80089c6:	05db      	lsls	r3, r3, #23
 80089c8:	4605      	mov	r5, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	4616      	mov	r6, r2
 80089ce:	d505      	bpl.n	80089dc <__swrite+0x1e>
 80089d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d4:	2302      	movs	r3, #2
 80089d6:	2200      	movs	r2, #0
 80089d8:	f002 fb5e 	bl	800b098 <_lseek_r>
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	4632      	mov	r2, r6
 80089ea:	463b      	mov	r3, r7
 80089ec:	4628      	mov	r0, r5
 80089ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089f2:	f000 bf17 	b.w	8009824 <_write_r>

080089f6 <__sseek>:
 80089f6:	b510      	push	{r4, lr}
 80089f8:	460c      	mov	r4, r1
 80089fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fe:	f002 fb4b 	bl	800b098 <_lseek_r>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	bf15      	itete	ne
 8008a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a12:	81a3      	strheq	r3, [r4, #12]
 8008a14:	bf18      	it	ne
 8008a16:	81a3      	strhne	r3, [r4, #12]
 8008a18:	bd10      	pop	{r4, pc}

08008a1a <__sclose>:
 8008a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1e:	f000 bf81 	b.w	8009924 <_close_r>

08008a22 <sulp>:
 8008a22:	b570      	push	{r4, r5, r6, lr}
 8008a24:	4604      	mov	r4, r0
 8008a26:	460d      	mov	r5, r1
 8008a28:	ec45 4b10 	vmov	d0, r4, r5
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	f002 ff37 	bl	800b8a0 <__ulp>
 8008a32:	ec51 0b10 	vmov	r0, r1, d0
 8008a36:	b17e      	cbz	r6, 8008a58 <sulp+0x36>
 8008a38:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dd09      	ble.n	8008a58 <sulp+0x36>
 8008a44:	051b      	lsls	r3, r3, #20
 8008a46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a4a:	2400      	movs	r4, #0
 8008a4c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f7f7 fde0 	bl	8000618 <__aeabi_dmul>
 8008a58:	bd70      	pop	{r4, r5, r6, pc}
 8008a5a:	0000      	movs	r0, r0
 8008a5c:	0000      	movs	r0, r0
	...

08008a60 <_strtod_l>:
 8008a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	ed2d 8b02 	vpush	{d8}
 8008a68:	b09d      	sub	sp, #116	; 0x74
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9318      	str	r3, [sp, #96]	; 0x60
 8008a70:	4ba2      	ldr	r3, [pc, #648]	; (8008cfc <_strtod_l+0x29c>)
 8008a72:	9213      	str	r2, [sp, #76]	; 0x4c
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	9305      	str	r3, [sp, #20]
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	4688      	mov	r8, r1
 8008a7e:	f7f7 fbb1 	bl	80001e4 <strlen>
 8008a82:	f04f 0a00 	mov.w	sl, #0
 8008a86:	4605      	mov	r5, r0
 8008a88:	f04f 0b00 	mov.w	fp, #0
 8008a8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a92:	781a      	ldrb	r2, [r3, #0]
 8008a94:	2a2b      	cmp	r2, #43	; 0x2b
 8008a96:	d04e      	beq.n	8008b36 <_strtod_l+0xd6>
 8008a98:	d83b      	bhi.n	8008b12 <_strtod_l+0xb2>
 8008a9a:	2a0d      	cmp	r2, #13
 8008a9c:	d834      	bhi.n	8008b08 <_strtod_l+0xa8>
 8008a9e:	2a08      	cmp	r2, #8
 8008aa0:	d834      	bhi.n	8008b0c <_strtod_l+0xac>
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	d03e      	beq.n	8008b24 <_strtod_l+0xc4>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8008aaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008aac:	7833      	ldrb	r3, [r6, #0]
 8008aae:	2b30      	cmp	r3, #48	; 0x30
 8008ab0:	f040 80b0 	bne.w	8008c14 <_strtod_l+0x1b4>
 8008ab4:	7873      	ldrb	r3, [r6, #1]
 8008ab6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008aba:	2b58      	cmp	r3, #88	; 0x58
 8008abc:	d168      	bne.n	8008b90 <_strtod_l+0x130>
 8008abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	ab18      	add	r3, sp, #96	; 0x60
 8008ac4:	9702      	str	r7, [sp, #8]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	4a8d      	ldr	r2, [pc, #564]	; (8008d00 <_strtod_l+0x2a0>)
 8008aca:	ab19      	add	r3, sp, #100	; 0x64
 8008acc:	a917      	add	r1, sp, #92	; 0x5c
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f001 ffd2 	bl	800aa78 <__gethex>
 8008ad4:	f010 0707 	ands.w	r7, r0, #7
 8008ad8:	4605      	mov	r5, r0
 8008ada:	d005      	beq.n	8008ae8 <_strtod_l+0x88>
 8008adc:	2f06      	cmp	r7, #6
 8008ade:	d12c      	bne.n	8008b3a <_strtod_l+0xda>
 8008ae0:	3601      	adds	r6, #1
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f040 8590 	bne.w	8009610 <_strtod_l+0xbb0>
 8008af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af2:	b1eb      	cbz	r3, 8008b30 <_strtod_l+0xd0>
 8008af4:	4652      	mov	r2, sl
 8008af6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008afa:	ec43 2b10 	vmov	d0, r2, r3
 8008afe:	b01d      	add	sp, #116	; 0x74
 8008b00:	ecbd 8b02 	vpop	{d8}
 8008b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b08:	2a20      	cmp	r2, #32
 8008b0a:	d1cc      	bne.n	8008aa6 <_strtod_l+0x46>
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b10:	e7be      	b.n	8008a90 <_strtod_l+0x30>
 8008b12:	2a2d      	cmp	r2, #45	; 0x2d
 8008b14:	d1c7      	bne.n	8008aa6 <_strtod_l+0x46>
 8008b16:	2201      	movs	r2, #1
 8008b18:	920a      	str	r2, [sp, #40]	; 0x28
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1c2      	bne.n	8008aaa <_strtod_l+0x4a>
 8008b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 856e 	bne.w	800960c <_strtod_l+0xbac>
 8008b30:	4652      	mov	r2, sl
 8008b32:	465b      	mov	r3, fp
 8008b34:	e7e1      	b.n	8008afa <_strtod_l+0x9a>
 8008b36:	2200      	movs	r2, #0
 8008b38:	e7ee      	b.n	8008b18 <_strtod_l+0xb8>
 8008b3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b3c:	b13a      	cbz	r2, 8008b4e <_strtod_l+0xee>
 8008b3e:	2135      	movs	r1, #53	; 0x35
 8008b40:	a81a      	add	r0, sp, #104	; 0x68
 8008b42:	f002 ffb8 	bl	800bab6 <__copybits>
 8008b46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f002 fb77 	bl	800b23c <_Bfree>
 8008b4e:	3f01      	subs	r7, #1
 8008b50:	2f04      	cmp	r7, #4
 8008b52:	d806      	bhi.n	8008b62 <_strtod_l+0x102>
 8008b54:	e8df f007 	tbb	[pc, r7]
 8008b58:	1714030a 	.word	0x1714030a
 8008b5c:	0a          	.byte	0x0a
 8008b5d:	00          	.byte	0x00
 8008b5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008b62:	0728      	lsls	r0, r5, #28
 8008b64:	d5c0      	bpl.n	8008ae8 <_strtod_l+0x88>
 8008b66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b6a:	e7bd      	b.n	8008ae8 <_strtod_l+0x88>
 8008b6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008b70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008b7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b7e:	e7f0      	b.n	8008b62 <_strtod_l+0x102>
 8008b80:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008d04 <_strtod_l+0x2a4>
 8008b84:	e7ed      	b.n	8008b62 <_strtod_l+0x102>
 8008b86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008b8a:	f04f 3aff 	mov.w	sl, #4294967295
 8008b8e:	e7e8      	b.n	8008b62 <_strtod_l+0x102>
 8008b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b30      	cmp	r3, #48	; 0x30
 8008b9a:	d0f9      	beq.n	8008b90 <_strtod_l+0x130>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0a3      	beq.n	8008ae8 <_strtod_l+0x88>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f04f 0900 	mov.w	r9, #0
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008baa:	9308      	str	r3, [sp, #32]
 8008bac:	f8cd 901c 	str.w	r9, [sp, #28]
 8008bb0:	464f      	mov	r7, r9
 8008bb2:	220a      	movs	r2, #10
 8008bb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008bb6:	7806      	ldrb	r6, [r0, #0]
 8008bb8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008bbc:	b2d9      	uxtb	r1, r3
 8008bbe:	2909      	cmp	r1, #9
 8008bc0:	d92a      	bls.n	8008c18 <_strtod_l+0x1b8>
 8008bc2:	9905      	ldr	r1, [sp, #20]
 8008bc4:	462a      	mov	r2, r5
 8008bc6:	f003 feef 	bl	800c9a8 <strncmp>
 8008bca:	b398      	cbz	r0, 8008c34 <_strtod_l+0x1d4>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	4632      	mov	r2, r6
 8008bd0:	463d      	mov	r5, r7
 8008bd2:	9005      	str	r0, [sp, #20]
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2a65      	cmp	r2, #101	; 0x65
 8008bd8:	d001      	beq.n	8008bde <_strtod_l+0x17e>
 8008bda:	2a45      	cmp	r2, #69	; 0x45
 8008bdc:	d118      	bne.n	8008c10 <_strtod_l+0x1b0>
 8008bde:	b91d      	cbnz	r5, 8008be8 <_strtod_l+0x188>
 8008be0:	9a04      	ldr	r2, [sp, #16]
 8008be2:	4302      	orrs	r2, r0
 8008be4:	d09e      	beq.n	8008b24 <_strtod_l+0xc4>
 8008be6:	2500      	movs	r5, #0
 8008be8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008bec:	f108 0201 	add.w	r2, r8, #1
 8008bf0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bf2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008bf6:	2a2b      	cmp	r2, #43	; 0x2b
 8008bf8:	d075      	beq.n	8008ce6 <_strtod_l+0x286>
 8008bfa:	2a2d      	cmp	r2, #45	; 0x2d
 8008bfc:	d07b      	beq.n	8008cf6 <_strtod_l+0x296>
 8008bfe:	f04f 0c00 	mov.w	ip, #0
 8008c02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c06:	2909      	cmp	r1, #9
 8008c08:	f240 8082 	bls.w	8008d10 <_strtod_l+0x2b0>
 8008c0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c10:	2600      	movs	r6, #0
 8008c12:	e09d      	b.n	8008d50 <_strtod_l+0x2f0>
 8008c14:	2300      	movs	r3, #0
 8008c16:	e7c4      	b.n	8008ba2 <_strtod_l+0x142>
 8008c18:	2f08      	cmp	r7, #8
 8008c1a:	bfd8      	it	le
 8008c1c:	9907      	ldrle	r1, [sp, #28]
 8008c1e:	f100 0001 	add.w	r0, r0, #1
 8008c22:	bfda      	itte	le
 8008c24:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c28:	9307      	strle	r3, [sp, #28]
 8008c2a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c2e:	3701      	adds	r7, #1
 8008c30:	9017      	str	r0, [sp, #92]	; 0x5c
 8008c32:	e7bf      	b.n	8008bb4 <_strtod_l+0x154>
 8008c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c36:	195a      	adds	r2, r3, r5
 8008c38:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c3a:	5d5a      	ldrb	r2, [r3, r5]
 8008c3c:	2f00      	cmp	r7, #0
 8008c3e:	d037      	beq.n	8008cb0 <_strtod_l+0x250>
 8008c40:	9005      	str	r0, [sp, #20]
 8008c42:	463d      	mov	r5, r7
 8008c44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008c48:	2b09      	cmp	r3, #9
 8008c4a:	d912      	bls.n	8008c72 <_strtod_l+0x212>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e7c2      	b.n	8008bd6 <_strtod_l+0x176>
 8008c50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c56:	785a      	ldrb	r2, [r3, #1]
 8008c58:	3001      	adds	r0, #1
 8008c5a:	2a30      	cmp	r2, #48	; 0x30
 8008c5c:	d0f8      	beq.n	8008c50 <_strtod_l+0x1f0>
 8008c5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	f200 84d9 	bhi.w	800961a <_strtod_l+0xbba>
 8008c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c6a:	9005      	str	r0, [sp, #20]
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	9308      	str	r3, [sp, #32]
 8008c70:	4605      	mov	r5, r0
 8008c72:	3a30      	subs	r2, #48	; 0x30
 8008c74:	f100 0301 	add.w	r3, r0, #1
 8008c78:	d014      	beq.n	8008ca4 <_strtod_l+0x244>
 8008c7a:	9905      	ldr	r1, [sp, #20]
 8008c7c:	4419      	add	r1, r3
 8008c7e:	9105      	str	r1, [sp, #20]
 8008c80:	462b      	mov	r3, r5
 8008c82:	eb00 0e05 	add.w	lr, r0, r5
 8008c86:	210a      	movs	r1, #10
 8008c88:	4573      	cmp	r3, lr
 8008c8a:	d113      	bne.n	8008cb4 <_strtod_l+0x254>
 8008c8c:	182b      	adds	r3, r5, r0
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	f105 0501 	add.w	r5, r5, #1
 8008c94:	4405      	add	r5, r0
 8008c96:	dc1c      	bgt.n	8008cd2 <_strtod_l+0x272>
 8008c98:	9907      	ldr	r1, [sp, #28]
 8008c9a:	230a      	movs	r3, #10
 8008c9c:	fb03 2301 	mla	r3, r3, r1, r2
 8008ca0:	9307      	str	r3, [sp, #28]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ca6:	1c51      	adds	r1, r2, #1
 8008ca8:	9117      	str	r1, [sp, #92]	; 0x5c
 8008caa:	7852      	ldrb	r2, [r2, #1]
 8008cac:	4618      	mov	r0, r3
 8008cae:	e7c9      	b.n	8008c44 <_strtod_l+0x1e4>
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	e7d2      	b.n	8008c5a <_strtod_l+0x1fa>
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	dc04      	bgt.n	8008cc2 <_strtod_l+0x262>
 8008cb8:	9e07      	ldr	r6, [sp, #28]
 8008cba:	434e      	muls	r6, r1
 8008cbc:	9607      	str	r6, [sp, #28]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	e7e2      	b.n	8008c88 <_strtod_l+0x228>
 8008cc2:	f103 0c01 	add.w	ip, r3, #1
 8008cc6:	f1bc 0f10 	cmp.w	ip, #16
 8008cca:	bfd8      	it	le
 8008ccc:	fb01 f909 	mulle.w	r9, r1, r9
 8008cd0:	e7f5      	b.n	8008cbe <_strtod_l+0x25e>
 8008cd2:	2d10      	cmp	r5, #16
 8008cd4:	bfdc      	itt	le
 8008cd6:	230a      	movle	r3, #10
 8008cd8:	fb03 2909 	mlale	r9, r3, r9, r2
 8008cdc:	e7e1      	b.n	8008ca2 <_strtod_l+0x242>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e77c      	b.n	8008be0 <_strtod_l+0x180>
 8008ce6:	f04f 0c00 	mov.w	ip, #0
 8008cea:	f108 0202 	add.w	r2, r8, #2
 8008cee:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cf0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008cf4:	e785      	b.n	8008c02 <_strtod_l+0x1a2>
 8008cf6:	f04f 0c01 	mov.w	ip, #1
 8008cfa:	e7f6      	b.n	8008cea <_strtod_l+0x28a>
 8008cfc:	0800d1ec 	.word	0x0800d1ec
 8008d00:	0800cf3c 	.word	0x0800cf3c
 8008d04:	7ff00000 	.word	0x7ff00000
 8008d08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d0a:	1c51      	adds	r1, r2, #1
 8008d0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d0e:	7852      	ldrb	r2, [r2, #1]
 8008d10:	2a30      	cmp	r2, #48	; 0x30
 8008d12:	d0f9      	beq.n	8008d08 <_strtod_l+0x2a8>
 8008d14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d18:	2908      	cmp	r1, #8
 8008d1a:	f63f af79 	bhi.w	8008c10 <_strtod_l+0x1b0>
 8008d1e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d24:	9206      	str	r2, [sp, #24]
 8008d26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d28:	1c51      	adds	r1, r2, #1
 8008d2a:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d2c:	7852      	ldrb	r2, [r2, #1]
 8008d2e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d32:	2e09      	cmp	r6, #9
 8008d34:	d937      	bls.n	8008da6 <_strtod_l+0x346>
 8008d36:	9e06      	ldr	r6, [sp, #24]
 8008d38:	1b89      	subs	r1, r1, r6
 8008d3a:	2908      	cmp	r1, #8
 8008d3c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d40:	dc02      	bgt.n	8008d48 <_strtod_l+0x2e8>
 8008d42:	4576      	cmp	r6, lr
 8008d44:	bfa8      	it	ge
 8008d46:	4676      	movge	r6, lr
 8008d48:	f1bc 0f00 	cmp.w	ip, #0
 8008d4c:	d000      	beq.n	8008d50 <_strtod_l+0x2f0>
 8008d4e:	4276      	negs	r6, r6
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	d14d      	bne.n	8008df0 <_strtod_l+0x390>
 8008d54:	9904      	ldr	r1, [sp, #16]
 8008d56:	4301      	orrs	r1, r0
 8008d58:	f47f aec6 	bne.w	8008ae8 <_strtod_l+0x88>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f47f aee1 	bne.w	8008b24 <_strtod_l+0xc4>
 8008d62:	2a69      	cmp	r2, #105	; 0x69
 8008d64:	d027      	beq.n	8008db6 <_strtod_l+0x356>
 8008d66:	dc24      	bgt.n	8008db2 <_strtod_l+0x352>
 8008d68:	2a49      	cmp	r2, #73	; 0x49
 8008d6a:	d024      	beq.n	8008db6 <_strtod_l+0x356>
 8008d6c:	2a4e      	cmp	r2, #78	; 0x4e
 8008d6e:	f47f aed9 	bne.w	8008b24 <_strtod_l+0xc4>
 8008d72:	499f      	ldr	r1, [pc, #636]	; (8008ff0 <_strtod_l+0x590>)
 8008d74:	a817      	add	r0, sp, #92	; 0x5c
 8008d76:	f002 f8d7 	bl	800af28 <__match>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	f43f aed2 	beq.w	8008b24 <_strtod_l+0xc4>
 8008d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b28      	cmp	r3, #40	; 0x28
 8008d86:	d12d      	bne.n	8008de4 <_strtod_l+0x384>
 8008d88:	499a      	ldr	r1, [pc, #616]	; (8008ff4 <_strtod_l+0x594>)
 8008d8a:	aa1a      	add	r2, sp, #104	; 0x68
 8008d8c:	a817      	add	r0, sp, #92	; 0x5c
 8008d8e:	f002 f8df 	bl	800af50 <__hexnan>
 8008d92:	2805      	cmp	r0, #5
 8008d94:	d126      	bne.n	8008de4 <_strtod_l+0x384>
 8008d96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d98:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008d9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008da0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008da4:	e6a0      	b.n	8008ae8 <_strtod_l+0x88>
 8008da6:	210a      	movs	r1, #10
 8008da8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008dac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008db0:	e7b9      	b.n	8008d26 <_strtod_l+0x2c6>
 8008db2:	2a6e      	cmp	r2, #110	; 0x6e
 8008db4:	e7db      	b.n	8008d6e <_strtod_l+0x30e>
 8008db6:	4990      	ldr	r1, [pc, #576]	; (8008ff8 <_strtod_l+0x598>)
 8008db8:	a817      	add	r0, sp, #92	; 0x5c
 8008dba:	f002 f8b5 	bl	800af28 <__match>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f43f aeb0 	beq.w	8008b24 <_strtod_l+0xc4>
 8008dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dc6:	498d      	ldr	r1, [pc, #564]	; (8008ffc <_strtod_l+0x59c>)
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	a817      	add	r0, sp, #92	; 0x5c
 8008dcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8008dce:	f002 f8ab 	bl	800af28 <__match>
 8008dd2:	b910      	cbnz	r0, 8008dda <_strtod_l+0x37a>
 8008dd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8008dda:	f8df b230 	ldr.w	fp, [pc, #560]	; 800900c <_strtod_l+0x5ac>
 8008dde:	f04f 0a00 	mov.w	sl, #0
 8008de2:	e681      	b.n	8008ae8 <_strtod_l+0x88>
 8008de4:	4886      	ldr	r0, [pc, #536]	; (8009000 <_strtod_l+0x5a0>)
 8008de6:	f003 fd8f 	bl	800c908 <nan>
 8008dea:	ec5b ab10 	vmov	sl, fp, d0
 8008dee:	e67b      	b.n	8008ae8 <_strtod_l+0x88>
 8008df0:	9b05      	ldr	r3, [sp, #20]
 8008df2:	9807      	ldr	r0, [sp, #28]
 8008df4:	1af3      	subs	r3, r6, r3
 8008df6:	2f00      	cmp	r7, #0
 8008df8:	bf08      	it	eq
 8008dfa:	462f      	moveq	r7, r5
 8008dfc:	2d10      	cmp	r5, #16
 8008dfe:	9306      	str	r3, [sp, #24]
 8008e00:	46a8      	mov	r8, r5
 8008e02:	bfa8      	it	ge
 8008e04:	f04f 0810 	movge.w	r8, #16
 8008e08:	f7f7 fb8c 	bl	8000524 <__aeabi_ui2d>
 8008e0c:	2d09      	cmp	r5, #9
 8008e0e:	4682      	mov	sl, r0
 8008e10:	468b      	mov	fp, r1
 8008e12:	dd13      	ble.n	8008e3c <_strtod_l+0x3dc>
 8008e14:	4b7b      	ldr	r3, [pc, #492]	; (8009004 <_strtod_l+0x5a4>)
 8008e16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e1e:	f7f7 fbfb 	bl	8000618 <__aeabi_dmul>
 8008e22:	4682      	mov	sl, r0
 8008e24:	4648      	mov	r0, r9
 8008e26:	468b      	mov	fp, r1
 8008e28:	f7f7 fb7c 	bl	8000524 <__aeabi_ui2d>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4650      	mov	r0, sl
 8008e32:	4659      	mov	r1, fp
 8008e34:	f7f7 fa3a 	bl	80002ac <__adddf3>
 8008e38:	4682      	mov	sl, r0
 8008e3a:	468b      	mov	fp, r1
 8008e3c:	2d0f      	cmp	r5, #15
 8008e3e:	dc38      	bgt.n	8008eb2 <_strtod_l+0x452>
 8008e40:	9b06      	ldr	r3, [sp, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f43f ae50 	beq.w	8008ae8 <_strtod_l+0x88>
 8008e48:	dd24      	ble.n	8008e94 <_strtod_l+0x434>
 8008e4a:	2b16      	cmp	r3, #22
 8008e4c:	dc0b      	bgt.n	8008e66 <_strtod_l+0x406>
 8008e4e:	496d      	ldr	r1, [pc, #436]	; (8009004 <_strtod_l+0x5a4>)
 8008e50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e58:	4652      	mov	r2, sl
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	f7f7 fbdc 	bl	8000618 <__aeabi_dmul>
 8008e60:	4682      	mov	sl, r0
 8008e62:	468b      	mov	fp, r1
 8008e64:	e640      	b.n	8008ae8 <_strtod_l+0x88>
 8008e66:	9a06      	ldr	r2, [sp, #24]
 8008e68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	db20      	blt.n	8008eb2 <_strtod_l+0x452>
 8008e70:	4c64      	ldr	r4, [pc, #400]	; (8009004 <_strtod_l+0x5a4>)
 8008e72:	f1c5 050f 	rsb	r5, r5, #15
 8008e76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e7a:	4652      	mov	r2, sl
 8008e7c:	465b      	mov	r3, fp
 8008e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e82:	f7f7 fbc9 	bl	8000618 <__aeabi_dmul>
 8008e86:	9b06      	ldr	r3, [sp, #24]
 8008e88:	1b5d      	subs	r5, r3, r5
 8008e8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e92:	e7e3      	b.n	8008e5c <_strtod_l+0x3fc>
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	3316      	adds	r3, #22
 8008e98:	db0b      	blt.n	8008eb2 <_strtod_l+0x452>
 8008e9a:	9b05      	ldr	r3, [sp, #20]
 8008e9c:	1b9e      	subs	r6, r3, r6
 8008e9e:	4b59      	ldr	r3, [pc, #356]	; (8009004 <_strtod_l+0x5a4>)
 8008ea0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008ea4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ea8:	4650      	mov	r0, sl
 8008eaa:	4659      	mov	r1, fp
 8008eac:	f7f7 fcde 	bl	800086c <__aeabi_ddiv>
 8008eb0:	e7d6      	b.n	8008e60 <_strtod_l+0x400>
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	eba5 0808 	sub.w	r8, r5, r8
 8008eb8:	4498      	add	r8, r3
 8008eba:	f1b8 0f00 	cmp.w	r8, #0
 8008ebe:	dd74      	ble.n	8008faa <_strtod_l+0x54a>
 8008ec0:	f018 030f 	ands.w	r3, r8, #15
 8008ec4:	d00a      	beq.n	8008edc <_strtod_l+0x47c>
 8008ec6:	494f      	ldr	r1, [pc, #316]	; (8009004 <_strtod_l+0x5a4>)
 8008ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ecc:	4652      	mov	r2, sl
 8008ece:	465b      	mov	r3, fp
 8008ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed4:	f7f7 fba0 	bl	8000618 <__aeabi_dmul>
 8008ed8:	4682      	mov	sl, r0
 8008eda:	468b      	mov	fp, r1
 8008edc:	f038 080f 	bics.w	r8, r8, #15
 8008ee0:	d04f      	beq.n	8008f82 <_strtod_l+0x522>
 8008ee2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008ee6:	dd22      	ble.n	8008f2e <_strtod_l+0x4ce>
 8008ee8:	2500      	movs	r5, #0
 8008eea:	462e      	mov	r6, r5
 8008eec:	9507      	str	r5, [sp, #28]
 8008eee:	9505      	str	r5, [sp, #20]
 8008ef0:	2322      	movs	r3, #34	; 0x22
 8008ef2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800900c <_strtod_l+0x5ac>
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	f04f 0a00 	mov.w	sl, #0
 8008efc:	9b07      	ldr	r3, [sp, #28]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f43f adf2 	beq.w	8008ae8 <_strtod_l+0x88>
 8008f04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f06:	4620      	mov	r0, r4
 8008f08:	f002 f998 	bl	800b23c <_Bfree>
 8008f0c:	9905      	ldr	r1, [sp, #20]
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f002 f994 	bl	800b23c <_Bfree>
 8008f14:	4631      	mov	r1, r6
 8008f16:	4620      	mov	r0, r4
 8008f18:	f002 f990 	bl	800b23c <_Bfree>
 8008f1c:	9907      	ldr	r1, [sp, #28]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f002 f98c 	bl	800b23c <_Bfree>
 8008f24:	4629      	mov	r1, r5
 8008f26:	4620      	mov	r0, r4
 8008f28:	f002 f988 	bl	800b23c <_Bfree>
 8008f2c:	e5dc      	b.n	8008ae8 <_strtod_l+0x88>
 8008f2e:	4b36      	ldr	r3, [pc, #216]	; (8009008 <_strtod_l+0x5a8>)
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	2300      	movs	r3, #0
 8008f34:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	4699      	mov	r9, r3
 8008f3e:	f1b8 0f01 	cmp.w	r8, #1
 8008f42:	dc21      	bgt.n	8008f88 <_strtod_l+0x528>
 8008f44:	b10b      	cbz	r3, 8008f4a <_strtod_l+0x4ea>
 8008f46:	4682      	mov	sl, r0
 8008f48:	468b      	mov	fp, r1
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <_strtod_l+0x5a8>)
 8008f4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f50:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f54:	4652      	mov	r2, sl
 8008f56:	465b      	mov	r3, fp
 8008f58:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f5c:	f7f7 fb5c 	bl	8000618 <__aeabi_dmul>
 8008f60:	4b2a      	ldr	r3, [pc, #168]	; (800900c <_strtod_l+0x5ac>)
 8008f62:	460a      	mov	r2, r1
 8008f64:	400b      	ands	r3, r1
 8008f66:	492a      	ldr	r1, [pc, #168]	; (8009010 <_strtod_l+0x5b0>)
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	4682      	mov	sl, r0
 8008f6c:	d8bc      	bhi.n	8008ee8 <_strtod_l+0x488>
 8008f6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f72:	428b      	cmp	r3, r1
 8008f74:	bf86      	itte	hi
 8008f76:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009014 <_strtod_l+0x5b4>
 8008f7a:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f7e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008f82:	2300      	movs	r3, #0
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	e084      	b.n	8009092 <_strtod_l+0x632>
 8008f88:	f018 0f01 	tst.w	r8, #1
 8008f8c:	d005      	beq.n	8008f9a <_strtod_l+0x53a>
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f7f7 fb40 	bl	8000618 <__aeabi_dmul>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	9a04      	ldr	r2, [sp, #16]
 8008f9c:	3208      	adds	r2, #8
 8008f9e:	f109 0901 	add.w	r9, r9, #1
 8008fa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fa6:	9204      	str	r2, [sp, #16]
 8008fa8:	e7c9      	b.n	8008f3e <_strtod_l+0x4de>
 8008faa:	d0ea      	beq.n	8008f82 <_strtod_l+0x522>
 8008fac:	f1c8 0800 	rsb	r8, r8, #0
 8008fb0:	f018 020f 	ands.w	r2, r8, #15
 8008fb4:	d00a      	beq.n	8008fcc <_strtod_l+0x56c>
 8008fb6:	4b13      	ldr	r3, [pc, #76]	; (8009004 <_strtod_l+0x5a4>)
 8008fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fbc:	4650      	mov	r0, sl
 8008fbe:	4659      	mov	r1, fp
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f7f7 fc52 	bl	800086c <__aeabi_ddiv>
 8008fc8:	4682      	mov	sl, r0
 8008fca:	468b      	mov	fp, r1
 8008fcc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008fd0:	d0d7      	beq.n	8008f82 <_strtod_l+0x522>
 8008fd2:	f1b8 0f1f 	cmp.w	r8, #31
 8008fd6:	dd1f      	ble.n	8009018 <_strtod_l+0x5b8>
 8008fd8:	2500      	movs	r5, #0
 8008fda:	462e      	mov	r6, r5
 8008fdc:	9507      	str	r5, [sp, #28]
 8008fde:	9505      	str	r5, [sp, #20]
 8008fe0:	2322      	movs	r3, #34	; 0x22
 8008fe2:	f04f 0a00 	mov.w	sl, #0
 8008fe6:	f04f 0b00 	mov.w	fp, #0
 8008fea:	6023      	str	r3, [r4, #0]
 8008fec:	e786      	b.n	8008efc <_strtod_l+0x49c>
 8008fee:	bf00      	nop
 8008ff0:	0800cf11 	.word	0x0800cf11
 8008ff4:	0800cf50 	.word	0x0800cf50
 8008ff8:	0800cf09 	.word	0x0800cf09
 8008ffc:	0800d094 	.word	0x0800d094
 8009000:	0800d3c3 	.word	0x0800d3c3
 8009004:	0800d288 	.word	0x0800d288
 8009008:	0800d260 	.word	0x0800d260
 800900c:	7ff00000 	.word	0x7ff00000
 8009010:	7ca00000 	.word	0x7ca00000
 8009014:	7fefffff 	.word	0x7fefffff
 8009018:	f018 0310 	ands.w	r3, r8, #16
 800901c:	bf18      	it	ne
 800901e:	236a      	movne	r3, #106	; 0x6a
 8009020:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80093d0 <_strtod_l+0x970>
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	4650      	mov	r0, sl
 8009028:	4659      	mov	r1, fp
 800902a:	2300      	movs	r3, #0
 800902c:	f018 0f01 	tst.w	r8, #1
 8009030:	d004      	beq.n	800903c <_strtod_l+0x5dc>
 8009032:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009036:	f7f7 faef 	bl	8000618 <__aeabi_dmul>
 800903a:	2301      	movs	r3, #1
 800903c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009040:	f109 0908 	add.w	r9, r9, #8
 8009044:	d1f2      	bne.n	800902c <_strtod_l+0x5cc>
 8009046:	b10b      	cbz	r3, 800904c <_strtod_l+0x5ec>
 8009048:	4682      	mov	sl, r0
 800904a:	468b      	mov	fp, r1
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	b1c3      	cbz	r3, 8009082 <_strtod_l+0x622>
 8009050:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009054:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009058:	2b00      	cmp	r3, #0
 800905a:	4659      	mov	r1, fp
 800905c:	dd11      	ble.n	8009082 <_strtod_l+0x622>
 800905e:	2b1f      	cmp	r3, #31
 8009060:	f340 8124 	ble.w	80092ac <_strtod_l+0x84c>
 8009064:	2b34      	cmp	r3, #52	; 0x34
 8009066:	bfde      	ittt	le
 8009068:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800906c:	f04f 33ff 	movle.w	r3, #4294967295
 8009070:	fa03 f202 	lslle.w	r2, r3, r2
 8009074:	f04f 0a00 	mov.w	sl, #0
 8009078:	bfcc      	ite	gt
 800907a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800907e:	ea02 0b01 	andle.w	fp, r2, r1
 8009082:	2200      	movs	r2, #0
 8009084:	2300      	movs	r3, #0
 8009086:	4650      	mov	r0, sl
 8009088:	4659      	mov	r1, fp
 800908a:	f7f7 fd2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800908e:	2800      	cmp	r0, #0
 8009090:	d1a2      	bne.n	8008fd8 <_strtod_l+0x578>
 8009092:	9b07      	ldr	r3, [sp, #28]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	9908      	ldr	r1, [sp, #32]
 8009098:	462b      	mov	r3, r5
 800909a:	463a      	mov	r2, r7
 800909c:	4620      	mov	r0, r4
 800909e:	f002 f935 	bl	800b30c <__s2b>
 80090a2:	9007      	str	r0, [sp, #28]
 80090a4:	2800      	cmp	r0, #0
 80090a6:	f43f af1f 	beq.w	8008ee8 <_strtod_l+0x488>
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	1b9e      	subs	r6, r3, r6
 80090ae:	9b06      	ldr	r3, [sp, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfb4      	ite	lt
 80090b4:	4633      	movlt	r3, r6
 80090b6:	2300      	movge	r3, #0
 80090b8:	930c      	str	r3, [sp, #48]	; 0x30
 80090ba:	9b06      	ldr	r3, [sp, #24]
 80090bc:	2500      	movs	r5, #0
 80090be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090c2:	9312      	str	r3, [sp, #72]	; 0x48
 80090c4:	462e      	mov	r6, r5
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	4620      	mov	r0, r4
 80090ca:	6859      	ldr	r1, [r3, #4]
 80090cc:	f002 f876 	bl	800b1bc <_Balloc>
 80090d0:	9005      	str	r0, [sp, #20]
 80090d2:	2800      	cmp	r0, #0
 80090d4:	f43f af0c 	beq.w	8008ef0 <_strtod_l+0x490>
 80090d8:	9b07      	ldr	r3, [sp, #28]
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	3202      	adds	r2, #2
 80090de:	f103 010c 	add.w	r1, r3, #12
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	300c      	adds	r0, #12
 80090e6:	f7fe fce7 	bl	8007ab8 <memcpy>
 80090ea:	ec4b ab10 	vmov	d0, sl, fp
 80090ee:	aa1a      	add	r2, sp, #104	; 0x68
 80090f0:	a919      	add	r1, sp, #100	; 0x64
 80090f2:	4620      	mov	r0, r4
 80090f4:	f002 fc50 	bl	800b998 <__d2b>
 80090f8:	ec4b ab18 	vmov	d8, sl, fp
 80090fc:	9018      	str	r0, [sp, #96]	; 0x60
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f aef6 	beq.w	8008ef0 <_strtod_l+0x490>
 8009104:	2101      	movs	r1, #1
 8009106:	4620      	mov	r0, r4
 8009108:	f002 f99a 	bl	800b440 <__i2b>
 800910c:	4606      	mov	r6, r0
 800910e:	2800      	cmp	r0, #0
 8009110:	f43f aeee 	beq.w	8008ef0 <_strtod_l+0x490>
 8009114:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009116:	9904      	ldr	r1, [sp, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	bfab      	itete	ge
 800911c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800911e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009120:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009122:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009126:	bfac      	ite	ge
 8009128:	eb03 0902 	addge.w	r9, r3, r2
 800912c:	1ad7      	sublt	r7, r2, r3
 800912e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009130:	eba3 0801 	sub.w	r8, r3, r1
 8009134:	4490      	add	r8, r2
 8009136:	4ba1      	ldr	r3, [pc, #644]	; (80093bc <_strtod_l+0x95c>)
 8009138:	f108 38ff 	add.w	r8, r8, #4294967295
 800913c:	4598      	cmp	r8, r3
 800913e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009142:	f280 80c7 	bge.w	80092d4 <_strtod_l+0x874>
 8009146:	eba3 0308 	sub.w	r3, r3, r8
 800914a:	2b1f      	cmp	r3, #31
 800914c:	eba2 0203 	sub.w	r2, r2, r3
 8009150:	f04f 0101 	mov.w	r1, #1
 8009154:	f300 80b1 	bgt.w	80092ba <_strtod_l+0x85a>
 8009158:	fa01 f303 	lsl.w	r3, r1, r3
 800915c:	930d      	str	r3, [sp, #52]	; 0x34
 800915e:	2300      	movs	r3, #0
 8009160:	9308      	str	r3, [sp, #32]
 8009162:	eb09 0802 	add.w	r8, r9, r2
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	45c1      	cmp	r9, r8
 800916a:	4417      	add	r7, r2
 800916c:	441f      	add	r7, r3
 800916e:	464b      	mov	r3, r9
 8009170:	bfa8      	it	ge
 8009172:	4643      	movge	r3, r8
 8009174:	42bb      	cmp	r3, r7
 8009176:	bfa8      	it	ge
 8009178:	463b      	movge	r3, r7
 800917a:	2b00      	cmp	r3, #0
 800917c:	bfc2      	ittt	gt
 800917e:	eba8 0803 	subgt.w	r8, r8, r3
 8009182:	1aff      	subgt	r7, r7, r3
 8009184:	eba9 0903 	subgt.w	r9, r9, r3
 8009188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800918a:	2b00      	cmp	r3, #0
 800918c:	dd17      	ble.n	80091be <_strtod_l+0x75e>
 800918e:	4631      	mov	r1, r6
 8009190:	461a      	mov	r2, r3
 8009192:	4620      	mov	r0, r4
 8009194:	f002 fa14 	bl	800b5c0 <__pow5mult>
 8009198:	4606      	mov	r6, r0
 800919a:	2800      	cmp	r0, #0
 800919c:	f43f aea8 	beq.w	8008ef0 <_strtod_l+0x490>
 80091a0:	4601      	mov	r1, r0
 80091a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091a4:	4620      	mov	r0, r4
 80091a6:	f002 f961 	bl	800b46c <__multiply>
 80091aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f43f ae9f 	beq.w	8008ef0 <_strtod_l+0x490>
 80091b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091b4:	4620      	mov	r0, r4
 80091b6:	f002 f841 	bl	800b23c <_Bfree>
 80091ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091bc:	9318      	str	r3, [sp, #96]	; 0x60
 80091be:	f1b8 0f00 	cmp.w	r8, #0
 80091c2:	f300 808c 	bgt.w	80092de <_strtod_l+0x87e>
 80091c6:	9b06      	ldr	r3, [sp, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dd08      	ble.n	80091de <_strtod_l+0x77e>
 80091cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091ce:	9905      	ldr	r1, [sp, #20]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f002 f9f5 	bl	800b5c0 <__pow5mult>
 80091d6:	9005      	str	r0, [sp, #20]
 80091d8:	2800      	cmp	r0, #0
 80091da:	f43f ae89 	beq.w	8008ef0 <_strtod_l+0x490>
 80091de:	2f00      	cmp	r7, #0
 80091e0:	dd08      	ble.n	80091f4 <_strtod_l+0x794>
 80091e2:	9905      	ldr	r1, [sp, #20]
 80091e4:	463a      	mov	r2, r7
 80091e6:	4620      	mov	r0, r4
 80091e8:	f002 fa44 	bl	800b674 <__lshift>
 80091ec:	9005      	str	r0, [sp, #20]
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f43f ae7e 	beq.w	8008ef0 <_strtod_l+0x490>
 80091f4:	f1b9 0f00 	cmp.w	r9, #0
 80091f8:	dd08      	ble.n	800920c <_strtod_l+0x7ac>
 80091fa:	4631      	mov	r1, r6
 80091fc:	464a      	mov	r2, r9
 80091fe:	4620      	mov	r0, r4
 8009200:	f002 fa38 	bl	800b674 <__lshift>
 8009204:	4606      	mov	r6, r0
 8009206:	2800      	cmp	r0, #0
 8009208:	f43f ae72 	beq.w	8008ef0 <_strtod_l+0x490>
 800920c:	9a05      	ldr	r2, [sp, #20]
 800920e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009210:	4620      	mov	r0, r4
 8009212:	f002 fabb 	bl	800b78c <__mdiff>
 8009216:	4605      	mov	r5, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	f43f ae69 	beq.w	8008ef0 <_strtod_l+0x490>
 800921e:	68c3      	ldr	r3, [r0, #12]
 8009220:	930b      	str	r3, [sp, #44]	; 0x2c
 8009222:	2300      	movs	r3, #0
 8009224:	60c3      	str	r3, [r0, #12]
 8009226:	4631      	mov	r1, r6
 8009228:	f002 fa94 	bl	800b754 <__mcmp>
 800922c:	2800      	cmp	r0, #0
 800922e:	da60      	bge.n	80092f2 <_strtod_l+0x892>
 8009230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009232:	ea53 030a 	orrs.w	r3, r3, sl
 8009236:	f040 8082 	bne.w	800933e <_strtod_l+0x8de>
 800923a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800923e:	2b00      	cmp	r3, #0
 8009240:	d17d      	bne.n	800933e <_strtod_l+0x8de>
 8009242:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009246:	0d1b      	lsrs	r3, r3, #20
 8009248:	051b      	lsls	r3, r3, #20
 800924a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800924e:	d976      	bls.n	800933e <_strtod_l+0x8de>
 8009250:	696b      	ldr	r3, [r5, #20]
 8009252:	b913      	cbnz	r3, 800925a <_strtod_l+0x7fa>
 8009254:	692b      	ldr	r3, [r5, #16]
 8009256:	2b01      	cmp	r3, #1
 8009258:	dd71      	ble.n	800933e <_strtod_l+0x8de>
 800925a:	4629      	mov	r1, r5
 800925c:	2201      	movs	r2, #1
 800925e:	4620      	mov	r0, r4
 8009260:	f002 fa08 	bl	800b674 <__lshift>
 8009264:	4631      	mov	r1, r6
 8009266:	4605      	mov	r5, r0
 8009268:	f002 fa74 	bl	800b754 <__mcmp>
 800926c:	2800      	cmp	r0, #0
 800926e:	dd66      	ble.n	800933e <_strtod_l+0x8de>
 8009270:	9904      	ldr	r1, [sp, #16]
 8009272:	4a53      	ldr	r2, [pc, #332]	; (80093c0 <_strtod_l+0x960>)
 8009274:	465b      	mov	r3, fp
 8009276:	2900      	cmp	r1, #0
 8009278:	f000 8081 	beq.w	800937e <_strtod_l+0x91e>
 800927c:	ea02 010b 	and.w	r1, r2, fp
 8009280:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009284:	dc7b      	bgt.n	800937e <_strtod_l+0x91e>
 8009286:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800928a:	f77f aea9 	ble.w	8008fe0 <_strtod_l+0x580>
 800928e:	4b4d      	ldr	r3, [pc, #308]	; (80093c4 <_strtod_l+0x964>)
 8009290:	4650      	mov	r0, sl
 8009292:	4659      	mov	r1, fp
 8009294:	2200      	movs	r2, #0
 8009296:	f7f7 f9bf 	bl	8000618 <__aeabi_dmul>
 800929a:	460b      	mov	r3, r1
 800929c:	4303      	orrs	r3, r0
 800929e:	bf08      	it	eq
 80092a0:	2322      	moveq	r3, #34	; 0x22
 80092a2:	4682      	mov	sl, r0
 80092a4:	468b      	mov	fp, r1
 80092a6:	bf08      	it	eq
 80092a8:	6023      	streq	r3, [r4, #0]
 80092aa:	e62b      	b.n	8008f04 <_strtod_l+0x4a4>
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295
 80092b0:	fa02 f303 	lsl.w	r3, r2, r3
 80092b4:	ea03 0a0a 	and.w	sl, r3, sl
 80092b8:	e6e3      	b.n	8009082 <_strtod_l+0x622>
 80092ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80092be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80092c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80092c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80092ca:	fa01 f308 	lsl.w	r3, r1, r8
 80092ce:	9308      	str	r3, [sp, #32]
 80092d0:	910d      	str	r1, [sp, #52]	; 0x34
 80092d2:	e746      	b.n	8009162 <_strtod_l+0x702>
 80092d4:	2300      	movs	r3, #0
 80092d6:	9308      	str	r3, [sp, #32]
 80092d8:	2301      	movs	r3, #1
 80092da:	930d      	str	r3, [sp, #52]	; 0x34
 80092dc:	e741      	b.n	8009162 <_strtod_l+0x702>
 80092de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092e0:	4642      	mov	r2, r8
 80092e2:	4620      	mov	r0, r4
 80092e4:	f002 f9c6 	bl	800b674 <__lshift>
 80092e8:	9018      	str	r0, [sp, #96]	; 0x60
 80092ea:	2800      	cmp	r0, #0
 80092ec:	f47f af6b 	bne.w	80091c6 <_strtod_l+0x766>
 80092f0:	e5fe      	b.n	8008ef0 <_strtod_l+0x490>
 80092f2:	465f      	mov	r7, fp
 80092f4:	d16e      	bne.n	80093d4 <_strtod_l+0x974>
 80092f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092fc:	b342      	cbz	r2, 8009350 <_strtod_l+0x8f0>
 80092fe:	4a32      	ldr	r2, [pc, #200]	; (80093c8 <_strtod_l+0x968>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d128      	bne.n	8009356 <_strtod_l+0x8f6>
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	4651      	mov	r1, sl
 8009308:	b1eb      	cbz	r3, 8009346 <_strtod_l+0x8e6>
 800930a:	4b2d      	ldr	r3, [pc, #180]	; (80093c0 <_strtod_l+0x960>)
 800930c:	403b      	ands	r3, r7
 800930e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009312:	f04f 32ff 	mov.w	r2, #4294967295
 8009316:	d819      	bhi.n	800934c <_strtod_l+0x8ec>
 8009318:	0d1b      	lsrs	r3, r3, #20
 800931a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800931e:	fa02 f303 	lsl.w	r3, r2, r3
 8009322:	4299      	cmp	r1, r3
 8009324:	d117      	bne.n	8009356 <_strtod_l+0x8f6>
 8009326:	4b29      	ldr	r3, [pc, #164]	; (80093cc <_strtod_l+0x96c>)
 8009328:	429f      	cmp	r7, r3
 800932a:	d102      	bne.n	8009332 <_strtod_l+0x8d2>
 800932c:	3101      	adds	r1, #1
 800932e:	f43f addf 	beq.w	8008ef0 <_strtod_l+0x490>
 8009332:	4b23      	ldr	r3, [pc, #140]	; (80093c0 <_strtod_l+0x960>)
 8009334:	403b      	ands	r3, r7
 8009336:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800933a:	f04f 0a00 	mov.w	sl, #0
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1a4      	bne.n	800928e <_strtod_l+0x82e>
 8009344:	e5de      	b.n	8008f04 <_strtod_l+0x4a4>
 8009346:	f04f 33ff 	mov.w	r3, #4294967295
 800934a:	e7ea      	b.n	8009322 <_strtod_l+0x8c2>
 800934c:	4613      	mov	r3, r2
 800934e:	e7e8      	b.n	8009322 <_strtod_l+0x8c2>
 8009350:	ea53 030a 	orrs.w	r3, r3, sl
 8009354:	d08c      	beq.n	8009270 <_strtod_l+0x810>
 8009356:	9b08      	ldr	r3, [sp, #32]
 8009358:	b1db      	cbz	r3, 8009392 <_strtod_l+0x932>
 800935a:	423b      	tst	r3, r7
 800935c:	d0ef      	beq.n	800933e <_strtod_l+0x8de>
 800935e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	4650      	mov	r0, sl
 8009364:	4659      	mov	r1, fp
 8009366:	b1c3      	cbz	r3, 800939a <_strtod_l+0x93a>
 8009368:	f7ff fb5b 	bl	8008a22 <sulp>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	ec51 0b18 	vmov	r0, r1, d8
 8009374:	f7f6 ff9a 	bl	80002ac <__adddf3>
 8009378:	4682      	mov	sl, r0
 800937a:	468b      	mov	fp, r1
 800937c:	e7df      	b.n	800933e <_strtod_l+0x8de>
 800937e:	4013      	ands	r3, r2
 8009380:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009384:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009388:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800938c:	f04f 3aff 	mov.w	sl, #4294967295
 8009390:	e7d5      	b.n	800933e <_strtod_l+0x8de>
 8009392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009394:	ea13 0f0a 	tst.w	r3, sl
 8009398:	e7e0      	b.n	800935c <_strtod_l+0x8fc>
 800939a:	f7ff fb42 	bl	8008a22 <sulp>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	ec51 0b18 	vmov	r0, r1, d8
 80093a6:	f7f6 ff7f 	bl	80002a8 <__aeabi_dsub>
 80093aa:	2200      	movs	r2, #0
 80093ac:	2300      	movs	r3, #0
 80093ae:	4682      	mov	sl, r0
 80093b0:	468b      	mov	fp, r1
 80093b2:	f7f7 fb99 	bl	8000ae8 <__aeabi_dcmpeq>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d0c1      	beq.n	800933e <_strtod_l+0x8de>
 80093ba:	e611      	b.n	8008fe0 <_strtod_l+0x580>
 80093bc:	fffffc02 	.word	0xfffffc02
 80093c0:	7ff00000 	.word	0x7ff00000
 80093c4:	39500000 	.word	0x39500000
 80093c8:	000fffff 	.word	0x000fffff
 80093cc:	7fefffff 	.word	0x7fefffff
 80093d0:	0800cf68 	.word	0x0800cf68
 80093d4:	4631      	mov	r1, r6
 80093d6:	4628      	mov	r0, r5
 80093d8:	f002 fb3a 	bl	800ba50 <__ratio>
 80093dc:	ec59 8b10 	vmov	r8, r9, d0
 80093e0:	ee10 0a10 	vmov	r0, s0
 80093e4:	2200      	movs	r2, #0
 80093e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f7 fb90 	bl	8000b10 <__aeabi_dcmple>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d07a      	beq.n	80094ea <_strtod_l+0xa8a>
 80093f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d04a      	beq.n	8009490 <_strtod_l+0xa30>
 80093fa:	4b95      	ldr	r3, [pc, #596]	; (8009650 <_strtod_l+0xbf0>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009402:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009650 <_strtod_l+0xbf0>
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	4b92      	ldr	r3, [pc, #584]	; (8009654 <_strtod_l+0xbf4>)
 800940c:	403b      	ands	r3, r7
 800940e:	930d      	str	r3, [sp, #52]	; 0x34
 8009410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009412:	4b91      	ldr	r3, [pc, #580]	; (8009658 <_strtod_l+0xbf8>)
 8009414:	429a      	cmp	r2, r3
 8009416:	f040 80b0 	bne.w	800957a <_strtod_l+0xb1a>
 800941a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800941e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009422:	ec4b ab10 	vmov	d0, sl, fp
 8009426:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800942a:	f002 fa39 	bl	800b8a0 <__ulp>
 800942e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009432:	ec53 2b10 	vmov	r2, r3, d0
 8009436:	f7f7 f8ef 	bl	8000618 <__aeabi_dmul>
 800943a:	4652      	mov	r2, sl
 800943c:	465b      	mov	r3, fp
 800943e:	f7f6 ff35 	bl	80002ac <__adddf3>
 8009442:	460b      	mov	r3, r1
 8009444:	4983      	ldr	r1, [pc, #524]	; (8009654 <_strtod_l+0xbf4>)
 8009446:	4a85      	ldr	r2, [pc, #532]	; (800965c <_strtod_l+0xbfc>)
 8009448:	4019      	ands	r1, r3
 800944a:	4291      	cmp	r1, r2
 800944c:	4682      	mov	sl, r0
 800944e:	d960      	bls.n	8009512 <_strtod_l+0xab2>
 8009450:	ee18 3a90 	vmov	r3, s17
 8009454:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009458:	4293      	cmp	r3, r2
 800945a:	d104      	bne.n	8009466 <_strtod_l+0xa06>
 800945c:	ee18 3a10 	vmov	r3, s16
 8009460:	3301      	adds	r3, #1
 8009462:	f43f ad45 	beq.w	8008ef0 <_strtod_l+0x490>
 8009466:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009668 <_strtod_l+0xc08>
 800946a:	f04f 3aff 	mov.w	sl, #4294967295
 800946e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009470:	4620      	mov	r0, r4
 8009472:	f001 fee3 	bl	800b23c <_Bfree>
 8009476:	9905      	ldr	r1, [sp, #20]
 8009478:	4620      	mov	r0, r4
 800947a:	f001 fedf 	bl	800b23c <_Bfree>
 800947e:	4631      	mov	r1, r6
 8009480:	4620      	mov	r0, r4
 8009482:	f001 fedb 	bl	800b23c <_Bfree>
 8009486:	4629      	mov	r1, r5
 8009488:	4620      	mov	r0, r4
 800948a:	f001 fed7 	bl	800b23c <_Bfree>
 800948e:	e61a      	b.n	80090c6 <_strtod_l+0x666>
 8009490:	f1ba 0f00 	cmp.w	sl, #0
 8009494:	d11b      	bne.n	80094ce <_strtod_l+0xa6e>
 8009496:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800949a:	b9f3      	cbnz	r3, 80094da <_strtod_l+0xa7a>
 800949c:	4b6c      	ldr	r3, [pc, #432]	; (8009650 <_strtod_l+0xbf0>)
 800949e:	2200      	movs	r2, #0
 80094a0:	4640      	mov	r0, r8
 80094a2:	4649      	mov	r1, r9
 80094a4:	f7f7 fb2a 	bl	8000afc <__aeabi_dcmplt>
 80094a8:	b9d0      	cbnz	r0, 80094e0 <_strtod_l+0xa80>
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	4b6c      	ldr	r3, [pc, #432]	; (8009660 <_strtod_l+0xc00>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	f7f7 f8b1 	bl	8000618 <__aeabi_dmul>
 80094b6:	4680      	mov	r8, r0
 80094b8:	4689      	mov	r9, r1
 80094ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80094c2:	9315      	str	r3, [sp, #84]	; 0x54
 80094c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094cc:	e79d      	b.n	800940a <_strtod_l+0x9aa>
 80094ce:	f1ba 0f01 	cmp.w	sl, #1
 80094d2:	d102      	bne.n	80094da <_strtod_l+0xa7a>
 80094d4:	2f00      	cmp	r7, #0
 80094d6:	f43f ad83 	beq.w	8008fe0 <_strtod_l+0x580>
 80094da:	4b62      	ldr	r3, [pc, #392]	; (8009664 <_strtod_l+0xc04>)
 80094dc:	2200      	movs	r2, #0
 80094de:	e78e      	b.n	80093fe <_strtod_l+0x99e>
 80094e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009660 <_strtod_l+0xc00>
 80094e4:	f04f 0800 	mov.w	r8, #0
 80094e8:	e7e7      	b.n	80094ba <_strtod_l+0xa5a>
 80094ea:	4b5d      	ldr	r3, [pc, #372]	; (8009660 <_strtod_l+0xc00>)
 80094ec:	4640      	mov	r0, r8
 80094ee:	4649      	mov	r1, r9
 80094f0:	2200      	movs	r2, #0
 80094f2:	f7f7 f891 	bl	8000618 <__aeabi_dmul>
 80094f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094f8:	4680      	mov	r8, r0
 80094fa:	4689      	mov	r9, r1
 80094fc:	b933      	cbnz	r3, 800950c <_strtod_l+0xaac>
 80094fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009502:	900e      	str	r0, [sp, #56]	; 0x38
 8009504:	930f      	str	r3, [sp, #60]	; 0x3c
 8009506:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800950a:	e7dd      	b.n	80094c8 <_strtod_l+0xa68>
 800950c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009510:	e7f9      	b.n	8009506 <_strtod_l+0xaa6>
 8009512:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1a8      	bne.n	800946e <_strtod_l+0xa0e>
 800951c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009522:	0d1b      	lsrs	r3, r3, #20
 8009524:	051b      	lsls	r3, r3, #20
 8009526:	429a      	cmp	r2, r3
 8009528:	d1a1      	bne.n	800946e <_strtod_l+0xa0e>
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	f7f7 fbd3 	bl	8000cd8 <__aeabi_d2lz>
 8009532:	f7f7 f843 	bl	80005bc <__aeabi_l2d>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4640      	mov	r0, r8
 800953c:	4649      	mov	r1, r9
 800953e:	f7f6 feb3 	bl	80002a8 <__aeabi_dsub>
 8009542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009548:	ea43 030a 	orr.w	r3, r3, sl
 800954c:	4313      	orrs	r3, r2
 800954e:	4680      	mov	r8, r0
 8009550:	4689      	mov	r9, r1
 8009552:	d055      	beq.n	8009600 <_strtod_l+0xba0>
 8009554:	a336      	add	r3, pc, #216	; (adr r3, 8009630 <_strtod_l+0xbd0>)
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f7f7 facf 	bl	8000afc <__aeabi_dcmplt>
 800955e:	2800      	cmp	r0, #0
 8009560:	f47f acd0 	bne.w	8008f04 <_strtod_l+0x4a4>
 8009564:	a334      	add	r3, pc, #208	; (adr r3, 8009638 <_strtod_l+0xbd8>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	4640      	mov	r0, r8
 800956c:	4649      	mov	r1, r9
 800956e:	f7f7 fae3 	bl	8000b38 <__aeabi_dcmpgt>
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f af7b 	beq.w	800946e <_strtod_l+0xa0e>
 8009578:	e4c4      	b.n	8008f04 <_strtod_l+0x4a4>
 800957a:	9b04      	ldr	r3, [sp, #16]
 800957c:	b333      	cbz	r3, 80095cc <_strtod_l+0xb6c>
 800957e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009580:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009584:	d822      	bhi.n	80095cc <_strtod_l+0xb6c>
 8009586:	a32e      	add	r3, pc, #184	; (adr r3, 8009640 <_strtod_l+0xbe0>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	f7f7 fabe 	bl	8000b10 <__aeabi_dcmple>
 8009594:	b1a0      	cbz	r0, 80095c0 <_strtod_l+0xb60>
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	f7f7 fb15 	bl	8000bc8 <__aeabi_d2uiz>
 800959e:	2801      	cmp	r0, #1
 80095a0:	bf38      	it	cc
 80095a2:	2001      	movcc	r0, #1
 80095a4:	f7f6 ffbe 	bl	8000524 <__aeabi_ui2d>
 80095a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095aa:	4680      	mov	r8, r0
 80095ac:	4689      	mov	r9, r1
 80095ae:	bb23      	cbnz	r3, 80095fa <_strtod_l+0xb9a>
 80095b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095b4:	9010      	str	r0, [sp, #64]	; 0x40
 80095b6:	9311      	str	r3, [sp, #68]	; 0x44
 80095b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095c8:	1a9b      	subs	r3, r3, r2
 80095ca:	9309      	str	r3, [sp, #36]	; 0x24
 80095cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095d0:	eeb0 0a48 	vmov.f32	s0, s16
 80095d4:	eef0 0a68 	vmov.f32	s1, s17
 80095d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095dc:	f002 f960 	bl	800b8a0 <__ulp>
 80095e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095e4:	ec53 2b10 	vmov	r2, r3, d0
 80095e8:	f7f7 f816 	bl	8000618 <__aeabi_dmul>
 80095ec:	ec53 2b18 	vmov	r2, r3, d8
 80095f0:	f7f6 fe5c 	bl	80002ac <__adddf3>
 80095f4:	4682      	mov	sl, r0
 80095f6:	468b      	mov	fp, r1
 80095f8:	e78d      	b.n	8009516 <_strtod_l+0xab6>
 80095fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80095fe:	e7db      	b.n	80095b8 <_strtod_l+0xb58>
 8009600:	a311      	add	r3, pc, #68	; (adr r3, 8009648 <_strtod_l+0xbe8>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f7 fa79 	bl	8000afc <__aeabi_dcmplt>
 800960a:	e7b2      	b.n	8009572 <_strtod_l+0xb12>
 800960c:	2300      	movs	r3, #0
 800960e:	930a      	str	r3, [sp, #40]	; 0x28
 8009610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009612:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	f7ff ba6b 	b.w	8008af0 <_strtod_l+0x90>
 800961a:	2a65      	cmp	r2, #101	; 0x65
 800961c:	f43f ab5f 	beq.w	8008cde <_strtod_l+0x27e>
 8009620:	2a45      	cmp	r2, #69	; 0x45
 8009622:	f43f ab5c 	beq.w	8008cde <_strtod_l+0x27e>
 8009626:	2301      	movs	r3, #1
 8009628:	f7ff bb94 	b.w	8008d54 <_strtod_l+0x2f4>
 800962c:	f3af 8000 	nop.w
 8009630:	94a03595 	.word	0x94a03595
 8009634:	3fdfffff 	.word	0x3fdfffff
 8009638:	35afe535 	.word	0x35afe535
 800963c:	3fe00000 	.word	0x3fe00000
 8009640:	ffc00000 	.word	0xffc00000
 8009644:	41dfffff 	.word	0x41dfffff
 8009648:	94a03595 	.word	0x94a03595
 800964c:	3fcfffff 	.word	0x3fcfffff
 8009650:	3ff00000 	.word	0x3ff00000
 8009654:	7ff00000 	.word	0x7ff00000
 8009658:	7fe00000 	.word	0x7fe00000
 800965c:	7c9fffff 	.word	0x7c9fffff
 8009660:	3fe00000 	.word	0x3fe00000
 8009664:	bff00000 	.word	0xbff00000
 8009668:	7fefffff 	.word	0x7fefffff

0800966c <_strtod_r>:
 800966c:	4b01      	ldr	r3, [pc, #4]	; (8009674 <_strtod_r+0x8>)
 800966e:	f7ff b9f7 	b.w	8008a60 <_strtod_l>
 8009672:	bf00      	nop
 8009674:	20000074 	.word	0x20000074

08009678 <_strtol_l.constprop.0>:
 8009678:	2b01      	cmp	r3, #1
 800967a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967e:	d001      	beq.n	8009684 <_strtol_l.constprop.0+0xc>
 8009680:	2b24      	cmp	r3, #36	; 0x24
 8009682:	d906      	bls.n	8009692 <_strtol_l.constprop.0+0x1a>
 8009684:	f7fe f9ee 	bl	8007a64 <__errno>
 8009688:	2316      	movs	r3, #22
 800968a:	6003      	str	r3, [r0, #0]
 800968c:	2000      	movs	r0, #0
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009778 <_strtol_l.constprop.0+0x100>
 8009696:	460d      	mov	r5, r1
 8009698:	462e      	mov	r6, r5
 800969a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800969e:	f814 700c 	ldrb.w	r7, [r4, ip]
 80096a2:	f017 0708 	ands.w	r7, r7, #8
 80096a6:	d1f7      	bne.n	8009698 <_strtol_l.constprop.0+0x20>
 80096a8:	2c2d      	cmp	r4, #45	; 0x2d
 80096aa:	d132      	bne.n	8009712 <_strtol_l.constprop.0+0x9a>
 80096ac:	782c      	ldrb	r4, [r5, #0]
 80096ae:	2701      	movs	r7, #1
 80096b0:	1cb5      	adds	r5, r6, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d05b      	beq.n	800976e <_strtol_l.constprop.0+0xf6>
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d109      	bne.n	80096ce <_strtol_l.constprop.0+0x56>
 80096ba:	2c30      	cmp	r4, #48	; 0x30
 80096bc:	d107      	bne.n	80096ce <_strtol_l.constprop.0+0x56>
 80096be:	782c      	ldrb	r4, [r5, #0]
 80096c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096c4:	2c58      	cmp	r4, #88	; 0x58
 80096c6:	d14d      	bne.n	8009764 <_strtol_l.constprop.0+0xec>
 80096c8:	786c      	ldrb	r4, [r5, #1]
 80096ca:	2310      	movs	r3, #16
 80096cc:	3502      	adds	r5, #2
 80096ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80096d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80096d6:	f04f 0c00 	mov.w	ip, #0
 80096da:	fbb8 f9f3 	udiv	r9, r8, r3
 80096de:	4666      	mov	r6, ip
 80096e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80096e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80096e8:	f1be 0f09 	cmp.w	lr, #9
 80096ec:	d816      	bhi.n	800971c <_strtol_l.constprop.0+0xa4>
 80096ee:	4674      	mov	r4, lr
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	dd24      	ble.n	800973e <_strtol_l.constprop.0+0xc6>
 80096f4:	f1bc 0f00 	cmp.w	ip, #0
 80096f8:	db1e      	blt.n	8009738 <_strtol_l.constprop.0+0xc0>
 80096fa:	45b1      	cmp	r9, r6
 80096fc:	d31c      	bcc.n	8009738 <_strtol_l.constprop.0+0xc0>
 80096fe:	d101      	bne.n	8009704 <_strtol_l.constprop.0+0x8c>
 8009700:	45a2      	cmp	sl, r4
 8009702:	db19      	blt.n	8009738 <_strtol_l.constprop.0+0xc0>
 8009704:	fb06 4603 	mla	r6, r6, r3, r4
 8009708:	f04f 0c01 	mov.w	ip, #1
 800970c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009710:	e7e8      	b.n	80096e4 <_strtol_l.constprop.0+0x6c>
 8009712:	2c2b      	cmp	r4, #43	; 0x2b
 8009714:	bf04      	itt	eq
 8009716:	782c      	ldrbeq	r4, [r5, #0]
 8009718:	1cb5      	addeq	r5, r6, #2
 800971a:	e7ca      	b.n	80096b2 <_strtol_l.constprop.0+0x3a>
 800971c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009720:	f1be 0f19 	cmp.w	lr, #25
 8009724:	d801      	bhi.n	800972a <_strtol_l.constprop.0+0xb2>
 8009726:	3c37      	subs	r4, #55	; 0x37
 8009728:	e7e2      	b.n	80096f0 <_strtol_l.constprop.0+0x78>
 800972a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800972e:	f1be 0f19 	cmp.w	lr, #25
 8009732:	d804      	bhi.n	800973e <_strtol_l.constprop.0+0xc6>
 8009734:	3c57      	subs	r4, #87	; 0x57
 8009736:	e7db      	b.n	80096f0 <_strtol_l.constprop.0+0x78>
 8009738:	f04f 3cff 	mov.w	ip, #4294967295
 800973c:	e7e6      	b.n	800970c <_strtol_l.constprop.0+0x94>
 800973e:	f1bc 0f00 	cmp.w	ip, #0
 8009742:	da05      	bge.n	8009750 <_strtol_l.constprop.0+0xd8>
 8009744:	2322      	movs	r3, #34	; 0x22
 8009746:	6003      	str	r3, [r0, #0]
 8009748:	4646      	mov	r6, r8
 800974a:	b942      	cbnz	r2, 800975e <_strtol_l.constprop.0+0xe6>
 800974c:	4630      	mov	r0, r6
 800974e:	e79e      	b.n	800968e <_strtol_l.constprop.0+0x16>
 8009750:	b107      	cbz	r7, 8009754 <_strtol_l.constprop.0+0xdc>
 8009752:	4276      	negs	r6, r6
 8009754:	2a00      	cmp	r2, #0
 8009756:	d0f9      	beq.n	800974c <_strtol_l.constprop.0+0xd4>
 8009758:	f1bc 0f00 	cmp.w	ip, #0
 800975c:	d000      	beq.n	8009760 <_strtol_l.constprop.0+0xe8>
 800975e:	1e69      	subs	r1, r5, #1
 8009760:	6011      	str	r1, [r2, #0]
 8009762:	e7f3      	b.n	800974c <_strtol_l.constprop.0+0xd4>
 8009764:	2430      	movs	r4, #48	; 0x30
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1b1      	bne.n	80096ce <_strtol_l.constprop.0+0x56>
 800976a:	2308      	movs	r3, #8
 800976c:	e7af      	b.n	80096ce <_strtol_l.constprop.0+0x56>
 800976e:	2c30      	cmp	r4, #48	; 0x30
 8009770:	d0a5      	beq.n	80096be <_strtol_l.constprop.0+0x46>
 8009772:	230a      	movs	r3, #10
 8009774:	e7ab      	b.n	80096ce <_strtol_l.constprop.0+0x56>
 8009776:	bf00      	nop
 8009778:	0800cf91 	.word	0x0800cf91

0800977c <_strtol_r>:
 800977c:	f7ff bf7c 	b.w	8009678 <_strtol_l.constprop.0>

08009780 <__swbuf_r>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	460e      	mov	r6, r1
 8009784:	4614      	mov	r4, r2
 8009786:	4605      	mov	r5, r0
 8009788:	b118      	cbz	r0, 8009792 <__swbuf_r+0x12>
 800978a:	6983      	ldr	r3, [r0, #24]
 800978c:	b90b      	cbnz	r3, 8009792 <__swbuf_r+0x12>
 800978e:	f001 f86f 	bl	800a870 <__sinit>
 8009792:	4b21      	ldr	r3, [pc, #132]	; (8009818 <__swbuf_r+0x98>)
 8009794:	429c      	cmp	r4, r3
 8009796:	d12b      	bne.n	80097f0 <__swbuf_r+0x70>
 8009798:	686c      	ldr	r4, [r5, #4]
 800979a:	69a3      	ldr	r3, [r4, #24]
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	071a      	lsls	r2, r3, #28
 80097a2:	d52f      	bpl.n	8009804 <__swbuf_r+0x84>
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	b36b      	cbz	r3, 8009804 <__swbuf_r+0x84>
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	6820      	ldr	r0, [r4, #0]
 80097ac:	1ac0      	subs	r0, r0, r3
 80097ae:	6963      	ldr	r3, [r4, #20]
 80097b0:	b2f6      	uxtb	r6, r6
 80097b2:	4283      	cmp	r3, r0
 80097b4:	4637      	mov	r7, r6
 80097b6:	dc04      	bgt.n	80097c2 <__swbuf_r+0x42>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 ffc4 	bl	800a748 <_fflush_r>
 80097c0:	bb30      	cbnz	r0, 8009810 <__swbuf_r+0x90>
 80097c2:	68a3      	ldr	r3, [r4, #8]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	60a3      	str	r3, [r4, #8]
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	701e      	strb	r6, [r3, #0]
 80097d0:	6963      	ldr	r3, [r4, #20]
 80097d2:	3001      	adds	r0, #1
 80097d4:	4283      	cmp	r3, r0
 80097d6:	d004      	beq.n	80097e2 <__swbuf_r+0x62>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	07db      	lsls	r3, r3, #31
 80097dc:	d506      	bpl.n	80097ec <__swbuf_r+0x6c>
 80097de:	2e0a      	cmp	r6, #10
 80097e0:	d104      	bne.n	80097ec <__swbuf_r+0x6c>
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 ffaf 	bl	800a748 <_fflush_r>
 80097ea:	b988      	cbnz	r0, 8009810 <__swbuf_r+0x90>
 80097ec:	4638      	mov	r0, r7
 80097ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <__swbuf_r+0x9c>)
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d101      	bne.n	80097fa <__swbuf_r+0x7a>
 80097f6:	68ac      	ldr	r4, [r5, #8]
 80097f8:	e7cf      	b.n	800979a <__swbuf_r+0x1a>
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <__swbuf_r+0xa0>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	bf08      	it	eq
 8009800:	68ec      	ldreq	r4, [r5, #12]
 8009802:	e7ca      	b.n	800979a <__swbuf_r+0x1a>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f000 f81e 	bl	8009848 <__swsetup_r>
 800980c:	2800      	cmp	r0, #0
 800980e:	d0cb      	beq.n	80097a8 <__swbuf_r+0x28>
 8009810:	f04f 37ff 	mov.w	r7, #4294967295
 8009814:	e7ea      	b.n	80097ec <__swbuf_r+0x6c>
 8009816:	bf00      	nop
 8009818:	0800d144 	.word	0x0800d144
 800981c:	0800d164 	.word	0x0800d164
 8009820:	0800d124 	.word	0x0800d124

08009824 <_write_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d07      	ldr	r5, [pc, #28]	; (8009844 <_write_r+0x20>)
 8009828:	4604      	mov	r4, r0
 800982a:	4608      	mov	r0, r1
 800982c:	4611      	mov	r1, r2
 800982e:	2200      	movs	r2, #0
 8009830:	602a      	str	r2, [r5, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	f7f8 f87b 	bl	800192e <_write>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_write_r+0x1e>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_write_r+0x1e>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	20000804 	.word	0x20000804

08009848 <__swsetup_r>:
 8009848:	4b32      	ldr	r3, [pc, #200]	; (8009914 <__swsetup_r+0xcc>)
 800984a:	b570      	push	{r4, r5, r6, lr}
 800984c:	681d      	ldr	r5, [r3, #0]
 800984e:	4606      	mov	r6, r0
 8009850:	460c      	mov	r4, r1
 8009852:	b125      	cbz	r5, 800985e <__swsetup_r+0x16>
 8009854:	69ab      	ldr	r3, [r5, #24]
 8009856:	b913      	cbnz	r3, 800985e <__swsetup_r+0x16>
 8009858:	4628      	mov	r0, r5
 800985a:	f001 f809 	bl	800a870 <__sinit>
 800985e:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <__swsetup_r+0xd0>)
 8009860:	429c      	cmp	r4, r3
 8009862:	d10f      	bne.n	8009884 <__swsetup_r+0x3c>
 8009864:	686c      	ldr	r4, [r5, #4]
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800986c:	0719      	lsls	r1, r3, #28
 800986e:	d42c      	bmi.n	80098ca <__swsetup_r+0x82>
 8009870:	06dd      	lsls	r5, r3, #27
 8009872:	d411      	bmi.n	8009898 <__swsetup_r+0x50>
 8009874:	2309      	movs	r3, #9
 8009876:	6033      	str	r3, [r6, #0]
 8009878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800987c:	81a3      	strh	r3, [r4, #12]
 800987e:	f04f 30ff 	mov.w	r0, #4294967295
 8009882:	e03e      	b.n	8009902 <__swsetup_r+0xba>
 8009884:	4b25      	ldr	r3, [pc, #148]	; (800991c <__swsetup_r+0xd4>)
 8009886:	429c      	cmp	r4, r3
 8009888:	d101      	bne.n	800988e <__swsetup_r+0x46>
 800988a:	68ac      	ldr	r4, [r5, #8]
 800988c:	e7eb      	b.n	8009866 <__swsetup_r+0x1e>
 800988e:	4b24      	ldr	r3, [pc, #144]	; (8009920 <__swsetup_r+0xd8>)
 8009890:	429c      	cmp	r4, r3
 8009892:	bf08      	it	eq
 8009894:	68ec      	ldreq	r4, [r5, #12]
 8009896:	e7e6      	b.n	8009866 <__swsetup_r+0x1e>
 8009898:	0758      	lsls	r0, r3, #29
 800989a:	d512      	bpl.n	80098c2 <__swsetup_r+0x7a>
 800989c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800989e:	b141      	cbz	r1, 80098b2 <__swsetup_r+0x6a>
 80098a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098a4:	4299      	cmp	r1, r3
 80098a6:	d002      	beq.n	80098ae <__swsetup_r+0x66>
 80098a8:	4630      	mov	r0, r6
 80098aa:	f002 f95f 	bl	800bb6c <_free_r>
 80098ae:	2300      	movs	r3, #0
 80098b0:	6363      	str	r3, [r4, #52]	; 0x34
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	2300      	movs	r3, #0
 80098bc:	6063      	str	r3, [r4, #4]
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f043 0308 	orr.w	r3, r3, #8
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	6923      	ldr	r3, [r4, #16]
 80098cc:	b94b      	cbnz	r3, 80098e2 <__swsetup_r+0x9a>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d8:	d003      	beq.n	80098e2 <__swsetup_r+0x9a>
 80098da:	4621      	mov	r1, r4
 80098dc:	4630      	mov	r0, r6
 80098de:	f001 fc13 	bl	800b108 <__smakebuf_r>
 80098e2:	89a0      	ldrh	r0, [r4, #12]
 80098e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098e8:	f010 0301 	ands.w	r3, r0, #1
 80098ec:	d00a      	beq.n	8009904 <__swsetup_r+0xbc>
 80098ee:	2300      	movs	r3, #0
 80098f0:	60a3      	str	r3, [r4, #8]
 80098f2:	6963      	ldr	r3, [r4, #20]
 80098f4:	425b      	negs	r3, r3
 80098f6:	61a3      	str	r3, [r4, #24]
 80098f8:	6923      	ldr	r3, [r4, #16]
 80098fa:	b943      	cbnz	r3, 800990e <__swsetup_r+0xc6>
 80098fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009900:	d1ba      	bne.n	8009878 <__swsetup_r+0x30>
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	0781      	lsls	r1, r0, #30
 8009906:	bf58      	it	pl
 8009908:	6963      	ldrpl	r3, [r4, #20]
 800990a:	60a3      	str	r3, [r4, #8]
 800990c:	e7f4      	b.n	80098f8 <__swsetup_r+0xb0>
 800990e:	2000      	movs	r0, #0
 8009910:	e7f7      	b.n	8009902 <__swsetup_r+0xba>
 8009912:	bf00      	nop
 8009914:	2000000c 	.word	0x2000000c
 8009918:	0800d144 	.word	0x0800d144
 800991c:	0800d164 	.word	0x0800d164
 8009920:	0800d124 	.word	0x0800d124

08009924 <_close_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d06      	ldr	r5, [pc, #24]	; (8009940 <_close_r+0x1c>)
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	4608      	mov	r0, r1
 800992e:	602b      	str	r3, [r5, #0]
 8009930:	f7f8 f819 	bl	8001966 <_close>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d102      	bne.n	800993e <_close_r+0x1a>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	b103      	cbz	r3, 800993e <_close_r+0x1a>
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	bd38      	pop	{r3, r4, r5, pc}
 8009940:	20000804 	.word	0x20000804

08009944 <quorem>:
 8009944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	6903      	ldr	r3, [r0, #16]
 800994a:	690c      	ldr	r4, [r1, #16]
 800994c:	42a3      	cmp	r3, r4
 800994e:	4607      	mov	r7, r0
 8009950:	f2c0 8081 	blt.w	8009a56 <quorem+0x112>
 8009954:	3c01      	subs	r4, #1
 8009956:	f101 0814 	add.w	r8, r1, #20
 800995a:	f100 0514 	add.w	r5, r0, #20
 800995e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800996c:	3301      	adds	r3, #1
 800996e:	429a      	cmp	r2, r3
 8009970:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009978:	fbb2 f6f3 	udiv	r6, r2, r3
 800997c:	d331      	bcc.n	80099e2 <quorem+0x9e>
 800997e:	f04f 0e00 	mov.w	lr, #0
 8009982:	4640      	mov	r0, r8
 8009984:	46ac      	mov	ip, r5
 8009986:	46f2      	mov	sl, lr
 8009988:	f850 2b04 	ldr.w	r2, [r0], #4
 800998c:	b293      	uxth	r3, r2
 800998e:	fb06 e303 	mla	r3, r6, r3, lr
 8009992:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009996:	b29b      	uxth	r3, r3
 8009998:	ebaa 0303 	sub.w	r3, sl, r3
 800999c:	f8dc a000 	ldr.w	sl, [ip]
 80099a0:	0c12      	lsrs	r2, r2, #16
 80099a2:	fa13 f38a 	uxtah	r3, r3, sl
 80099a6:	fb06 e202 	mla	r2, r6, r2, lr
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	9b00      	ldr	r3, [sp, #0]
 80099ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099b2:	b292      	uxth	r2, r2
 80099b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80099c0:	4581      	cmp	r9, r0
 80099c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c6:	f84c 3b04 	str.w	r3, [ip], #4
 80099ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099ce:	d2db      	bcs.n	8009988 <quorem+0x44>
 80099d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80099d4:	b92b      	cbnz	r3, 80099e2 <quorem+0x9e>
 80099d6:	9b01      	ldr	r3, [sp, #4]
 80099d8:	3b04      	subs	r3, #4
 80099da:	429d      	cmp	r5, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	d32e      	bcc.n	8009a3e <quorem+0xfa>
 80099e0:	613c      	str	r4, [r7, #16]
 80099e2:	4638      	mov	r0, r7
 80099e4:	f001 feb6 	bl	800b754 <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	db24      	blt.n	8009a36 <quorem+0xf2>
 80099ec:	3601      	adds	r6, #1
 80099ee:	4628      	mov	r0, r5
 80099f0:	f04f 0c00 	mov.w	ip, #0
 80099f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80099f8:	f8d0 e000 	ldr.w	lr, [r0]
 80099fc:	b293      	uxth	r3, r2
 80099fe:	ebac 0303 	sub.w	r3, ip, r3
 8009a02:	0c12      	lsrs	r2, r2, #16
 8009a04:	fa13 f38e 	uxtah	r3, r3, lr
 8009a08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a16:	45c1      	cmp	r9, r8
 8009a18:	f840 3b04 	str.w	r3, [r0], #4
 8009a1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a20:	d2e8      	bcs.n	80099f4 <quorem+0xb0>
 8009a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a2a:	b922      	cbnz	r2, 8009a36 <quorem+0xf2>
 8009a2c:	3b04      	subs	r3, #4
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	d30a      	bcc.n	8009a4a <quorem+0x106>
 8009a34:	613c      	str	r4, [r7, #16]
 8009a36:	4630      	mov	r0, r6
 8009a38:	b003      	add	sp, #12
 8009a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3e:	6812      	ldr	r2, [r2, #0]
 8009a40:	3b04      	subs	r3, #4
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	d1cc      	bne.n	80099e0 <quorem+0x9c>
 8009a46:	3c01      	subs	r4, #1
 8009a48:	e7c7      	b.n	80099da <quorem+0x96>
 8009a4a:	6812      	ldr	r2, [r2, #0]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	2a00      	cmp	r2, #0
 8009a50:	d1f0      	bne.n	8009a34 <quorem+0xf0>
 8009a52:	3c01      	subs	r4, #1
 8009a54:	e7eb      	b.n	8009a2e <quorem+0xea>
 8009a56:	2000      	movs	r0, #0
 8009a58:	e7ee      	b.n	8009a38 <quorem+0xf4>
 8009a5a:	0000      	movs	r0, r0
 8009a5c:	0000      	movs	r0, r0
	...

08009a60 <_dtoa_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ed2d 8b04 	vpush	{d8-d9}
 8009a68:	ec57 6b10 	vmov	r6, r7, d0
 8009a6c:	b093      	sub	sp, #76	; 0x4c
 8009a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a74:	9106      	str	r1, [sp, #24]
 8009a76:	ee10 aa10 	vmov	sl, s0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009a80:	46bb      	mov	fp, r7
 8009a82:	b975      	cbnz	r5, 8009aa2 <_dtoa_r+0x42>
 8009a84:	2010      	movs	r0, #16
 8009a86:	f001 fb7f 	bl	800b188 <malloc>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8009a8e:	b920      	cbnz	r0, 8009a9a <_dtoa_r+0x3a>
 8009a90:	4ba7      	ldr	r3, [pc, #668]	; (8009d30 <_dtoa_r+0x2d0>)
 8009a92:	21ea      	movs	r1, #234	; 0xea
 8009a94:	48a7      	ldr	r0, [pc, #668]	; (8009d34 <_dtoa_r+0x2d4>)
 8009a96:	f003 f857 	bl	800cb48 <__assert_func>
 8009a9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a9e:	6005      	str	r5, [r0, #0]
 8009aa0:	60c5      	str	r5, [r0, #12]
 8009aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa4:	6819      	ldr	r1, [r3, #0]
 8009aa6:	b151      	cbz	r1, 8009abe <_dtoa_r+0x5e>
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	604a      	str	r2, [r1, #4]
 8009aac:	2301      	movs	r3, #1
 8009aae:	4093      	lsls	r3, r2
 8009ab0:	608b      	str	r3, [r1, #8]
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f001 fbc2 	bl	800b23c <_Bfree>
 8009ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	1e3b      	subs	r3, r7, #0
 8009ac0:	bfaa      	itet	ge
 8009ac2:	2300      	movge	r3, #0
 8009ac4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009ac8:	f8c8 3000 	strge.w	r3, [r8]
 8009acc:	4b9a      	ldr	r3, [pc, #616]	; (8009d38 <_dtoa_r+0x2d8>)
 8009ace:	bfbc      	itt	lt
 8009ad0:	2201      	movlt	r2, #1
 8009ad2:	f8c8 2000 	strlt.w	r2, [r8]
 8009ad6:	ea33 030b 	bics.w	r3, r3, fp
 8009ada:	d11b      	bne.n	8009b14 <_dtoa_r+0xb4>
 8009adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ade:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ae8:	4333      	orrs	r3, r6
 8009aea:	f000 8592 	beq.w	800a612 <_dtoa_r+0xbb2>
 8009aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af0:	b963      	cbnz	r3, 8009b0c <_dtoa_r+0xac>
 8009af2:	4b92      	ldr	r3, [pc, #584]	; (8009d3c <_dtoa_r+0x2dc>)
 8009af4:	e022      	b.n	8009b3c <_dtoa_r+0xdc>
 8009af6:	4b92      	ldr	r3, [pc, #584]	; (8009d40 <_dtoa_r+0x2e0>)
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	3308      	adds	r3, #8
 8009afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	9801      	ldr	r0, [sp, #4]
 8009b02:	b013      	add	sp, #76	; 0x4c
 8009b04:	ecbd 8b04 	vpop	{d8-d9}
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0c:	4b8b      	ldr	r3, [pc, #556]	; (8009d3c <_dtoa_r+0x2dc>)
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	3303      	adds	r3, #3
 8009b12:	e7f3      	b.n	8009afc <_dtoa_r+0x9c>
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	4650      	mov	r0, sl
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	f7f6 ffe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b20:	ec4b ab19 	vmov	d9, sl, fp
 8009b24:	4680      	mov	r8, r0
 8009b26:	b158      	cbz	r0, 8009b40 <_dtoa_r+0xe0>
 8009b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 856b 	beq.w	800a60c <_dtoa_r+0xbac>
 8009b36:	4883      	ldr	r0, [pc, #524]	; (8009d44 <_dtoa_r+0x2e4>)
 8009b38:	6018      	str	r0, [r3, #0]
 8009b3a:	1e43      	subs	r3, r0, #1
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	e7df      	b.n	8009b00 <_dtoa_r+0xa0>
 8009b40:	ec4b ab10 	vmov	d0, sl, fp
 8009b44:	aa10      	add	r2, sp, #64	; 0x40
 8009b46:	a911      	add	r1, sp, #68	; 0x44
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f001 ff25 	bl	800b998 <__d2b>
 8009b4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b52:	ee08 0a10 	vmov	s16, r0
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	f000 8084 	beq.w	8009c64 <_dtoa_r+0x204>
 8009b5c:	ee19 3a90 	vmov	r3, s19
 8009b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b68:	4656      	mov	r6, sl
 8009b6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b76:	4b74      	ldr	r3, [pc, #464]	; (8009d48 <_dtoa_r+0x2e8>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 fb93 	bl	80002a8 <__aeabi_dsub>
 8009b82:	a365      	add	r3, pc, #404	; (adr r3, 8009d18 <_dtoa_r+0x2b8>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f7f6 fd46 	bl	8000618 <__aeabi_dmul>
 8009b8c:	a364      	add	r3, pc, #400	; (adr r3, 8009d20 <_dtoa_r+0x2c0>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f7f6 fb8b 	bl	80002ac <__adddf3>
 8009b96:	4606      	mov	r6, r0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	f7f6 fcd2 	bl	8000544 <__aeabi_i2d>
 8009ba0:	a361      	add	r3, pc, #388	; (adr r3, 8009d28 <_dtoa_r+0x2c8>)
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f7f6 fd37 	bl	8000618 <__aeabi_dmul>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 fb7b 	bl	80002ac <__adddf3>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	460f      	mov	r7, r1
 8009bba:	f7f6 ffdd 	bl	8000b78 <__aeabi_d2iz>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	9000      	str	r0, [sp, #0]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 ff98 	bl	8000afc <__aeabi_dcmplt>
 8009bcc:	b150      	cbz	r0, 8009be4 <_dtoa_r+0x184>
 8009bce:	9800      	ldr	r0, [sp, #0]
 8009bd0:	f7f6 fcb8 	bl	8000544 <__aeabi_i2d>
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	f7f6 ff86 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bdc:	b910      	cbnz	r0, 8009be4 <_dtoa_r+0x184>
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	9b00      	ldr	r3, [sp, #0]
 8009be6:	2b16      	cmp	r3, #22
 8009be8:	d85a      	bhi.n	8009ca0 <_dtoa_r+0x240>
 8009bea:	9a00      	ldr	r2, [sp, #0]
 8009bec:	4b57      	ldr	r3, [pc, #348]	; (8009d4c <_dtoa_r+0x2ec>)
 8009bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	ec51 0b19 	vmov	r0, r1, d9
 8009bfa:	f7f6 ff7f 	bl	8000afc <__aeabi_dcmplt>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d050      	beq.n	8009ca4 <_dtoa_r+0x244>
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c0e:	1b5d      	subs	r5, r3, r5
 8009c10:	1e6b      	subs	r3, r5, #1
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	bf45      	ittet	mi
 8009c16:	f1c5 0301 	rsbmi	r3, r5, #1
 8009c1a:	9304      	strmi	r3, [sp, #16]
 8009c1c:	2300      	movpl	r3, #0
 8009c1e:	2300      	movmi	r3, #0
 8009c20:	bf4c      	ite	mi
 8009c22:	9305      	strmi	r3, [sp, #20]
 8009c24:	9304      	strpl	r3, [sp, #16]
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	db3d      	blt.n	8009ca8 <_dtoa_r+0x248>
 8009c2c:	9b05      	ldr	r3, [sp, #20]
 8009c2e:	9a00      	ldr	r2, [sp, #0]
 8009c30:	920a      	str	r2, [sp, #40]	; 0x28
 8009c32:	4413      	add	r3, r2
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	2300      	movs	r3, #0
 8009c38:	9307      	str	r3, [sp, #28]
 8009c3a:	9b06      	ldr	r3, [sp, #24]
 8009c3c:	2b09      	cmp	r3, #9
 8009c3e:	f200 8089 	bhi.w	8009d54 <_dtoa_r+0x2f4>
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	bfc4      	itt	gt
 8009c46:	3b04      	subgt	r3, #4
 8009c48:	9306      	strgt	r3, [sp, #24]
 8009c4a:	9b06      	ldr	r3, [sp, #24]
 8009c4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009c50:	bfcc      	ite	gt
 8009c52:	2500      	movgt	r5, #0
 8009c54:	2501      	movle	r5, #1
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	f200 8087 	bhi.w	8009d6a <_dtoa_r+0x30a>
 8009c5c:	e8df f003 	tbb	[pc, r3]
 8009c60:	59383a2d 	.word	0x59383a2d
 8009c64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c68:	441d      	add	r5, r3
 8009c6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	bfc1      	itttt	gt
 8009c72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c82:	bfda      	itte	le
 8009c84:	f1c3 0320 	rsble	r3, r3, #32
 8009c88:	fa06 f003 	lslle.w	r0, r6, r3
 8009c8c:	4318      	orrgt	r0, r3
 8009c8e:	f7f6 fc49 	bl	8000524 <__aeabi_ui2d>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4606      	mov	r6, r0
 8009c96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c9a:	3d01      	subs	r5, #1
 8009c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c9e:	e76a      	b.n	8009b76 <_dtoa_r+0x116>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e7b2      	b.n	8009c0a <_dtoa_r+0x1aa>
 8009ca4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ca6:	e7b1      	b.n	8009c0c <_dtoa_r+0x1ac>
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	9a00      	ldr	r2, [sp, #0]
 8009cac:	1a9b      	subs	r3, r3, r2
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	4253      	negs	r3, r2
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb8:	e7bf      	b.n	8009c3a <_dtoa_r+0x1da>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9308      	str	r3, [sp, #32]
 8009cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dc55      	bgt.n	8009d70 <_dtoa_r+0x310>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8009cce:	e00c      	b.n	8009cea <_dtoa_r+0x28a>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e7f3      	b.n	8009cbc <_dtoa_r+0x25c>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	9b00      	ldr	r3, [sp, #0]
 8009cdc:	4413      	add	r3, r2
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	bfb8      	it	lt
 8009ce8:	2301      	movlt	r3, #1
 8009cea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cec:	2200      	movs	r2, #0
 8009cee:	6042      	str	r2, [r0, #4]
 8009cf0:	2204      	movs	r2, #4
 8009cf2:	f102 0614 	add.w	r6, r2, #20
 8009cf6:	429e      	cmp	r6, r3
 8009cf8:	6841      	ldr	r1, [r0, #4]
 8009cfa:	d93d      	bls.n	8009d78 <_dtoa_r+0x318>
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f001 fa5d 	bl	800b1bc <_Balloc>
 8009d02:	9001      	str	r0, [sp, #4]
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d13b      	bne.n	8009d80 <_dtoa_r+0x320>
 8009d08:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <_dtoa_r+0x2f0>)
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d10:	e6c0      	b.n	8009a94 <_dtoa_r+0x34>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e7df      	b.n	8009cd6 <_dtoa_r+0x276>
 8009d16:	bf00      	nop
 8009d18:	636f4361 	.word	0x636f4361
 8009d1c:	3fd287a7 	.word	0x3fd287a7
 8009d20:	8b60c8b3 	.word	0x8b60c8b3
 8009d24:	3fc68a28 	.word	0x3fc68a28
 8009d28:	509f79fb 	.word	0x509f79fb
 8009d2c:	3fd34413 	.word	0x3fd34413
 8009d30:	0800d09e 	.word	0x0800d09e
 8009d34:	0800d0b5 	.word	0x0800d0b5
 8009d38:	7ff00000 	.word	0x7ff00000
 8009d3c:	0800d09a 	.word	0x0800d09a
 8009d40:	0800d091 	.word	0x0800d091
 8009d44:	0800d372 	.word	0x0800d372
 8009d48:	3ff80000 	.word	0x3ff80000
 8009d4c:	0800d288 	.word	0x0800d288
 8009d50:	0800d110 	.word	0x0800d110
 8009d54:	2501      	movs	r5, #1
 8009d56:	2300      	movs	r3, #0
 8009d58:	9306      	str	r3, [sp, #24]
 8009d5a:	9508      	str	r5, [sp, #32]
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d64:	2200      	movs	r2, #0
 8009d66:	2312      	movs	r3, #18
 8009d68:	e7b0      	b.n	8009ccc <_dtoa_r+0x26c>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	9308      	str	r3, [sp, #32]
 8009d6e:	e7f5      	b.n	8009d5c <_dtoa_r+0x2fc>
 8009d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d76:	e7b8      	b.n	8009cea <_dtoa_r+0x28a>
 8009d78:	3101      	adds	r1, #1
 8009d7a:	6041      	str	r1, [r0, #4]
 8009d7c:	0052      	lsls	r2, r2, #1
 8009d7e:	e7b8      	b.n	8009cf2 <_dtoa_r+0x292>
 8009d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d82:	9a01      	ldr	r2, [sp, #4]
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	2b0e      	cmp	r3, #14
 8009d8a:	f200 809d 	bhi.w	8009ec8 <_dtoa_r+0x468>
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	f000 809a 	beq.w	8009ec8 <_dtoa_r+0x468>
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dd32      	ble.n	8009e00 <_dtoa_r+0x3a0>
 8009d9a:	4ab7      	ldr	r2, [pc, #732]	; (800a078 <_dtoa_r+0x618>)
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	05d8      	lsls	r0, r3, #23
 8009dac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009db0:	d516      	bpl.n	8009de0 <_dtoa_r+0x380>
 8009db2:	4bb2      	ldr	r3, [pc, #712]	; (800a07c <_dtoa_r+0x61c>)
 8009db4:	ec51 0b19 	vmov	r0, r1, d9
 8009db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dbc:	f7f6 fd56 	bl	800086c <__aeabi_ddiv>
 8009dc0:	f007 070f 	and.w	r7, r7, #15
 8009dc4:	4682      	mov	sl, r0
 8009dc6:	468b      	mov	fp, r1
 8009dc8:	2503      	movs	r5, #3
 8009dca:	4eac      	ldr	r6, [pc, #688]	; (800a07c <_dtoa_r+0x61c>)
 8009dcc:	b957      	cbnz	r7, 8009de4 <_dtoa_r+0x384>
 8009dce:	4642      	mov	r2, r8
 8009dd0:	464b      	mov	r3, r9
 8009dd2:	4650      	mov	r0, sl
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	f7f6 fd49 	bl	800086c <__aeabi_ddiv>
 8009dda:	4682      	mov	sl, r0
 8009ddc:	468b      	mov	fp, r1
 8009dde:	e028      	b.n	8009e32 <_dtoa_r+0x3d2>
 8009de0:	2502      	movs	r5, #2
 8009de2:	e7f2      	b.n	8009dca <_dtoa_r+0x36a>
 8009de4:	07f9      	lsls	r1, r7, #31
 8009de6:	d508      	bpl.n	8009dfa <_dtoa_r+0x39a>
 8009de8:	4640      	mov	r0, r8
 8009dea:	4649      	mov	r1, r9
 8009dec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009df0:	f7f6 fc12 	bl	8000618 <__aeabi_dmul>
 8009df4:	3501      	adds	r5, #1
 8009df6:	4680      	mov	r8, r0
 8009df8:	4689      	mov	r9, r1
 8009dfa:	107f      	asrs	r7, r7, #1
 8009dfc:	3608      	adds	r6, #8
 8009dfe:	e7e5      	b.n	8009dcc <_dtoa_r+0x36c>
 8009e00:	f000 809b 	beq.w	8009f3a <_dtoa_r+0x4da>
 8009e04:	9b00      	ldr	r3, [sp, #0]
 8009e06:	4f9d      	ldr	r7, [pc, #628]	; (800a07c <_dtoa_r+0x61c>)
 8009e08:	425e      	negs	r6, r3
 8009e0a:	4b9b      	ldr	r3, [pc, #620]	; (800a078 <_dtoa_r+0x618>)
 8009e0c:	f006 020f 	and.w	r2, r6, #15
 8009e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	ec51 0b19 	vmov	r0, r1, d9
 8009e1c:	f7f6 fbfc 	bl	8000618 <__aeabi_dmul>
 8009e20:	1136      	asrs	r6, r6, #4
 8009e22:	4682      	mov	sl, r0
 8009e24:	468b      	mov	fp, r1
 8009e26:	2300      	movs	r3, #0
 8009e28:	2502      	movs	r5, #2
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	d17a      	bne.n	8009f24 <_dtoa_r+0x4c4>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1d3      	bne.n	8009dda <_dtoa_r+0x37a>
 8009e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 8082 	beq.w	8009f3e <_dtoa_r+0x4de>
 8009e3a:	4b91      	ldr	r3, [pc, #580]	; (800a080 <_dtoa_r+0x620>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4650      	mov	r0, sl
 8009e40:	4659      	mov	r1, fp
 8009e42:	f7f6 fe5b 	bl	8000afc <__aeabi_dcmplt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d079      	beq.n	8009f3e <_dtoa_r+0x4de>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d076      	beq.n	8009f3e <_dtoa_r+0x4de>
 8009e50:	9b02      	ldr	r3, [sp, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dd36      	ble.n	8009ec4 <_dtoa_r+0x464>
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	4650      	mov	r0, sl
 8009e5a:	4659      	mov	r1, fp
 8009e5c:	1e5f      	subs	r7, r3, #1
 8009e5e:	2200      	movs	r2, #0
 8009e60:	4b88      	ldr	r3, [pc, #544]	; (800a084 <_dtoa_r+0x624>)
 8009e62:	f7f6 fbd9 	bl	8000618 <__aeabi_dmul>
 8009e66:	9e02      	ldr	r6, [sp, #8]
 8009e68:	4682      	mov	sl, r0
 8009e6a:	468b      	mov	fp, r1
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f7f6 fb68 	bl	8000544 <__aeabi_i2d>
 8009e74:	4652      	mov	r2, sl
 8009e76:	465b      	mov	r3, fp
 8009e78:	f7f6 fbce 	bl	8000618 <__aeabi_dmul>
 8009e7c:	4b82      	ldr	r3, [pc, #520]	; (800a088 <_dtoa_r+0x628>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f7f6 fa14 	bl	80002ac <__adddf3>
 8009e84:	46d0      	mov	r8, sl
 8009e86:	46d9      	mov	r9, fp
 8009e88:	4682      	mov	sl, r0
 8009e8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e8e:	2e00      	cmp	r6, #0
 8009e90:	d158      	bne.n	8009f44 <_dtoa_r+0x4e4>
 8009e92:	4b7e      	ldr	r3, [pc, #504]	; (800a08c <_dtoa_r+0x62c>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	4640      	mov	r0, r8
 8009e98:	4649      	mov	r1, r9
 8009e9a:	f7f6 fa05 	bl	80002a8 <__aeabi_dsub>
 8009e9e:	4652      	mov	r2, sl
 8009ea0:	465b      	mov	r3, fp
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	4689      	mov	r9, r1
 8009ea6:	f7f6 fe47 	bl	8000b38 <__aeabi_dcmpgt>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	f040 8295 	bne.w	800a3da <_dtoa_r+0x97a>
 8009eb0:	4652      	mov	r2, sl
 8009eb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	4649      	mov	r1, r9
 8009eba:	f7f6 fe1f 	bl	8000afc <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f040 8289 	bne.w	800a3d6 <_dtoa_r+0x976>
 8009ec4:	ec5b ab19 	vmov	sl, fp, d9
 8009ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f2c0 8148 	blt.w	800a160 <_dtoa_r+0x700>
 8009ed0:	9a00      	ldr	r2, [sp, #0]
 8009ed2:	2a0e      	cmp	r2, #14
 8009ed4:	f300 8144 	bgt.w	800a160 <_dtoa_r+0x700>
 8009ed8:	4b67      	ldr	r3, [pc, #412]	; (800a078 <_dtoa_r+0x618>)
 8009eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ede:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f280 80d5 	bge.w	800a094 <_dtoa_r+0x634>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f300 80d1 	bgt.w	800a094 <_dtoa_r+0x634>
 8009ef2:	f040 826f 	bne.w	800a3d4 <_dtoa_r+0x974>
 8009ef6:	4b65      	ldr	r3, [pc, #404]	; (800a08c <_dtoa_r+0x62c>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 fb8b 	bl	8000618 <__aeabi_dmul>
 8009f02:	4652      	mov	r2, sl
 8009f04:	465b      	mov	r3, fp
 8009f06:	f7f6 fe0d 	bl	8000b24 <__aeabi_dcmpge>
 8009f0a:	9e03      	ldr	r6, [sp, #12]
 8009f0c:	4637      	mov	r7, r6
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f040 8245 	bne.w	800a39e <_dtoa_r+0x93e>
 8009f14:	9d01      	ldr	r5, [sp, #4]
 8009f16:	2331      	movs	r3, #49	; 0x31
 8009f18:	f805 3b01 	strb.w	r3, [r5], #1
 8009f1c:	9b00      	ldr	r3, [sp, #0]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	e240      	b.n	800a3a6 <_dtoa_r+0x946>
 8009f24:	07f2      	lsls	r2, r6, #31
 8009f26:	d505      	bpl.n	8009f34 <_dtoa_r+0x4d4>
 8009f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f2c:	f7f6 fb74 	bl	8000618 <__aeabi_dmul>
 8009f30:	3501      	adds	r5, #1
 8009f32:	2301      	movs	r3, #1
 8009f34:	1076      	asrs	r6, r6, #1
 8009f36:	3708      	adds	r7, #8
 8009f38:	e777      	b.n	8009e2a <_dtoa_r+0x3ca>
 8009f3a:	2502      	movs	r5, #2
 8009f3c:	e779      	b.n	8009e32 <_dtoa_r+0x3d2>
 8009f3e:	9f00      	ldr	r7, [sp, #0]
 8009f40:	9e03      	ldr	r6, [sp, #12]
 8009f42:	e794      	b.n	8009e6e <_dtoa_r+0x40e>
 8009f44:	9901      	ldr	r1, [sp, #4]
 8009f46:	4b4c      	ldr	r3, [pc, #304]	; (800a078 <_dtoa_r+0x618>)
 8009f48:	4431      	add	r1, r6
 8009f4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009f4c:	9908      	ldr	r1, [sp, #32]
 8009f4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d043      	beq.n	8009fe2 <_dtoa_r+0x582>
 8009f5a:	494d      	ldr	r1, [pc, #308]	; (800a090 <_dtoa_r+0x630>)
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f7f6 fc85 	bl	800086c <__aeabi_ddiv>
 8009f62:	4652      	mov	r2, sl
 8009f64:	465b      	mov	r3, fp
 8009f66:	f7f6 f99f 	bl	80002a8 <__aeabi_dsub>
 8009f6a:	9d01      	ldr	r5, [sp, #4]
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	468b      	mov	fp, r1
 8009f70:	4649      	mov	r1, r9
 8009f72:	4640      	mov	r0, r8
 8009f74:	f7f6 fe00 	bl	8000b78 <__aeabi_d2iz>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	f7f6 fae3 	bl	8000544 <__aeabi_i2d>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 f98f 	bl	80002a8 <__aeabi_dsub>
 8009f8a:	3630      	adds	r6, #48	; 0x30
 8009f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009f90:	4652      	mov	r2, sl
 8009f92:	465b      	mov	r3, fp
 8009f94:	4680      	mov	r8, r0
 8009f96:	4689      	mov	r9, r1
 8009f98:	f7f6 fdb0 	bl	8000afc <__aeabi_dcmplt>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d163      	bne.n	800a068 <_dtoa_r+0x608>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	4936      	ldr	r1, [pc, #216]	; (800a080 <_dtoa_r+0x620>)
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	f7f6 f97e 	bl	80002a8 <__aeabi_dsub>
 8009fac:	4652      	mov	r2, sl
 8009fae:	465b      	mov	r3, fp
 8009fb0:	f7f6 fda4 	bl	8000afc <__aeabi_dcmplt>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	f040 80b5 	bne.w	800a124 <_dtoa_r+0x6c4>
 8009fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbc:	429d      	cmp	r5, r3
 8009fbe:	d081      	beq.n	8009ec4 <_dtoa_r+0x464>
 8009fc0:	4b30      	ldr	r3, [pc, #192]	; (800a084 <_dtoa_r+0x624>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	4659      	mov	r1, fp
 8009fc8:	f7f6 fb26 	bl	8000618 <__aeabi_dmul>
 8009fcc:	4b2d      	ldr	r3, [pc, #180]	; (800a084 <_dtoa_r+0x624>)
 8009fce:	4682      	mov	sl, r0
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f7f6 fb1e 	bl	8000618 <__aeabi_dmul>
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4689      	mov	r9, r1
 8009fe0:	e7c6      	b.n	8009f70 <_dtoa_r+0x510>
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	4659      	mov	r1, fp
 8009fe6:	f7f6 fb17 	bl	8000618 <__aeabi_dmul>
 8009fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fec:	9d01      	ldr	r5, [sp, #4]
 8009fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ff0:	4682      	mov	sl, r0
 8009ff2:	468b      	mov	fp, r1
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	f7f6 fdbe 	bl	8000b78 <__aeabi_d2iz>
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	f7f6 faa1 	bl	8000544 <__aeabi_i2d>
 800a002:	3630      	adds	r6, #48	; 0x30
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4640      	mov	r0, r8
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7f6 f94c 	bl	80002a8 <__aeabi_dsub>
 800a010:	f805 6b01 	strb.w	r6, [r5], #1
 800a014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a016:	429d      	cmp	r5, r3
 800a018:	4680      	mov	r8, r0
 800a01a:	4689      	mov	r9, r1
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	d124      	bne.n	800a06c <_dtoa_r+0x60c>
 800a022:	4b1b      	ldr	r3, [pc, #108]	; (800a090 <_dtoa_r+0x630>)
 800a024:	4650      	mov	r0, sl
 800a026:	4659      	mov	r1, fp
 800a028:	f7f6 f940 	bl	80002ac <__adddf3>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4640      	mov	r0, r8
 800a032:	4649      	mov	r1, r9
 800a034:	f7f6 fd80 	bl	8000b38 <__aeabi_dcmpgt>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d173      	bne.n	800a124 <_dtoa_r+0x6c4>
 800a03c:	4652      	mov	r2, sl
 800a03e:	465b      	mov	r3, fp
 800a040:	4913      	ldr	r1, [pc, #76]	; (800a090 <_dtoa_r+0x630>)
 800a042:	2000      	movs	r0, #0
 800a044:	f7f6 f930 	bl	80002a8 <__aeabi_dsub>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4640      	mov	r0, r8
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 fd54 	bl	8000afc <__aeabi_dcmplt>
 800a054:	2800      	cmp	r0, #0
 800a056:	f43f af35 	beq.w	8009ec4 <_dtoa_r+0x464>
 800a05a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a05c:	1e6b      	subs	r3, r5, #1
 800a05e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a060:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a064:	2b30      	cmp	r3, #48	; 0x30
 800a066:	d0f8      	beq.n	800a05a <_dtoa_r+0x5fa>
 800a068:	9700      	str	r7, [sp, #0]
 800a06a:	e049      	b.n	800a100 <_dtoa_r+0x6a0>
 800a06c:	4b05      	ldr	r3, [pc, #20]	; (800a084 <_dtoa_r+0x624>)
 800a06e:	f7f6 fad3 	bl	8000618 <__aeabi_dmul>
 800a072:	4680      	mov	r8, r0
 800a074:	4689      	mov	r9, r1
 800a076:	e7bd      	b.n	8009ff4 <_dtoa_r+0x594>
 800a078:	0800d288 	.word	0x0800d288
 800a07c:	0800d260 	.word	0x0800d260
 800a080:	3ff00000 	.word	0x3ff00000
 800a084:	40240000 	.word	0x40240000
 800a088:	401c0000 	.word	0x401c0000
 800a08c:	40140000 	.word	0x40140000
 800a090:	3fe00000 	.word	0x3fe00000
 800a094:	9d01      	ldr	r5, [sp, #4]
 800a096:	4656      	mov	r6, sl
 800a098:	465f      	mov	r7, fp
 800a09a:	4642      	mov	r2, r8
 800a09c:	464b      	mov	r3, r9
 800a09e:	4630      	mov	r0, r6
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	f7f6 fbe3 	bl	800086c <__aeabi_ddiv>
 800a0a6:	f7f6 fd67 	bl	8000b78 <__aeabi_d2iz>
 800a0aa:	4682      	mov	sl, r0
 800a0ac:	f7f6 fa4a 	bl	8000544 <__aeabi_i2d>
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	f7f6 fab0 	bl	8000618 <__aeabi_dmul>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4630      	mov	r0, r6
 800a0be:	4639      	mov	r1, r7
 800a0c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a0c4:	f7f6 f8f0 	bl	80002a8 <__aeabi_dsub>
 800a0c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a0cc:	9e01      	ldr	r6, [sp, #4]
 800a0ce:	9f03      	ldr	r7, [sp, #12]
 800a0d0:	1bae      	subs	r6, r5, r6
 800a0d2:	42b7      	cmp	r7, r6
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	d135      	bne.n	800a146 <_dtoa_r+0x6e6>
 800a0da:	f7f6 f8e7 	bl	80002ac <__adddf3>
 800a0de:	4642      	mov	r2, r8
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	460f      	mov	r7, r1
 800a0e6:	f7f6 fd27 	bl	8000b38 <__aeabi_dcmpgt>
 800a0ea:	b9d0      	cbnz	r0, 800a122 <_dtoa_r+0x6c2>
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 fcf8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0f8:	b110      	cbz	r0, 800a100 <_dtoa_r+0x6a0>
 800a0fa:	f01a 0f01 	tst.w	sl, #1
 800a0fe:	d110      	bne.n	800a122 <_dtoa_r+0x6c2>
 800a100:	4620      	mov	r0, r4
 800a102:	ee18 1a10 	vmov	r1, s16
 800a106:	f001 f899 	bl	800b23c <_Bfree>
 800a10a:	2300      	movs	r3, #0
 800a10c:	9800      	ldr	r0, [sp, #0]
 800a10e:	702b      	strb	r3, [r5, #0]
 800a110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a112:	3001      	adds	r0, #1
 800a114:	6018      	str	r0, [r3, #0]
 800a116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f43f acf1 	beq.w	8009b00 <_dtoa_r+0xa0>
 800a11e:	601d      	str	r5, [r3, #0]
 800a120:	e4ee      	b.n	8009b00 <_dtoa_r+0xa0>
 800a122:	9f00      	ldr	r7, [sp, #0]
 800a124:	462b      	mov	r3, r5
 800a126:	461d      	mov	r5, r3
 800a128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a12c:	2a39      	cmp	r2, #57	; 0x39
 800a12e:	d106      	bne.n	800a13e <_dtoa_r+0x6de>
 800a130:	9a01      	ldr	r2, [sp, #4]
 800a132:	429a      	cmp	r2, r3
 800a134:	d1f7      	bne.n	800a126 <_dtoa_r+0x6c6>
 800a136:	9901      	ldr	r1, [sp, #4]
 800a138:	2230      	movs	r2, #48	; 0x30
 800a13a:	3701      	adds	r7, #1
 800a13c:	700a      	strb	r2, [r1, #0]
 800a13e:	781a      	ldrb	r2, [r3, #0]
 800a140:	3201      	adds	r2, #1
 800a142:	701a      	strb	r2, [r3, #0]
 800a144:	e790      	b.n	800a068 <_dtoa_r+0x608>
 800a146:	4ba6      	ldr	r3, [pc, #664]	; (800a3e0 <_dtoa_r+0x980>)
 800a148:	2200      	movs	r2, #0
 800a14a:	f7f6 fa65 	bl	8000618 <__aeabi_dmul>
 800a14e:	2200      	movs	r2, #0
 800a150:	2300      	movs	r3, #0
 800a152:	4606      	mov	r6, r0
 800a154:	460f      	mov	r7, r1
 800a156:	f7f6 fcc7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d09d      	beq.n	800a09a <_dtoa_r+0x63a>
 800a15e:	e7cf      	b.n	800a100 <_dtoa_r+0x6a0>
 800a160:	9a08      	ldr	r2, [sp, #32]
 800a162:	2a00      	cmp	r2, #0
 800a164:	f000 80d7 	beq.w	800a316 <_dtoa_r+0x8b6>
 800a168:	9a06      	ldr	r2, [sp, #24]
 800a16a:	2a01      	cmp	r2, #1
 800a16c:	f300 80ba 	bgt.w	800a2e4 <_dtoa_r+0x884>
 800a170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a172:	2a00      	cmp	r2, #0
 800a174:	f000 80b2 	beq.w	800a2dc <_dtoa_r+0x87c>
 800a178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a17c:	9e07      	ldr	r6, [sp, #28]
 800a17e:	9d04      	ldr	r5, [sp, #16]
 800a180:	9a04      	ldr	r2, [sp, #16]
 800a182:	441a      	add	r2, r3
 800a184:	9204      	str	r2, [sp, #16]
 800a186:	9a05      	ldr	r2, [sp, #20]
 800a188:	2101      	movs	r1, #1
 800a18a:	441a      	add	r2, r3
 800a18c:	4620      	mov	r0, r4
 800a18e:	9205      	str	r2, [sp, #20]
 800a190:	f001 f956 	bl	800b440 <__i2b>
 800a194:	4607      	mov	r7, r0
 800a196:	2d00      	cmp	r5, #0
 800a198:	dd0c      	ble.n	800a1b4 <_dtoa_r+0x754>
 800a19a:	9b05      	ldr	r3, [sp, #20]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dd09      	ble.n	800a1b4 <_dtoa_r+0x754>
 800a1a0:	42ab      	cmp	r3, r5
 800a1a2:	9a04      	ldr	r2, [sp, #16]
 800a1a4:	bfa8      	it	ge
 800a1a6:	462b      	movge	r3, r5
 800a1a8:	1ad2      	subs	r2, r2, r3
 800a1aa:	9204      	str	r2, [sp, #16]
 800a1ac:	9a05      	ldr	r2, [sp, #20]
 800a1ae:	1aed      	subs	r5, r5, r3
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	9b07      	ldr	r3, [sp, #28]
 800a1b6:	b31b      	cbz	r3, 800a200 <_dtoa_r+0x7a0>
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80af 	beq.w	800a31e <_dtoa_r+0x8be>
 800a1c0:	2e00      	cmp	r6, #0
 800a1c2:	dd13      	ble.n	800a1ec <_dtoa_r+0x78c>
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f001 f9f9 	bl	800b5c0 <__pow5mult>
 800a1ce:	ee18 2a10 	vmov	r2, s16
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f001 f948 	bl	800b46c <__multiply>
 800a1dc:	ee18 1a10 	vmov	r1, s16
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f001 f82a 	bl	800b23c <_Bfree>
 800a1e8:	ee08 8a10 	vmov	s16, r8
 800a1ec:	9b07      	ldr	r3, [sp, #28]
 800a1ee:	1b9a      	subs	r2, r3, r6
 800a1f0:	d006      	beq.n	800a200 <_dtoa_r+0x7a0>
 800a1f2:	ee18 1a10 	vmov	r1, s16
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f001 f9e2 	bl	800b5c0 <__pow5mult>
 800a1fc:	ee08 0a10 	vmov	s16, r0
 800a200:	2101      	movs	r1, #1
 800a202:	4620      	mov	r0, r4
 800a204:	f001 f91c 	bl	800b440 <__i2b>
 800a208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	4606      	mov	r6, r0
 800a20e:	f340 8088 	ble.w	800a322 <_dtoa_r+0x8c2>
 800a212:	461a      	mov	r2, r3
 800a214:	4601      	mov	r1, r0
 800a216:	4620      	mov	r0, r4
 800a218:	f001 f9d2 	bl	800b5c0 <__pow5mult>
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	4606      	mov	r6, r0
 800a222:	f340 8081 	ble.w	800a328 <_dtoa_r+0x8c8>
 800a226:	f04f 0800 	mov.w	r8, #0
 800a22a:	6933      	ldr	r3, [r6, #16]
 800a22c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a230:	6918      	ldr	r0, [r3, #16]
 800a232:	f001 f8b5 	bl	800b3a0 <__hi0bits>
 800a236:	f1c0 0020 	rsb	r0, r0, #32
 800a23a:	9b05      	ldr	r3, [sp, #20]
 800a23c:	4418      	add	r0, r3
 800a23e:	f010 001f 	ands.w	r0, r0, #31
 800a242:	f000 8092 	beq.w	800a36a <_dtoa_r+0x90a>
 800a246:	f1c0 0320 	rsb	r3, r0, #32
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	f340 808a 	ble.w	800a364 <_dtoa_r+0x904>
 800a250:	f1c0 001c 	rsb	r0, r0, #28
 800a254:	9b04      	ldr	r3, [sp, #16]
 800a256:	4403      	add	r3, r0
 800a258:	9304      	str	r3, [sp, #16]
 800a25a:	9b05      	ldr	r3, [sp, #20]
 800a25c:	4403      	add	r3, r0
 800a25e:	4405      	add	r5, r0
 800a260:	9305      	str	r3, [sp, #20]
 800a262:	9b04      	ldr	r3, [sp, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	dd07      	ble.n	800a278 <_dtoa_r+0x818>
 800a268:	ee18 1a10 	vmov	r1, s16
 800a26c:	461a      	mov	r2, r3
 800a26e:	4620      	mov	r0, r4
 800a270:	f001 fa00 	bl	800b674 <__lshift>
 800a274:	ee08 0a10 	vmov	s16, r0
 800a278:	9b05      	ldr	r3, [sp, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dd05      	ble.n	800a28a <_dtoa_r+0x82a>
 800a27e:	4631      	mov	r1, r6
 800a280:	461a      	mov	r2, r3
 800a282:	4620      	mov	r0, r4
 800a284:	f001 f9f6 	bl	800b674 <__lshift>
 800a288:	4606      	mov	r6, r0
 800a28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d06e      	beq.n	800a36e <_dtoa_r+0x90e>
 800a290:	ee18 0a10 	vmov	r0, s16
 800a294:	4631      	mov	r1, r6
 800a296:	f001 fa5d 	bl	800b754 <__mcmp>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	da67      	bge.n	800a36e <_dtoa_r+0x90e>
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	ee18 1a10 	vmov	r1, s16
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 ffe7 	bl	800b280 <__multadd>
 800a2b2:	9b08      	ldr	r3, [sp, #32]
 800a2b4:	ee08 0a10 	vmov	s16, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 81b1 	beq.w	800a620 <_dtoa_r+0xbc0>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	220a      	movs	r2, #10
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f000 ffdb 	bl	800b280 <__multadd>
 800a2ca:	9b02      	ldr	r3, [sp, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	f300 808e 	bgt.w	800a3f0 <_dtoa_r+0x990>
 800a2d4:	9b06      	ldr	r3, [sp, #24]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	dc51      	bgt.n	800a37e <_dtoa_r+0x91e>
 800a2da:	e089      	b.n	800a3f0 <_dtoa_r+0x990>
 800a2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2e2:	e74b      	b.n	800a17c <_dtoa_r+0x71c>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	1e5e      	subs	r6, r3, #1
 800a2e8:	9b07      	ldr	r3, [sp, #28]
 800a2ea:	42b3      	cmp	r3, r6
 800a2ec:	bfbf      	itttt	lt
 800a2ee:	9b07      	ldrlt	r3, [sp, #28]
 800a2f0:	9607      	strlt	r6, [sp, #28]
 800a2f2:	1af2      	sublt	r2, r6, r3
 800a2f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2f6:	bfb6      	itet	lt
 800a2f8:	189b      	addlt	r3, r3, r2
 800a2fa:	1b9e      	subge	r6, r3, r6
 800a2fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	bfb8      	it	lt
 800a302:	2600      	movlt	r6, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	bfb7      	itett	lt
 800a308:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a30c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a310:	1a9d      	sublt	r5, r3, r2
 800a312:	2300      	movlt	r3, #0
 800a314:	e734      	b.n	800a180 <_dtoa_r+0x720>
 800a316:	9e07      	ldr	r6, [sp, #28]
 800a318:	9d04      	ldr	r5, [sp, #16]
 800a31a:	9f08      	ldr	r7, [sp, #32]
 800a31c:	e73b      	b.n	800a196 <_dtoa_r+0x736>
 800a31e:	9a07      	ldr	r2, [sp, #28]
 800a320:	e767      	b.n	800a1f2 <_dtoa_r+0x792>
 800a322:	9b06      	ldr	r3, [sp, #24]
 800a324:	2b01      	cmp	r3, #1
 800a326:	dc18      	bgt.n	800a35a <_dtoa_r+0x8fa>
 800a328:	f1ba 0f00 	cmp.w	sl, #0
 800a32c:	d115      	bne.n	800a35a <_dtoa_r+0x8fa>
 800a32e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a332:	b993      	cbnz	r3, 800a35a <_dtoa_r+0x8fa>
 800a334:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a338:	0d1b      	lsrs	r3, r3, #20
 800a33a:	051b      	lsls	r3, r3, #20
 800a33c:	b183      	cbz	r3, 800a360 <_dtoa_r+0x900>
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	3301      	adds	r3, #1
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	9b05      	ldr	r3, [sp, #20]
 800a346:	3301      	adds	r3, #1
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	f04f 0801 	mov.w	r8, #1
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	2b00      	cmp	r3, #0
 800a352:	f47f af6a 	bne.w	800a22a <_dtoa_r+0x7ca>
 800a356:	2001      	movs	r0, #1
 800a358:	e76f      	b.n	800a23a <_dtoa_r+0x7da>
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	e7f6      	b.n	800a34e <_dtoa_r+0x8ee>
 800a360:	4698      	mov	r8, r3
 800a362:	e7f4      	b.n	800a34e <_dtoa_r+0x8ee>
 800a364:	f43f af7d 	beq.w	800a262 <_dtoa_r+0x802>
 800a368:	4618      	mov	r0, r3
 800a36a:	301c      	adds	r0, #28
 800a36c:	e772      	b.n	800a254 <_dtoa_r+0x7f4>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	dc37      	bgt.n	800a3e4 <_dtoa_r+0x984>
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	2b02      	cmp	r3, #2
 800a378:	dd34      	ble.n	800a3e4 <_dtoa_r+0x984>
 800a37a:	9b03      	ldr	r3, [sp, #12]
 800a37c:	9302      	str	r3, [sp, #8]
 800a37e:	9b02      	ldr	r3, [sp, #8]
 800a380:	b96b      	cbnz	r3, 800a39e <_dtoa_r+0x93e>
 800a382:	4631      	mov	r1, r6
 800a384:	2205      	movs	r2, #5
 800a386:	4620      	mov	r0, r4
 800a388:	f000 ff7a 	bl	800b280 <__multadd>
 800a38c:	4601      	mov	r1, r0
 800a38e:	4606      	mov	r6, r0
 800a390:	ee18 0a10 	vmov	r0, s16
 800a394:	f001 f9de 	bl	800b754 <__mcmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	f73f adbb 	bgt.w	8009f14 <_dtoa_r+0x4b4>
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	9d01      	ldr	r5, [sp, #4]
 800a3a2:	43db      	mvns	r3, r3
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	f04f 0800 	mov.w	r8, #0
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 ff45 	bl	800b23c <_Bfree>
 800a3b2:	2f00      	cmp	r7, #0
 800a3b4:	f43f aea4 	beq.w	800a100 <_dtoa_r+0x6a0>
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	d005      	beq.n	800a3ca <_dtoa_r+0x96a>
 800a3be:	45b8      	cmp	r8, r7
 800a3c0:	d003      	beq.n	800a3ca <_dtoa_r+0x96a>
 800a3c2:	4641      	mov	r1, r8
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 ff39 	bl	800b23c <_Bfree>
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f000 ff35 	bl	800b23c <_Bfree>
 800a3d2:	e695      	b.n	800a100 <_dtoa_r+0x6a0>
 800a3d4:	2600      	movs	r6, #0
 800a3d6:	4637      	mov	r7, r6
 800a3d8:	e7e1      	b.n	800a39e <_dtoa_r+0x93e>
 800a3da:	9700      	str	r7, [sp, #0]
 800a3dc:	4637      	mov	r7, r6
 800a3de:	e599      	b.n	8009f14 <_dtoa_r+0x4b4>
 800a3e0:	40240000 	.word	0x40240000
 800a3e4:	9b08      	ldr	r3, [sp, #32]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 80ca 	beq.w	800a580 <_dtoa_r+0xb20>
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	9302      	str	r3, [sp, #8]
 800a3f0:	2d00      	cmp	r5, #0
 800a3f2:	dd05      	ble.n	800a400 <_dtoa_r+0x9a0>
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f001 f93b 	bl	800b674 <__lshift>
 800a3fe:	4607      	mov	r7, r0
 800a400:	f1b8 0f00 	cmp.w	r8, #0
 800a404:	d05b      	beq.n	800a4be <_dtoa_r+0xa5e>
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fed7 	bl	800b1bc <_Balloc>
 800a40e:	4605      	mov	r5, r0
 800a410:	b928      	cbnz	r0, 800a41e <_dtoa_r+0x9be>
 800a412:	4b87      	ldr	r3, [pc, #540]	; (800a630 <_dtoa_r+0xbd0>)
 800a414:	4602      	mov	r2, r0
 800a416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a41a:	f7ff bb3b 	b.w	8009a94 <_dtoa_r+0x34>
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	3202      	adds	r2, #2
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	f107 010c 	add.w	r1, r7, #12
 800a428:	300c      	adds	r0, #12
 800a42a:	f7fd fb45 	bl	8007ab8 <memcpy>
 800a42e:	2201      	movs	r2, #1
 800a430:	4629      	mov	r1, r5
 800a432:	4620      	mov	r0, r4
 800a434:	f001 f91e 	bl	800b674 <__lshift>
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	f103 0901 	add.w	r9, r3, #1
 800a43e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a442:	4413      	add	r3, r2
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	f00a 0301 	and.w	r3, sl, #1
 800a44a:	46b8      	mov	r8, r7
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	4607      	mov	r7, r0
 800a450:	4631      	mov	r1, r6
 800a452:	ee18 0a10 	vmov	r0, s16
 800a456:	f7ff fa75 	bl	8009944 <quorem>
 800a45a:	4641      	mov	r1, r8
 800a45c:	9002      	str	r0, [sp, #8]
 800a45e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a462:	ee18 0a10 	vmov	r0, s16
 800a466:	f001 f975 	bl	800b754 <__mcmp>
 800a46a:	463a      	mov	r2, r7
 800a46c:	9003      	str	r0, [sp, #12]
 800a46e:	4631      	mov	r1, r6
 800a470:	4620      	mov	r0, r4
 800a472:	f001 f98b 	bl	800b78c <__mdiff>
 800a476:	68c2      	ldr	r2, [r0, #12]
 800a478:	f109 3bff 	add.w	fp, r9, #4294967295
 800a47c:	4605      	mov	r5, r0
 800a47e:	bb02      	cbnz	r2, 800a4c2 <_dtoa_r+0xa62>
 800a480:	4601      	mov	r1, r0
 800a482:	ee18 0a10 	vmov	r0, s16
 800a486:	f001 f965 	bl	800b754 <__mcmp>
 800a48a:	4602      	mov	r2, r0
 800a48c:	4629      	mov	r1, r5
 800a48e:	4620      	mov	r0, r4
 800a490:	9207      	str	r2, [sp, #28]
 800a492:	f000 fed3 	bl	800b23c <_Bfree>
 800a496:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a49a:	ea43 0102 	orr.w	r1, r3, r2
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	464d      	mov	r5, r9
 800a4a4:	d10f      	bne.n	800a4c6 <_dtoa_r+0xa66>
 800a4a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4aa:	d02a      	beq.n	800a502 <_dtoa_r+0xaa2>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	dd02      	ble.n	800a4b8 <_dtoa_r+0xa58>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a4b8:	f88b a000 	strb.w	sl, [fp]
 800a4bc:	e775      	b.n	800a3aa <_dtoa_r+0x94a>
 800a4be:	4638      	mov	r0, r7
 800a4c0:	e7ba      	b.n	800a438 <_dtoa_r+0x9d8>
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	e7e2      	b.n	800a48c <_dtoa_r+0xa2c>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	db04      	blt.n	800a4d6 <_dtoa_r+0xa76>
 800a4cc:	9906      	ldr	r1, [sp, #24]
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	9904      	ldr	r1, [sp, #16]
 800a4d2:	430b      	orrs	r3, r1
 800a4d4:	d122      	bne.n	800a51c <_dtoa_r+0xabc>
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	ddee      	ble.n	800a4b8 <_dtoa_r+0xa58>
 800a4da:	ee18 1a10 	vmov	r1, s16
 800a4de:	2201      	movs	r2, #1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f001 f8c7 	bl	800b674 <__lshift>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	ee08 0a10 	vmov	s16, r0
 800a4ec:	f001 f932 	bl	800b754 <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	dc03      	bgt.n	800a4fc <_dtoa_r+0xa9c>
 800a4f4:	d1e0      	bne.n	800a4b8 <_dtoa_r+0xa58>
 800a4f6:	f01a 0f01 	tst.w	sl, #1
 800a4fa:	d0dd      	beq.n	800a4b8 <_dtoa_r+0xa58>
 800a4fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a500:	d1d7      	bne.n	800a4b2 <_dtoa_r+0xa52>
 800a502:	2339      	movs	r3, #57	; 0x39
 800a504:	f88b 3000 	strb.w	r3, [fp]
 800a508:	462b      	mov	r3, r5
 800a50a:	461d      	mov	r5, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a512:	2a39      	cmp	r2, #57	; 0x39
 800a514:	d071      	beq.n	800a5fa <_dtoa_r+0xb9a>
 800a516:	3201      	adds	r2, #1
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	e746      	b.n	800a3aa <_dtoa_r+0x94a>
 800a51c:	2a00      	cmp	r2, #0
 800a51e:	dd07      	ble.n	800a530 <_dtoa_r+0xad0>
 800a520:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a524:	d0ed      	beq.n	800a502 <_dtoa_r+0xaa2>
 800a526:	f10a 0301 	add.w	r3, sl, #1
 800a52a:	f88b 3000 	strb.w	r3, [fp]
 800a52e:	e73c      	b.n	800a3aa <_dtoa_r+0x94a>
 800a530:	9b05      	ldr	r3, [sp, #20]
 800a532:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a536:	4599      	cmp	r9, r3
 800a538:	d047      	beq.n	800a5ca <_dtoa_r+0xb6a>
 800a53a:	ee18 1a10 	vmov	r1, s16
 800a53e:	2300      	movs	r3, #0
 800a540:	220a      	movs	r2, #10
 800a542:	4620      	mov	r0, r4
 800a544:	f000 fe9c 	bl	800b280 <__multadd>
 800a548:	45b8      	cmp	r8, r7
 800a54a:	ee08 0a10 	vmov	s16, r0
 800a54e:	f04f 0300 	mov.w	r3, #0
 800a552:	f04f 020a 	mov.w	r2, #10
 800a556:	4641      	mov	r1, r8
 800a558:	4620      	mov	r0, r4
 800a55a:	d106      	bne.n	800a56a <_dtoa_r+0xb0a>
 800a55c:	f000 fe90 	bl	800b280 <__multadd>
 800a560:	4680      	mov	r8, r0
 800a562:	4607      	mov	r7, r0
 800a564:	f109 0901 	add.w	r9, r9, #1
 800a568:	e772      	b.n	800a450 <_dtoa_r+0x9f0>
 800a56a:	f000 fe89 	bl	800b280 <__multadd>
 800a56e:	4639      	mov	r1, r7
 800a570:	4680      	mov	r8, r0
 800a572:	2300      	movs	r3, #0
 800a574:	220a      	movs	r2, #10
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fe82 	bl	800b280 <__multadd>
 800a57c:	4607      	mov	r7, r0
 800a57e:	e7f1      	b.n	800a564 <_dtoa_r+0xb04>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	9302      	str	r3, [sp, #8]
 800a584:	9d01      	ldr	r5, [sp, #4]
 800a586:	ee18 0a10 	vmov	r0, s16
 800a58a:	4631      	mov	r1, r6
 800a58c:	f7ff f9da 	bl	8009944 <quorem>
 800a590:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	f805 ab01 	strb.w	sl, [r5], #1
 800a59a:	1aea      	subs	r2, r5, r3
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	dd09      	ble.n	800a5b6 <_dtoa_r+0xb56>
 800a5a2:	ee18 1a10 	vmov	r1, s16
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 fe68 	bl	800b280 <__multadd>
 800a5b0:	ee08 0a10 	vmov	s16, r0
 800a5b4:	e7e7      	b.n	800a586 <_dtoa_r+0xb26>
 800a5b6:	9b02      	ldr	r3, [sp, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	bfc8      	it	gt
 800a5bc:	461d      	movgt	r5, r3
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	bfd8      	it	le
 800a5c2:	2501      	movle	r5, #1
 800a5c4:	441d      	add	r5, r3
 800a5c6:	f04f 0800 	mov.w	r8, #0
 800a5ca:	ee18 1a10 	vmov	r1, s16
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 f84f 	bl	800b674 <__lshift>
 800a5d6:	4631      	mov	r1, r6
 800a5d8:	ee08 0a10 	vmov	s16, r0
 800a5dc:	f001 f8ba 	bl	800b754 <__mcmp>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	dc91      	bgt.n	800a508 <_dtoa_r+0xaa8>
 800a5e4:	d102      	bne.n	800a5ec <_dtoa_r+0xb8c>
 800a5e6:	f01a 0f01 	tst.w	sl, #1
 800a5ea:	d18d      	bne.n	800a508 <_dtoa_r+0xaa8>
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5f4:	2a30      	cmp	r2, #48	; 0x30
 800a5f6:	d0fa      	beq.n	800a5ee <_dtoa_r+0xb8e>
 800a5f8:	e6d7      	b.n	800a3aa <_dtoa_r+0x94a>
 800a5fa:	9a01      	ldr	r2, [sp, #4]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d184      	bne.n	800a50a <_dtoa_r+0xaaa>
 800a600:	9b00      	ldr	r3, [sp, #0]
 800a602:	3301      	adds	r3, #1
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	2331      	movs	r3, #49	; 0x31
 800a608:	7013      	strb	r3, [r2, #0]
 800a60a:	e6ce      	b.n	800a3aa <_dtoa_r+0x94a>
 800a60c:	4b09      	ldr	r3, [pc, #36]	; (800a634 <_dtoa_r+0xbd4>)
 800a60e:	f7ff ba95 	b.w	8009b3c <_dtoa_r+0xdc>
 800a612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a614:	2b00      	cmp	r3, #0
 800a616:	f47f aa6e 	bne.w	8009af6 <_dtoa_r+0x96>
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <_dtoa_r+0xbd8>)
 800a61c:	f7ff ba8e 	b.w	8009b3c <_dtoa_r+0xdc>
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	dcae      	bgt.n	800a584 <_dtoa_r+0xb24>
 800a626:	9b06      	ldr	r3, [sp, #24]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	f73f aea8 	bgt.w	800a37e <_dtoa_r+0x91e>
 800a62e:	e7a9      	b.n	800a584 <_dtoa_r+0xb24>
 800a630:	0800d110 	.word	0x0800d110
 800a634:	0800d371 	.word	0x0800d371
 800a638:	0800d091 	.word	0x0800d091

0800a63c <__sflush_r>:
 800a63c:	898a      	ldrh	r2, [r1, #12]
 800a63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a642:	4605      	mov	r5, r0
 800a644:	0710      	lsls	r0, r2, #28
 800a646:	460c      	mov	r4, r1
 800a648:	d458      	bmi.n	800a6fc <__sflush_r+0xc0>
 800a64a:	684b      	ldr	r3, [r1, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dc05      	bgt.n	800a65c <__sflush_r+0x20>
 800a650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	dc02      	bgt.n	800a65c <__sflush_r+0x20>
 800a656:	2000      	movs	r0, #0
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a65e:	2e00      	cmp	r6, #0
 800a660:	d0f9      	beq.n	800a656 <__sflush_r+0x1a>
 800a662:	2300      	movs	r3, #0
 800a664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a668:	682f      	ldr	r7, [r5, #0]
 800a66a:	602b      	str	r3, [r5, #0]
 800a66c:	d032      	beq.n	800a6d4 <__sflush_r+0x98>
 800a66e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	075a      	lsls	r2, r3, #29
 800a674:	d505      	bpl.n	800a682 <__sflush_r+0x46>
 800a676:	6863      	ldr	r3, [r4, #4]
 800a678:	1ac0      	subs	r0, r0, r3
 800a67a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a67c:	b10b      	cbz	r3, 800a682 <__sflush_r+0x46>
 800a67e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a680:	1ac0      	subs	r0, r0, r3
 800a682:	2300      	movs	r3, #0
 800a684:	4602      	mov	r2, r0
 800a686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a688:	6a21      	ldr	r1, [r4, #32]
 800a68a:	4628      	mov	r0, r5
 800a68c:	47b0      	blx	r6
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	89a3      	ldrh	r3, [r4, #12]
 800a692:	d106      	bne.n	800a6a2 <__sflush_r+0x66>
 800a694:	6829      	ldr	r1, [r5, #0]
 800a696:	291d      	cmp	r1, #29
 800a698:	d82c      	bhi.n	800a6f4 <__sflush_r+0xb8>
 800a69a:	4a2a      	ldr	r2, [pc, #168]	; (800a744 <__sflush_r+0x108>)
 800a69c:	40ca      	lsrs	r2, r1
 800a69e:	07d6      	lsls	r6, r2, #31
 800a6a0:	d528      	bpl.n	800a6f4 <__sflush_r+0xb8>
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	6062      	str	r2, [r4, #4]
 800a6a6:	04d9      	lsls	r1, r3, #19
 800a6a8:	6922      	ldr	r2, [r4, #16]
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	d504      	bpl.n	800a6b8 <__sflush_r+0x7c>
 800a6ae:	1c42      	adds	r2, r0, #1
 800a6b0:	d101      	bne.n	800a6b6 <__sflush_r+0x7a>
 800a6b2:	682b      	ldr	r3, [r5, #0]
 800a6b4:	b903      	cbnz	r3, 800a6b8 <__sflush_r+0x7c>
 800a6b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a6b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ba:	602f      	str	r7, [r5, #0]
 800a6bc:	2900      	cmp	r1, #0
 800a6be:	d0ca      	beq.n	800a656 <__sflush_r+0x1a>
 800a6c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c4:	4299      	cmp	r1, r3
 800a6c6:	d002      	beq.n	800a6ce <__sflush_r+0x92>
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f001 fa4f 	bl	800bb6c <_free_r>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a6d2:	e7c1      	b.n	800a658 <__sflush_r+0x1c>
 800a6d4:	6a21      	ldr	r1, [r4, #32]
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4628      	mov	r0, r5
 800a6da:	47b0      	blx	r6
 800a6dc:	1c41      	adds	r1, r0, #1
 800a6de:	d1c7      	bne.n	800a670 <__sflush_r+0x34>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0c4      	beq.n	800a670 <__sflush_r+0x34>
 800a6e6:	2b1d      	cmp	r3, #29
 800a6e8:	d001      	beq.n	800a6ee <__sflush_r+0xb2>
 800a6ea:	2b16      	cmp	r3, #22
 800a6ec:	d101      	bne.n	800a6f2 <__sflush_r+0xb6>
 800a6ee:	602f      	str	r7, [r5, #0]
 800a6f0:	e7b1      	b.n	800a656 <__sflush_r+0x1a>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	e7ad      	b.n	800a658 <__sflush_r+0x1c>
 800a6fc:	690f      	ldr	r7, [r1, #16]
 800a6fe:	2f00      	cmp	r7, #0
 800a700:	d0a9      	beq.n	800a656 <__sflush_r+0x1a>
 800a702:	0793      	lsls	r3, r2, #30
 800a704:	680e      	ldr	r6, [r1, #0]
 800a706:	bf08      	it	eq
 800a708:	694b      	ldreq	r3, [r1, #20]
 800a70a:	600f      	str	r7, [r1, #0]
 800a70c:	bf18      	it	ne
 800a70e:	2300      	movne	r3, #0
 800a710:	eba6 0807 	sub.w	r8, r6, r7
 800a714:	608b      	str	r3, [r1, #8]
 800a716:	f1b8 0f00 	cmp.w	r8, #0
 800a71a:	dd9c      	ble.n	800a656 <__sflush_r+0x1a>
 800a71c:	6a21      	ldr	r1, [r4, #32]
 800a71e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a720:	4643      	mov	r3, r8
 800a722:	463a      	mov	r2, r7
 800a724:	4628      	mov	r0, r5
 800a726:	47b0      	blx	r6
 800a728:	2800      	cmp	r0, #0
 800a72a:	dc06      	bgt.n	800a73a <__sflush_r+0xfe>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	e78e      	b.n	800a658 <__sflush_r+0x1c>
 800a73a:	4407      	add	r7, r0
 800a73c:	eba8 0800 	sub.w	r8, r8, r0
 800a740:	e7e9      	b.n	800a716 <__sflush_r+0xda>
 800a742:	bf00      	nop
 800a744:	20400001 	.word	0x20400001

0800a748 <_fflush_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	690b      	ldr	r3, [r1, #16]
 800a74c:	4605      	mov	r5, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	b913      	cbnz	r3, 800a758 <_fflush_r+0x10>
 800a752:	2500      	movs	r5, #0
 800a754:	4628      	mov	r0, r5
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	b118      	cbz	r0, 800a762 <_fflush_r+0x1a>
 800a75a:	6983      	ldr	r3, [r0, #24]
 800a75c:	b90b      	cbnz	r3, 800a762 <_fflush_r+0x1a>
 800a75e:	f000 f887 	bl	800a870 <__sinit>
 800a762:	4b14      	ldr	r3, [pc, #80]	; (800a7b4 <_fflush_r+0x6c>)
 800a764:	429c      	cmp	r4, r3
 800a766:	d11b      	bne.n	800a7a0 <_fflush_r+0x58>
 800a768:	686c      	ldr	r4, [r5, #4]
 800a76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0ef      	beq.n	800a752 <_fflush_r+0xa>
 800a772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a774:	07d0      	lsls	r0, r2, #31
 800a776:	d404      	bmi.n	800a782 <_fflush_r+0x3a>
 800a778:	0599      	lsls	r1, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_fflush_r+0x3a>
 800a77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77e:	f000 fc88 	bl	800b092 <__retarget_lock_acquire_recursive>
 800a782:	4628      	mov	r0, r5
 800a784:	4621      	mov	r1, r4
 800a786:	f7ff ff59 	bl	800a63c <__sflush_r>
 800a78a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a78c:	07da      	lsls	r2, r3, #31
 800a78e:	4605      	mov	r5, r0
 800a790:	d4e0      	bmi.n	800a754 <_fflush_r+0xc>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	059b      	lsls	r3, r3, #22
 800a796:	d4dd      	bmi.n	800a754 <_fflush_r+0xc>
 800a798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a79a:	f000 fc7b 	bl	800b094 <__retarget_lock_release_recursive>
 800a79e:	e7d9      	b.n	800a754 <_fflush_r+0xc>
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <_fflush_r+0x70>)
 800a7a2:	429c      	cmp	r4, r3
 800a7a4:	d101      	bne.n	800a7aa <_fflush_r+0x62>
 800a7a6:	68ac      	ldr	r4, [r5, #8]
 800a7a8:	e7df      	b.n	800a76a <_fflush_r+0x22>
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <_fflush_r+0x74>)
 800a7ac:	429c      	cmp	r4, r3
 800a7ae:	bf08      	it	eq
 800a7b0:	68ec      	ldreq	r4, [r5, #12]
 800a7b2:	e7da      	b.n	800a76a <_fflush_r+0x22>
 800a7b4:	0800d144 	.word	0x0800d144
 800a7b8:	0800d164 	.word	0x0800d164
 800a7bc:	0800d124 	.word	0x0800d124

0800a7c0 <std>:
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	e9c0 3300 	strd	r3, r3, [r0]
 800a7ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ce:	6083      	str	r3, [r0, #8]
 800a7d0:	8181      	strh	r1, [r0, #12]
 800a7d2:	6643      	str	r3, [r0, #100]	; 0x64
 800a7d4:	81c2      	strh	r2, [r0, #14]
 800a7d6:	6183      	str	r3, [r0, #24]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	2208      	movs	r2, #8
 800a7dc:	305c      	adds	r0, #92	; 0x5c
 800a7de:	f7fd f979 	bl	8007ad4 <memset>
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <std+0x38>)
 800a7e4:	6263      	str	r3, [r4, #36]	; 0x24
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <std+0x3c>)
 800a7e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <std+0x40>)
 800a7ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7ee:	4b05      	ldr	r3, [pc, #20]	; (800a804 <std+0x44>)
 800a7f0:	6224      	str	r4, [r4, #32]
 800a7f2:	6323      	str	r3, [r4, #48]	; 0x30
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	bf00      	nop
 800a7f8:	08008999 	.word	0x08008999
 800a7fc:	080089bf 	.word	0x080089bf
 800a800:	080089f7 	.word	0x080089f7
 800a804:	08008a1b 	.word	0x08008a1b

0800a808 <_cleanup_r>:
 800a808:	4901      	ldr	r1, [pc, #4]	; (800a810 <_cleanup_r+0x8>)
 800a80a:	f000 b8af 	b.w	800a96c <_fwalk_reent>
 800a80e:	bf00      	nop
 800a810:	0800a749 	.word	0x0800a749

0800a814 <__sfmoreglue>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	2268      	movs	r2, #104	; 0x68
 800a818:	1e4d      	subs	r5, r1, #1
 800a81a:	4355      	muls	r5, r2
 800a81c:	460e      	mov	r6, r1
 800a81e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a822:	f001 fa0f 	bl	800bc44 <_malloc_r>
 800a826:	4604      	mov	r4, r0
 800a828:	b140      	cbz	r0, 800a83c <__sfmoreglue+0x28>
 800a82a:	2100      	movs	r1, #0
 800a82c:	e9c0 1600 	strd	r1, r6, [r0]
 800a830:	300c      	adds	r0, #12
 800a832:	60a0      	str	r0, [r4, #8]
 800a834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a838:	f7fd f94c 	bl	8007ad4 <memset>
 800a83c:	4620      	mov	r0, r4
 800a83e:	bd70      	pop	{r4, r5, r6, pc}

0800a840 <__sfp_lock_acquire>:
 800a840:	4801      	ldr	r0, [pc, #4]	; (800a848 <__sfp_lock_acquire+0x8>)
 800a842:	f000 bc26 	b.w	800b092 <__retarget_lock_acquire_recursive>
 800a846:	bf00      	nop
 800a848:	200007f9 	.word	0x200007f9

0800a84c <__sfp_lock_release>:
 800a84c:	4801      	ldr	r0, [pc, #4]	; (800a854 <__sfp_lock_release+0x8>)
 800a84e:	f000 bc21 	b.w	800b094 <__retarget_lock_release_recursive>
 800a852:	bf00      	nop
 800a854:	200007f9 	.word	0x200007f9

0800a858 <__sinit_lock_acquire>:
 800a858:	4801      	ldr	r0, [pc, #4]	; (800a860 <__sinit_lock_acquire+0x8>)
 800a85a:	f000 bc1a 	b.w	800b092 <__retarget_lock_acquire_recursive>
 800a85e:	bf00      	nop
 800a860:	200007fa 	.word	0x200007fa

0800a864 <__sinit_lock_release>:
 800a864:	4801      	ldr	r0, [pc, #4]	; (800a86c <__sinit_lock_release+0x8>)
 800a866:	f000 bc15 	b.w	800b094 <__retarget_lock_release_recursive>
 800a86a:	bf00      	nop
 800a86c:	200007fa 	.word	0x200007fa

0800a870 <__sinit>:
 800a870:	b510      	push	{r4, lr}
 800a872:	4604      	mov	r4, r0
 800a874:	f7ff fff0 	bl	800a858 <__sinit_lock_acquire>
 800a878:	69a3      	ldr	r3, [r4, #24]
 800a87a:	b11b      	cbz	r3, 800a884 <__sinit+0x14>
 800a87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a880:	f7ff bff0 	b.w	800a864 <__sinit_lock_release>
 800a884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a888:	6523      	str	r3, [r4, #80]	; 0x50
 800a88a:	4b13      	ldr	r3, [pc, #76]	; (800a8d8 <__sinit+0x68>)
 800a88c:	4a13      	ldr	r2, [pc, #76]	; (800a8dc <__sinit+0x6c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	62a2      	str	r2, [r4, #40]	; 0x28
 800a892:	42a3      	cmp	r3, r4
 800a894:	bf04      	itt	eq
 800a896:	2301      	moveq	r3, #1
 800a898:	61a3      	streq	r3, [r4, #24]
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 f820 	bl	800a8e0 <__sfp>
 800a8a0:	6060      	str	r0, [r4, #4]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 f81c 	bl	800a8e0 <__sfp>
 800a8a8:	60a0      	str	r0, [r4, #8]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 f818 	bl	800a8e0 <__sfp>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	60e0      	str	r0, [r4, #12]
 800a8b4:	2104      	movs	r1, #4
 800a8b6:	6860      	ldr	r0, [r4, #4]
 800a8b8:	f7ff ff82 	bl	800a7c0 <std>
 800a8bc:	68a0      	ldr	r0, [r4, #8]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	2109      	movs	r1, #9
 800a8c2:	f7ff ff7d 	bl	800a7c0 <std>
 800a8c6:	68e0      	ldr	r0, [r4, #12]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	2112      	movs	r1, #18
 800a8cc:	f7ff ff78 	bl	800a7c0 <std>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	61a3      	str	r3, [r4, #24]
 800a8d4:	e7d2      	b.n	800a87c <__sinit+0xc>
 800a8d6:	bf00      	nop
 800a8d8:	0800cf00 	.word	0x0800cf00
 800a8dc:	0800a809 	.word	0x0800a809

0800a8e0 <__sfp>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	f7ff ffac 	bl	800a840 <__sfp_lock_acquire>
 800a8e8:	4b1e      	ldr	r3, [pc, #120]	; (800a964 <__sfp+0x84>)
 800a8ea:	681e      	ldr	r6, [r3, #0]
 800a8ec:	69b3      	ldr	r3, [r6, #24]
 800a8ee:	b913      	cbnz	r3, 800a8f6 <__sfp+0x16>
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f7ff ffbd 	bl	800a870 <__sinit>
 800a8f6:	3648      	adds	r6, #72	; 0x48
 800a8f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	d503      	bpl.n	800a908 <__sfp+0x28>
 800a900:	6833      	ldr	r3, [r6, #0]
 800a902:	b30b      	cbz	r3, 800a948 <__sfp+0x68>
 800a904:	6836      	ldr	r6, [r6, #0]
 800a906:	e7f7      	b.n	800a8f8 <__sfp+0x18>
 800a908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a90c:	b9d5      	cbnz	r5, 800a944 <__sfp+0x64>
 800a90e:	4b16      	ldr	r3, [pc, #88]	; (800a968 <__sfp+0x88>)
 800a910:	60e3      	str	r3, [r4, #12]
 800a912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a916:	6665      	str	r5, [r4, #100]	; 0x64
 800a918:	f000 fbba 	bl	800b090 <__retarget_lock_init_recursive>
 800a91c:	f7ff ff96 	bl	800a84c <__sfp_lock_release>
 800a920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a928:	6025      	str	r5, [r4, #0]
 800a92a:	61a5      	str	r5, [r4, #24]
 800a92c:	2208      	movs	r2, #8
 800a92e:	4629      	mov	r1, r5
 800a930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a934:	f7fd f8ce 	bl	8007ad4 <memset>
 800a938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a93c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a940:	4620      	mov	r0, r4
 800a942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a944:	3468      	adds	r4, #104	; 0x68
 800a946:	e7d9      	b.n	800a8fc <__sfp+0x1c>
 800a948:	2104      	movs	r1, #4
 800a94a:	4638      	mov	r0, r7
 800a94c:	f7ff ff62 	bl	800a814 <__sfmoreglue>
 800a950:	4604      	mov	r4, r0
 800a952:	6030      	str	r0, [r6, #0]
 800a954:	2800      	cmp	r0, #0
 800a956:	d1d5      	bne.n	800a904 <__sfp+0x24>
 800a958:	f7ff ff78 	bl	800a84c <__sfp_lock_release>
 800a95c:	230c      	movs	r3, #12
 800a95e:	603b      	str	r3, [r7, #0]
 800a960:	e7ee      	b.n	800a940 <__sfp+0x60>
 800a962:	bf00      	nop
 800a964:	0800cf00 	.word	0x0800cf00
 800a968:	ffff0001 	.word	0xffff0001

0800a96c <_fwalk_reent>:
 800a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a970:	4606      	mov	r6, r0
 800a972:	4688      	mov	r8, r1
 800a974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a978:	2700      	movs	r7, #0
 800a97a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a97e:	f1b9 0901 	subs.w	r9, r9, #1
 800a982:	d505      	bpl.n	800a990 <_fwalk_reent+0x24>
 800a984:	6824      	ldr	r4, [r4, #0]
 800a986:	2c00      	cmp	r4, #0
 800a988:	d1f7      	bne.n	800a97a <_fwalk_reent+0xe>
 800a98a:	4638      	mov	r0, r7
 800a98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a990:	89ab      	ldrh	r3, [r5, #12]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d907      	bls.n	800a9a6 <_fwalk_reent+0x3a>
 800a996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a99a:	3301      	adds	r3, #1
 800a99c:	d003      	beq.n	800a9a6 <_fwalk_reent+0x3a>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	47c0      	blx	r8
 800a9a4:	4307      	orrs	r7, r0
 800a9a6:	3568      	adds	r5, #104	; 0x68
 800a9a8:	e7e9      	b.n	800a97e <_fwalk_reent+0x12>

0800a9aa <rshift>:
 800a9aa:	6903      	ldr	r3, [r0, #16]
 800a9ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9b8:	f100 0414 	add.w	r4, r0, #20
 800a9bc:	dd45      	ble.n	800aa4a <rshift+0xa0>
 800a9be:	f011 011f 	ands.w	r1, r1, #31
 800a9c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9ca:	d10c      	bne.n	800a9e6 <rshift+0x3c>
 800a9cc:	f100 0710 	add.w	r7, r0, #16
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	42b1      	cmp	r1, r6
 800a9d4:	d334      	bcc.n	800aa40 <rshift+0x96>
 800a9d6:	1a9b      	subs	r3, r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	1eea      	subs	r2, r5, #3
 800a9dc:	4296      	cmp	r6, r2
 800a9de:	bf38      	it	cc
 800a9e0:	2300      	movcc	r3, #0
 800a9e2:	4423      	add	r3, r4
 800a9e4:	e015      	b.n	800aa12 <rshift+0x68>
 800a9e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9ea:	f1c1 0820 	rsb	r8, r1, #32
 800a9ee:	40cf      	lsrs	r7, r1
 800a9f0:	f105 0e04 	add.w	lr, r5, #4
 800a9f4:	46a1      	mov	r9, r4
 800a9f6:	4576      	cmp	r6, lr
 800a9f8:	46f4      	mov	ip, lr
 800a9fa:	d815      	bhi.n	800aa28 <rshift+0x7e>
 800a9fc:	1a9a      	subs	r2, r3, r2
 800a9fe:	0092      	lsls	r2, r2, #2
 800aa00:	3a04      	subs	r2, #4
 800aa02:	3501      	adds	r5, #1
 800aa04:	42ae      	cmp	r6, r5
 800aa06:	bf38      	it	cc
 800aa08:	2200      	movcc	r2, #0
 800aa0a:	18a3      	adds	r3, r4, r2
 800aa0c:	50a7      	str	r7, [r4, r2]
 800aa0e:	b107      	cbz	r7, 800aa12 <rshift+0x68>
 800aa10:	3304      	adds	r3, #4
 800aa12:	1b1a      	subs	r2, r3, r4
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa1a:	bf08      	it	eq
 800aa1c:	2300      	moveq	r3, #0
 800aa1e:	6102      	str	r2, [r0, #16]
 800aa20:	bf08      	it	eq
 800aa22:	6143      	streq	r3, [r0, #20]
 800aa24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa28:	f8dc c000 	ldr.w	ip, [ip]
 800aa2c:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa30:	ea4c 0707 	orr.w	r7, ip, r7
 800aa34:	f849 7b04 	str.w	r7, [r9], #4
 800aa38:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa3c:	40cf      	lsrs	r7, r1
 800aa3e:	e7da      	b.n	800a9f6 <rshift+0x4c>
 800aa40:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa44:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa48:	e7c3      	b.n	800a9d2 <rshift+0x28>
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	e7e1      	b.n	800aa12 <rshift+0x68>

0800aa4e <__hexdig_fun>:
 800aa4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa52:	2b09      	cmp	r3, #9
 800aa54:	d802      	bhi.n	800aa5c <__hexdig_fun+0xe>
 800aa56:	3820      	subs	r0, #32
 800aa58:	b2c0      	uxtb	r0, r0
 800aa5a:	4770      	bx	lr
 800aa5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa60:	2b05      	cmp	r3, #5
 800aa62:	d801      	bhi.n	800aa68 <__hexdig_fun+0x1a>
 800aa64:	3847      	subs	r0, #71	; 0x47
 800aa66:	e7f7      	b.n	800aa58 <__hexdig_fun+0xa>
 800aa68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa6c:	2b05      	cmp	r3, #5
 800aa6e:	d801      	bhi.n	800aa74 <__hexdig_fun+0x26>
 800aa70:	3827      	subs	r0, #39	; 0x27
 800aa72:	e7f1      	b.n	800aa58 <__hexdig_fun+0xa>
 800aa74:	2000      	movs	r0, #0
 800aa76:	4770      	bx	lr

0800aa78 <__gethex>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	ed2d 8b02 	vpush	{d8}
 800aa80:	b089      	sub	sp, #36	; 0x24
 800aa82:	ee08 0a10 	vmov	s16, r0
 800aa86:	9304      	str	r3, [sp, #16]
 800aa88:	4bb4      	ldr	r3, [pc, #720]	; (800ad5c <__gethex+0x2e4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	468b      	mov	fp, r1
 800aa92:	4690      	mov	r8, r2
 800aa94:	f7f5 fba6 	bl	80001e4 <strlen>
 800aa98:	9b01      	ldr	r3, [sp, #4]
 800aa9a:	f8db 2000 	ldr.w	r2, [fp]
 800aa9e:	4403      	add	r3, r0
 800aaa0:	4682      	mov	sl, r0
 800aaa2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aaa6:	9305      	str	r3, [sp, #20]
 800aaa8:	1c93      	adds	r3, r2, #2
 800aaaa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aaae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aab2:	32fe      	adds	r2, #254	; 0xfe
 800aab4:	18d1      	adds	r1, r2, r3
 800aab6:	461f      	mov	r7, r3
 800aab8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aabc:	9100      	str	r1, [sp, #0]
 800aabe:	2830      	cmp	r0, #48	; 0x30
 800aac0:	d0f8      	beq.n	800aab4 <__gethex+0x3c>
 800aac2:	f7ff ffc4 	bl	800aa4e <__hexdig_fun>
 800aac6:	4604      	mov	r4, r0
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d13a      	bne.n	800ab42 <__gethex+0xca>
 800aacc:	9901      	ldr	r1, [sp, #4]
 800aace:	4652      	mov	r2, sl
 800aad0:	4638      	mov	r0, r7
 800aad2:	f001 ff69 	bl	800c9a8 <strncmp>
 800aad6:	4605      	mov	r5, r0
 800aad8:	2800      	cmp	r0, #0
 800aada:	d168      	bne.n	800abae <__gethex+0x136>
 800aadc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aae0:	eb07 060a 	add.w	r6, r7, sl
 800aae4:	f7ff ffb3 	bl	800aa4e <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d062      	beq.n	800abb2 <__gethex+0x13a>
 800aaec:	4633      	mov	r3, r6
 800aaee:	7818      	ldrb	r0, [r3, #0]
 800aaf0:	2830      	cmp	r0, #48	; 0x30
 800aaf2:	461f      	mov	r7, r3
 800aaf4:	f103 0301 	add.w	r3, r3, #1
 800aaf8:	d0f9      	beq.n	800aaee <__gethex+0x76>
 800aafa:	f7ff ffa8 	bl	800aa4e <__hexdig_fun>
 800aafe:	2301      	movs	r3, #1
 800ab00:	fab0 f480 	clz	r4, r0
 800ab04:	0964      	lsrs	r4, r4, #5
 800ab06:	4635      	mov	r5, r6
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	463a      	mov	r2, r7
 800ab0c:	4616      	mov	r6, r2
 800ab0e:	3201      	adds	r2, #1
 800ab10:	7830      	ldrb	r0, [r6, #0]
 800ab12:	f7ff ff9c 	bl	800aa4e <__hexdig_fun>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d1f8      	bne.n	800ab0c <__gethex+0x94>
 800ab1a:	9901      	ldr	r1, [sp, #4]
 800ab1c:	4652      	mov	r2, sl
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f001 ff42 	bl	800c9a8 <strncmp>
 800ab24:	b980      	cbnz	r0, 800ab48 <__gethex+0xd0>
 800ab26:	b94d      	cbnz	r5, 800ab3c <__gethex+0xc4>
 800ab28:	eb06 050a 	add.w	r5, r6, sl
 800ab2c:	462a      	mov	r2, r5
 800ab2e:	4616      	mov	r6, r2
 800ab30:	3201      	adds	r2, #1
 800ab32:	7830      	ldrb	r0, [r6, #0]
 800ab34:	f7ff ff8b 	bl	800aa4e <__hexdig_fun>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d1f8      	bne.n	800ab2e <__gethex+0xb6>
 800ab3c:	1bad      	subs	r5, r5, r6
 800ab3e:	00ad      	lsls	r5, r5, #2
 800ab40:	e004      	b.n	800ab4c <__gethex+0xd4>
 800ab42:	2400      	movs	r4, #0
 800ab44:	4625      	mov	r5, r4
 800ab46:	e7e0      	b.n	800ab0a <__gethex+0x92>
 800ab48:	2d00      	cmp	r5, #0
 800ab4a:	d1f7      	bne.n	800ab3c <__gethex+0xc4>
 800ab4c:	7833      	ldrb	r3, [r6, #0]
 800ab4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab52:	2b50      	cmp	r3, #80	; 0x50
 800ab54:	d13b      	bne.n	800abce <__gethex+0x156>
 800ab56:	7873      	ldrb	r3, [r6, #1]
 800ab58:	2b2b      	cmp	r3, #43	; 0x2b
 800ab5a:	d02c      	beq.n	800abb6 <__gethex+0x13e>
 800ab5c:	2b2d      	cmp	r3, #45	; 0x2d
 800ab5e:	d02e      	beq.n	800abbe <__gethex+0x146>
 800ab60:	1c71      	adds	r1, r6, #1
 800ab62:	f04f 0900 	mov.w	r9, #0
 800ab66:	7808      	ldrb	r0, [r1, #0]
 800ab68:	f7ff ff71 	bl	800aa4e <__hexdig_fun>
 800ab6c:	1e43      	subs	r3, r0, #1
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b18      	cmp	r3, #24
 800ab72:	d82c      	bhi.n	800abce <__gethex+0x156>
 800ab74:	f1a0 0210 	sub.w	r2, r0, #16
 800ab78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab7c:	f7ff ff67 	bl	800aa4e <__hexdig_fun>
 800ab80:	1e43      	subs	r3, r0, #1
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b18      	cmp	r3, #24
 800ab86:	d91d      	bls.n	800abc4 <__gethex+0x14c>
 800ab88:	f1b9 0f00 	cmp.w	r9, #0
 800ab8c:	d000      	beq.n	800ab90 <__gethex+0x118>
 800ab8e:	4252      	negs	r2, r2
 800ab90:	4415      	add	r5, r2
 800ab92:	f8cb 1000 	str.w	r1, [fp]
 800ab96:	b1e4      	cbz	r4, 800abd2 <__gethex+0x15a>
 800ab98:	9b00      	ldr	r3, [sp, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	bf14      	ite	ne
 800ab9e:	2700      	movne	r7, #0
 800aba0:	2706      	moveq	r7, #6
 800aba2:	4638      	mov	r0, r7
 800aba4:	b009      	add	sp, #36	; 0x24
 800aba6:	ecbd 8b02 	vpop	{d8}
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	463e      	mov	r6, r7
 800abb0:	4625      	mov	r5, r4
 800abb2:	2401      	movs	r4, #1
 800abb4:	e7ca      	b.n	800ab4c <__gethex+0xd4>
 800abb6:	f04f 0900 	mov.w	r9, #0
 800abba:	1cb1      	adds	r1, r6, #2
 800abbc:	e7d3      	b.n	800ab66 <__gethex+0xee>
 800abbe:	f04f 0901 	mov.w	r9, #1
 800abc2:	e7fa      	b.n	800abba <__gethex+0x142>
 800abc4:	230a      	movs	r3, #10
 800abc6:	fb03 0202 	mla	r2, r3, r2, r0
 800abca:	3a10      	subs	r2, #16
 800abcc:	e7d4      	b.n	800ab78 <__gethex+0x100>
 800abce:	4631      	mov	r1, r6
 800abd0:	e7df      	b.n	800ab92 <__gethex+0x11a>
 800abd2:	1bf3      	subs	r3, r6, r7
 800abd4:	3b01      	subs	r3, #1
 800abd6:	4621      	mov	r1, r4
 800abd8:	2b07      	cmp	r3, #7
 800abda:	dc0b      	bgt.n	800abf4 <__gethex+0x17c>
 800abdc:	ee18 0a10 	vmov	r0, s16
 800abe0:	f000 faec 	bl	800b1bc <_Balloc>
 800abe4:	4604      	mov	r4, r0
 800abe6:	b940      	cbnz	r0, 800abfa <__gethex+0x182>
 800abe8:	4b5d      	ldr	r3, [pc, #372]	; (800ad60 <__gethex+0x2e8>)
 800abea:	4602      	mov	r2, r0
 800abec:	21de      	movs	r1, #222	; 0xde
 800abee:	485d      	ldr	r0, [pc, #372]	; (800ad64 <__gethex+0x2ec>)
 800abf0:	f001 ffaa 	bl	800cb48 <__assert_func>
 800abf4:	3101      	adds	r1, #1
 800abf6:	105b      	asrs	r3, r3, #1
 800abf8:	e7ee      	b.n	800abd8 <__gethex+0x160>
 800abfa:	f100 0914 	add.w	r9, r0, #20
 800abfe:	f04f 0b00 	mov.w	fp, #0
 800ac02:	f1ca 0301 	rsb	r3, sl, #1
 800ac06:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac0a:	f8cd b000 	str.w	fp, [sp]
 800ac0e:	9306      	str	r3, [sp, #24]
 800ac10:	42b7      	cmp	r7, r6
 800ac12:	d340      	bcc.n	800ac96 <__gethex+0x21e>
 800ac14:	9802      	ldr	r0, [sp, #8]
 800ac16:	9b00      	ldr	r3, [sp, #0]
 800ac18:	f840 3b04 	str.w	r3, [r0], #4
 800ac1c:	eba0 0009 	sub.w	r0, r0, r9
 800ac20:	1080      	asrs	r0, r0, #2
 800ac22:	0146      	lsls	r6, r0, #5
 800ac24:	6120      	str	r0, [r4, #16]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fbba 	bl	800b3a0 <__hi0bits>
 800ac2c:	1a30      	subs	r0, r6, r0
 800ac2e:	f8d8 6000 	ldr.w	r6, [r8]
 800ac32:	42b0      	cmp	r0, r6
 800ac34:	dd63      	ble.n	800acfe <__gethex+0x286>
 800ac36:	1b87      	subs	r7, r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 ff5e 	bl	800bafc <__any_on>
 800ac40:	4682      	mov	sl, r0
 800ac42:	b1a8      	cbz	r0, 800ac70 <__gethex+0x1f8>
 800ac44:	1e7b      	subs	r3, r7, #1
 800ac46:	1159      	asrs	r1, r3, #5
 800ac48:	f003 021f 	and.w	r2, r3, #31
 800ac4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ac50:	f04f 0a01 	mov.w	sl, #1
 800ac54:	fa0a f202 	lsl.w	r2, sl, r2
 800ac58:	420a      	tst	r2, r1
 800ac5a:	d009      	beq.n	800ac70 <__gethex+0x1f8>
 800ac5c:	4553      	cmp	r3, sl
 800ac5e:	dd05      	ble.n	800ac6c <__gethex+0x1f4>
 800ac60:	1eb9      	subs	r1, r7, #2
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 ff4a 	bl	800bafc <__any_on>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d145      	bne.n	800acf8 <__gethex+0x280>
 800ac6c:	f04f 0a02 	mov.w	sl, #2
 800ac70:	4639      	mov	r1, r7
 800ac72:	4620      	mov	r0, r4
 800ac74:	f7ff fe99 	bl	800a9aa <rshift>
 800ac78:	443d      	add	r5, r7
 800ac7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac7e:	42ab      	cmp	r3, r5
 800ac80:	da4c      	bge.n	800ad1c <__gethex+0x2a4>
 800ac82:	ee18 0a10 	vmov	r0, s16
 800ac86:	4621      	mov	r1, r4
 800ac88:	f000 fad8 	bl	800b23c <_Bfree>
 800ac8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac8e:	2300      	movs	r3, #0
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	27a3      	movs	r7, #163	; 0xa3
 800ac94:	e785      	b.n	800aba2 <__gethex+0x12a>
 800ac96:	1e73      	subs	r3, r6, #1
 800ac98:	9a05      	ldr	r2, [sp, #20]
 800ac9a:	9303      	str	r3, [sp, #12]
 800ac9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d019      	beq.n	800acd8 <__gethex+0x260>
 800aca4:	f1bb 0f20 	cmp.w	fp, #32
 800aca8:	d107      	bne.n	800acba <__gethex+0x242>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	9a00      	ldr	r2, [sp, #0]
 800acae:	f843 2b04 	str.w	r2, [r3], #4
 800acb2:	9302      	str	r3, [sp, #8]
 800acb4:	2300      	movs	r3, #0
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	469b      	mov	fp, r3
 800acba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800acbe:	f7ff fec6 	bl	800aa4e <__hexdig_fun>
 800acc2:	9b00      	ldr	r3, [sp, #0]
 800acc4:	f000 000f 	and.w	r0, r0, #15
 800acc8:	fa00 f00b 	lsl.w	r0, r0, fp
 800accc:	4303      	orrs	r3, r0
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	f10b 0b04 	add.w	fp, fp, #4
 800acd4:	9b03      	ldr	r3, [sp, #12]
 800acd6:	e00d      	b.n	800acf4 <__gethex+0x27c>
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	9a06      	ldr	r2, [sp, #24]
 800acdc:	4413      	add	r3, r2
 800acde:	42bb      	cmp	r3, r7
 800ace0:	d3e0      	bcc.n	800aca4 <__gethex+0x22c>
 800ace2:	4618      	mov	r0, r3
 800ace4:	9901      	ldr	r1, [sp, #4]
 800ace6:	9307      	str	r3, [sp, #28]
 800ace8:	4652      	mov	r2, sl
 800acea:	f001 fe5d 	bl	800c9a8 <strncmp>
 800acee:	9b07      	ldr	r3, [sp, #28]
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1d7      	bne.n	800aca4 <__gethex+0x22c>
 800acf4:	461e      	mov	r6, r3
 800acf6:	e78b      	b.n	800ac10 <__gethex+0x198>
 800acf8:	f04f 0a03 	mov.w	sl, #3
 800acfc:	e7b8      	b.n	800ac70 <__gethex+0x1f8>
 800acfe:	da0a      	bge.n	800ad16 <__gethex+0x29e>
 800ad00:	1a37      	subs	r7, r6, r0
 800ad02:	4621      	mov	r1, r4
 800ad04:	ee18 0a10 	vmov	r0, s16
 800ad08:	463a      	mov	r2, r7
 800ad0a:	f000 fcb3 	bl	800b674 <__lshift>
 800ad0e:	1bed      	subs	r5, r5, r7
 800ad10:	4604      	mov	r4, r0
 800ad12:	f100 0914 	add.w	r9, r0, #20
 800ad16:	f04f 0a00 	mov.w	sl, #0
 800ad1a:	e7ae      	b.n	800ac7a <__gethex+0x202>
 800ad1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad20:	42a8      	cmp	r0, r5
 800ad22:	dd72      	ble.n	800ae0a <__gethex+0x392>
 800ad24:	1b45      	subs	r5, r0, r5
 800ad26:	42ae      	cmp	r6, r5
 800ad28:	dc36      	bgt.n	800ad98 <__gethex+0x320>
 800ad2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d02a      	beq.n	800ad88 <__gethex+0x310>
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d02c      	beq.n	800ad90 <__gethex+0x318>
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d11c      	bne.n	800ad74 <__gethex+0x2fc>
 800ad3a:	42ae      	cmp	r6, r5
 800ad3c:	d11a      	bne.n	800ad74 <__gethex+0x2fc>
 800ad3e:	2e01      	cmp	r6, #1
 800ad40:	d112      	bne.n	800ad68 <__gethex+0x2f0>
 800ad42:	9a04      	ldr	r2, [sp, #16]
 800ad44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	6123      	str	r3, [r4, #16]
 800ad4e:	f8c9 3000 	str.w	r3, [r9]
 800ad52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad54:	2762      	movs	r7, #98	; 0x62
 800ad56:	601c      	str	r4, [r3, #0]
 800ad58:	e723      	b.n	800aba2 <__gethex+0x12a>
 800ad5a:	bf00      	nop
 800ad5c:	0800d1ec 	.word	0x0800d1ec
 800ad60:	0800d110 	.word	0x0800d110
 800ad64:	0800d184 	.word	0x0800d184
 800ad68:	1e71      	subs	r1, r6, #1
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fec6 	bl	800bafc <__any_on>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d1e6      	bne.n	800ad42 <__gethex+0x2ca>
 800ad74:	ee18 0a10 	vmov	r0, s16
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f000 fa5f 	bl	800b23c <_Bfree>
 800ad7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad80:	2300      	movs	r3, #0
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	2750      	movs	r7, #80	; 0x50
 800ad86:	e70c      	b.n	800aba2 <__gethex+0x12a>
 800ad88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f2      	bne.n	800ad74 <__gethex+0x2fc>
 800ad8e:	e7d8      	b.n	800ad42 <__gethex+0x2ca>
 800ad90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1d5      	bne.n	800ad42 <__gethex+0x2ca>
 800ad96:	e7ed      	b.n	800ad74 <__gethex+0x2fc>
 800ad98:	1e6f      	subs	r7, r5, #1
 800ad9a:	f1ba 0f00 	cmp.w	sl, #0
 800ad9e:	d131      	bne.n	800ae04 <__gethex+0x38c>
 800ada0:	b127      	cbz	r7, 800adac <__gethex+0x334>
 800ada2:	4639      	mov	r1, r7
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 fea9 	bl	800bafc <__any_on>
 800adaa:	4682      	mov	sl, r0
 800adac:	117b      	asrs	r3, r7, #5
 800adae:	2101      	movs	r1, #1
 800adb0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800adb4:	f007 071f 	and.w	r7, r7, #31
 800adb8:	fa01 f707 	lsl.w	r7, r1, r7
 800adbc:	421f      	tst	r7, r3
 800adbe:	4629      	mov	r1, r5
 800adc0:	4620      	mov	r0, r4
 800adc2:	bf18      	it	ne
 800adc4:	f04a 0a02 	orrne.w	sl, sl, #2
 800adc8:	1b76      	subs	r6, r6, r5
 800adca:	f7ff fdee 	bl	800a9aa <rshift>
 800adce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800add2:	2702      	movs	r7, #2
 800add4:	f1ba 0f00 	cmp.w	sl, #0
 800add8:	d048      	beq.n	800ae6c <__gethex+0x3f4>
 800adda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d015      	beq.n	800ae0e <__gethex+0x396>
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d017      	beq.n	800ae16 <__gethex+0x39e>
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d109      	bne.n	800adfe <__gethex+0x386>
 800adea:	f01a 0f02 	tst.w	sl, #2
 800adee:	d006      	beq.n	800adfe <__gethex+0x386>
 800adf0:	f8d9 0000 	ldr.w	r0, [r9]
 800adf4:	ea4a 0a00 	orr.w	sl, sl, r0
 800adf8:	f01a 0f01 	tst.w	sl, #1
 800adfc:	d10e      	bne.n	800ae1c <__gethex+0x3a4>
 800adfe:	f047 0710 	orr.w	r7, r7, #16
 800ae02:	e033      	b.n	800ae6c <__gethex+0x3f4>
 800ae04:	f04f 0a01 	mov.w	sl, #1
 800ae08:	e7d0      	b.n	800adac <__gethex+0x334>
 800ae0a:	2701      	movs	r7, #1
 800ae0c:	e7e2      	b.n	800add4 <__gethex+0x35c>
 800ae0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae10:	f1c3 0301 	rsb	r3, r3, #1
 800ae14:	9315      	str	r3, [sp, #84]	; 0x54
 800ae16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0f0      	beq.n	800adfe <__gethex+0x386>
 800ae1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae20:	f104 0314 	add.w	r3, r4, #20
 800ae24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae2c:	f04f 0c00 	mov.w	ip, #0
 800ae30:	4618      	mov	r0, r3
 800ae32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae36:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae3a:	d01c      	beq.n	800ae76 <__gethex+0x3fe>
 800ae3c:	3201      	adds	r2, #1
 800ae3e:	6002      	str	r2, [r0, #0]
 800ae40:	2f02      	cmp	r7, #2
 800ae42:	f104 0314 	add.w	r3, r4, #20
 800ae46:	d13f      	bne.n	800aec8 <__gethex+0x450>
 800ae48:	f8d8 2000 	ldr.w	r2, [r8]
 800ae4c:	3a01      	subs	r2, #1
 800ae4e:	42b2      	cmp	r2, r6
 800ae50:	d10a      	bne.n	800ae68 <__gethex+0x3f0>
 800ae52:	1171      	asrs	r1, r6, #5
 800ae54:	2201      	movs	r2, #1
 800ae56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae5a:	f006 061f 	and.w	r6, r6, #31
 800ae5e:	fa02 f606 	lsl.w	r6, r2, r6
 800ae62:	421e      	tst	r6, r3
 800ae64:	bf18      	it	ne
 800ae66:	4617      	movne	r7, r2
 800ae68:	f047 0720 	orr.w	r7, r7, #32
 800ae6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae6e:	601c      	str	r4, [r3, #0]
 800ae70:	9b04      	ldr	r3, [sp, #16]
 800ae72:	601d      	str	r5, [r3, #0]
 800ae74:	e695      	b.n	800aba2 <__gethex+0x12a>
 800ae76:	4299      	cmp	r1, r3
 800ae78:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae7c:	d8d8      	bhi.n	800ae30 <__gethex+0x3b8>
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	459b      	cmp	fp, r3
 800ae82:	db19      	blt.n	800aeb8 <__gethex+0x440>
 800ae84:	6861      	ldr	r1, [r4, #4]
 800ae86:	ee18 0a10 	vmov	r0, s16
 800ae8a:	3101      	adds	r1, #1
 800ae8c:	f000 f996 	bl	800b1bc <_Balloc>
 800ae90:	4681      	mov	r9, r0
 800ae92:	b918      	cbnz	r0, 800ae9c <__gethex+0x424>
 800ae94:	4b1a      	ldr	r3, [pc, #104]	; (800af00 <__gethex+0x488>)
 800ae96:	4602      	mov	r2, r0
 800ae98:	2184      	movs	r1, #132	; 0x84
 800ae9a:	e6a8      	b.n	800abee <__gethex+0x176>
 800ae9c:	6922      	ldr	r2, [r4, #16]
 800ae9e:	3202      	adds	r2, #2
 800aea0:	f104 010c 	add.w	r1, r4, #12
 800aea4:	0092      	lsls	r2, r2, #2
 800aea6:	300c      	adds	r0, #12
 800aea8:	f7fc fe06 	bl	8007ab8 <memcpy>
 800aeac:	4621      	mov	r1, r4
 800aeae:	ee18 0a10 	vmov	r0, s16
 800aeb2:	f000 f9c3 	bl	800b23c <_Bfree>
 800aeb6:	464c      	mov	r4, r9
 800aeb8:	6923      	ldr	r3, [r4, #16]
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aec0:	6122      	str	r2, [r4, #16]
 800aec2:	2201      	movs	r2, #1
 800aec4:	615a      	str	r2, [r3, #20]
 800aec6:	e7bb      	b.n	800ae40 <__gethex+0x3c8>
 800aec8:	6922      	ldr	r2, [r4, #16]
 800aeca:	455a      	cmp	r2, fp
 800aecc:	dd0b      	ble.n	800aee6 <__gethex+0x46e>
 800aece:	2101      	movs	r1, #1
 800aed0:	4620      	mov	r0, r4
 800aed2:	f7ff fd6a 	bl	800a9aa <rshift>
 800aed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aeda:	3501      	adds	r5, #1
 800aedc:	42ab      	cmp	r3, r5
 800aede:	f6ff aed0 	blt.w	800ac82 <__gethex+0x20a>
 800aee2:	2701      	movs	r7, #1
 800aee4:	e7c0      	b.n	800ae68 <__gethex+0x3f0>
 800aee6:	f016 061f 	ands.w	r6, r6, #31
 800aeea:	d0fa      	beq.n	800aee2 <__gethex+0x46a>
 800aeec:	4453      	add	r3, sl
 800aeee:	f1c6 0620 	rsb	r6, r6, #32
 800aef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aef6:	f000 fa53 	bl	800b3a0 <__hi0bits>
 800aefa:	42b0      	cmp	r0, r6
 800aefc:	dbe7      	blt.n	800aece <__gethex+0x456>
 800aefe:	e7f0      	b.n	800aee2 <__gethex+0x46a>
 800af00:	0800d110 	.word	0x0800d110

0800af04 <L_shift>:
 800af04:	f1c2 0208 	rsb	r2, r2, #8
 800af08:	0092      	lsls	r2, r2, #2
 800af0a:	b570      	push	{r4, r5, r6, lr}
 800af0c:	f1c2 0620 	rsb	r6, r2, #32
 800af10:	6843      	ldr	r3, [r0, #4]
 800af12:	6804      	ldr	r4, [r0, #0]
 800af14:	fa03 f506 	lsl.w	r5, r3, r6
 800af18:	432c      	orrs	r4, r5
 800af1a:	40d3      	lsrs	r3, r2
 800af1c:	6004      	str	r4, [r0, #0]
 800af1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800af22:	4288      	cmp	r0, r1
 800af24:	d3f4      	bcc.n	800af10 <L_shift+0xc>
 800af26:	bd70      	pop	{r4, r5, r6, pc}

0800af28 <__match>:
 800af28:	b530      	push	{r4, r5, lr}
 800af2a:	6803      	ldr	r3, [r0, #0]
 800af2c:	3301      	adds	r3, #1
 800af2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af32:	b914      	cbnz	r4, 800af3a <__match+0x12>
 800af34:	6003      	str	r3, [r0, #0]
 800af36:	2001      	movs	r0, #1
 800af38:	bd30      	pop	{r4, r5, pc}
 800af3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af42:	2d19      	cmp	r5, #25
 800af44:	bf98      	it	ls
 800af46:	3220      	addls	r2, #32
 800af48:	42a2      	cmp	r2, r4
 800af4a:	d0f0      	beq.n	800af2e <__match+0x6>
 800af4c:	2000      	movs	r0, #0
 800af4e:	e7f3      	b.n	800af38 <__match+0x10>

0800af50 <__hexnan>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	680b      	ldr	r3, [r1, #0]
 800af56:	115e      	asrs	r6, r3, #5
 800af58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af5c:	f013 031f 	ands.w	r3, r3, #31
 800af60:	b087      	sub	sp, #28
 800af62:	bf18      	it	ne
 800af64:	3604      	addne	r6, #4
 800af66:	2500      	movs	r5, #0
 800af68:	1f37      	subs	r7, r6, #4
 800af6a:	4690      	mov	r8, r2
 800af6c:	6802      	ldr	r2, [r0, #0]
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	4682      	mov	sl, r0
 800af72:	f846 5c04 	str.w	r5, [r6, #-4]
 800af76:	46b9      	mov	r9, r7
 800af78:	463c      	mov	r4, r7
 800af7a:	9502      	str	r5, [sp, #8]
 800af7c:	46ab      	mov	fp, r5
 800af7e:	7851      	ldrb	r1, [r2, #1]
 800af80:	1c53      	adds	r3, r2, #1
 800af82:	9303      	str	r3, [sp, #12]
 800af84:	b341      	cbz	r1, 800afd8 <__hexnan+0x88>
 800af86:	4608      	mov	r0, r1
 800af88:	9205      	str	r2, [sp, #20]
 800af8a:	9104      	str	r1, [sp, #16]
 800af8c:	f7ff fd5f 	bl	800aa4e <__hexdig_fun>
 800af90:	2800      	cmp	r0, #0
 800af92:	d14f      	bne.n	800b034 <__hexnan+0xe4>
 800af94:	9904      	ldr	r1, [sp, #16]
 800af96:	9a05      	ldr	r2, [sp, #20]
 800af98:	2920      	cmp	r1, #32
 800af9a:	d818      	bhi.n	800afce <__hexnan+0x7e>
 800af9c:	9b02      	ldr	r3, [sp, #8]
 800af9e:	459b      	cmp	fp, r3
 800afa0:	dd13      	ble.n	800afca <__hexnan+0x7a>
 800afa2:	454c      	cmp	r4, r9
 800afa4:	d206      	bcs.n	800afb4 <__hexnan+0x64>
 800afa6:	2d07      	cmp	r5, #7
 800afa8:	dc04      	bgt.n	800afb4 <__hexnan+0x64>
 800afaa:	462a      	mov	r2, r5
 800afac:	4649      	mov	r1, r9
 800afae:	4620      	mov	r0, r4
 800afb0:	f7ff ffa8 	bl	800af04 <L_shift>
 800afb4:	4544      	cmp	r4, r8
 800afb6:	d950      	bls.n	800b05a <__hexnan+0x10a>
 800afb8:	2300      	movs	r3, #0
 800afba:	f1a4 0904 	sub.w	r9, r4, #4
 800afbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800afc2:	f8cd b008 	str.w	fp, [sp, #8]
 800afc6:	464c      	mov	r4, r9
 800afc8:	461d      	mov	r5, r3
 800afca:	9a03      	ldr	r2, [sp, #12]
 800afcc:	e7d7      	b.n	800af7e <__hexnan+0x2e>
 800afce:	2929      	cmp	r1, #41	; 0x29
 800afd0:	d156      	bne.n	800b080 <__hexnan+0x130>
 800afd2:	3202      	adds	r2, #2
 800afd4:	f8ca 2000 	str.w	r2, [sl]
 800afd8:	f1bb 0f00 	cmp.w	fp, #0
 800afdc:	d050      	beq.n	800b080 <__hexnan+0x130>
 800afde:	454c      	cmp	r4, r9
 800afe0:	d206      	bcs.n	800aff0 <__hexnan+0xa0>
 800afe2:	2d07      	cmp	r5, #7
 800afe4:	dc04      	bgt.n	800aff0 <__hexnan+0xa0>
 800afe6:	462a      	mov	r2, r5
 800afe8:	4649      	mov	r1, r9
 800afea:	4620      	mov	r0, r4
 800afec:	f7ff ff8a 	bl	800af04 <L_shift>
 800aff0:	4544      	cmp	r4, r8
 800aff2:	d934      	bls.n	800b05e <__hexnan+0x10e>
 800aff4:	f1a8 0204 	sub.w	r2, r8, #4
 800aff8:	4623      	mov	r3, r4
 800affa:	f853 1b04 	ldr.w	r1, [r3], #4
 800affe:	f842 1f04 	str.w	r1, [r2, #4]!
 800b002:	429f      	cmp	r7, r3
 800b004:	d2f9      	bcs.n	800affa <__hexnan+0xaa>
 800b006:	1b3b      	subs	r3, r7, r4
 800b008:	f023 0303 	bic.w	r3, r3, #3
 800b00c:	3304      	adds	r3, #4
 800b00e:	3401      	adds	r4, #1
 800b010:	3e03      	subs	r6, #3
 800b012:	42b4      	cmp	r4, r6
 800b014:	bf88      	it	hi
 800b016:	2304      	movhi	r3, #4
 800b018:	4443      	add	r3, r8
 800b01a:	2200      	movs	r2, #0
 800b01c:	f843 2b04 	str.w	r2, [r3], #4
 800b020:	429f      	cmp	r7, r3
 800b022:	d2fb      	bcs.n	800b01c <__hexnan+0xcc>
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	b91b      	cbnz	r3, 800b030 <__hexnan+0xe0>
 800b028:	4547      	cmp	r7, r8
 800b02a:	d127      	bne.n	800b07c <__hexnan+0x12c>
 800b02c:	2301      	movs	r3, #1
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	2005      	movs	r0, #5
 800b032:	e026      	b.n	800b082 <__hexnan+0x132>
 800b034:	3501      	adds	r5, #1
 800b036:	2d08      	cmp	r5, #8
 800b038:	f10b 0b01 	add.w	fp, fp, #1
 800b03c:	dd06      	ble.n	800b04c <__hexnan+0xfc>
 800b03e:	4544      	cmp	r4, r8
 800b040:	d9c3      	bls.n	800afca <__hexnan+0x7a>
 800b042:	2300      	movs	r3, #0
 800b044:	f844 3c04 	str.w	r3, [r4, #-4]
 800b048:	2501      	movs	r5, #1
 800b04a:	3c04      	subs	r4, #4
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	f000 000f 	and.w	r0, r0, #15
 800b052:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b056:	6022      	str	r2, [r4, #0]
 800b058:	e7b7      	b.n	800afca <__hexnan+0x7a>
 800b05a:	2508      	movs	r5, #8
 800b05c:	e7b5      	b.n	800afca <__hexnan+0x7a>
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d0df      	beq.n	800b024 <__hexnan+0xd4>
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	f1c3 0320 	rsb	r3, r3, #32
 800b06c:	fa22 f303 	lsr.w	r3, r2, r3
 800b070:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b074:	401a      	ands	r2, r3
 800b076:	f846 2c04 	str.w	r2, [r6, #-4]
 800b07a:	e7d3      	b.n	800b024 <__hexnan+0xd4>
 800b07c:	3f04      	subs	r7, #4
 800b07e:	e7d1      	b.n	800b024 <__hexnan+0xd4>
 800b080:	2004      	movs	r0, #4
 800b082:	b007      	add	sp, #28
 800b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b088 <_localeconv_r>:
 800b088:	4800      	ldr	r0, [pc, #0]	; (800b08c <_localeconv_r+0x4>)
 800b08a:	4770      	bx	lr
 800b08c:	20000164 	.word	0x20000164

0800b090 <__retarget_lock_init_recursive>:
 800b090:	4770      	bx	lr

0800b092 <__retarget_lock_acquire_recursive>:
 800b092:	4770      	bx	lr

0800b094 <__retarget_lock_release_recursive>:
 800b094:	4770      	bx	lr
	...

0800b098 <_lseek_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	; (800b0b8 <_lseek_r+0x20>)
 800b09c:	4604      	mov	r4, r0
 800b09e:	4608      	mov	r0, r1
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	602a      	str	r2, [r5, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f7f6 fc84 	bl	80019b4 <_lseek>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_lseek_r+0x1e>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_lseek_r+0x1e>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	20000804 	.word	0x20000804

0800b0bc <__swhatbuf_r>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	460e      	mov	r6, r1
 800b0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c4:	2900      	cmp	r1, #0
 800b0c6:	b096      	sub	sp, #88	; 0x58
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	461d      	mov	r5, r3
 800b0cc:	da08      	bge.n	800b0e0 <__swhatbuf_r+0x24>
 800b0ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	602a      	str	r2, [r5, #0]
 800b0d6:	061a      	lsls	r2, r3, #24
 800b0d8:	d410      	bmi.n	800b0fc <__swhatbuf_r+0x40>
 800b0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0de:	e00e      	b.n	800b0fe <__swhatbuf_r+0x42>
 800b0e0:	466a      	mov	r2, sp
 800b0e2:	f001 fd61 	bl	800cba8 <_fstat_r>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	dbf1      	blt.n	800b0ce <__swhatbuf_r+0x12>
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0f4:	425a      	negs	r2, r3
 800b0f6:	415a      	adcs	r2, r3
 800b0f8:	602a      	str	r2, [r5, #0]
 800b0fa:	e7ee      	b.n	800b0da <__swhatbuf_r+0x1e>
 800b0fc:	2340      	movs	r3, #64	; 0x40
 800b0fe:	2000      	movs	r0, #0
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	b016      	add	sp, #88	; 0x58
 800b104:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b108 <__smakebuf_r>:
 800b108:	898b      	ldrh	r3, [r1, #12]
 800b10a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b10c:	079d      	lsls	r5, r3, #30
 800b10e:	4606      	mov	r6, r0
 800b110:	460c      	mov	r4, r1
 800b112:	d507      	bpl.n	800b124 <__smakebuf_r+0x1c>
 800b114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	6123      	str	r3, [r4, #16]
 800b11c:	2301      	movs	r3, #1
 800b11e:	6163      	str	r3, [r4, #20]
 800b120:	b002      	add	sp, #8
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	ab01      	add	r3, sp, #4
 800b126:	466a      	mov	r2, sp
 800b128:	f7ff ffc8 	bl	800b0bc <__swhatbuf_r>
 800b12c:	9900      	ldr	r1, [sp, #0]
 800b12e:	4605      	mov	r5, r0
 800b130:	4630      	mov	r0, r6
 800b132:	f000 fd87 	bl	800bc44 <_malloc_r>
 800b136:	b948      	cbnz	r0, 800b14c <__smakebuf_r+0x44>
 800b138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13c:	059a      	lsls	r2, r3, #22
 800b13e:	d4ef      	bmi.n	800b120 <__smakebuf_r+0x18>
 800b140:	f023 0303 	bic.w	r3, r3, #3
 800b144:	f043 0302 	orr.w	r3, r3, #2
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	e7e3      	b.n	800b114 <__smakebuf_r+0xc>
 800b14c:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <__smakebuf_r+0x7c>)
 800b14e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	6020      	str	r0, [r4, #0]
 800b154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	9b00      	ldr	r3, [sp, #0]
 800b15c:	6163      	str	r3, [r4, #20]
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	6120      	str	r0, [r4, #16]
 800b162:	b15b      	cbz	r3, 800b17c <__smakebuf_r+0x74>
 800b164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b168:	4630      	mov	r0, r6
 800b16a:	f001 fd2f 	bl	800cbcc <_isatty_r>
 800b16e:	b128      	cbz	r0, 800b17c <__smakebuf_r+0x74>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	f023 0303 	bic.w	r3, r3, #3
 800b176:	f043 0301 	orr.w	r3, r3, #1
 800b17a:	81a3      	strh	r3, [r4, #12]
 800b17c:	89a0      	ldrh	r0, [r4, #12]
 800b17e:	4305      	orrs	r5, r0
 800b180:	81a5      	strh	r5, [r4, #12]
 800b182:	e7cd      	b.n	800b120 <__smakebuf_r+0x18>
 800b184:	0800a809 	.word	0x0800a809

0800b188 <malloc>:
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <malloc+0xc>)
 800b18a:	4601      	mov	r1, r0
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	f000 bd59 	b.w	800bc44 <_malloc_r>
 800b192:	bf00      	nop
 800b194:	2000000c 	.word	0x2000000c

0800b198 <__ascii_mbtowc>:
 800b198:	b082      	sub	sp, #8
 800b19a:	b901      	cbnz	r1, 800b19e <__ascii_mbtowc+0x6>
 800b19c:	a901      	add	r1, sp, #4
 800b19e:	b142      	cbz	r2, 800b1b2 <__ascii_mbtowc+0x1a>
 800b1a0:	b14b      	cbz	r3, 800b1b6 <__ascii_mbtowc+0x1e>
 800b1a2:	7813      	ldrb	r3, [r2, #0]
 800b1a4:	600b      	str	r3, [r1, #0]
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	1e10      	subs	r0, r2, #0
 800b1aa:	bf18      	it	ne
 800b1ac:	2001      	movne	r0, #1
 800b1ae:	b002      	add	sp, #8
 800b1b0:	4770      	bx	lr
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	e7fb      	b.n	800b1ae <__ascii_mbtowc+0x16>
 800b1b6:	f06f 0001 	mvn.w	r0, #1
 800b1ba:	e7f8      	b.n	800b1ae <__ascii_mbtowc+0x16>

0800b1bc <_Balloc>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	460d      	mov	r5, r1
 800b1c4:	b976      	cbnz	r6, 800b1e4 <_Balloc+0x28>
 800b1c6:	2010      	movs	r0, #16
 800b1c8:	f7ff ffde 	bl	800b188 <malloc>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	6260      	str	r0, [r4, #36]	; 0x24
 800b1d0:	b920      	cbnz	r0, 800b1dc <_Balloc+0x20>
 800b1d2:	4b18      	ldr	r3, [pc, #96]	; (800b234 <_Balloc+0x78>)
 800b1d4:	4818      	ldr	r0, [pc, #96]	; (800b238 <_Balloc+0x7c>)
 800b1d6:	2166      	movs	r1, #102	; 0x66
 800b1d8:	f001 fcb6 	bl	800cb48 <__assert_func>
 800b1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1e0:	6006      	str	r6, [r0, #0]
 800b1e2:	60c6      	str	r6, [r0, #12]
 800b1e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1e6:	68f3      	ldr	r3, [r6, #12]
 800b1e8:	b183      	cbz	r3, 800b20c <_Balloc+0x50>
 800b1ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1f2:	b9b8      	cbnz	r0, 800b224 <_Balloc+0x68>
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1fa:	1d72      	adds	r2, r6, #5
 800b1fc:	0092      	lsls	r2, r2, #2
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 fc9d 	bl	800bb3e <_calloc_r>
 800b204:	b160      	cbz	r0, 800b220 <_Balloc+0x64>
 800b206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b20a:	e00e      	b.n	800b22a <_Balloc+0x6e>
 800b20c:	2221      	movs	r2, #33	; 0x21
 800b20e:	2104      	movs	r1, #4
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fc94 	bl	800bb3e <_calloc_r>
 800b216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b218:	60f0      	str	r0, [r6, #12]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1e4      	bne.n	800b1ea <_Balloc+0x2e>
 800b220:	2000      	movs	r0, #0
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	6802      	ldr	r2, [r0, #0]
 800b226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b22a:	2300      	movs	r3, #0
 800b22c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b230:	e7f7      	b.n	800b222 <_Balloc+0x66>
 800b232:	bf00      	nop
 800b234:	0800d09e 	.word	0x0800d09e
 800b238:	0800d200 	.word	0x0800d200

0800b23c <_Bfree>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b240:	4605      	mov	r5, r0
 800b242:	460c      	mov	r4, r1
 800b244:	b976      	cbnz	r6, 800b264 <_Bfree+0x28>
 800b246:	2010      	movs	r0, #16
 800b248:	f7ff ff9e 	bl	800b188 <malloc>
 800b24c:	4602      	mov	r2, r0
 800b24e:	6268      	str	r0, [r5, #36]	; 0x24
 800b250:	b920      	cbnz	r0, 800b25c <_Bfree+0x20>
 800b252:	4b09      	ldr	r3, [pc, #36]	; (800b278 <_Bfree+0x3c>)
 800b254:	4809      	ldr	r0, [pc, #36]	; (800b27c <_Bfree+0x40>)
 800b256:	218a      	movs	r1, #138	; 0x8a
 800b258:	f001 fc76 	bl	800cb48 <__assert_func>
 800b25c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b260:	6006      	str	r6, [r0, #0]
 800b262:	60c6      	str	r6, [r0, #12]
 800b264:	b13c      	cbz	r4, 800b276 <_Bfree+0x3a>
 800b266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b268:	6862      	ldr	r2, [r4, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b270:	6021      	str	r1, [r4, #0]
 800b272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	0800d09e 	.word	0x0800d09e
 800b27c:	0800d200 	.word	0x0800d200

0800b280 <__multadd>:
 800b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	690d      	ldr	r5, [r1, #16]
 800b286:	4607      	mov	r7, r0
 800b288:	460c      	mov	r4, r1
 800b28a:	461e      	mov	r6, r3
 800b28c:	f101 0c14 	add.w	ip, r1, #20
 800b290:	2000      	movs	r0, #0
 800b292:	f8dc 3000 	ldr.w	r3, [ip]
 800b296:	b299      	uxth	r1, r3
 800b298:	fb02 6101 	mla	r1, r2, r1, r6
 800b29c:	0c1e      	lsrs	r6, r3, #16
 800b29e:	0c0b      	lsrs	r3, r1, #16
 800b2a0:	fb02 3306 	mla	r3, r2, r6, r3
 800b2a4:	b289      	uxth	r1, r1
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2ac:	4285      	cmp	r5, r0
 800b2ae:	f84c 1b04 	str.w	r1, [ip], #4
 800b2b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2b6:	dcec      	bgt.n	800b292 <__multadd+0x12>
 800b2b8:	b30e      	cbz	r6, 800b2fe <__multadd+0x7e>
 800b2ba:	68a3      	ldr	r3, [r4, #8]
 800b2bc:	42ab      	cmp	r3, r5
 800b2be:	dc19      	bgt.n	800b2f4 <__multadd+0x74>
 800b2c0:	6861      	ldr	r1, [r4, #4]
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	3101      	adds	r1, #1
 800b2c6:	f7ff ff79 	bl	800b1bc <_Balloc>
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	b928      	cbnz	r0, 800b2da <__multadd+0x5a>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	4b0c      	ldr	r3, [pc, #48]	; (800b304 <__multadd+0x84>)
 800b2d2:	480d      	ldr	r0, [pc, #52]	; (800b308 <__multadd+0x88>)
 800b2d4:	21b5      	movs	r1, #181	; 0xb5
 800b2d6:	f001 fc37 	bl	800cb48 <__assert_func>
 800b2da:	6922      	ldr	r2, [r4, #16]
 800b2dc:	3202      	adds	r2, #2
 800b2de:	f104 010c 	add.w	r1, r4, #12
 800b2e2:	0092      	lsls	r2, r2, #2
 800b2e4:	300c      	adds	r0, #12
 800b2e6:	f7fc fbe7 	bl	8007ab8 <memcpy>
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	f7ff ffa5 	bl	800b23c <_Bfree>
 800b2f2:	4644      	mov	r4, r8
 800b2f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	615e      	str	r6, [r3, #20]
 800b2fc:	6125      	str	r5, [r4, #16]
 800b2fe:	4620      	mov	r0, r4
 800b300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b304:	0800d110 	.word	0x0800d110
 800b308:	0800d200 	.word	0x0800d200

0800b30c <__s2b>:
 800b30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b310:	460c      	mov	r4, r1
 800b312:	4615      	mov	r5, r2
 800b314:	461f      	mov	r7, r3
 800b316:	2209      	movs	r2, #9
 800b318:	3308      	adds	r3, #8
 800b31a:	4606      	mov	r6, r0
 800b31c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b320:	2100      	movs	r1, #0
 800b322:	2201      	movs	r2, #1
 800b324:	429a      	cmp	r2, r3
 800b326:	db09      	blt.n	800b33c <__s2b+0x30>
 800b328:	4630      	mov	r0, r6
 800b32a:	f7ff ff47 	bl	800b1bc <_Balloc>
 800b32e:	b940      	cbnz	r0, 800b342 <__s2b+0x36>
 800b330:	4602      	mov	r2, r0
 800b332:	4b19      	ldr	r3, [pc, #100]	; (800b398 <__s2b+0x8c>)
 800b334:	4819      	ldr	r0, [pc, #100]	; (800b39c <__s2b+0x90>)
 800b336:	21ce      	movs	r1, #206	; 0xce
 800b338:	f001 fc06 	bl	800cb48 <__assert_func>
 800b33c:	0052      	lsls	r2, r2, #1
 800b33e:	3101      	adds	r1, #1
 800b340:	e7f0      	b.n	800b324 <__s2b+0x18>
 800b342:	9b08      	ldr	r3, [sp, #32]
 800b344:	6143      	str	r3, [r0, #20]
 800b346:	2d09      	cmp	r5, #9
 800b348:	f04f 0301 	mov.w	r3, #1
 800b34c:	6103      	str	r3, [r0, #16]
 800b34e:	dd16      	ble.n	800b37e <__s2b+0x72>
 800b350:	f104 0909 	add.w	r9, r4, #9
 800b354:	46c8      	mov	r8, r9
 800b356:	442c      	add	r4, r5
 800b358:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b35c:	4601      	mov	r1, r0
 800b35e:	3b30      	subs	r3, #48	; 0x30
 800b360:	220a      	movs	r2, #10
 800b362:	4630      	mov	r0, r6
 800b364:	f7ff ff8c 	bl	800b280 <__multadd>
 800b368:	45a0      	cmp	r8, r4
 800b36a:	d1f5      	bne.n	800b358 <__s2b+0x4c>
 800b36c:	f1a5 0408 	sub.w	r4, r5, #8
 800b370:	444c      	add	r4, r9
 800b372:	1b2d      	subs	r5, r5, r4
 800b374:	1963      	adds	r3, r4, r5
 800b376:	42bb      	cmp	r3, r7
 800b378:	db04      	blt.n	800b384 <__s2b+0x78>
 800b37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37e:	340a      	adds	r4, #10
 800b380:	2509      	movs	r5, #9
 800b382:	e7f6      	b.n	800b372 <__s2b+0x66>
 800b384:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b388:	4601      	mov	r1, r0
 800b38a:	3b30      	subs	r3, #48	; 0x30
 800b38c:	220a      	movs	r2, #10
 800b38e:	4630      	mov	r0, r6
 800b390:	f7ff ff76 	bl	800b280 <__multadd>
 800b394:	e7ee      	b.n	800b374 <__s2b+0x68>
 800b396:	bf00      	nop
 800b398:	0800d110 	.word	0x0800d110
 800b39c:	0800d200 	.word	0x0800d200

0800b3a0 <__hi0bits>:
 800b3a0:	0c03      	lsrs	r3, r0, #16
 800b3a2:	041b      	lsls	r3, r3, #16
 800b3a4:	b9d3      	cbnz	r3, 800b3dc <__hi0bits+0x3c>
 800b3a6:	0400      	lsls	r0, r0, #16
 800b3a8:	2310      	movs	r3, #16
 800b3aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3ae:	bf04      	itt	eq
 800b3b0:	0200      	lsleq	r0, r0, #8
 800b3b2:	3308      	addeq	r3, #8
 800b3b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3b8:	bf04      	itt	eq
 800b3ba:	0100      	lsleq	r0, r0, #4
 800b3bc:	3304      	addeq	r3, #4
 800b3be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3c2:	bf04      	itt	eq
 800b3c4:	0080      	lsleq	r0, r0, #2
 800b3c6:	3302      	addeq	r3, #2
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	db05      	blt.n	800b3d8 <__hi0bits+0x38>
 800b3cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3d0:	f103 0301 	add.w	r3, r3, #1
 800b3d4:	bf08      	it	eq
 800b3d6:	2320      	moveq	r3, #32
 800b3d8:	4618      	mov	r0, r3
 800b3da:	4770      	bx	lr
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e7e4      	b.n	800b3aa <__hi0bits+0xa>

0800b3e0 <__lo0bits>:
 800b3e0:	6803      	ldr	r3, [r0, #0]
 800b3e2:	f013 0207 	ands.w	r2, r3, #7
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	d00b      	beq.n	800b402 <__lo0bits+0x22>
 800b3ea:	07da      	lsls	r2, r3, #31
 800b3ec:	d423      	bmi.n	800b436 <__lo0bits+0x56>
 800b3ee:	0798      	lsls	r0, r3, #30
 800b3f0:	bf49      	itett	mi
 800b3f2:	085b      	lsrmi	r3, r3, #1
 800b3f4:	089b      	lsrpl	r3, r3, #2
 800b3f6:	2001      	movmi	r0, #1
 800b3f8:	600b      	strmi	r3, [r1, #0]
 800b3fa:	bf5c      	itt	pl
 800b3fc:	600b      	strpl	r3, [r1, #0]
 800b3fe:	2002      	movpl	r0, #2
 800b400:	4770      	bx	lr
 800b402:	b298      	uxth	r0, r3
 800b404:	b9a8      	cbnz	r0, 800b432 <__lo0bits+0x52>
 800b406:	0c1b      	lsrs	r3, r3, #16
 800b408:	2010      	movs	r0, #16
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	b90a      	cbnz	r2, 800b412 <__lo0bits+0x32>
 800b40e:	3008      	adds	r0, #8
 800b410:	0a1b      	lsrs	r3, r3, #8
 800b412:	071a      	lsls	r2, r3, #28
 800b414:	bf04      	itt	eq
 800b416:	091b      	lsreq	r3, r3, #4
 800b418:	3004      	addeq	r0, #4
 800b41a:	079a      	lsls	r2, r3, #30
 800b41c:	bf04      	itt	eq
 800b41e:	089b      	lsreq	r3, r3, #2
 800b420:	3002      	addeq	r0, #2
 800b422:	07da      	lsls	r2, r3, #31
 800b424:	d403      	bmi.n	800b42e <__lo0bits+0x4e>
 800b426:	085b      	lsrs	r3, r3, #1
 800b428:	f100 0001 	add.w	r0, r0, #1
 800b42c:	d005      	beq.n	800b43a <__lo0bits+0x5a>
 800b42e:	600b      	str	r3, [r1, #0]
 800b430:	4770      	bx	lr
 800b432:	4610      	mov	r0, r2
 800b434:	e7e9      	b.n	800b40a <__lo0bits+0x2a>
 800b436:	2000      	movs	r0, #0
 800b438:	4770      	bx	lr
 800b43a:	2020      	movs	r0, #32
 800b43c:	4770      	bx	lr
	...

0800b440 <__i2b>:
 800b440:	b510      	push	{r4, lr}
 800b442:	460c      	mov	r4, r1
 800b444:	2101      	movs	r1, #1
 800b446:	f7ff feb9 	bl	800b1bc <_Balloc>
 800b44a:	4602      	mov	r2, r0
 800b44c:	b928      	cbnz	r0, 800b45a <__i2b+0x1a>
 800b44e:	4b05      	ldr	r3, [pc, #20]	; (800b464 <__i2b+0x24>)
 800b450:	4805      	ldr	r0, [pc, #20]	; (800b468 <__i2b+0x28>)
 800b452:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b456:	f001 fb77 	bl	800cb48 <__assert_func>
 800b45a:	2301      	movs	r3, #1
 800b45c:	6144      	str	r4, [r0, #20]
 800b45e:	6103      	str	r3, [r0, #16]
 800b460:	bd10      	pop	{r4, pc}
 800b462:	bf00      	nop
 800b464:	0800d110 	.word	0x0800d110
 800b468:	0800d200 	.word	0x0800d200

0800b46c <__multiply>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4691      	mov	r9, r2
 800b472:	690a      	ldr	r2, [r1, #16]
 800b474:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b478:	429a      	cmp	r2, r3
 800b47a:	bfb8      	it	lt
 800b47c:	460b      	movlt	r3, r1
 800b47e:	460c      	mov	r4, r1
 800b480:	bfbc      	itt	lt
 800b482:	464c      	movlt	r4, r9
 800b484:	4699      	movlt	r9, r3
 800b486:	6927      	ldr	r7, [r4, #16]
 800b488:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	6861      	ldr	r1, [r4, #4]
 800b490:	eb07 060a 	add.w	r6, r7, sl
 800b494:	42b3      	cmp	r3, r6
 800b496:	b085      	sub	sp, #20
 800b498:	bfb8      	it	lt
 800b49a:	3101      	addlt	r1, #1
 800b49c:	f7ff fe8e 	bl	800b1bc <_Balloc>
 800b4a0:	b930      	cbnz	r0, 800b4b0 <__multiply+0x44>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	4b44      	ldr	r3, [pc, #272]	; (800b5b8 <__multiply+0x14c>)
 800b4a6:	4845      	ldr	r0, [pc, #276]	; (800b5bc <__multiply+0x150>)
 800b4a8:	f240 115d 	movw	r1, #349	; 0x15d
 800b4ac:	f001 fb4c 	bl	800cb48 <__assert_func>
 800b4b0:	f100 0514 	add.w	r5, r0, #20
 800b4b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	4543      	cmp	r3, r8
 800b4be:	d321      	bcc.n	800b504 <__multiply+0x98>
 800b4c0:	f104 0314 	add.w	r3, r4, #20
 800b4c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4c8:	f109 0314 	add.w	r3, r9, #20
 800b4cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4d0:	9202      	str	r2, [sp, #8]
 800b4d2:	1b3a      	subs	r2, r7, r4
 800b4d4:	3a15      	subs	r2, #21
 800b4d6:	f022 0203 	bic.w	r2, r2, #3
 800b4da:	3204      	adds	r2, #4
 800b4dc:	f104 0115 	add.w	r1, r4, #21
 800b4e0:	428f      	cmp	r7, r1
 800b4e2:	bf38      	it	cc
 800b4e4:	2204      	movcc	r2, #4
 800b4e6:	9201      	str	r2, [sp, #4]
 800b4e8:	9a02      	ldr	r2, [sp, #8]
 800b4ea:	9303      	str	r3, [sp, #12]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d80c      	bhi.n	800b50a <__multiply+0x9e>
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	dd03      	ble.n	800b4fc <__multiply+0x90>
 800b4f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d05a      	beq.n	800b5b2 <__multiply+0x146>
 800b4fc:	6106      	str	r6, [r0, #16]
 800b4fe:	b005      	add	sp, #20
 800b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b504:	f843 2b04 	str.w	r2, [r3], #4
 800b508:	e7d8      	b.n	800b4bc <__multiply+0x50>
 800b50a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b50e:	f1ba 0f00 	cmp.w	sl, #0
 800b512:	d024      	beq.n	800b55e <__multiply+0xf2>
 800b514:	f104 0e14 	add.w	lr, r4, #20
 800b518:	46a9      	mov	r9, r5
 800b51a:	f04f 0c00 	mov.w	ip, #0
 800b51e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b522:	f8d9 1000 	ldr.w	r1, [r9]
 800b526:	fa1f fb82 	uxth.w	fp, r2
 800b52a:	b289      	uxth	r1, r1
 800b52c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b530:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b534:	f8d9 2000 	ldr.w	r2, [r9]
 800b538:	4461      	add	r1, ip
 800b53a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b53e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b542:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b546:	b289      	uxth	r1, r1
 800b548:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b54c:	4577      	cmp	r7, lr
 800b54e:	f849 1b04 	str.w	r1, [r9], #4
 800b552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b556:	d8e2      	bhi.n	800b51e <__multiply+0xb2>
 800b558:	9a01      	ldr	r2, [sp, #4]
 800b55a:	f845 c002 	str.w	ip, [r5, r2]
 800b55e:	9a03      	ldr	r2, [sp, #12]
 800b560:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b564:	3304      	adds	r3, #4
 800b566:	f1b9 0f00 	cmp.w	r9, #0
 800b56a:	d020      	beq.n	800b5ae <__multiply+0x142>
 800b56c:	6829      	ldr	r1, [r5, #0]
 800b56e:	f104 0c14 	add.w	ip, r4, #20
 800b572:	46ae      	mov	lr, r5
 800b574:	f04f 0a00 	mov.w	sl, #0
 800b578:	f8bc b000 	ldrh.w	fp, [ip]
 800b57c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b580:	fb09 220b 	mla	r2, r9, fp, r2
 800b584:	4492      	add	sl, r2
 800b586:	b289      	uxth	r1, r1
 800b588:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b58c:	f84e 1b04 	str.w	r1, [lr], #4
 800b590:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b594:	f8be 1000 	ldrh.w	r1, [lr]
 800b598:	0c12      	lsrs	r2, r2, #16
 800b59a:	fb09 1102 	mla	r1, r9, r2, r1
 800b59e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5a2:	4567      	cmp	r7, ip
 800b5a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5a8:	d8e6      	bhi.n	800b578 <__multiply+0x10c>
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	50a9      	str	r1, [r5, r2]
 800b5ae:	3504      	adds	r5, #4
 800b5b0:	e79a      	b.n	800b4e8 <__multiply+0x7c>
 800b5b2:	3e01      	subs	r6, #1
 800b5b4:	e79c      	b.n	800b4f0 <__multiply+0x84>
 800b5b6:	bf00      	nop
 800b5b8:	0800d110 	.word	0x0800d110
 800b5bc:	0800d200 	.word	0x0800d200

0800b5c0 <__pow5mult>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	f012 0203 	ands.w	r2, r2, #3
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	d007      	beq.n	800b5e0 <__pow5mult+0x20>
 800b5d0:	4c25      	ldr	r4, [pc, #148]	; (800b668 <__pow5mult+0xa8>)
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5da:	f7ff fe51 	bl	800b280 <__multadd>
 800b5de:	4607      	mov	r7, r0
 800b5e0:	10ad      	asrs	r5, r5, #2
 800b5e2:	d03d      	beq.n	800b660 <__pow5mult+0xa0>
 800b5e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5e6:	b97c      	cbnz	r4, 800b608 <__pow5mult+0x48>
 800b5e8:	2010      	movs	r0, #16
 800b5ea:	f7ff fdcd 	bl	800b188 <malloc>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5f2:	b928      	cbnz	r0, 800b600 <__pow5mult+0x40>
 800b5f4:	4b1d      	ldr	r3, [pc, #116]	; (800b66c <__pow5mult+0xac>)
 800b5f6:	481e      	ldr	r0, [pc, #120]	; (800b670 <__pow5mult+0xb0>)
 800b5f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5fc:	f001 faa4 	bl	800cb48 <__assert_func>
 800b600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b604:	6004      	str	r4, [r0, #0]
 800b606:	60c4      	str	r4, [r0, #12]
 800b608:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b60c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b610:	b94c      	cbnz	r4, 800b626 <__pow5mult+0x66>
 800b612:	f240 2171 	movw	r1, #625	; 0x271
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff ff12 	bl	800b440 <__i2b>
 800b61c:	2300      	movs	r3, #0
 800b61e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b622:	4604      	mov	r4, r0
 800b624:	6003      	str	r3, [r0, #0]
 800b626:	f04f 0900 	mov.w	r9, #0
 800b62a:	07eb      	lsls	r3, r5, #31
 800b62c:	d50a      	bpl.n	800b644 <__pow5mult+0x84>
 800b62e:	4639      	mov	r1, r7
 800b630:	4622      	mov	r2, r4
 800b632:	4630      	mov	r0, r6
 800b634:	f7ff ff1a 	bl	800b46c <__multiply>
 800b638:	4639      	mov	r1, r7
 800b63a:	4680      	mov	r8, r0
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7ff fdfd 	bl	800b23c <_Bfree>
 800b642:	4647      	mov	r7, r8
 800b644:	106d      	asrs	r5, r5, #1
 800b646:	d00b      	beq.n	800b660 <__pow5mult+0xa0>
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	b938      	cbnz	r0, 800b65c <__pow5mult+0x9c>
 800b64c:	4622      	mov	r2, r4
 800b64e:	4621      	mov	r1, r4
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff ff0b 	bl	800b46c <__multiply>
 800b656:	6020      	str	r0, [r4, #0]
 800b658:	f8c0 9000 	str.w	r9, [r0]
 800b65c:	4604      	mov	r4, r0
 800b65e:	e7e4      	b.n	800b62a <__pow5mult+0x6a>
 800b660:	4638      	mov	r0, r7
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	bf00      	nop
 800b668:	0800d350 	.word	0x0800d350
 800b66c:	0800d09e 	.word	0x0800d09e
 800b670:	0800d200 	.word	0x0800d200

0800b674 <__lshift>:
 800b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b678:	460c      	mov	r4, r1
 800b67a:	6849      	ldr	r1, [r1, #4]
 800b67c:	6923      	ldr	r3, [r4, #16]
 800b67e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	4607      	mov	r7, r0
 800b686:	4691      	mov	r9, r2
 800b688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b68c:	f108 0601 	add.w	r6, r8, #1
 800b690:	42b3      	cmp	r3, r6
 800b692:	db0b      	blt.n	800b6ac <__lshift+0x38>
 800b694:	4638      	mov	r0, r7
 800b696:	f7ff fd91 	bl	800b1bc <_Balloc>
 800b69a:	4605      	mov	r5, r0
 800b69c:	b948      	cbnz	r0, 800b6b2 <__lshift+0x3e>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4b2a      	ldr	r3, [pc, #168]	; (800b74c <__lshift+0xd8>)
 800b6a2:	482b      	ldr	r0, [pc, #172]	; (800b750 <__lshift+0xdc>)
 800b6a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6a8:	f001 fa4e 	bl	800cb48 <__assert_func>
 800b6ac:	3101      	adds	r1, #1
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	e7ee      	b.n	800b690 <__lshift+0x1c>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f100 0114 	add.w	r1, r0, #20
 800b6b8:	f100 0210 	add.w	r2, r0, #16
 800b6bc:	4618      	mov	r0, r3
 800b6be:	4553      	cmp	r3, sl
 800b6c0:	db37      	blt.n	800b732 <__lshift+0xbe>
 800b6c2:	6920      	ldr	r0, [r4, #16]
 800b6c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6c8:	f104 0314 	add.w	r3, r4, #20
 800b6cc:	f019 091f 	ands.w	r9, r9, #31
 800b6d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6d8:	d02f      	beq.n	800b73a <__lshift+0xc6>
 800b6da:	f1c9 0e20 	rsb	lr, r9, #32
 800b6de:	468a      	mov	sl, r1
 800b6e0:	f04f 0c00 	mov.w	ip, #0
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	fa02 f209 	lsl.w	r2, r2, r9
 800b6ea:	ea42 020c 	orr.w	r2, r2, ip
 800b6ee:	f84a 2b04 	str.w	r2, [sl], #4
 800b6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f6:	4298      	cmp	r0, r3
 800b6f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6fc:	d8f2      	bhi.n	800b6e4 <__lshift+0x70>
 800b6fe:	1b03      	subs	r3, r0, r4
 800b700:	3b15      	subs	r3, #21
 800b702:	f023 0303 	bic.w	r3, r3, #3
 800b706:	3304      	adds	r3, #4
 800b708:	f104 0215 	add.w	r2, r4, #21
 800b70c:	4290      	cmp	r0, r2
 800b70e:	bf38      	it	cc
 800b710:	2304      	movcc	r3, #4
 800b712:	f841 c003 	str.w	ip, [r1, r3]
 800b716:	f1bc 0f00 	cmp.w	ip, #0
 800b71a:	d001      	beq.n	800b720 <__lshift+0xac>
 800b71c:	f108 0602 	add.w	r6, r8, #2
 800b720:	3e01      	subs	r6, #1
 800b722:	4638      	mov	r0, r7
 800b724:	612e      	str	r6, [r5, #16]
 800b726:	4621      	mov	r1, r4
 800b728:	f7ff fd88 	bl	800b23c <_Bfree>
 800b72c:	4628      	mov	r0, r5
 800b72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b732:	f842 0f04 	str.w	r0, [r2, #4]!
 800b736:	3301      	adds	r3, #1
 800b738:	e7c1      	b.n	800b6be <__lshift+0x4a>
 800b73a:	3904      	subs	r1, #4
 800b73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b740:	f841 2f04 	str.w	r2, [r1, #4]!
 800b744:	4298      	cmp	r0, r3
 800b746:	d8f9      	bhi.n	800b73c <__lshift+0xc8>
 800b748:	e7ea      	b.n	800b720 <__lshift+0xac>
 800b74a:	bf00      	nop
 800b74c:	0800d110 	.word	0x0800d110
 800b750:	0800d200 	.word	0x0800d200

0800b754 <__mcmp>:
 800b754:	b530      	push	{r4, r5, lr}
 800b756:	6902      	ldr	r2, [r0, #16]
 800b758:	690c      	ldr	r4, [r1, #16]
 800b75a:	1b12      	subs	r2, r2, r4
 800b75c:	d10e      	bne.n	800b77c <__mcmp+0x28>
 800b75e:	f100 0314 	add.w	r3, r0, #20
 800b762:	3114      	adds	r1, #20
 800b764:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b768:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b76c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b770:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b774:	42a5      	cmp	r5, r4
 800b776:	d003      	beq.n	800b780 <__mcmp+0x2c>
 800b778:	d305      	bcc.n	800b786 <__mcmp+0x32>
 800b77a:	2201      	movs	r2, #1
 800b77c:	4610      	mov	r0, r2
 800b77e:	bd30      	pop	{r4, r5, pc}
 800b780:	4283      	cmp	r3, r0
 800b782:	d3f3      	bcc.n	800b76c <__mcmp+0x18>
 800b784:	e7fa      	b.n	800b77c <__mcmp+0x28>
 800b786:	f04f 32ff 	mov.w	r2, #4294967295
 800b78a:	e7f7      	b.n	800b77c <__mcmp+0x28>

0800b78c <__mdiff>:
 800b78c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	460c      	mov	r4, r1
 800b792:	4606      	mov	r6, r0
 800b794:	4611      	mov	r1, r2
 800b796:	4620      	mov	r0, r4
 800b798:	4690      	mov	r8, r2
 800b79a:	f7ff ffdb 	bl	800b754 <__mcmp>
 800b79e:	1e05      	subs	r5, r0, #0
 800b7a0:	d110      	bne.n	800b7c4 <__mdiff+0x38>
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f7ff fd09 	bl	800b1bc <_Balloc>
 800b7aa:	b930      	cbnz	r0, 800b7ba <__mdiff+0x2e>
 800b7ac:	4b3a      	ldr	r3, [pc, #232]	; (800b898 <__mdiff+0x10c>)
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	f240 2132 	movw	r1, #562	; 0x232
 800b7b4:	4839      	ldr	r0, [pc, #228]	; (800b89c <__mdiff+0x110>)
 800b7b6:	f001 f9c7 	bl	800cb48 <__assert_func>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c4:	bfa4      	itt	ge
 800b7c6:	4643      	movge	r3, r8
 800b7c8:	46a0      	movge	r8, r4
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7d0:	bfa6      	itte	ge
 800b7d2:	461c      	movge	r4, r3
 800b7d4:	2500      	movge	r5, #0
 800b7d6:	2501      	movlt	r5, #1
 800b7d8:	f7ff fcf0 	bl	800b1bc <_Balloc>
 800b7dc:	b920      	cbnz	r0, 800b7e8 <__mdiff+0x5c>
 800b7de:	4b2e      	ldr	r3, [pc, #184]	; (800b898 <__mdiff+0x10c>)
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7e6:	e7e5      	b.n	800b7b4 <__mdiff+0x28>
 800b7e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7ec:	6926      	ldr	r6, [r4, #16]
 800b7ee:	60c5      	str	r5, [r0, #12]
 800b7f0:	f104 0914 	add.w	r9, r4, #20
 800b7f4:	f108 0514 	add.w	r5, r8, #20
 800b7f8:	f100 0e14 	add.w	lr, r0, #20
 800b7fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b800:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b804:	f108 0210 	add.w	r2, r8, #16
 800b808:	46f2      	mov	sl, lr
 800b80a:	2100      	movs	r1, #0
 800b80c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b810:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b814:	fa1f f883 	uxth.w	r8, r3
 800b818:	fa11 f18b 	uxtah	r1, r1, fp
 800b81c:	0c1b      	lsrs	r3, r3, #16
 800b81e:	eba1 0808 	sub.w	r8, r1, r8
 800b822:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b826:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b82a:	fa1f f888 	uxth.w	r8, r8
 800b82e:	1419      	asrs	r1, r3, #16
 800b830:	454e      	cmp	r6, r9
 800b832:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b836:	f84a 3b04 	str.w	r3, [sl], #4
 800b83a:	d8e7      	bhi.n	800b80c <__mdiff+0x80>
 800b83c:	1b33      	subs	r3, r6, r4
 800b83e:	3b15      	subs	r3, #21
 800b840:	f023 0303 	bic.w	r3, r3, #3
 800b844:	3304      	adds	r3, #4
 800b846:	3415      	adds	r4, #21
 800b848:	42a6      	cmp	r6, r4
 800b84a:	bf38      	it	cc
 800b84c:	2304      	movcc	r3, #4
 800b84e:	441d      	add	r5, r3
 800b850:	4473      	add	r3, lr
 800b852:	469e      	mov	lr, r3
 800b854:	462e      	mov	r6, r5
 800b856:	4566      	cmp	r6, ip
 800b858:	d30e      	bcc.n	800b878 <__mdiff+0xec>
 800b85a:	f10c 0203 	add.w	r2, ip, #3
 800b85e:	1b52      	subs	r2, r2, r5
 800b860:	f022 0203 	bic.w	r2, r2, #3
 800b864:	3d03      	subs	r5, #3
 800b866:	45ac      	cmp	ip, r5
 800b868:	bf38      	it	cc
 800b86a:	2200      	movcc	r2, #0
 800b86c:	441a      	add	r2, r3
 800b86e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b872:	b17b      	cbz	r3, 800b894 <__mdiff+0x108>
 800b874:	6107      	str	r7, [r0, #16]
 800b876:	e7a3      	b.n	800b7c0 <__mdiff+0x34>
 800b878:	f856 8b04 	ldr.w	r8, [r6], #4
 800b87c:	fa11 f288 	uxtah	r2, r1, r8
 800b880:	1414      	asrs	r4, r2, #16
 800b882:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b886:	b292      	uxth	r2, r2
 800b888:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b88c:	f84e 2b04 	str.w	r2, [lr], #4
 800b890:	1421      	asrs	r1, r4, #16
 800b892:	e7e0      	b.n	800b856 <__mdiff+0xca>
 800b894:	3f01      	subs	r7, #1
 800b896:	e7ea      	b.n	800b86e <__mdiff+0xe2>
 800b898:	0800d110 	.word	0x0800d110
 800b89c:	0800d200 	.word	0x0800d200

0800b8a0 <__ulp>:
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	ed8d 0b00 	vstr	d0, [sp]
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	4912      	ldr	r1, [pc, #72]	; (800b8f4 <__ulp+0x54>)
 800b8aa:	4019      	ands	r1, r3
 800b8ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	dd05      	ble.n	800b8c0 <__ulp+0x20>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	ec43 2b10 	vmov	d0, r2, r3
 800b8bc:	b002      	add	sp, #8
 800b8be:	4770      	bx	lr
 800b8c0:	4249      	negs	r1, r1
 800b8c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b8c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b8ca:	f04f 0200 	mov.w	r2, #0
 800b8ce:	f04f 0300 	mov.w	r3, #0
 800b8d2:	da04      	bge.n	800b8de <__ulp+0x3e>
 800b8d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b8d8:	fa41 f300 	asr.w	r3, r1, r0
 800b8dc:	e7ec      	b.n	800b8b8 <__ulp+0x18>
 800b8de:	f1a0 0114 	sub.w	r1, r0, #20
 800b8e2:	291e      	cmp	r1, #30
 800b8e4:	bfda      	itte	le
 800b8e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b8ea:	fa20 f101 	lsrle.w	r1, r0, r1
 800b8ee:	2101      	movgt	r1, #1
 800b8f0:	460a      	mov	r2, r1
 800b8f2:	e7e1      	b.n	800b8b8 <__ulp+0x18>
 800b8f4:	7ff00000 	.word	0x7ff00000

0800b8f8 <__b2d>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	6905      	ldr	r5, [r0, #16]
 800b8fc:	f100 0714 	add.w	r7, r0, #20
 800b900:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b904:	1f2e      	subs	r6, r5, #4
 800b906:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff fd48 	bl	800b3a0 <__hi0bits>
 800b910:	f1c0 0320 	rsb	r3, r0, #32
 800b914:	280a      	cmp	r0, #10
 800b916:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b994 <__b2d+0x9c>
 800b91a:	600b      	str	r3, [r1, #0]
 800b91c:	dc14      	bgt.n	800b948 <__b2d+0x50>
 800b91e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b922:	fa24 f10e 	lsr.w	r1, r4, lr
 800b926:	42b7      	cmp	r7, r6
 800b928:	ea41 030c 	orr.w	r3, r1, ip
 800b92c:	bf34      	ite	cc
 800b92e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b932:	2100      	movcs	r1, #0
 800b934:	3015      	adds	r0, #21
 800b936:	fa04 f000 	lsl.w	r0, r4, r0
 800b93a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b93e:	ea40 0201 	orr.w	r2, r0, r1
 800b942:	ec43 2b10 	vmov	d0, r2, r3
 800b946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b948:	42b7      	cmp	r7, r6
 800b94a:	bf3a      	itte	cc
 800b94c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b950:	f1a5 0608 	subcc.w	r6, r5, #8
 800b954:	2100      	movcs	r1, #0
 800b956:	380b      	subs	r0, #11
 800b958:	d017      	beq.n	800b98a <__b2d+0x92>
 800b95a:	f1c0 0c20 	rsb	ip, r0, #32
 800b95e:	fa04 f500 	lsl.w	r5, r4, r0
 800b962:	42be      	cmp	r6, r7
 800b964:	fa21 f40c 	lsr.w	r4, r1, ip
 800b968:	ea45 0504 	orr.w	r5, r5, r4
 800b96c:	bf8c      	ite	hi
 800b96e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b972:	2400      	movls	r4, #0
 800b974:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b978:	fa01 f000 	lsl.w	r0, r1, r0
 800b97c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b980:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b984:	ea40 0204 	orr.w	r2, r0, r4
 800b988:	e7db      	b.n	800b942 <__b2d+0x4a>
 800b98a:	ea44 030c 	orr.w	r3, r4, ip
 800b98e:	460a      	mov	r2, r1
 800b990:	e7d7      	b.n	800b942 <__b2d+0x4a>
 800b992:	bf00      	nop
 800b994:	3ff00000 	.word	0x3ff00000

0800b998 <__d2b>:
 800b998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	4689      	mov	r9, r1
 800b99e:	2101      	movs	r1, #1
 800b9a0:	ec57 6b10 	vmov	r6, r7, d0
 800b9a4:	4690      	mov	r8, r2
 800b9a6:	f7ff fc09 	bl	800b1bc <_Balloc>
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	b930      	cbnz	r0, 800b9bc <__d2b+0x24>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	4b25      	ldr	r3, [pc, #148]	; (800ba48 <__d2b+0xb0>)
 800b9b2:	4826      	ldr	r0, [pc, #152]	; (800ba4c <__d2b+0xb4>)
 800b9b4:	f240 310a 	movw	r1, #778	; 0x30a
 800b9b8:	f001 f8c6 	bl	800cb48 <__assert_func>
 800b9bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9c4:	bb35      	cbnz	r5, 800ba14 <__d2b+0x7c>
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	d028      	beq.n	800ba1e <__d2b+0x86>
 800b9cc:	4668      	mov	r0, sp
 800b9ce:	9600      	str	r6, [sp, #0]
 800b9d0:	f7ff fd06 	bl	800b3e0 <__lo0bits>
 800b9d4:	9900      	ldr	r1, [sp, #0]
 800b9d6:	b300      	cbz	r0, 800ba1a <__d2b+0x82>
 800b9d8:	9a01      	ldr	r2, [sp, #4]
 800b9da:	f1c0 0320 	rsb	r3, r0, #32
 800b9de:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e2:	430b      	orrs	r3, r1
 800b9e4:	40c2      	lsrs	r2, r0
 800b9e6:	6163      	str	r3, [r4, #20]
 800b9e8:	9201      	str	r2, [sp, #4]
 800b9ea:	9b01      	ldr	r3, [sp, #4]
 800b9ec:	61a3      	str	r3, [r4, #24]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bf14      	ite	ne
 800b9f2:	2202      	movne	r2, #2
 800b9f4:	2201      	moveq	r2, #1
 800b9f6:	6122      	str	r2, [r4, #16]
 800b9f8:	b1d5      	cbz	r5, 800ba30 <__d2b+0x98>
 800b9fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9fe:	4405      	add	r5, r0
 800ba00:	f8c9 5000 	str.w	r5, [r9]
 800ba04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba08:	f8c8 0000 	str.w	r0, [r8]
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	b003      	add	sp, #12
 800ba10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba18:	e7d5      	b.n	800b9c6 <__d2b+0x2e>
 800ba1a:	6161      	str	r1, [r4, #20]
 800ba1c:	e7e5      	b.n	800b9ea <__d2b+0x52>
 800ba1e:	a801      	add	r0, sp, #4
 800ba20:	f7ff fcde 	bl	800b3e0 <__lo0bits>
 800ba24:	9b01      	ldr	r3, [sp, #4]
 800ba26:	6163      	str	r3, [r4, #20]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	6122      	str	r2, [r4, #16]
 800ba2c:	3020      	adds	r0, #32
 800ba2e:	e7e3      	b.n	800b9f8 <__d2b+0x60>
 800ba30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba38:	f8c9 0000 	str.w	r0, [r9]
 800ba3c:	6918      	ldr	r0, [r3, #16]
 800ba3e:	f7ff fcaf 	bl	800b3a0 <__hi0bits>
 800ba42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba46:	e7df      	b.n	800ba08 <__d2b+0x70>
 800ba48:	0800d110 	.word	0x0800d110
 800ba4c:	0800d200 	.word	0x0800d200

0800ba50 <__ratio>:
 800ba50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	4688      	mov	r8, r1
 800ba56:	4669      	mov	r1, sp
 800ba58:	4681      	mov	r9, r0
 800ba5a:	f7ff ff4d 	bl	800b8f8 <__b2d>
 800ba5e:	a901      	add	r1, sp, #4
 800ba60:	4640      	mov	r0, r8
 800ba62:	ec55 4b10 	vmov	r4, r5, d0
 800ba66:	f7ff ff47 	bl	800b8f8 <__b2d>
 800ba6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba72:	eba3 0c02 	sub.w	ip, r3, r2
 800ba76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba7a:	1a9b      	subs	r3, r3, r2
 800ba7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba80:	ec51 0b10 	vmov	r0, r1, d0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	bfd6      	itet	le
 800ba88:	460a      	movle	r2, r1
 800ba8a:	462a      	movgt	r2, r5
 800ba8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba90:	468b      	mov	fp, r1
 800ba92:	462f      	mov	r7, r5
 800ba94:	bfd4      	ite	le
 800ba96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba9e:	4620      	mov	r0, r4
 800baa0:	ee10 2a10 	vmov	r2, s0
 800baa4:	465b      	mov	r3, fp
 800baa6:	4639      	mov	r1, r7
 800baa8:	f7f4 fee0 	bl	800086c <__aeabi_ddiv>
 800baac:	ec41 0b10 	vmov	d0, r0, r1
 800bab0:	b003      	add	sp, #12
 800bab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bab6 <__copybits>:
 800bab6:	3901      	subs	r1, #1
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	1149      	asrs	r1, r1, #5
 800babc:	6914      	ldr	r4, [r2, #16]
 800babe:	3101      	adds	r1, #1
 800bac0:	f102 0314 	add.w	r3, r2, #20
 800bac4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bac8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bacc:	1f05      	subs	r5, r0, #4
 800bace:	42a3      	cmp	r3, r4
 800bad0:	d30c      	bcc.n	800baec <__copybits+0x36>
 800bad2:	1aa3      	subs	r3, r4, r2
 800bad4:	3b11      	subs	r3, #17
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	3211      	adds	r2, #17
 800badc:	42a2      	cmp	r2, r4
 800bade:	bf88      	it	hi
 800bae0:	2300      	movhi	r3, #0
 800bae2:	4418      	add	r0, r3
 800bae4:	2300      	movs	r3, #0
 800bae6:	4288      	cmp	r0, r1
 800bae8:	d305      	bcc.n	800baf6 <__copybits+0x40>
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	f853 6b04 	ldr.w	r6, [r3], #4
 800baf0:	f845 6f04 	str.w	r6, [r5, #4]!
 800baf4:	e7eb      	b.n	800bace <__copybits+0x18>
 800baf6:	f840 3b04 	str.w	r3, [r0], #4
 800bafa:	e7f4      	b.n	800bae6 <__copybits+0x30>

0800bafc <__any_on>:
 800bafc:	f100 0214 	add.w	r2, r0, #20
 800bb00:	6900      	ldr	r0, [r0, #16]
 800bb02:	114b      	asrs	r3, r1, #5
 800bb04:	4298      	cmp	r0, r3
 800bb06:	b510      	push	{r4, lr}
 800bb08:	db11      	blt.n	800bb2e <__any_on+0x32>
 800bb0a:	dd0a      	ble.n	800bb22 <__any_on+0x26>
 800bb0c:	f011 011f 	ands.w	r1, r1, #31
 800bb10:	d007      	beq.n	800bb22 <__any_on+0x26>
 800bb12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb16:	fa24 f001 	lsr.w	r0, r4, r1
 800bb1a:	fa00 f101 	lsl.w	r1, r0, r1
 800bb1e:	428c      	cmp	r4, r1
 800bb20:	d10b      	bne.n	800bb3a <__any_on+0x3e>
 800bb22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d803      	bhi.n	800bb32 <__any_on+0x36>
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	bd10      	pop	{r4, pc}
 800bb2e:	4603      	mov	r3, r0
 800bb30:	e7f7      	b.n	800bb22 <__any_on+0x26>
 800bb32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb36:	2900      	cmp	r1, #0
 800bb38:	d0f5      	beq.n	800bb26 <__any_on+0x2a>
 800bb3a:	2001      	movs	r0, #1
 800bb3c:	e7f6      	b.n	800bb2c <__any_on+0x30>

0800bb3e <_calloc_r>:
 800bb3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb40:	fba1 2402 	umull	r2, r4, r1, r2
 800bb44:	b94c      	cbnz	r4, 800bb5a <_calloc_r+0x1c>
 800bb46:	4611      	mov	r1, r2
 800bb48:	9201      	str	r2, [sp, #4]
 800bb4a:	f000 f87b 	bl	800bc44 <_malloc_r>
 800bb4e:	9a01      	ldr	r2, [sp, #4]
 800bb50:	4605      	mov	r5, r0
 800bb52:	b930      	cbnz	r0, 800bb62 <_calloc_r+0x24>
 800bb54:	4628      	mov	r0, r5
 800bb56:	b003      	add	sp, #12
 800bb58:	bd30      	pop	{r4, r5, pc}
 800bb5a:	220c      	movs	r2, #12
 800bb5c:	6002      	str	r2, [r0, #0]
 800bb5e:	2500      	movs	r5, #0
 800bb60:	e7f8      	b.n	800bb54 <_calloc_r+0x16>
 800bb62:	4621      	mov	r1, r4
 800bb64:	f7fb ffb6 	bl	8007ad4 <memset>
 800bb68:	e7f4      	b.n	800bb54 <_calloc_r+0x16>
	...

0800bb6c <_free_r>:
 800bb6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d044      	beq.n	800bbfc <_free_r+0x90>
 800bb72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb76:	9001      	str	r0, [sp, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb7e:	bfb8      	it	lt
 800bb80:	18e4      	addlt	r4, r4, r3
 800bb82:	f001 f84d 	bl	800cc20 <__malloc_lock>
 800bb86:	4a1e      	ldr	r2, [pc, #120]	; (800bc00 <_free_r+0x94>)
 800bb88:	9801      	ldr	r0, [sp, #4]
 800bb8a:	6813      	ldr	r3, [r2, #0]
 800bb8c:	b933      	cbnz	r3, 800bb9c <_free_r+0x30>
 800bb8e:	6063      	str	r3, [r4, #4]
 800bb90:	6014      	str	r4, [r2, #0]
 800bb92:	b003      	add	sp, #12
 800bb94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb98:	f001 b848 	b.w	800cc2c <__malloc_unlock>
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	d908      	bls.n	800bbb2 <_free_r+0x46>
 800bba0:	6825      	ldr	r5, [r4, #0]
 800bba2:	1961      	adds	r1, r4, r5
 800bba4:	428b      	cmp	r3, r1
 800bba6:	bf01      	itttt	eq
 800bba8:	6819      	ldreq	r1, [r3, #0]
 800bbaa:	685b      	ldreq	r3, [r3, #4]
 800bbac:	1949      	addeq	r1, r1, r5
 800bbae:	6021      	streq	r1, [r4, #0]
 800bbb0:	e7ed      	b.n	800bb8e <_free_r+0x22>
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	b10b      	cbz	r3, 800bbbc <_free_r+0x50>
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	d9fa      	bls.n	800bbb2 <_free_r+0x46>
 800bbbc:	6811      	ldr	r1, [r2, #0]
 800bbbe:	1855      	adds	r5, r2, r1
 800bbc0:	42a5      	cmp	r5, r4
 800bbc2:	d10b      	bne.n	800bbdc <_free_r+0x70>
 800bbc4:	6824      	ldr	r4, [r4, #0]
 800bbc6:	4421      	add	r1, r4
 800bbc8:	1854      	adds	r4, r2, r1
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	6011      	str	r1, [r2, #0]
 800bbce:	d1e0      	bne.n	800bb92 <_free_r+0x26>
 800bbd0:	681c      	ldr	r4, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	6053      	str	r3, [r2, #4]
 800bbd6:	4421      	add	r1, r4
 800bbd8:	6011      	str	r1, [r2, #0]
 800bbda:	e7da      	b.n	800bb92 <_free_r+0x26>
 800bbdc:	d902      	bls.n	800bbe4 <_free_r+0x78>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	6003      	str	r3, [r0, #0]
 800bbe2:	e7d6      	b.n	800bb92 <_free_r+0x26>
 800bbe4:	6825      	ldr	r5, [r4, #0]
 800bbe6:	1961      	adds	r1, r4, r5
 800bbe8:	428b      	cmp	r3, r1
 800bbea:	bf04      	itt	eq
 800bbec:	6819      	ldreq	r1, [r3, #0]
 800bbee:	685b      	ldreq	r3, [r3, #4]
 800bbf0:	6063      	str	r3, [r4, #4]
 800bbf2:	bf04      	itt	eq
 800bbf4:	1949      	addeq	r1, r1, r5
 800bbf6:	6021      	streq	r1, [r4, #0]
 800bbf8:	6054      	str	r4, [r2, #4]
 800bbfa:	e7ca      	b.n	800bb92 <_free_r+0x26>
 800bbfc:	b003      	add	sp, #12
 800bbfe:	bd30      	pop	{r4, r5, pc}
 800bc00:	200007fc 	.word	0x200007fc

0800bc04 <sbrk_aligned>:
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	4e0e      	ldr	r6, [pc, #56]	; (800bc40 <sbrk_aligned+0x3c>)
 800bc08:	460c      	mov	r4, r1
 800bc0a:	6831      	ldr	r1, [r6, #0]
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	b911      	cbnz	r1, 800bc16 <sbrk_aligned+0x12>
 800bc10:	f000 fe82 	bl	800c918 <_sbrk_r>
 800bc14:	6030      	str	r0, [r6, #0]
 800bc16:	4621      	mov	r1, r4
 800bc18:	4628      	mov	r0, r5
 800bc1a:	f000 fe7d 	bl	800c918 <_sbrk_r>
 800bc1e:	1c43      	adds	r3, r0, #1
 800bc20:	d00a      	beq.n	800bc38 <sbrk_aligned+0x34>
 800bc22:	1cc4      	adds	r4, r0, #3
 800bc24:	f024 0403 	bic.w	r4, r4, #3
 800bc28:	42a0      	cmp	r0, r4
 800bc2a:	d007      	beq.n	800bc3c <sbrk_aligned+0x38>
 800bc2c:	1a21      	subs	r1, r4, r0
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 fe72 	bl	800c918 <_sbrk_r>
 800bc34:	3001      	adds	r0, #1
 800bc36:	d101      	bne.n	800bc3c <sbrk_aligned+0x38>
 800bc38:	f04f 34ff 	mov.w	r4, #4294967295
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}
 800bc40:	20000800 	.word	0x20000800

0800bc44 <_malloc_r>:
 800bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc48:	1ccd      	adds	r5, r1, #3
 800bc4a:	f025 0503 	bic.w	r5, r5, #3
 800bc4e:	3508      	adds	r5, #8
 800bc50:	2d0c      	cmp	r5, #12
 800bc52:	bf38      	it	cc
 800bc54:	250c      	movcc	r5, #12
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	4607      	mov	r7, r0
 800bc5a:	db01      	blt.n	800bc60 <_malloc_r+0x1c>
 800bc5c:	42a9      	cmp	r1, r5
 800bc5e:	d905      	bls.n	800bc6c <_malloc_r+0x28>
 800bc60:	230c      	movs	r3, #12
 800bc62:	603b      	str	r3, [r7, #0]
 800bc64:	2600      	movs	r6, #0
 800bc66:	4630      	mov	r0, r6
 800bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc6c:	4e2e      	ldr	r6, [pc, #184]	; (800bd28 <_malloc_r+0xe4>)
 800bc6e:	f000 ffd7 	bl	800cc20 <__malloc_lock>
 800bc72:	6833      	ldr	r3, [r6, #0]
 800bc74:	461c      	mov	r4, r3
 800bc76:	bb34      	cbnz	r4, 800bcc6 <_malloc_r+0x82>
 800bc78:	4629      	mov	r1, r5
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	f7ff ffc2 	bl	800bc04 <sbrk_aligned>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	4604      	mov	r4, r0
 800bc84:	d14d      	bne.n	800bd22 <_malloc_r+0xde>
 800bc86:	6834      	ldr	r4, [r6, #0]
 800bc88:	4626      	mov	r6, r4
 800bc8a:	2e00      	cmp	r6, #0
 800bc8c:	d140      	bne.n	800bd10 <_malloc_r+0xcc>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	4631      	mov	r1, r6
 800bc92:	4638      	mov	r0, r7
 800bc94:	eb04 0803 	add.w	r8, r4, r3
 800bc98:	f000 fe3e 	bl	800c918 <_sbrk_r>
 800bc9c:	4580      	cmp	r8, r0
 800bc9e:	d13a      	bne.n	800bd16 <_malloc_r+0xd2>
 800bca0:	6821      	ldr	r1, [r4, #0]
 800bca2:	3503      	adds	r5, #3
 800bca4:	1a6d      	subs	r5, r5, r1
 800bca6:	f025 0503 	bic.w	r5, r5, #3
 800bcaa:	3508      	adds	r5, #8
 800bcac:	2d0c      	cmp	r5, #12
 800bcae:	bf38      	it	cc
 800bcb0:	250c      	movcc	r5, #12
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	f7ff ffa5 	bl	800bc04 <sbrk_aligned>
 800bcba:	3001      	adds	r0, #1
 800bcbc:	d02b      	beq.n	800bd16 <_malloc_r+0xd2>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	442b      	add	r3, r5
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	e00e      	b.n	800bce4 <_malloc_r+0xa0>
 800bcc6:	6822      	ldr	r2, [r4, #0]
 800bcc8:	1b52      	subs	r2, r2, r5
 800bcca:	d41e      	bmi.n	800bd0a <_malloc_r+0xc6>
 800bccc:	2a0b      	cmp	r2, #11
 800bcce:	d916      	bls.n	800bcfe <_malloc_r+0xba>
 800bcd0:	1961      	adds	r1, r4, r5
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	6025      	str	r5, [r4, #0]
 800bcd6:	bf18      	it	ne
 800bcd8:	6059      	strne	r1, [r3, #4]
 800bcda:	6863      	ldr	r3, [r4, #4]
 800bcdc:	bf08      	it	eq
 800bcde:	6031      	streq	r1, [r6, #0]
 800bce0:	5162      	str	r2, [r4, r5]
 800bce2:	604b      	str	r3, [r1, #4]
 800bce4:	4638      	mov	r0, r7
 800bce6:	f104 060b 	add.w	r6, r4, #11
 800bcea:	f000 ff9f 	bl	800cc2c <__malloc_unlock>
 800bcee:	f026 0607 	bic.w	r6, r6, #7
 800bcf2:	1d23      	adds	r3, r4, #4
 800bcf4:	1af2      	subs	r2, r6, r3
 800bcf6:	d0b6      	beq.n	800bc66 <_malloc_r+0x22>
 800bcf8:	1b9b      	subs	r3, r3, r6
 800bcfa:	50a3      	str	r3, [r4, r2]
 800bcfc:	e7b3      	b.n	800bc66 <_malloc_r+0x22>
 800bcfe:	6862      	ldr	r2, [r4, #4]
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	bf0c      	ite	eq
 800bd04:	6032      	streq	r2, [r6, #0]
 800bd06:	605a      	strne	r2, [r3, #4]
 800bd08:	e7ec      	b.n	800bce4 <_malloc_r+0xa0>
 800bd0a:	4623      	mov	r3, r4
 800bd0c:	6864      	ldr	r4, [r4, #4]
 800bd0e:	e7b2      	b.n	800bc76 <_malloc_r+0x32>
 800bd10:	4634      	mov	r4, r6
 800bd12:	6876      	ldr	r6, [r6, #4]
 800bd14:	e7b9      	b.n	800bc8a <_malloc_r+0x46>
 800bd16:	230c      	movs	r3, #12
 800bd18:	603b      	str	r3, [r7, #0]
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	f000 ff86 	bl	800cc2c <__malloc_unlock>
 800bd20:	e7a1      	b.n	800bc66 <_malloc_r+0x22>
 800bd22:	6025      	str	r5, [r4, #0]
 800bd24:	e7de      	b.n	800bce4 <_malloc_r+0xa0>
 800bd26:	bf00      	nop
 800bd28:	200007fc 	.word	0x200007fc

0800bd2c <__ssputs_r>:
 800bd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	688e      	ldr	r6, [r1, #8]
 800bd32:	429e      	cmp	r6, r3
 800bd34:	4682      	mov	sl, r0
 800bd36:	460c      	mov	r4, r1
 800bd38:	4690      	mov	r8, r2
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	d838      	bhi.n	800bdb0 <__ssputs_r+0x84>
 800bd3e:	898a      	ldrh	r2, [r1, #12]
 800bd40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd44:	d032      	beq.n	800bdac <__ssputs_r+0x80>
 800bd46:	6825      	ldr	r5, [r4, #0]
 800bd48:	6909      	ldr	r1, [r1, #16]
 800bd4a:	eba5 0901 	sub.w	r9, r5, r1
 800bd4e:	6965      	ldr	r5, [r4, #20]
 800bd50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd58:	3301      	adds	r3, #1
 800bd5a:	444b      	add	r3, r9
 800bd5c:	106d      	asrs	r5, r5, #1
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	bf38      	it	cc
 800bd62:	461d      	movcc	r5, r3
 800bd64:	0553      	lsls	r3, r2, #21
 800bd66:	d531      	bpl.n	800bdcc <__ssputs_r+0xa0>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7ff ff6b 	bl	800bc44 <_malloc_r>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	b950      	cbnz	r0, 800bd88 <__ssputs_r+0x5c>
 800bd72:	230c      	movs	r3, #12
 800bd74:	f8ca 3000 	str.w	r3, [sl]
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd88:	6921      	ldr	r1, [r4, #16]
 800bd8a:	464a      	mov	r2, r9
 800bd8c:	f7fb fe94 	bl	8007ab8 <memcpy>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd9a:	81a3      	strh	r3, [r4, #12]
 800bd9c:	6126      	str	r6, [r4, #16]
 800bd9e:	6165      	str	r5, [r4, #20]
 800bda0:	444e      	add	r6, r9
 800bda2:	eba5 0509 	sub.w	r5, r5, r9
 800bda6:	6026      	str	r6, [r4, #0]
 800bda8:	60a5      	str	r5, [r4, #8]
 800bdaa:	463e      	mov	r6, r7
 800bdac:	42be      	cmp	r6, r7
 800bdae:	d900      	bls.n	800bdb2 <__ssputs_r+0x86>
 800bdb0:	463e      	mov	r6, r7
 800bdb2:	6820      	ldr	r0, [r4, #0]
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	4641      	mov	r1, r8
 800bdb8:	f000 ff18 	bl	800cbec <memmove>
 800bdbc:	68a3      	ldr	r3, [r4, #8]
 800bdbe:	1b9b      	subs	r3, r3, r6
 800bdc0:	60a3      	str	r3, [r4, #8]
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	4433      	add	r3, r6
 800bdc6:	6023      	str	r3, [r4, #0]
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e7db      	b.n	800bd84 <__ssputs_r+0x58>
 800bdcc:	462a      	mov	r2, r5
 800bdce:	f000 ff33 	bl	800cc38 <_realloc_r>
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d1e1      	bne.n	800bd9c <__ssputs_r+0x70>
 800bdd8:	6921      	ldr	r1, [r4, #16]
 800bdda:	4650      	mov	r0, sl
 800bddc:	f7ff fec6 	bl	800bb6c <_free_r>
 800bde0:	e7c7      	b.n	800bd72 <__ssputs_r+0x46>
	...

0800bde4 <_svfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	4698      	mov	r8, r3
 800bdea:	898b      	ldrh	r3, [r1, #12]
 800bdec:	061b      	lsls	r3, r3, #24
 800bdee:	b09d      	sub	sp, #116	; 0x74
 800bdf0:	4607      	mov	r7, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	4614      	mov	r4, r2
 800bdf6:	d50e      	bpl.n	800be16 <_svfiprintf_r+0x32>
 800bdf8:	690b      	ldr	r3, [r1, #16]
 800bdfa:	b963      	cbnz	r3, 800be16 <_svfiprintf_r+0x32>
 800bdfc:	2140      	movs	r1, #64	; 0x40
 800bdfe:	f7ff ff21 	bl	800bc44 <_malloc_r>
 800be02:	6028      	str	r0, [r5, #0]
 800be04:	6128      	str	r0, [r5, #16]
 800be06:	b920      	cbnz	r0, 800be12 <_svfiprintf_r+0x2e>
 800be08:	230c      	movs	r3, #12
 800be0a:	603b      	str	r3, [r7, #0]
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
 800be10:	e0d1      	b.n	800bfb6 <_svfiprintf_r+0x1d2>
 800be12:	2340      	movs	r3, #64	; 0x40
 800be14:	616b      	str	r3, [r5, #20]
 800be16:	2300      	movs	r3, #0
 800be18:	9309      	str	r3, [sp, #36]	; 0x24
 800be1a:	2320      	movs	r3, #32
 800be1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be20:	f8cd 800c 	str.w	r8, [sp, #12]
 800be24:	2330      	movs	r3, #48	; 0x30
 800be26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfd0 <_svfiprintf_r+0x1ec>
 800be2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be2e:	f04f 0901 	mov.w	r9, #1
 800be32:	4623      	mov	r3, r4
 800be34:	469a      	mov	sl, r3
 800be36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be3a:	b10a      	cbz	r2, 800be40 <_svfiprintf_r+0x5c>
 800be3c:	2a25      	cmp	r2, #37	; 0x25
 800be3e:	d1f9      	bne.n	800be34 <_svfiprintf_r+0x50>
 800be40:	ebba 0b04 	subs.w	fp, sl, r4
 800be44:	d00b      	beq.n	800be5e <_svfiprintf_r+0x7a>
 800be46:	465b      	mov	r3, fp
 800be48:	4622      	mov	r2, r4
 800be4a:	4629      	mov	r1, r5
 800be4c:	4638      	mov	r0, r7
 800be4e:	f7ff ff6d 	bl	800bd2c <__ssputs_r>
 800be52:	3001      	adds	r0, #1
 800be54:	f000 80aa 	beq.w	800bfac <_svfiprintf_r+0x1c8>
 800be58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be5a:	445a      	add	r2, fp
 800be5c:	9209      	str	r2, [sp, #36]	; 0x24
 800be5e:	f89a 3000 	ldrb.w	r3, [sl]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 80a2 	beq.w	800bfac <_svfiprintf_r+0x1c8>
 800be68:	2300      	movs	r3, #0
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be72:	f10a 0a01 	add.w	sl, sl, #1
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	9307      	str	r3, [sp, #28]
 800be7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be7e:	931a      	str	r3, [sp, #104]	; 0x68
 800be80:	4654      	mov	r4, sl
 800be82:	2205      	movs	r2, #5
 800be84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be88:	4851      	ldr	r0, [pc, #324]	; (800bfd0 <_svfiprintf_r+0x1ec>)
 800be8a:	f7f4 f9b9 	bl	8000200 <memchr>
 800be8e:	9a04      	ldr	r2, [sp, #16]
 800be90:	b9d8      	cbnz	r0, 800beca <_svfiprintf_r+0xe6>
 800be92:	06d0      	lsls	r0, r2, #27
 800be94:	bf44      	itt	mi
 800be96:	2320      	movmi	r3, #32
 800be98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be9c:	0711      	lsls	r1, r2, #28
 800be9e:	bf44      	itt	mi
 800bea0:	232b      	movmi	r3, #43	; 0x2b
 800bea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bea6:	f89a 3000 	ldrb.w	r3, [sl]
 800beaa:	2b2a      	cmp	r3, #42	; 0x2a
 800beac:	d015      	beq.n	800beda <_svfiprintf_r+0xf6>
 800beae:	9a07      	ldr	r2, [sp, #28]
 800beb0:	4654      	mov	r4, sl
 800beb2:	2000      	movs	r0, #0
 800beb4:	f04f 0c0a 	mov.w	ip, #10
 800beb8:	4621      	mov	r1, r4
 800beba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bebe:	3b30      	subs	r3, #48	; 0x30
 800bec0:	2b09      	cmp	r3, #9
 800bec2:	d94e      	bls.n	800bf62 <_svfiprintf_r+0x17e>
 800bec4:	b1b0      	cbz	r0, 800bef4 <_svfiprintf_r+0x110>
 800bec6:	9207      	str	r2, [sp, #28]
 800bec8:	e014      	b.n	800bef4 <_svfiprintf_r+0x110>
 800beca:	eba0 0308 	sub.w	r3, r0, r8
 800bece:	fa09 f303 	lsl.w	r3, r9, r3
 800bed2:	4313      	orrs	r3, r2
 800bed4:	9304      	str	r3, [sp, #16]
 800bed6:	46a2      	mov	sl, r4
 800bed8:	e7d2      	b.n	800be80 <_svfiprintf_r+0x9c>
 800beda:	9b03      	ldr	r3, [sp, #12]
 800bedc:	1d19      	adds	r1, r3, #4
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	9103      	str	r1, [sp, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	bfbb      	ittet	lt
 800bee6:	425b      	neglt	r3, r3
 800bee8:	f042 0202 	orrlt.w	r2, r2, #2
 800beec:	9307      	strge	r3, [sp, #28]
 800beee:	9307      	strlt	r3, [sp, #28]
 800bef0:	bfb8      	it	lt
 800bef2:	9204      	strlt	r2, [sp, #16]
 800bef4:	7823      	ldrb	r3, [r4, #0]
 800bef6:	2b2e      	cmp	r3, #46	; 0x2e
 800bef8:	d10c      	bne.n	800bf14 <_svfiprintf_r+0x130>
 800befa:	7863      	ldrb	r3, [r4, #1]
 800befc:	2b2a      	cmp	r3, #42	; 0x2a
 800befe:	d135      	bne.n	800bf6c <_svfiprintf_r+0x188>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9203      	str	r2, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfb8      	it	lt
 800bf0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf10:	3402      	adds	r4, #2
 800bf12:	9305      	str	r3, [sp, #20]
 800bf14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfe0 <_svfiprintf_r+0x1fc>
 800bf18:	7821      	ldrb	r1, [r4, #0]
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	4650      	mov	r0, sl
 800bf1e:	f7f4 f96f 	bl	8000200 <memchr>
 800bf22:	b140      	cbz	r0, 800bf36 <_svfiprintf_r+0x152>
 800bf24:	2340      	movs	r3, #64	; 0x40
 800bf26:	eba0 000a 	sub.w	r0, r0, sl
 800bf2a:	fa03 f000 	lsl.w	r0, r3, r0
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	4303      	orrs	r3, r0
 800bf32:	3401      	adds	r4, #1
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3a:	4826      	ldr	r0, [pc, #152]	; (800bfd4 <_svfiprintf_r+0x1f0>)
 800bf3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf40:	2206      	movs	r2, #6
 800bf42:	f7f4 f95d 	bl	8000200 <memchr>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d038      	beq.n	800bfbc <_svfiprintf_r+0x1d8>
 800bf4a:	4b23      	ldr	r3, [pc, #140]	; (800bfd8 <_svfiprintf_r+0x1f4>)
 800bf4c:	bb1b      	cbnz	r3, 800bf96 <_svfiprintf_r+0x1b2>
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	3307      	adds	r3, #7
 800bf52:	f023 0307 	bic.w	r3, r3, #7
 800bf56:	3308      	adds	r3, #8
 800bf58:	9303      	str	r3, [sp, #12]
 800bf5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf5c:	4433      	add	r3, r6
 800bf5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf60:	e767      	b.n	800be32 <_svfiprintf_r+0x4e>
 800bf62:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf66:	460c      	mov	r4, r1
 800bf68:	2001      	movs	r0, #1
 800bf6a:	e7a5      	b.n	800beb8 <_svfiprintf_r+0xd4>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	3401      	adds	r4, #1
 800bf70:	9305      	str	r3, [sp, #20]
 800bf72:	4619      	mov	r1, r3
 800bf74:	f04f 0c0a 	mov.w	ip, #10
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf7e:	3a30      	subs	r2, #48	; 0x30
 800bf80:	2a09      	cmp	r2, #9
 800bf82:	d903      	bls.n	800bf8c <_svfiprintf_r+0x1a8>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0c5      	beq.n	800bf14 <_svfiprintf_r+0x130>
 800bf88:	9105      	str	r1, [sp, #20]
 800bf8a:	e7c3      	b.n	800bf14 <_svfiprintf_r+0x130>
 800bf8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf90:	4604      	mov	r4, r0
 800bf92:	2301      	movs	r3, #1
 800bf94:	e7f0      	b.n	800bf78 <_svfiprintf_r+0x194>
 800bf96:	ab03      	add	r3, sp, #12
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4b0f      	ldr	r3, [pc, #60]	; (800bfdc <_svfiprintf_r+0x1f8>)
 800bf9e:	a904      	add	r1, sp, #16
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7fb fe3f 	bl	8007c24 <_printf_float>
 800bfa6:	1c42      	adds	r2, r0, #1
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	d1d6      	bne.n	800bf5a <_svfiprintf_r+0x176>
 800bfac:	89ab      	ldrh	r3, [r5, #12]
 800bfae:	065b      	lsls	r3, r3, #25
 800bfb0:	f53f af2c 	bmi.w	800be0c <_svfiprintf_r+0x28>
 800bfb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfb6:	b01d      	add	sp, #116	; 0x74
 800bfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbc:	ab03      	add	r3, sp, #12
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	462a      	mov	r2, r5
 800bfc2:	4b06      	ldr	r3, [pc, #24]	; (800bfdc <_svfiprintf_r+0x1f8>)
 800bfc4:	a904      	add	r1, sp, #16
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	f7fc f8d0 	bl	800816c <_printf_i>
 800bfcc:	e7eb      	b.n	800bfa6 <_svfiprintf_r+0x1c2>
 800bfce:	bf00      	nop
 800bfd0:	0800d35c 	.word	0x0800d35c
 800bfd4:	0800d366 	.word	0x0800d366
 800bfd8:	08007c25 	.word	0x08007c25
 800bfdc:	0800bd2d 	.word	0x0800bd2d
 800bfe0:	0800d362 	.word	0x0800d362

0800bfe4 <_sungetc_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	1c4b      	adds	r3, r1, #1
 800bfe8:	4614      	mov	r4, r2
 800bfea:	d103      	bne.n	800bff4 <_sungetc_r+0x10>
 800bfec:	f04f 35ff 	mov.w	r5, #4294967295
 800bff0:	4628      	mov	r0, r5
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	8993      	ldrh	r3, [r2, #12]
 800bff6:	f023 0320 	bic.w	r3, r3, #32
 800bffa:	8193      	strh	r3, [r2, #12]
 800bffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bffe:	6852      	ldr	r2, [r2, #4]
 800c000:	b2cd      	uxtb	r5, r1
 800c002:	b18b      	cbz	r3, 800c028 <_sungetc_r+0x44>
 800c004:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c006:	4293      	cmp	r3, r2
 800c008:	dd08      	ble.n	800c01c <_sungetc_r+0x38>
 800c00a:	6823      	ldr	r3, [r4, #0]
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	6022      	str	r2, [r4, #0]
 800c010:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c014:	6863      	ldr	r3, [r4, #4]
 800c016:	3301      	adds	r3, #1
 800c018:	6063      	str	r3, [r4, #4]
 800c01a:	e7e9      	b.n	800bff0 <_sungetc_r+0xc>
 800c01c:	4621      	mov	r1, r4
 800c01e:	f000 fd4b 	bl	800cab8 <__submore>
 800c022:	2800      	cmp	r0, #0
 800c024:	d0f1      	beq.n	800c00a <_sungetc_r+0x26>
 800c026:	e7e1      	b.n	800bfec <_sungetc_r+0x8>
 800c028:	6921      	ldr	r1, [r4, #16]
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	b151      	cbz	r1, 800c044 <_sungetc_r+0x60>
 800c02e:	4299      	cmp	r1, r3
 800c030:	d208      	bcs.n	800c044 <_sungetc_r+0x60>
 800c032:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c036:	42a9      	cmp	r1, r5
 800c038:	d104      	bne.n	800c044 <_sungetc_r+0x60>
 800c03a:	3b01      	subs	r3, #1
 800c03c:	3201      	adds	r2, #1
 800c03e:	6023      	str	r3, [r4, #0]
 800c040:	6062      	str	r2, [r4, #4]
 800c042:	e7d5      	b.n	800bff0 <_sungetc_r+0xc>
 800c044:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c04c:	6363      	str	r3, [r4, #52]	; 0x34
 800c04e:	2303      	movs	r3, #3
 800c050:	63a3      	str	r3, [r4, #56]	; 0x38
 800c052:	4623      	mov	r3, r4
 800c054:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	2301      	movs	r3, #1
 800c05c:	e7dc      	b.n	800c018 <_sungetc_r+0x34>

0800c05e <__ssrefill_r>:
 800c05e:	b510      	push	{r4, lr}
 800c060:	460c      	mov	r4, r1
 800c062:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c064:	b169      	cbz	r1, 800c082 <__ssrefill_r+0x24>
 800c066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c06a:	4299      	cmp	r1, r3
 800c06c:	d001      	beq.n	800c072 <__ssrefill_r+0x14>
 800c06e:	f7ff fd7d 	bl	800bb6c <_free_r>
 800c072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	2000      	movs	r0, #0
 800c078:	6360      	str	r0, [r4, #52]	; 0x34
 800c07a:	b113      	cbz	r3, 800c082 <__ssrefill_r+0x24>
 800c07c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c07e:	6023      	str	r3, [r4, #0]
 800c080:	bd10      	pop	{r4, pc}
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	2300      	movs	r3, #0
 800c088:	6063      	str	r3, [r4, #4]
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	f043 0320 	orr.w	r3, r3, #32
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	f04f 30ff 	mov.w	r0, #4294967295
 800c096:	e7f3      	b.n	800c080 <__ssrefill_r+0x22>

0800c098 <__ssvfiscanf_r>:
 800c098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c09c:	460c      	mov	r4, r1
 800c09e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c0a8:	49a6      	ldr	r1, [pc, #664]	; (800c344 <__ssvfiscanf_r+0x2ac>)
 800c0aa:	91a0      	str	r1, [sp, #640]	; 0x280
 800c0ac:	f10d 0804 	add.w	r8, sp, #4
 800c0b0:	49a5      	ldr	r1, [pc, #660]	; (800c348 <__ssvfiscanf_r+0x2b0>)
 800c0b2:	4fa6      	ldr	r7, [pc, #664]	; (800c34c <__ssvfiscanf_r+0x2b4>)
 800c0b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c350 <__ssvfiscanf_r+0x2b8>
 800c0b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c0bc:	4606      	mov	r6, r0
 800c0be:	91a1      	str	r1, [sp, #644]	; 0x284
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	7813      	ldrb	r3, [r2, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 815a 	beq.w	800c37e <__ssvfiscanf_r+0x2e6>
 800c0ca:	5dd9      	ldrb	r1, [r3, r7]
 800c0cc:	f011 0108 	ands.w	r1, r1, #8
 800c0d0:	f102 0501 	add.w	r5, r2, #1
 800c0d4:	d019      	beq.n	800c10a <__ssvfiscanf_r+0x72>
 800c0d6:	6863      	ldr	r3, [r4, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	dd0f      	ble.n	800c0fc <__ssvfiscanf_r+0x64>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	5cba      	ldrb	r2, [r7, r2]
 800c0e2:	0712      	lsls	r2, r2, #28
 800c0e4:	d401      	bmi.n	800c0ea <__ssvfiscanf_r+0x52>
 800c0e6:	462a      	mov	r2, r5
 800c0e8:	e7eb      	b.n	800c0c2 <__ssvfiscanf_r+0x2a>
 800c0ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0ec:	3201      	adds	r2, #1
 800c0ee:	9245      	str	r2, [sp, #276]	; 0x114
 800c0f0:	6862      	ldr	r2, [r4, #4]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	3a01      	subs	r2, #1
 800c0f6:	6062      	str	r2, [r4, #4]
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	e7ec      	b.n	800c0d6 <__ssvfiscanf_r+0x3e>
 800c0fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0fe:	4621      	mov	r1, r4
 800c100:	4630      	mov	r0, r6
 800c102:	4798      	blx	r3
 800c104:	2800      	cmp	r0, #0
 800c106:	d0e9      	beq.n	800c0dc <__ssvfiscanf_r+0x44>
 800c108:	e7ed      	b.n	800c0e6 <__ssvfiscanf_r+0x4e>
 800c10a:	2b25      	cmp	r3, #37	; 0x25
 800c10c:	d012      	beq.n	800c134 <__ssvfiscanf_r+0x9c>
 800c10e:	469a      	mov	sl, r3
 800c110:	6863      	ldr	r3, [r4, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f340 8091 	ble.w	800c23a <__ssvfiscanf_r+0x1a2>
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	7813      	ldrb	r3, [r2, #0]
 800c11c:	4553      	cmp	r3, sl
 800c11e:	f040 812e 	bne.w	800c37e <__ssvfiscanf_r+0x2e6>
 800c122:	6863      	ldr	r3, [r4, #4]
 800c124:	3b01      	subs	r3, #1
 800c126:	6063      	str	r3, [r4, #4]
 800c128:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c12a:	3201      	adds	r2, #1
 800c12c:	3301      	adds	r3, #1
 800c12e:	6022      	str	r2, [r4, #0]
 800c130:	9345      	str	r3, [sp, #276]	; 0x114
 800c132:	e7d8      	b.n	800c0e6 <__ssvfiscanf_r+0x4e>
 800c134:	9141      	str	r1, [sp, #260]	; 0x104
 800c136:	9143      	str	r1, [sp, #268]	; 0x10c
 800c138:	7853      	ldrb	r3, [r2, #1]
 800c13a:	2b2a      	cmp	r3, #42	; 0x2a
 800c13c:	bf02      	ittt	eq
 800c13e:	2310      	moveq	r3, #16
 800c140:	1c95      	addeq	r5, r2, #2
 800c142:	9341      	streq	r3, [sp, #260]	; 0x104
 800c144:	220a      	movs	r2, #10
 800c146:	46aa      	mov	sl, r5
 800c148:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c14c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c150:	2b09      	cmp	r3, #9
 800c152:	d91d      	bls.n	800c190 <__ssvfiscanf_r+0xf8>
 800c154:	487e      	ldr	r0, [pc, #504]	; (800c350 <__ssvfiscanf_r+0x2b8>)
 800c156:	2203      	movs	r2, #3
 800c158:	f7f4 f852 	bl	8000200 <memchr>
 800c15c:	b140      	cbz	r0, 800c170 <__ssvfiscanf_r+0xd8>
 800c15e:	2301      	movs	r3, #1
 800c160:	eba0 0009 	sub.w	r0, r0, r9
 800c164:	fa03 f000 	lsl.w	r0, r3, r0
 800c168:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c16a:	4318      	orrs	r0, r3
 800c16c:	9041      	str	r0, [sp, #260]	; 0x104
 800c16e:	4655      	mov	r5, sl
 800c170:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c174:	2b78      	cmp	r3, #120	; 0x78
 800c176:	d806      	bhi.n	800c186 <__ssvfiscanf_r+0xee>
 800c178:	2b57      	cmp	r3, #87	; 0x57
 800c17a:	d810      	bhi.n	800c19e <__ssvfiscanf_r+0x106>
 800c17c:	2b25      	cmp	r3, #37	; 0x25
 800c17e:	d0c6      	beq.n	800c10e <__ssvfiscanf_r+0x76>
 800c180:	d856      	bhi.n	800c230 <__ssvfiscanf_r+0x198>
 800c182:	2b00      	cmp	r3, #0
 800c184:	d064      	beq.n	800c250 <__ssvfiscanf_r+0x1b8>
 800c186:	2303      	movs	r3, #3
 800c188:	9347      	str	r3, [sp, #284]	; 0x11c
 800c18a:	230a      	movs	r3, #10
 800c18c:	9342      	str	r3, [sp, #264]	; 0x108
 800c18e:	e071      	b.n	800c274 <__ssvfiscanf_r+0x1dc>
 800c190:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c192:	fb02 1103 	mla	r1, r2, r3, r1
 800c196:	3930      	subs	r1, #48	; 0x30
 800c198:	9143      	str	r1, [sp, #268]	; 0x10c
 800c19a:	4655      	mov	r5, sl
 800c19c:	e7d3      	b.n	800c146 <__ssvfiscanf_r+0xae>
 800c19e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c1a2:	2a20      	cmp	r2, #32
 800c1a4:	d8ef      	bhi.n	800c186 <__ssvfiscanf_r+0xee>
 800c1a6:	a101      	add	r1, pc, #4	; (adr r1, 800c1ac <__ssvfiscanf_r+0x114>)
 800c1a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1ac:	0800c25f 	.word	0x0800c25f
 800c1b0:	0800c187 	.word	0x0800c187
 800c1b4:	0800c187 	.word	0x0800c187
 800c1b8:	0800c2bd 	.word	0x0800c2bd
 800c1bc:	0800c187 	.word	0x0800c187
 800c1c0:	0800c187 	.word	0x0800c187
 800c1c4:	0800c187 	.word	0x0800c187
 800c1c8:	0800c187 	.word	0x0800c187
 800c1cc:	0800c187 	.word	0x0800c187
 800c1d0:	0800c187 	.word	0x0800c187
 800c1d4:	0800c187 	.word	0x0800c187
 800c1d8:	0800c2d3 	.word	0x0800c2d3
 800c1dc:	0800c2a9 	.word	0x0800c2a9
 800c1e0:	0800c237 	.word	0x0800c237
 800c1e4:	0800c237 	.word	0x0800c237
 800c1e8:	0800c237 	.word	0x0800c237
 800c1ec:	0800c187 	.word	0x0800c187
 800c1f0:	0800c2ad 	.word	0x0800c2ad
 800c1f4:	0800c187 	.word	0x0800c187
 800c1f8:	0800c187 	.word	0x0800c187
 800c1fc:	0800c187 	.word	0x0800c187
 800c200:	0800c187 	.word	0x0800c187
 800c204:	0800c2e3 	.word	0x0800c2e3
 800c208:	0800c2b5 	.word	0x0800c2b5
 800c20c:	0800c257 	.word	0x0800c257
 800c210:	0800c187 	.word	0x0800c187
 800c214:	0800c187 	.word	0x0800c187
 800c218:	0800c2df 	.word	0x0800c2df
 800c21c:	0800c187 	.word	0x0800c187
 800c220:	0800c2a9 	.word	0x0800c2a9
 800c224:	0800c187 	.word	0x0800c187
 800c228:	0800c187 	.word	0x0800c187
 800c22c:	0800c25f 	.word	0x0800c25f
 800c230:	3b45      	subs	r3, #69	; 0x45
 800c232:	2b02      	cmp	r3, #2
 800c234:	d8a7      	bhi.n	800c186 <__ssvfiscanf_r+0xee>
 800c236:	2305      	movs	r3, #5
 800c238:	e01b      	b.n	800c272 <__ssvfiscanf_r+0x1da>
 800c23a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c23c:	4621      	mov	r1, r4
 800c23e:	4630      	mov	r0, r6
 800c240:	4798      	blx	r3
 800c242:	2800      	cmp	r0, #0
 800c244:	f43f af68 	beq.w	800c118 <__ssvfiscanf_r+0x80>
 800c248:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f040 808d 	bne.w	800c36a <__ssvfiscanf_r+0x2d2>
 800c250:	f04f 30ff 	mov.w	r0, #4294967295
 800c254:	e08f      	b.n	800c376 <__ssvfiscanf_r+0x2de>
 800c256:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c258:	f042 0220 	orr.w	r2, r2, #32
 800c25c:	9241      	str	r2, [sp, #260]	; 0x104
 800c25e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c264:	9241      	str	r2, [sp, #260]	; 0x104
 800c266:	2210      	movs	r2, #16
 800c268:	2b6f      	cmp	r3, #111	; 0x6f
 800c26a:	9242      	str	r2, [sp, #264]	; 0x108
 800c26c:	bf34      	ite	cc
 800c26e:	2303      	movcc	r3, #3
 800c270:	2304      	movcs	r3, #4
 800c272:	9347      	str	r3, [sp, #284]	; 0x11c
 800c274:	6863      	ldr	r3, [r4, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	dd42      	ble.n	800c300 <__ssvfiscanf_r+0x268>
 800c27a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c27c:	0659      	lsls	r1, r3, #25
 800c27e:	d404      	bmi.n	800c28a <__ssvfiscanf_r+0x1f2>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	781a      	ldrb	r2, [r3, #0]
 800c284:	5cba      	ldrb	r2, [r7, r2]
 800c286:	0712      	lsls	r2, r2, #28
 800c288:	d441      	bmi.n	800c30e <__ssvfiscanf_r+0x276>
 800c28a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	dc50      	bgt.n	800c332 <__ssvfiscanf_r+0x29a>
 800c290:	466b      	mov	r3, sp
 800c292:	4622      	mov	r2, r4
 800c294:	a941      	add	r1, sp, #260	; 0x104
 800c296:	4630      	mov	r0, r6
 800c298:	f000 f9d0 	bl	800c63c <_scanf_chars>
 800c29c:	2801      	cmp	r0, #1
 800c29e:	d06e      	beq.n	800c37e <__ssvfiscanf_r+0x2e6>
 800c2a0:	2802      	cmp	r0, #2
 800c2a2:	f47f af20 	bne.w	800c0e6 <__ssvfiscanf_r+0x4e>
 800c2a6:	e7cf      	b.n	800c248 <__ssvfiscanf_r+0x1b0>
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	e7dd      	b.n	800c268 <__ssvfiscanf_r+0x1d0>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9342      	str	r3, [sp, #264]	; 0x108
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e7de      	b.n	800c272 <__ssvfiscanf_r+0x1da>
 800c2b4:	2308      	movs	r3, #8
 800c2b6:	9342      	str	r3, [sp, #264]	; 0x108
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	e7da      	b.n	800c272 <__ssvfiscanf_r+0x1da>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4640      	mov	r0, r8
 800c2c0:	f000 fb3a 	bl	800c938 <__sccl>
 800c2c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ca:	9341      	str	r3, [sp, #260]	; 0x104
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e7cf      	b.n	800c272 <__ssvfiscanf_r+0x1da>
 800c2d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2d8:	9341      	str	r3, [sp, #260]	; 0x104
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e7c9      	b.n	800c272 <__ssvfiscanf_r+0x1da>
 800c2de:	2302      	movs	r3, #2
 800c2e0:	e7c7      	b.n	800c272 <__ssvfiscanf_r+0x1da>
 800c2e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c2e4:	06c3      	lsls	r3, r0, #27
 800c2e6:	f53f aefe 	bmi.w	800c0e6 <__ssvfiscanf_r+0x4e>
 800c2ea:	9b00      	ldr	r3, [sp, #0]
 800c2ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2ee:	1d19      	adds	r1, r3, #4
 800c2f0:	9100      	str	r1, [sp, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f010 0f01 	tst.w	r0, #1
 800c2f8:	bf14      	ite	ne
 800c2fa:	801a      	strhne	r2, [r3, #0]
 800c2fc:	601a      	streq	r2, [r3, #0]
 800c2fe:	e6f2      	b.n	800c0e6 <__ssvfiscanf_r+0x4e>
 800c300:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c302:	4621      	mov	r1, r4
 800c304:	4630      	mov	r0, r6
 800c306:	4798      	blx	r3
 800c308:	2800      	cmp	r0, #0
 800c30a:	d0b6      	beq.n	800c27a <__ssvfiscanf_r+0x1e2>
 800c30c:	e79c      	b.n	800c248 <__ssvfiscanf_r+0x1b0>
 800c30e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c310:	3201      	adds	r2, #1
 800c312:	9245      	str	r2, [sp, #276]	; 0x114
 800c314:	6862      	ldr	r2, [r4, #4]
 800c316:	3a01      	subs	r2, #1
 800c318:	2a00      	cmp	r2, #0
 800c31a:	6062      	str	r2, [r4, #4]
 800c31c:	dd02      	ble.n	800c324 <__ssvfiscanf_r+0x28c>
 800c31e:	3301      	adds	r3, #1
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	e7ad      	b.n	800c280 <__ssvfiscanf_r+0x1e8>
 800c324:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c326:	4621      	mov	r1, r4
 800c328:	4630      	mov	r0, r6
 800c32a:	4798      	blx	r3
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d0a7      	beq.n	800c280 <__ssvfiscanf_r+0x1e8>
 800c330:	e78a      	b.n	800c248 <__ssvfiscanf_r+0x1b0>
 800c332:	2b04      	cmp	r3, #4
 800c334:	dc0e      	bgt.n	800c354 <__ssvfiscanf_r+0x2bc>
 800c336:	466b      	mov	r3, sp
 800c338:	4622      	mov	r2, r4
 800c33a:	a941      	add	r1, sp, #260	; 0x104
 800c33c:	4630      	mov	r0, r6
 800c33e:	f000 f9d7 	bl	800c6f0 <_scanf_i>
 800c342:	e7ab      	b.n	800c29c <__ssvfiscanf_r+0x204>
 800c344:	0800bfe5 	.word	0x0800bfe5
 800c348:	0800c05f 	.word	0x0800c05f
 800c34c:	0800cf91 	.word	0x0800cf91
 800c350:	0800d362 	.word	0x0800d362
 800c354:	4b0b      	ldr	r3, [pc, #44]	; (800c384 <__ssvfiscanf_r+0x2ec>)
 800c356:	2b00      	cmp	r3, #0
 800c358:	f43f aec5 	beq.w	800c0e6 <__ssvfiscanf_r+0x4e>
 800c35c:	466b      	mov	r3, sp
 800c35e:	4622      	mov	r2, r4
 800c360:	a941      	add	r1, sp, #260	; 0x104
 800c362:	4630      	mov	r0, r6
 800c364:	f7fc f828 	bl	80083b8 <_scanf_float>
 800c368:	e798      	b.n	800c29c <__ssvfiscanf_r+0x204>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c370:	bf18      	it	ne
 800c372:	f04f 30ff 	movne.w	r0, #4294967295
 800c376:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c37e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c380:	e7f9      	b.n	800c376 <__ssvfiscanf_r+0x2de>
 800c382:	bf00      	nop
 800c384:	080083b9 	.word	0x080083b9

0800c388 <__sfputc_r>:
 800c388:	6893      	ldr	r3, [r2, #8]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	b410      	push	{r4}
 800c390:	6093      	str	r3, [r2, #8]
 800c392:	da08      	bge.n	800c3a6 <__sfputc_r+0x1e>
 800c394:	6994      	ldr	r4, [r2, #24]
 800c396:	42a3      	cmp	r3, r4
 800c398:	db01      	blt.n	800c39e <__sfputc_r+0x16>
 800c39a:	290a      	cmp	r1, #10
 800c39c:	d103      	bne.n	800c3a6 <__sfputc_r+0x1e>
 800c39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a2:	f7fd b9ed 	b.w	8009780 <__swbuf_r>
 800c3a6:	6813      	ldr	r3, [r2, #0]
 800c3a8:	1c58      	adds	r0, r3, #1
 800c3aa:	6010      	str	r0, [r2, #0]
 800c3ac:	7019      	strb	r1, [r3, #0]
 800c3ae:	4608      	mov	r0, r1
 800c3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <__sfputs_r>:
 800c3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	460f      	mov	r7, r1
 800c3bc:	4614      	mov	r4, r2
 800c3be:	18d5      	adds	r5, r2, r3
 800c3c0:	42ac      	cmp	r4, r5
 800c3c2:	d101      	bne.n	800c3c8 <__sfputs_r+0x12>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e007      	b.n	800c3d8 <__sfputs_r+0x22>
 800c3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3cc:	463a      	mov	r2, r7
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7ff ffda 	bl	800c388 <__sfputc_r>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d1f3      	bne.n	800c3c0 <__sfputs_r+0xa>
 800c3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3dc <_vfiprintf_r>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	b09d      	sub	sp, #116	; 0x74
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	4698      	mov	r8, r3
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	b118      	cbz	r0, 800c3f4 <_vfiprintf_r+0x18>
 800c3ec:	6983      	ldr	r3, [r0, #24]
 800c3ee:	b90b      	cbnz	r3, 800c3f4 <_vfiprintf_r+0x18>
 800c3f0:	f7fe fa3e 	bl	800a870 <__sinit>
 800c3f4:	4b89      	ldr	r3, [pc, #548]	; (800c61c <_vfiprintf_r+0x240>)
 800c3f6:	429d      	cmp	r5, r3
 800c3f8:	d11b      	bne.n	800c432 <_vfiprintf_r+0x56>
 800c3fa:	6875      	ldr	r5, [r6, #4]
 800c3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3fe:	07d9      	lsls	r1, r3, #31
 800c400:	d405      	bmi.n	800c40e <_vfiprintf_r+0x32>
 800c402:	89ab      	ldrh	r3, [r5, #12]
 800c404:	059a      	lsls	r2, r3, #22
 800c406:	d402      	bmi.n	800c40e <_vfiprintf_r+0x32>
 800c408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c40a:	f7fe fe42 	bl	800b092 <__retarget_lock_acquire_recursive>
 800c40e:	89ab      	ldrh	r3, [r5, #12]
 800c410:	071b      	lsls	r3, r3, #28
 800c412:	d501      	bpl.n	800c418 <_vfiprintf_r+0x3c>
 800c414:	692b      	ldr	r3, [r5, #16]
 800c416:	b9eb      	cbnz	r3, 800c454 <_vfiprintf_r+0x78>
 800c418:	4629      	mov	r1, r5
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7fd fa14 	bl	8009848 <__swsetup_r>
 800c420:	b1c0      	cbz	r0, 800c454 <_vfiprintf_r+0x78>
 800c422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c424:	07dc      	lsls	r4, r3, #31
 800c426:	d50e      	bpl.n	800c446 <_vfiprintf_r+0x6a>
 800c428:	f04f 30ff 	mov.w	r0, #4294967295
 800c42c:	b01d      	add	sp, #116	; 0x74
 800c42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c432:	4b7b      	ldr	r3, [pc, #492]	; (800c620 <_vfiprintf_r+0x244>)
 800c434:	429d      	cmp	r5, r3
 800c436:	d101      	bne.n	800c43c <_vfiprintf_r+0x60>
 800c438:	68b5      	ldr	r5, [r6, #8]
 800c43a:	e7df      	b.n	800c3fc <_vfiprintf_r+0x20>
 800c43c:	4b79      	ldr	r3, [pc, #484]	; (800c624 <_vfiprintf_r+0x248>)
 800c43e:	429d      	cmp	r5, r3
 800c440:	bf08      	it	eq
 800c442:	68f5      	ldreq	r5, [r6, #12]
 800c444:	e7da      	b.n	800c3fc <_vfiprintf_r+0x20>
 800c446:	89ab      	ldrh	r3, [r5, #12]
 800c448:	0598      	lsls	r0, r3, #22
 800c44a:	d4ed      	bmi.n	800c428 <_vfiprintf_r+0x4c>
 800c44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c44e:	f7fe fe21 	bl	800b094 <__retarget_lock_release_recursive>
 800c452:	e7e9      	b.n	800c428 <_vfiprintf_r+0x4c>
 800c454:	2300      	movs	r3, #0
 800c456:	9309      	str	r3, [sp, #36]	; 0x24
 800c458:	2320      	movs	r3, #32
 800c45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c462:	2330      	movs	r3, #48	; 0x30
 800c464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c628 <_vfiprintf_r+0x24c>
 800c468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c46c:	f04f 0901 	mov.w	r9, #1
 800c470:	4623      	mov	r3, r4
 800c472:	469a      	mov	sl, r3
 800c474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c478:	b10a      	cbz	r2, 800c47e <_vfiprintf_r+0xa2>
 800c47a:	2a25      	cmp	r2, #37	; 0x25
 800c47c:	d1f9      	bne.n	800c472 <_vfiprintf_r+0x96>
 800c47e:	ebba 0b04 	subs.w	fp, sl, r4
 800c482:	d00b      	beq.n	800c49c <_vfiprintf_r+0xc0>
 800c484:	465b      	mov	r3, fp
 800c486:	4622      	mov	r2, r4
 800c488:	4629      	mov	r1, r5
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7ff ff93 	bl	800c3b6 <__sfputs_r>
 800c490:	3001      	adds	r0, #1
 800c492:	f000 80aa 	beq.w	800c5ea <_vfiprintf_r+0x20e>
 800c496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c498:	445a      	add	r2, fp
 800c49a:	9209      	str	r2, [sp, #36]	; 0x24
 800c49c:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 80a2 	beq.w	800c5ea <_vfiprintf_r+0x20e>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4b0:	f10a 0a01 	add.w	sl, sl, #1
 800c4b4:	9304      	str	r3, [sp, #16]
 800c4b6:	9307      	str	r3, [sp, #28]
 800c4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800c4be:	4654      	mov	r4, sl
 800c4c0:	2205      	movs	r2, #5
 800c4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c6:	4858      	ldr	r0, [pc, #352]	; (800c628 <_vfiprintf_r+0x24c>)
 800c4c8:	f7f3 fe9a 	bl	8000200 <memchr>
 800c4cc:	9a04      	ldr	r2, [sp, #16]
 800c4ce:	b9d8      	cbnz	r0, 800c508 <_vfiprintf_r+0x12c>
 800c4d0:	06d1      	lsls	r1, r2, #27
 800c4d2:	bf44      	itt	mi
 800c4d4:	2320      	movmi	r3, #32
 800c4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4da:	0713      	lsls	r3, r2, #28
 800c4dc:	bf44      	itt	mi
 800c4de:	232b      	movmi	r3, #43	; 0x2b
 800c4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ea:	d015      	beq.n	800c518 <_vfiprintf_r+0x13c>
 800c4ec:	9a07      	ldr	r2, [sp, #28]
 800c4ee:	4654      	mov	r4, sl
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	f04f 0c0a 	mov.w	ip, #10
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4fc:	3b30      	subs	r3, #48	; 0x30
 800c4fe:	2b09      	cmp	r3, #9
 800c500:	d94e      	bls.n	800c5a0 <_vfiprintf_r+0x1c4>
 800c502:	b1b0      	cbz	r0, 800c532 <_vfiprintf_r+0x156>
 800c504:	9207      	str	r2, [sp, #28]
 800c506:	e014      	b.n	800c532 <_vfiprintf_r+0x156>
 800c508:	eba0 0308 	sub.w	r3, r0, r8
 800c50c:	fa09 f303 	lsl.w	r3, r9, r3
 800c510:	4313      	orrs	r3, r2
 800c512:	9304      	str	r3, [sp, #16]
 800c514:	46a2      	mov	sl, r4
 800c516:	e7d2      	b.n	800c4be <_vfiprintf_r+0xe2>
 800c518:	9b03      	ldr	r3, [sp, #12]
 800c51a:	1d19      	adds	r1, r3, #4
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	9103      	str	r1, [sp, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	bfbb      	ittet	lt
 800c524:	425b      	neglt	r3, r3
 800c526:	f042 0202 	orrlt.w	r2, r2, #2
 800c52a:	9307      	strge	r3, [sp, #28]
 800c52c:	9307      	strlt	r3, [sp, #28]
 800c52e:	bfb8      	it	lt
 800c530:	9204      	strlt	r2, [sp, #16]
 800c532:	7823      	ldrb	r3, [r4, #0]
 800c534:	2b2e      	cmp	r3, #46	; 0x2e
 800c536:	d10c      	bne.n	800c552 <_vfiprintf_r+0x176>
 800c538:	7863      	ldrb	r3, [r4, #1]
 800c53a:	2b2a      	cmp	r3, #42	; 0x2a
 800c53c:	d135      	bne.n	800c5aa <_vfiprintf_r+0x1ce>
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	1d1a      	adds	r2, r3, #4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	9203      	str	r2, [sp, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfb8      	it	lt
 800c54a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c54e:	3402      	adds	r4, #2
 800c550:	9305      	str	r3, [sp, #20]
 800c552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c638 <_vfiprintf_r+0x25c>
 800c556:	7821      	ldrb	r1, [r4, #0]
 800c558:	2203      	movs	r2, #3
 800c55a:	4650      	mov	r0, sl
 800c55c:	f7f3 fe50 	bl	8000200 <memchr>
 800c560:	b140      	cbz	r0, 800c574 <_vfiprintf_r+0x198>
 800c562:	2340      	movs	r3, #64	; 0x40
 800c564:	eba0 000a 	sub.w	r0, r0, sl
 800c568:	fa03 f000 	lsl.w	r0, r3, r0
 800c56c:	9b04      	ldr	r3, [sp, #16]
 800c56e:	4303      	orrs	r3, r0
 800c570:	3401      	adds	r4, #1
 800c572:	9304      	str	r3, [sp, #16]
 800c574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c578:	482c      	ldr	r0, [pc, #176]	; (800c62c <_vfiprintf_r+0x250>)
 800c57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c57e:	2206      	movs	r2, #6
 800c580:	f7f3 fe3e 	bl	8000200 <memchr>
 800c584:	2800      	cmp	r0, #0
 800c586:	d03f      	beq.n	800c608 <_vfiprintf_r+0x22c>
 800c588:	4b29      	ldr	r3, [pc, #164]	; (800c630 <_vfiprintf_r+0x254>)
 800c58a:	bb1b      	cbnz	r3, 800c5d4 <_vfiprintf_r+0x1f8>
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	3307      	adds	r3, #7
 800c590:	f023 0307 	bic.w	r3, r3, #7
 800c594:	3308      	adds	r3, #8
 800c596:	9303      	str	r3, [sp, #12]
 800c598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c59a:	443b      	add	r3, r7
 800c59c:	9309      	str	r3, [sp, #36]	; 0x24
 800c59e:	e767      	b.n	800c470 <_vfiprintf_r+0x94>
 800c5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5a4:	460c      	mov	r4, r1
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	e7a5      	b.n	800c4f6 <_vfiprintf_r+0x11a>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	3401      	adds	r4, #1
 800c5ae:	9305      	str	r3, [sp, #20]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	f04f 0c0a 	mov.w	ip, #10
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5bc:	3a30      	subs	r2, #48	; 0x30
 800c5be:	2a09      	cmp	r2, #9
 800c5c0:	d903      	bls.n	800c5ca <_vfiprintf_r+0x1ee>
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0c5      	beq.n	800c552 <_vfiprintf_r+0x176>
 800c5c6:	9105      	str	r1, [sp, #20]
 800c5c8:	e7c3      	b.n	800c552 <_vfiprintf_r+0x176>
 800c5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e7f0      	b.n	800c5b6 <_vfiprintf_r+0x1da>
 800c5d4:	ab03      	add	r3, sp, #12
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	462a      	mov	r2, r5
 800c5da:	4b16      	ldr	r3, [pc, #88]	; (800c634 <_vfiprintf_r+0x258>)
 800c5dc:	a904      	add	r1, sp, #16
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7fb fb20 	bl	8007c24 <_printf_float>
 800c5e4:	4607      	mov	r7, r0
 800c5e6:	1c78      	adds	r0, r7, #1
 800c5e8:	d1d6      	bne.n	800c598 <_vfiprintf_r+0x1bc>
 800c5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ec:	07d9      	lsls	r1, r3, #31
 800c5ee:	d405      	bmi.n	800c5fc <_vfiprintf_r+0x220>
 800c5f0:	89ab      	ldrh	r3, [r5, #12]
 800c5f2:	059a      	lsls	r2, r3, #22
 800c5f4:	d402      	bmi.n	800c5fc <_vfiprintf_r+0x220>
 800c5f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5f8:	f7fe fd4c 	bl	800b094 <__retarget_lock_release_recursive>
 800c5fc:	89ab      	ldrh	r3, [r5, #12]
 800c5fe:	065b      	lsls	r3, r3, #25
 800c600:	f53f af12 	bmi.w	800c428 <_vfiprintf_r+0x4c>
 800c604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c606:	e711      	b.n	800c42c <_vfiprintf_r+0x50>
 800c608:	ab03      	add	r3, sp, #12
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	462a      	mov	r2, r5
 800c60e:	4b09      	ldr	r3, [pc, #36]	; (800c634 <_vfiprintf_r+0x258>)
 800c610:	a904      	add	r1, sp, #16
 800c612:	4630      	mov	r0, r6
 800c614:	f7fb fdaa 	bl	800816c <_printf_i>
 800c618:	e7e4      	b.n	800c5e4 <_vfiprintf_r+0x208>
 800c61a:	bf00      	nop
 800c61c:	0800d144 	.word	0x0800d144
 800c620:	0800d164 	.word	0x0800d164
 800c624:	0800d124 	.word	0x0800d124
 800c628:	0800d35c 	.word	0x0800d35c
 800c62c:	0800d366 	.word	0x0800d366
 800c630:	08007c25 	.word	0x08007c25
 800c634:	0800c3b7 	.word	0x0800c3b7
 800c638:	0800d362 	.word	0x0800d362

0800c63c <_scanf_chars>:
 800c63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c640:	4615      	mov	r5, r2
 800c642:	688a      	ldr	r2, [r1, #8]
 800c644:	4680      	mov	r8, r0
 800c646:	460c      	mov	r4, r1
 800c648:	b932      	cbnz	r2, 800c658 <_scanf_chars+0x1c>
 800c64a:	698a      	ldr	r2, [r1, #24]
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	bf0c      	ite	eq
 800c650:	2201      	moveq	r2, #1
 800c652:	f04f 32ff 	movne.w	r2, #4294967295
 800c656:	608a      	str	r2, [r1, #8]
 800c658:	6822      	ldr	r2, [r4, #0]
 800c65a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c6ec <_scanf_chars+0xb0>
 800c65e:	06d1      	lsls	r1, r2, #27
 800c660:	bf5f      	itttt	pl
 800c662:	681a      	ldrpl	r2, [r3, #0]
 800c664:	1d11      	addpl	r1, r2, #4
 800c666:	6019      	strpl	r1, [r3, #0]
 800c668:	6816      	ldrpl	r6, [r2, #0]
 800c66a:	2700      	movs	r7, #0
 800c66c:	69a0      	ldr	r0, [r4, #24]
 800c66e:	b188      	cbz	r0, 800c694 <_scanf_chars+0x58>
 800c670:	2801      	cmp	r0, #1
 800c672:	d107      	bne.n	800c684 <_scanf_chars+0x48>
 800c674:	682a      	ldr	r2, [r5, #0]
 800c676:	7811      	ldrb	r1, [r2, #0]
 800c678:	6962      	ldr	r2, [r4, #20]
 800c67a:	5c52      	ldrb	r2, [r2, r1]
 800c67c:	b952      	cbnz	r2, 800c694 <_scanf_chars+0x58>
 800c67e:	2f00      	cmp	r7, #0
 800c680:	d031      	beq.n	800c6e6 <_scanf_chars+0xaa>
 800c682:	e022      	b.n	800c6ca <_scanf_chars+0x8e>
 800c684:	2802      	cmp	r0, #2
 800c686:	d120      	bne.n	800c6ca <_scanf_chars+0x8e>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c690:	071b      	lsls	r3, r3, #28
 800c692:	d41a      	bmi.n	800c6ca <_scanf_chars+0x8e>
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	06da      	lsls	r2, r3, #27
 800c698:	bf5e      	ittt	pl
 800c69a:	682b      	ldrpl	r3, [r5, #0]
 800c69c:	781b      	ldrbpl	r3, [r3, #0]
 800c69e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c6a2:	682a      	ldr	r2, [r5, #0]
 800c6a4:	686b      	ldr	r3, [r5, #4]
 800c6a6:	3201      	adds	r2, #1
 800c6a8:	602a      	str	r2, [r5, #0]
 800c6aa:	68a2      	ldr	r2, [r4, #8]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	3a01      	subs	r2, #1
 800c6b0:	606b      	str	r3, [r5, #4]
 800c6b2:	3701      	adds	r7, #1
 800c6b4:	60a2      	str	r2, [r4, #8]
 800c6b6:	b142      	cbz	r2, 800c6ca <_scanf_chars+0x8e>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	dcd7      	bgt.n	800c66c <_scanf_chars+0x30>
 800c6bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	4798      	blx	r3
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d0d0      	beq.n	800c66c <_scanf_chars+0x30>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	f013 0310 	ands.w	r3, r3, #16
 800c6d0:	d105      	bne.n	800c6de <_scanf_chars+0xa2>
 800c6d2:	68e2      	ldr	r2, [r4, #12]
 800c6d4:	3201      	adds	r2, #1
 800c6d6:	60e2      	str	r2, [r4, #12]
 800c6d8:	69a2      	ldr	r2, [r4, #24]
 800c6da:	b102      	cbz	r2, 800c6de <_scanf_chars+0xa2>
 800c6dc:	7033      	strb	r3, [r6, #0]
 800c6de:	6923      	ldr	r3, [r4, #16]
 800c6e0:	443b      	add	r3, r7
 800c6e2:	6123      	str	r3, [r4, #16]
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ea:	bf00      	nop
 800c6ec:	0800cf91 	.word	0x0800cf91

0800c6f0 <_scanf_i>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	4698      	mov	r8, r3
 800c6f6:	4b76      	ldr	r3, [pc, #472]	; (800c8d0 <_scanf_i+0x1e0>)
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	4682      	mov	sl, r0
 800c6fc:	4616      	mov	r6, r2
 800c6fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c702:	b087      	sub	sp, #28
 800c704:	ab03      	add	r3, sp, #12
 800c706:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c70a:	4b72      	ldr	r3, [pc, #456]	; (800c8d4 <_scanf_i+0x1e4>)
 800c70c:	69a1      	ldr	r1, [r4, #24]
 800c70e:	4a72      	ldr	r2, [pc, #456]	; (800c8d8 <_scanf_i+0x1e8>)
 800c710:	2903      	cmp	r1, #3
 800c712:	bf18      	it	ne
 800c714:	461a      	movne	r2, r3
 800c716:	68a3      	ldr	r3, [r4, #8]
 800c718:	9201      	str	r2, [sp, #4]
 800c71a:	1e5a      	subs	r2, r3, #1
 800c71c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c720:	bf88      	it	hi
 800c722:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c726:	4627      	mov	r7, r4
 800c728:	bf82      	ittt	hi
 800c72a:	eb03 0905 	addhi.w	r9, r3, r5
 800c72e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c732:	60a3      	strhi	r3, [r4, #8]
 800c734:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c738:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c73c:	bf98      	it	ls
 800c73e:	f04f 0900 	movls.w	r9, #0
 800c742:	6023      	str	r3, [r4, #0]
 800c744:	463d      	mov	r5, r7
 800c746:	f04f 0b00 	mov.w	fp, #0
 800c74a:	6831      	ldr	r1, [r6, #0]
 800c74c:	ab03      	add	r3, sp, #12
 800c74e:	7809      	ldrb	r1, [r1, #0]
 800c750:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c754:	2202      	movs	r2, #2
 800c756:	f7f3 fd53 	bl	8000200 <memchr>
 800c75a:	b328      	cbz	r0, 800c7a8 <_scanf_i+0xb8>
 800c75c:	f1bb 0f01 	cmp.w	fp, #1
 800c760:	d159      	bne.n	800c816 <_scanf_i+0x126>
 800c762:	6862      	ldr	r2, [r4, #4]
 800c764:	b92a      	cbnz	r2, 800c772 <_scanf_i+0x82>
 800c766:	6822      	ldr	r2, [r4, #0]
 800c768:	2308      	movs	r3, #8
 800c76a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c76e:	6063      	str	r3, [r4, #4]
 800c770:	6022      	str	r2, [r4, #0]
 800c772:	6822      	ldr	r2, [r4, #0]
 800c774:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c778:	6022      	str	r2, [r4, #0]
 800c77a:	68a2      	ldr	r2, [r4, #8]
 800c77c:	1e51      	subs	r1, r2, #1
 800c77e:	60a1      	str	r1, [r4, #8]
 800c780:	b192      	cbz	r2, 800c7a8 <_scanf_i+0xb8>
 800c782:	6832      	ldr	r2, [r6, #0]
 800c784:	1c51      	adds	r1, r2, #1
 800c786:	6031      	str	r1, [r6, #0]
 800c788:	7812      	ldrb	r2, [r2, #0]
 800c78a:	f805 2b01 	strb.w	r2, [r5], #1
 800c78e:	6872      	ldr	r2, [r6, #4]
 800c790:	3a01      	subs	r2, #1
 800c792:	2a00      	cmp	r2, #0
 800c794:	6072      	str	r2, [r6, #4]
 800c796:	dc07      	bgt.n	800c7a8 <_scanf_i+0xb8>
 800c798:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c79c:	4631      	mov	r1, r6
 800c79e:	4650      	mov	r0, sl
 800c7a0:	4790      	blx	r2
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	f040 8085 	bne.w	800c8b2 <_scanf_i+0x1c2>
 800c7a8:	f10b 0b01 	add.w	fp, fp, #1
 800c7ac:	f1bb 0f03 	cmp.w	fp, #3
 800c7b0:	d1cb      	bne.n	800c74a <_scanf_i+0x5a>
 800c7b2:	6863      	ldr	r3, [r4, #4]
 800c7b4:	b90b      	cbnz	r3, 800c7ba <_scanf_i+0xca>
 800c7b6:	230a      	movs	r3, #10
 800c7b8:	6063      	str	r3, [r4, #4]
 800c7ba:	6863      	ldr	r3, [r4, #4]
 800c7bc:	4947      	ldr	r1, [pc, #284]	; (800c8dc <_scanf_i+0x1ec>)
 800c7be:	6960      	ldr	r0, [r4, #20]
 800c7c0:	1ac9      	subs	r1, r1, r3
 800c7c2:	f000 f8b9 	bl	800c938 <__sccl>
 800c7c6:	f04f 0b00 	mov.w	fp, #0
 800c7ca:	68a3      	ldr	r3, [r4, #8]
 800c7cc:	6822      	ldr	r2, [r4, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d03d      	beq.n	800c84e <_scanf_i+0x15e>
 800c7d2:	6831      	ldr	r1, [r6, #0]
 800c7d4:	6960      	ldr	r0, [r4, #20]
 800c7d6:	f891 c000 	ldrb.w	ip, [r1]
 800c7da:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d035      	beq.n	800c84e <_scanf_i+0x15e>
 800c7e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c7e6:	d124      	bne.n	800c832 <_scanf_i+0x142>
 800c7e8:	0510      	lsls	r0, r2, #20
 800c7ea:	d522      	bpl.n	800c832 <_scanf_i+0x142>
 800c7ec:	f10b 0b01 	add.w	fp, fp, #1
 800c7f0:	f1b9 0f00 	cmp.w	r9, #0
 800c7f4:	d003      	beq.n	800c7fe <_scanf_i+0x10e>
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	f109 39ff 	add.w	r9, r9, #4294967295
 800c7fc:	60a3      	str	r3, [r4, #8]
 800c7fe:	6873      	ldr	r3, [r6, #4]
 800c800:	3b01      	subs	r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	6073      	str	r3, [r6, #4]
 800c806:	dd1b      	ble.n	800c840 <_scanf_i+0x150>
 800c808:	6833      	ldr	r3, [r6, #0]
 800c80a:	3301      	adds	r3, #1
 800c80c:	6033      	str	r3, [r6, #0]
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	3b01      	subs	r3, #1
 800c812:	60a3      	str	r3, [r4, #8]
 800c814:	e7d9      	b.n	800c7ca <_scanf_i+0xda>
 800c816:	f1bb 0f02 	cmp.w	fp, #2
 800c81a:	d1ae      	bne.n	800c77a <_scanf_i+0x8a>
 800c81c:	6822      	ldr	r2, [r4, #0]
 800c81e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c822:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c826:	d1bf      	bne.n	800c7a8 <_scanf_i+0xb8>
 800c828:	2310      	movs	r3, #16
 800c82a:	6063      	str	r3, [r4, #4]
 800c82c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c830:	e7a2      	b.n	800c778 <_scanf_i+0x88>
 800c832:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c836:	6022      	str	r2, [r4, #0]
 800c838:	780b      	ldrb	r3, [r1, #0]
 800c83a:	f805 3b01 	strb.w	r3, [r5], #1
 800c83e:	e7de      	b.n	800c7fe <_scanf_i+0x10e>
 800c840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c844:	4631      	mov	r1, r6
 800c846:	4650      	mov	r0, sl
 800c848:	4798      	blx	r3
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d0df      	beq.n	800c80e <_scanf_i+0x11e>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	05db      	lsls	r3, r3, #23
 800c852:	d50d      	bpl.n	800c870 <_scanf_i+0x180>
 800c854:	42bd      	cmp	r5, r7
 800c856:	d909      	bls.n	800c86c <_scanf_i+0x17c>
 800c858:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c85c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c860:	4632      	mov	r2, r6
 800c862:	4650      	mov	r0, sl
 800c864:	4798      	blx	r3
 800c866:	f105 39ff 	add.w	r9, r5, #4294967295
 800c86a:	464d      	mov	r5, r9
 800c86c:	42bd      	cmp	r5, r7
 800c86e:	d02d      	beq.n	800c8cc <_scanf_i+0x1dc>
 800c870:	6822      	ldr	r2, [r4, #0]
 800c872:	f012 0210 	ands.w	r2, r2, #16
 800c876:	d113      	bne.n	800c8a0 <_scanf_i+0x1b0>
 800c878:	702a      	strb	r2, [r5, #0]
 800c87a:	6863      	ldr	r3, [r4, #4]
 800c87c:	9e01      	ldr	r6, [sp, #4]
 800c87e:	4639      	mov	r1, r7
 800c880:	4650      	mov	r0, sl
 800c882:	47b0      	blx	r6
 800c884:	6821      	ldr	r1, [r4, #0]
 800c886:	f8d8 3000 	ldr.w	r3, [r8]
 800c88a:	f011 0f20 	tst.w	r1, #32
 800c88e:	d013      	beq.n	800c8b8 <_scanf_i+0x1c8>
 800c890:	1d1a      	adds	r2, r3, #4
 800c892:	f8c8 2000 	str.w	r2, [r8]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6018      	str	r0, [r3, #0]
 800c89a:	68e3      	ldr	r3, [r4, #12]
 800c89c:	3301      	adds	r3, #1
 800c89e:	60e3      	str	r3, [r4, #12]
 800c8a0:	1bed      	subs	r5, r5, r7
 800c8a2:	44ab      	add	fp, r5
 800c8a4:	6925      	ldr	r5, [r4, #16]
 800c8a6:	445d      	add	r5, fp
 800c8a8:	6125      	str	r5, [r4, #16]
 800c8aa:	2000      	movs	r0, #0
 800c8ac:	b007      	add	sp, #28
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	f04f 0b00 	mov.w	fp, #0
 800c8b6:	e7ca      	b.n	800c84e <_scanf_i+0x15e>
 800c8b8:	1d1a      	adds	r2, r3, #4
 800c8ba:	f8c8 2000 	str.w	r2, [r8]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f011 0f01 	tst.w	r1, #1
 800c8c4:	bf14      	ite	ne
 800c8c6:	8018      	strhne	r0, [r3, #0]
 800c8c8:	6018      	streq	r0, [r3, #0]
 800c8ca:	e7e6      	b.n	800c89a <_scanf_i+0x1aa>
 800c8cc:	2001      	movs	r0, #1
 800c8ce:	e7ed      	b.n	800c8ac <_scanf_i+0x1bc>
 800c8d0:	0800ceac 	.word	0x0800ceac
 800c8d4:	0800cab5 	.word	0x0800cab5
 800c8d8:	0800977d 	.word	0x0800977d
 800c8dc:	0800d386 	.word	0x0800d386

0800c8e0 <_read_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d07      	ldr	r5, [pc, #28]	; (800c900 <_read_r+0x20>)
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	4608      	mov	r0, r1
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	602a      	str	r2, [r5, #0]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f7f5 f800 	bl	80018f4 <_read>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_read_r+0x1e>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_read_r+0x1e>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	20000804 	.word	0x20000804
 800c904:	00000000 	.word	0x00000000

0800c908 <nan>:
 800c908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c910 <nan+0x8>
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	00000000 	.word	0x00000000
 800c914:	7ff80000 	.word	0x7ff80000

0800c918 <_sbrk_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d06      	ldr	r5, [pc, #24]	; (800c934 <_sbrk_r+0x1c>)
 800c91c:	2300      	movs	r3, #0
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	f7f5 f854 	bl	80019d0 <_sbrk>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_sbrk_r+0x1a>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_sbrk_r+0x1a>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	20000804 	.word	0x20000804

0800c938 <__sccl>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	780b      	ldrb	r3, [r1, #0]
 800c93c:	4604      	mov	r4, r0
 800c93e:	2b5e      	cmp	r3, #94	; 0x5e
 800c940:	bf0b      	itete	eq
 800c942:	784b      	ldrbeq	r3, [r1, #1]
 800c944:	1c48      	addne	r0, r1, #1
 800c946:	1c88      	addeq	r0, r1, #2
 800c948:	2200      	movne	r2, #0
 800c94a:	bf08      	it	eq
 800c94c:	2201      	moveq	r2, #1
 800c94e:	1e61      	subs	r1, r4, #1
 800c950:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c954:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c958:	42a9      	cmp	r1, r5
 800c95a:	d1fb      	bne.n	800c954 <__sccl+0x1c>
 800c95c:	b90b      	cbnz	r3, 800c962 <__sccl+0x2a>
 800c95e:	3801      	subs	r0, #1
 800c960:	bd70      	pop	{r4, r5, r6, pc}
 800c962:	f082 0201 	eor.w	r2, r2, #1
 800c966:	54e2      	strb	r2, [r4, r3]
 800c968:	4605      	mov	r5, r0
 800c96a:	4628      	mov	r0, r5
 800c96c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c970:	292d      	cmp	r1, #45	; 0x2d
 800c972:	d006      	beq.n	800c982 <__sccl+0x4a>
 800c974:	295d      	cmp	r1, #93	; 0x5d
 800c976:	d0f3      	beq.n	800c960 <__sccl+0x28>
 800c978:	b909      	cbnz	r1, 800c97e <__sccl+0x46>
 800c97a:	4628      	mov	r0, r5
 800c97c:	e7f0      	b.n	800c960 <__sccl+0x28>
 800c97e:	460b      	mov	r3, r1
 800c980:	e7f1      	b.n	800c966 <__sccl+0x2e>
 800c982:	786e      	ldrb	r6, [r5, #1]
 800c984:	2e5d      	cmp	r6, #93	; 0x5d
 800c986:	d0fa      	beq.n	800c97e <__sccl+0x46>
 800c988:	42b3      	cmp	r3, r6
 800c98a:	dcf8      	bgt.n	800c97e <__sccl+0x46>
 800c98c:	3502      	adds	r5, #2
 800c98e:	4619      	mov	r1, r3
 800c990:	3101      	adds	r1, #1
 800c992:	428e      	cmp	r6, r1
 800c994:	5462      	strb	r2, [r4, r1]
 800c996:	dcfb      	bgt.n	800c990 <__sccl+0x58>
 800c998:	1af1      	subs	r1, r6, r3
 800c99a:	3901      	subs	r1, #1
 800c99c:	1c58      	adds	r0, r3, #1
 800c99e:	42b3      	cmp	r3, r6
 800c9a0:	bfa8      	it	ge
 800c9a2:	2100      	movge	r1, #0
 800c9a4:	1843      	adds	r3, r0, r1
 800c9a6:	e7e0      	b.n	800c96a <__sccl+0x32>

0800c9a8 <strncmp>:
 800c9a8:	b510      	push	{r4, lr}
 800c9aa:	b17a      	cbz	r2, 800c9cc <strncmp+0x24>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	3901      	subs	r1, #1
 800c9b0:	1884      	adds	r4, r0, r2
 800c9b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9ba:	4290      	cmp	r0, r2
 800c9bc:	d101      	bne.n	800c9c2 <strncmp+0x1a>
 800c9be:	42a3      	cmp	r3, r4
 800c9c0:	d101      	bne.n	800c9c6 <strncmp+0x1e>
 800c9c2:	1a80      	subs	r0, r0, r2
 800c9c4:	bd10      	pop	{r4, pc}
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d1f3      	bne.n	800c9b2 <strncmp+0xa>
 800c9ca:	e7fa      	b.n	800c9c2 <strncmp+0x1a>
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	e7f9      	b.n	800c9c4 <strncmp+0x1c>

0800c9d0 <_strtoul_l.constprop.0>:
 800c9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9d4:	4f36      	ldr	r7, [pc, #216]	; (800cab0 <_strtoul_l.constprop.0+0xe0>)
 800c9d6:	4686      	mov	lr, r0
 800c9d8:	460d      	mov	r5, r1
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9e0:	5de6      	ldrb	r6, [r4, r7]
 800c9e2:	f016 0608 	ands.w	r6, r6, #8
 800c9e6:	d1f8      	bne.n	800c9da <_strtoul_l.constprop.0+0xa>
 800c9e8:	2c2d      	cmp	r4, #45	; 0x2d
 800c9ea:	d12f      	bne.n	800ca4c <_strtoul_l.constprop.0+0x7c>
 800c9ec:	782c      	ldrb	r4, [r5, #0]
 800c9ee:	2601      	movs	r6, #1
 800c9f0:	1c85      	adds	r5, r0, #2
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d057      	beq.n	800caa6 <_strtoul_l.constprop.0+0xd6>
 800c9f6:	2b10      	cmp	r3, #16
 800c9f8:	d109      	bne.n	800ca0e <_strtoul_l.constprop.0+0x3e>
 800c9fa:	2c30      	cmp	r4, #48	; 0x30
 800c9fc:	d107      	bne.n	800ca0e <_strtoul_l.constprop.0+0x3e>
 800c9fe:	7828      	ldrb	r0, [r5, #0]
 800ca00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ca04:	2858      	cmp	r0, #88	; 0x58
 800ca06:	d149      	bne.n	800ca9c <_strtoul_l.constprop.0+0xcc>
 800ca08:	786c      	ldrb	r4, [r5, #1]
 800ca0a:	2310      	movs	r3, #16
 800ca0c:	3502      	adds	r5, #2
 800ca0e:	f04f 38ff 	mov.w	r8, #4294967295
 800ca12:	2700      	movs	r7, #0
 800ca14:	fbb8 f8f3 	udiv	r8, r8, r3
 800ca18:	fb03 f908 	mul.w	r9, r3, r8
 800ca1c:	ea6f 0909 	mvn.w	r9, r9
 800ca20:	4638      	mov	r0, r7
 800ca22:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca26:	f1bc 0f09 	cmp.w	ip, #9
 800ca2a:	d814      	bhi.n	800ca56 <_strtoul_l.constprop.0+0x86>
 800ca2c:	4664      	mov	r4, ip
 800ca2e:	42a3      	cmp	r3, r4
 800ca30:	dd22      	ble.n	800ca78 <_strtoul_l.constprop.0+0xa8>
 800ca32:	2f00      	cmp	r7, #0
 800ca34:	db1d      	blt.n	800ca72 <_strtoul_l.constprop.0+0xa2>
 800ca36:	4580      	cmp	r8, r0
 800ca38:	d31b      	bcc.n	800ca72 <_strtoul_l.constprop.0+0xa2>
 800ca3a:	d101      	bne.n	800ca40 <_strtoul_l.constprop.0+0x70>
 800ca3c:	45a1      	cmp	r9, r4
 800ca3e:	db18      	blt.n	800ca72 <_strtoul_l.constprop.0+0xa2>
 800ca40:	fb00 4003 	mla	r0, r0, r3, r4
 800ca44:	2701      	movs	r7, #1
 800ca46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca4a:	e7ea      	b.n	800ca22 <_strtoul_l.constprop.0+0x52>
 800ca4c:	2c2b      	cmp	r4, #43	; 0x2b
 800ca4e:	bf04      	itt	eq
 800ca50:	782c      	ldrbeq	r4, [r5, #0]
 800ca52:	1c85      	addeq	r5, r0, #2
 800ca54:	e7cd      	b.n	800c9f2 <_strtoul_l.constprop.0+0x22>
 800ca56:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca5a:	f1bc 0f19 	cmp.w	ip, #25
 800ca5e:	d801      	bhi.n	800ca64 <_strtoul_l.constprop.0+0x94>
 800ca60:	3c37      	subs	r4, #55	; 0x37
 800ca62:	e7e4      	b.n	800ca2e <_strtoul_l.constprop.0+0x5e>
 800ca64:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ca68:	f1bc 0f19 	cmp.w	ip, #25
 800ca6c:	d804      	bhi.n	800ca78 <_strtoul_l.constprop.0+0xa8>
 800ca6e:	3c57      	subs	r4, #87	; 0x57
 800ca70:	e7dd      	b.n	800ca2e <_strtoul_l.constprop.0+0x5e>
 800ca72:	f04f 37ff 	mov.w	r7, #4294967295
 800ca76:	e7e6      	b.n	800ca46 <_strtoul_l.constprop.0+0x76>
 800ca78:	2f00      	cmp	r7, #0
 800ca7a:	da07      	bge.n	800ca8c <_strtoul_l.constprop.0+0xbc>
 800ca7c:	2322      	movs	r3, #34	; 0x22
 800ca7e:	f8ce 3000 	str.w	r3, [lr]
 800ca82:	f04f 30ff 	mov.w	r0, #4294967295
 800ca86:	b932      	cbnz	r2, 800ca96 <_strtoul_l.constprop.0+0xc6>
 800ca88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca8c:	b106      	cbz	r6, 800ca90 <_strtoul_l.constprop.0+0xc0>
 800ca8e:	4240      	negs	r0, r0
 800ca90:	2a00      	cmp	r2, #0
 800ca92:	d0f9      	beq.n	800ca88 <_strtoul_l.constprop.0+0xb8>
 800ca94:	b107      	cbz	r7, 800ca98 <_strtoul_l.constprop.0+0xc8>
 800ca96:	1e69      	subs	r1, r5, #1
 800ca98:	6011      	str	r1, [r2, #0]
 800ca9a:	e7f5      	b.n	800ca88 <_strtoul_l.constprop.0+0xb8>
 800ca9c:	2430      	movs	r4, #48	; 0x30
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1b5      	bne.n	800ca0e <_strtoul_l.constprop.0+0x3e>
 800caa2:	2308      	movs	r3, #8
 800caa4:	e7b3      	b.n	800ca0e <_strtoul_l.constprop.0+0x3e>
 800caa6:	2c30      	cmp	r4, #48	; 0x30
 800caa8:	d0a9      	beq.n	800c9fe <_strtoul_l.constprop.0+0x2e>
 800caaa:	230a      	movs	r3, #10
 800caac:	e7af      	b.n	800ca0e <_strtoul_l.constprop.0+0x3e>
 800caae:	bf00      	nop
 800cab0:	0800cf91 	.word	0x0800cf91

0800cab4 <_strtoul_r>:
 800cab4:	f7ff bf8c 	b.w	800c9d0 <_strtoul_l.constprop.0>

0800cab8 <__submore>:
 800cab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabc:	460c      	mov	r4, r1
 800cabe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cac4:	4299      	cmp	r1, r3
 800cac6:	d11d      	bne.n	800cb04 <__submore+0x4c>
 800cac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cacc:	f7ff f8ba 	bl	800bc44 <_malloc_r>
 800cad0:	b918      	cbnz	r0, 800cada <__submore+0x22>
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cade:	63a3      	str	r3, [r4, #56]	; 0x38
 800cae0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cae4:	6360      	str	r0, [r4, #52]	; 0x34
 800cae6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800caea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800caee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800caf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800caf6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cafa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cafe:	6020      	str	r0, [r4, #0]
 800cb00:	2000      	movs	r0, #0
 800cb02:	e7e8      	b.n	800cad6 <__submore+0x1e>
 800cb04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cb06:	0077      	lsls	r7, r6, #1
 800cb08:	463a      	mov	r2, r7
 800cb0a:	f000 f895 	bl	800cc38 <_realloc_r>
 800cb0e:	4605      	mov	r5, r0
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d0de      	beq.n	800cad2 <__submore+0x1a>
 800cb14:	eb00 0806 	add.w	r8, r0, r6
 800cb18:	4601      	mov	r1, r0
 800cb1a:	4632      	mov	r2, r6
 800cb1c:	4640      	mov	r0, r8
 800cb1e:	f7fa ffcb 	bl	8007ab8 <memcpy>
 800cb22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cb26:	f8c4 8000 	str.w	r8, [r4]
 800cb2a:	e7e9      	b.n	800cb00 <__submore+0x48>

0800cb2c <__ascii_wctomb>:
 800cb2c:	b149      	cbz	r1, 800cb42 <__ascii_wctomb+0x16>
 800cb2e:	2aff      	cmp	r2, #255	; 0xff
 800cb30:	bf85      	ittet	hi
 800cb32:	238a      	movhi	r3, #138	; 0x8a
 800cb34:	6003      	strhi	r3, [r0, #0]
 800cb36:	700a      	strbls	r2, [r1, #0]
 800cb38:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb3c:	bf98      	it	ls
 800cb3e:	2001      	movls	r0, #1
 800cb40:	4770      	bx	lr
 800cb42:	4608      	mov	r0, r1
 800cb44:	4770      	bx	lr
	...

0800cb48 <__assert_func>:
 800cb48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb4a:	4614      	mov	r4, r2
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <__assert_func+0x2c>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4605      	mov	r5, r0
 800cb54:	68d8      	ldr	r0, [r3, #12]
 800cb56:	b14c      	cbz	r4, 800cb6c <__assert_func+0x24>
 800cb58:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <__assert_func+0x30>)
 800cb5a:	9100      	str	r1, [sp, #0]
 800cb5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb60:	4906      	ldr	r1, [pc, #24]	; (800cb7c <__assert_func+0x34>)
 800cb62:	462b      	mov	r3, r5
 800cb64:	f000 f80e 	bl	800cb84 <fiprintf>
 800cb68:	f000 f895 	bl	800cc96 <abort>
 800cb6c:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <__assert_func+0x38>)
 800cb6e:	461c      	mov	r4, r3
 800cb70:	e7f3      	b.n	800cb5a <__assert_func+0x12>
 800cb72:	bf00      	nop
 800cb74:	2000000c 	.word	0x2000000c
 800cb78:	0800d388 	.word	0x0800d388
 800cb7c:	0800d395 	.word	0x0800d395
 800cb80:	0800d3c3 	.word	0x0800d3c3

0800cb84 <fiprintf>:
 800cb84:	b40e      	push	{r1, r2, r3}
 800cb86:	b503      	push	{r0, r1, lr}
 800cb88:	4601      	mov	r1, r0
 800cb8a:	ab03      	add	r3, sp, #12
 800cb8c:	4805      	ldr	r0, [pc, #20]	; (800cba4 <fiprintf+0x20>)
 800cb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb92:	6800      	ldr	r0, [r0, #0]
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	f7ff fc21 	bl	800c3dc <_vfiprintf_r>
 800cb9a:	b002      	add	sp, #8
 800cb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba0:	b003      	add	sp, #12
 800cba2:	4770      	bx	lr
 800cba4:	2000000c 	.word	0x2000000c

0800cba8 <_fstat_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d07      	ldr	r5, [pc, #28]	; (800cbc8 <_fstat_r+0x20>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	602b      	str	r3, [r5, #0]
 800cbb6:	f7f4 fee2 	bl	800197e <_fstat>
 800cbba:	1c43      	adds	r3, r0, #1
 800cbbc:	d102      	bne.n	800cbc4 <_fstat_r+0x1c>
 800cbbe:	682b      	ldr	r3, [r5, #0]
 800cbc0:	b103      	cbz	r3, 800cbc4 <_fstat_r+0x1c>
 800cbc2:	6023      	str	r3, [r4, #0]
 800cbc4:	bd38      	pop	{r3, r4, r5, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20000804 	.word	0x20000804

0800cbcc <_isatty_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d06      	ldr	r5, [pc, #24]	; (800cbe8 <_isatty_r+0x1c>)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	4608      	mov	r0, r1
 800cbd6:	602b      	str	r3, [r5, #0]
 800cbd8:	f7f4 fee1 	bl	800199e <_isatty>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	d102      	bne.n	800cbe6 <_isatty_r+0x1a>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	b103      	cbz	r3, 800cbe6 <_isatty_r+0x1a>
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	20000804 	.word	0x20000804

0800cbec <memmove>:
 800cbec:	4288      	cmp	r0, r1
 800cbee:	b510      	push	{r4, lr}
 800cbf0:	eb01 0402 	add.w	r4, r1, r2
 800cbf4:	d902      	bls.n	800cbfc <memmove+0x10>
 800cbf6:	4284      	cmp	r4, r0
 800cbf8:	4623      	mov	r3, r4
 800cbfa:	d807      	bhi.n	800cc0c <memmove+0x20>
 800cbfc:	1e43      	subs	r3, r0, #1
 800cbfe:	42a1      	cmp	r1, r4
 800cc00:	d008      	beq.n	800cc14 <memmove+0x28>
 800cc02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc0a:	e7f8      	b.n	800cbfe <memmove+0x12>
 800cc0c:	4402      	add	r2, r0
 800cc0e:	4601      	mov	r1, r0
 800cc10:	428a      	cmp	r2, r1
 800cc12:	d100      	bne.n	800cc16 <memmove+0x2a>
 800cc14:	bd10      	pop	{r4, pc}
 800cc16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc1e:	e7f7      	b.n	800cc10 <memmove+0x24>

0800cc20 <__malloc_lock>:
 800cc20:	4801      	ldr	r0, [pc, #4]	; (800cc28 <__malloc_lock+0x8>)
 800cc22:	f7fe ba36 	b.w	800b092 <__retarget_lock_acquire_recursive>
 800cc26:	bf00      	nop
 800cc28:	200007f8 	.word	0x200007f8

0800cc2c <__malloc_unlock>:
 800cc2c:	4801      	ldr	r0, [pc, #4]	; (800cc34 <__malloc_unlock+0x8>)
 800cc2e:	f7fe ba31 	b.w	800b094 <__retarget_lock_release_recursive>
 800cc32:	bf00      	nop
 800cc34:	200007f8 	.word	0x200007f8

0800cc38 <_realloc_r>:
 800cc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3c:	4680      	mov	r8, r0
 800cc3e:	4614      	mov	r4, r2
 800cc40:	460e      	mov	r6, r1
 800cc42:	b921      	cbnz	r1, 800cc4e <_realloc_r+0x16>
 800cc44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc48:	4611      	mov	r1, r2
 800cc4a:	f7fe bffb 	b.w	800bc44 <_malloc_r>
 800cc4e:	b92a      	cbnz	r2, 800cc5c <_realloc_r+0x24>
 800cc50:	f7fe ff8c 	bl	800bb6c <_free_r>
 800cc54:	4625      	mov	r5, r4
 800cc56:	4628      	mov	r0, r5
 800cc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5c:	f000 f822 	bl	800cca4 <_malloc_usable_size_r>
 800cc60:	4284      	cmp	r4, r0
 800cc62:	4607      	mov	r7, r0
 800cc64:	d802      	bhi.n	800cc6c <_realloc_r+0x34>
 800cc66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc6a:	d812      	bhi.n	800cc92 <_realloc_r+0x5a>
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	4640      	mov	r0, r8
 800cc70:	f7fe ffe8 	bl	800bc44 <_malloc_r>
 800cc74:	4605      	mov	r5, r0
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d0ed      	beq.n	800cc56 <_realloc_r+0x1e>
 800cc7a:	42bc      	cmp	r4, r7
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	4631      	mov	r1, r6
 800cc80:	bf28      	it	cs
 800cc82:	463a      	movcs	r2, r7
 800cc84:	f7fa ff18 	bl	8007ab8 <memcpy>
 800cc88:	4631      	mov	r1, r6
 800cc8a:	4640      	mov	r0, r8
 800cc8c:	f7fe ff6e 	bl	800bb6c <_free_r>
 800cc90:	e7e1      	b.n	800cc56 <_realloc_r+0x1e>
 800cc92:	4635      	mov	r5, r6
 800cc94:	e7df      	b.n	800cc56 <_realloc_r+0x1e>

0800cc96 <abort>:
 800cc96:	b508      	push	{r3, lr}
 800cc98:	2006      	movs	r0, #6
 800cc9a:	f000 f833 	bl	800cd04 <raise>
 800cc9e:	2001      	movs	r0, #1
 800cca0:	f7f4 fe1e 	bl	80018e0 <_exit>

0800cca4 <_malloc_usable_size_r>:
 800cca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cca8:	1f18      	subs	r0, r3, #4
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	bfbc      	itt	lt
 800ccae:	580b      	ldrlt	r3, [r1, r0]
 800ccb0:	18c0      	addlt	r0, r0, r3
 800ccb2:	4770      	bx	lr

0800ccb4 <_raise_r>:
 800ccb4:	291f      	cmp	r1, #31
 800ccb6:	b538      	push	{r3, r4, r5, lr}
 800ccb8:	4604      	mov	r4, r0
 800ccba:	460d      	mov	r5, r1
 800ccbc:	d904      	bls.n	800ccc8 <_raise_r+0x14>
 800ccbe:	2316      	movs	r3, #22
 800ccc0:	6003      	str	r3, [r0, #0]
 800ccc2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccca:	b112      	cbz	r2, 800ccd2 <_raise_r+0x1e>
 800cccc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccd0:	b94b      	cbnz	r3, 800cce6 <_raise_r+0x32>
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f000 f830 	bl	800cd38 <_getpid_r>
 800ccd8:	462a      	mov	r2, r5
 800ccda:	4601      	mov	r1, r0
 800ccdc:	4620      	mov	r0, r4
 800ccde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cce2:	f000 b817 	b.w	800cd14 <_kill_r>
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d00a      	beq.n	800cd00 <_raise_r+0x4c>
 800ccea:	1c59      	adds	r1, r3, #1
 800ccec:	d103      	bne.n	800ccf6 <_raise_r+0x42>
 800ccee:	2316      	movs	r3, #22
 800ccf0:	6003      	str	r3, [r0, #0]
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	e7e7      	b.n	800ccc6 <_raise_r+0x12>
 800ccf6:	2400      	movs	r4, #0
 800ccf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	4798      	blx	r3
 800cd00:	2000      	movs	r0, #0
 800cd02:	e7e0      	b.n	800ccc6 <_raise_r+0x12>

0800cd04 <raise>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <raise+0xc>)
 800cd06:	4601      	mov	r1, r0
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	f7ff bfd3 	b.w	800ccb4 <_raise_r>
 800cd0e:	bf00      	nop
 800cd10:	2000000c 	.word	0x2000000c

0800cd14 <_kill_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4d07      	ldr	r5, [pc, #28]	; (800cd34 <_kill_r+0x20>)
 800cd18:	2300      	movs	r3, #0
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	4608      	mov	r0, r1
 800cd1e:	4611      	mov	r1, r2
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	f7f4 fdcd 	bl	80018c0 <_kill>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	d102      	bne.n	800cd30 <_kill_r+0x1c>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	b103      	cbz	r3, 800cd30 <_kill_r+0x1c>
 800cd2e:	6023      	str	r3, [r4, #0]
 800cd30:	bd38      	pop	{r3, r4, r5, pc}
 800cd32:	bf00      	nop
 800cd34:	20000804 	.word	0x20000804

0800cd38 <_getpid_r>:
 800cd38:	f7f4 bdba 	b.w	80018b0 <_getpid>

0800cd3c <_init>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	bf00      	nop
 800cd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd42:	bc08      	pop	{r3}
 800cd44:	469e      	mov	lr, r3
 800cd46:	4770      	bx	lr

0800cd48 <_fini>:
 800cd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4a:	bf00      	nop
 800cd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4e:	bc08      	pop	{r3}
 800cd50:	469e      	mov	lr, r3
 800cd52:	4770      	bx	lr
