
smart-cows-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a258  0800a258  0001a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7bc  0800a7bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c4  0800a7c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  200001e0  0800a9a8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800a9a8  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bcd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003254  00000000  00000000  00036dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a84b  00000000  00000000  0003c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161ee  00000000  00000000  00066b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105043  00000000  00000000  0007cd41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181d84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b54  00000000  00000000  00181dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a23c 	.word	0x0800a23c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a23c 	.word	0x0800a23c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000f90:	4a36      	ldr	r2, [pc, #216]	; (800106c <MX_ADC1_Init+0x100>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f94:	4b34      	ldr	r3, [pc, #208]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b31      	ldr	r3, [pc, #196]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fac:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fae:	2204      	movs	r2, #4
 8000fb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000ff0:	221c      	movs	r2, #28
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_ADC1_Init+0xfc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_ADC1_Init+0xfc>)
 8001004:	2201      	movs	r2, #1
 8001006:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <MX_ADC1_Init+0xfc>)
 800100a:	f001 f883 	bl	8002114 <HAL_ADC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001014:	f000 fb18 	bl	8001648 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4811      	ldr	r0, [pc, #68]	; (8001068 <MX_ADC1_Init+0xfc>)
 8001024:	f002 f8f4 	bl	8003210 <HAL_ADCEx_MultiModeConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800102e:	f000 fb0b 	bl	8001648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_ADC1_Init+0x104>)
 8001034:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001036:	2306      	movs	r3, #6
 8001038:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800103a:	2307      	movs	r3, #7
 800103c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800103e:	237f      	movs	r3, #127	; 0x7f
 8001040:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001042:	2304      	movs	r3, #4
 8001044:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_ADC1_Init+0xfc>)
 8001050:	f001 fb56 	bl	8002700 <HAL_ADC_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800105a:	f000 faf5 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001fc 	.word	0x200001fc
 800106c:	50040000 	.word	0x50040000
 8001070:	04300002 	.word	0x04300002

08001074 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ac      	sub	sp, #176	; 0xb0
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2288      	movs	r2, #136	; 0x88
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f006 fb27 	bl	80076e8 <memset>
  if(adcHandle->Instance==ADC1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a27      	ldr	r2, [pc, #156]	; (800113c <HAL_ADC_MspInit+0xc8>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d146      	bne.n	8001132 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 32;
 80010ba:	2320      	movs	r3, #32
 80010bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010be:	2307      	movs	r3, #7
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fba7 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010e0:	f000 fab2 	bl	8001648 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_ADC_MspInit+0xcc>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_ADC_MspInit+0xcc>)
 80010ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_ADC_MspInit+0xcc>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_ADC_MspInit+0xcc>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_ADC_MspInit+0xcc>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_ADC_MspInit+0xcc>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001114:	2301      	movs	r3, #1
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800111a:	230b      	movs	r3, #11
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_ADC_MspInit+0xd0>)
 800112e:	f002 faaf 	bl	8003690 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	37b0      	adds	r7, #176	; 0xb0
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	50040000 	.word	0x50040000
 8001140:	40021000 	.word	0x40021000
 8001144:	48000800 	.word	0x48000800

08001148 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_GPIO_Init+0x78>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <MX_GPIO_Init+0x78>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_GPIO_Init+0x78>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_GPIO_Init+0x78>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <MX_GPIO_Init+0x78>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_GPIO_Init+0x78>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_POWER_GPIO_Port, GPS_POWER_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2101      	movs	r1, #1
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f002 fc25 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_POWER_Pin;
 800119a:	2301      	movs	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_POWER_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f002 fa6c 	bl	8003690 <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	2201      	movs	r2, #1
 80011d2:	4932      	ldr	r1, [pc, #200]	; (800129c <HAL_UART_RxCpltCallback+0xd8>)
 80011d4:	4832      	ldr	r0, [pc, #200]	; (80012a0 <HAL_UART_RxCpltCallback+0xdc>)
 80011d6:	f004 fa46 	bl	8005666 <HAL_UART_Transmit>

	if (rxData == '\r' || rxData == '\n') {
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_UART_RxCpltCallback+0xd8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b0d      	cmp	r3, #13
 80011e0:	d003      	beq.n	80011ea <HAL_UART_RxCpltCallback+0x26>
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_UART_RxCpltCallback+0xd8>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b0a      	cmp	r3, #10
 80011e8:	d13e      	bne.n	8001268 <HAL_UART_RxCpltCallback+0xa4>
		if(line_length > 0) {
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_UART_RxCpltCallback+0xe0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d04a      	beq.n	8001288 <HAL_UART_RxCpltCallback+0xc4>
			line_buffer[line_length] = '\0';
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <HAL_UART_RxCpltCallback+0xe0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <HAL_UART_RxCpltCallback+0xe4>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	54d1      	strb	r1, [r2, r3]
			if(strcmp(line_buffer, JOIN_ALREADY) == 0) {
 80011fc:	492b      	ldr	r1, [pc, #172]	; (80012ac <HAL_UART_RxCpltCallback+0xe8>)
 80011fe:	482a      	ldr	r0, [pc, #168]	; (80012a8 <HAL_UART_RxCpltCallback+0xe4>)
 8001200:	f7fe ffe6 	bl	80001d0 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d106      	bne.n	8001218 <HAL_UART_RxCpltCallback+0x54>
				connectedToNetwork = true;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_UART_RxCpltCallback+0xec>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
				networkStatusReceived = true;
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_UART_RxCpltCallback+0xf0>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
 8001216:	e023      	b.n	8001260 <HAL_UART_RxCpltCallback+0x9c>
			} else if(strcmp(line_buffer, NETWORK_JOINED) == 0) {
 8001218:	4927      	ldr	r1, [pc, #156]	; (80012b8 <HAL_UART_RxCpltCallback+0xf4>)
 800121a:	4823      	ldr	r0, [pc, #140]	; (80012a8 <HAL_UART_RxCpltCallback+0xe4>)
 800121c:	f7fe ffd8 	bl	80001d0 <strcmp>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <HAL_UART_RxCpltCallback+0x6a>
				connectedToNetwork = true;
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <HAL_UART_RxCpltCallback+0xec>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e018      	b.n	8001260 <HAL_UART_RxCpltCallback+0x9c>
			} else if (strcmp(line_buffer, JOIN_DONE) == 0) {
 800122e:	4923      	ldr	r1, [pc, #140]	; (80012bc <HAL_UART_RxCpltCallback+0xf8>)
 8001230:	481d      	ldr	r0, [pc, #116]	; (80012a8 <HAL_UART_RxCpltCallback+0xe4>)
 8001232:	f7fe ffcd 	bl	80001d0 <strcmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <HAL_UART_RxCpltCallback+0x80>
				networkStatusReceived = true;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_UART_RxCpltCallback+0xf0>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e00d      	b.n	8001260 <HAL_UART_RxCpltCallback+0x9c>
			} else if (strcmp(line_buffer, MSG_DONE) == 0) {
 8001244:	491e      	ldr	r1, [pc, #120]	; (80012c0 <HAL_UART_RxCpltCallback+0xfc>)
 8001246:	4818      	ldr	r0, [pc, #96]	; (80012a8 <HAL_UART_RxCpltCallback+0xe4>)
 8001248:	f7fe ffc2 	bl	80001d0 <strcmp>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <HAL_UART_RxCpltCallback+0x96>
				messageDoneStatusReceived = true;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <HAL_UART_RxCpltCallback+0x100>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	e002      	b.n	8001260 <HAL_UART_RxCpltCallback+0x9c>
			} else {
				configStatusReceived = true;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_UART_RxCpltCallback+0x104>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
			}
			line_length = 0;
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_UART_RxCpltCallback+0xe0>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
		if(line_length > 0) {
 8001266:	e00f      	b.n	8001288 <HAL_UART_RxCpltCallback+0xc4>
		}
	}
	else {
		if(line_length >= LINE_MAX_LENGTH) {
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_UART_RxCpltCallback+0xe0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b3b      	cmp	r3, #59	; 0x3b
 800126e:	d902      	bls.n	8001276 <HAL_UART_RxCpltCallback+0xb2>
			line_length = 0;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_UART_RxCpltCallback+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++] = rxData;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_UART_RxCpltCallback+0xe0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	4909      	ldr	r1, [pc, #36]	; (80012a4 <HAL_UART_RxCpltCallback+0xe0>)
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_UART_RxCpltCallback+0xd8>)
 8001282:	7811      	ldrb	r1, [r2, #0]
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_UART_RxCpltCallback+0xe4>)
 8001286:	54d1      	strb	r1, [r2, r3]
	}

	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	4904      	ldr	r1, [pc, #16]	; (800129c <HAL_UART_RxCpltCallback+0xd8>)
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <HAL_UART_RxCpltCallback+0x108>)
 800128e:	f004 fa7f 	bl	8005790 <HAL_UART_Receive_IT>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000264 	.word	0x20000264
 80012a0:	2000035c 	.word	0x2000035c
 80012a4:	200002a8 	.word	0x200002a8
 80012a8:	20000268 	.word	0x20000268
 80012ac:	0800a258 	.word	0x0800a258
 80012b0:	20000260 	.word	0x20000260
 80012b4:	20000261 	.word	0x20000261
 80012b8:	0800a270 	.word	0x0800a270
 80012bc:	0800a288 	.word	0x0800a288
 80012c0:	0800a294 	.word	0x0800a294
 80012c4:	20000263 	.word	0x20000263
 80012c8:	20000262 	.word	0x20000262
 80012cc:	200002d8 	.word	0x200002d8

080012d0 <HAL_Delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80012d8:	f000 fd06 	bl	8001ce8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

	if(wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d00b      	beq.n	8001302 <HAL_Delay+0x32>
	{
		wait += (uint32_t)uwTickFreq;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_Delay+0x4c>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
	}

	while((HAL_GetTick() - tickstart) < wait)
 80012f6:	e004      	b.n	8001302 <HAL_Delay+0x32>
	{
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80012f8:	2101      	movs	r1, #1
 80012fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012fe:	f002 fb99 	bl	8003a34 <HAL_PWR_EnterSLEEPMode>
	while((HAL_GetTick() - tickstart) < wait)
 8001302:	f000 fcf1 	bl	8001ce8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	429a      	cmp	r2, r3
 8001310:	d8f2      	bhi.n	80012f8 <HAL_Delay+0x28>
	}
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000008 	.word	0x20000008

08001320 <__io_putchar>:

int __io_putchar(int ch)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b0a      	cmp	r3, #10
 800132c:	d109      	bne.n	8001342 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 800132e:	230d      	movs	r3, #13
 8001330:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);	// 1 - lora / 2 - pc
 8001332:	f107 010f 	add.w	r1, r7, #15
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	2201      	movs	r2, #1
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <__io_putchar+0x3c>)
 800133e:	f004 f992 	bl	8005666 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // 1 - lora / 2 - pc
 8001342:	1d39      	adds	r1, r7, #4
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	2201      	movs	r2, #1
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <__io_putchar+0x3c>)
 800134c:	f004 f98b 	bl	8005666 <HAL_UART_Transmit>
	return 1;
 8001350:	2301      	movs	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002d8 	.word	0x200002d8

08001360 <sendConfigMessageToLora>:

void sendConfigMessageToLora(const char* msg)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	configStatusReceived = false;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <sendConfigMessageToLora+0x34>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	printf(msg);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f006 fe2c 	bl	8007fcc <iprintf>
	while(!configStatusReceived){
 8001374:	bf00      	nop
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <sendConfigMessageToLora+0x34>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f8      	bne.n	8001376 <sendConfigMessageToLora+0x16>
	}
	configStatusReceived = false;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <sendConfigMessageToLora+0x34>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000262 	.word	0x20000262

08001398 <sendJoinRequestToLora>:

void sendJoinRequestToLora()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	printf("AT+JOIN\r\n");
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <sendJoinRequestToLora+0x24>)
 800139e:	f006 fe9b 	bl	80080d8 <puts>
	while(!networkStatusReceived){
 80013a2:	bf00      	nop
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <sendJoinRequestToLora+0x28>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f8      	bne.n	80013a4 <sendJoinRequestToLora+0xc>
	}
	networkStatusReceived = false;
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <sendJoinRequestToLora+0x28>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	0800a2a0 	.word	0x0800a2a0
 80013c0:	20000261 	.word	0x20000261

080013c4 <sendToPC>:

void sendToPC(char* str){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7fe ff09 	bl	80001e4 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <sendToPC+0x28>)
 80013de:	f004 f942 	bl	8005666 <HAL_UART_Transmit>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000035c 	.word	0x2000035c

080013f0 <goToDeepSleep>:

void goToDeepSleep() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	  sendConfigMessageToLora("AT+LOWPOWER=AUTOON\r\n");
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <goToDeepSleep+0x28>)
 80013f6:	f7ff ffb3 	bl	8001360 <sendConfigMessageToLora>
	  HAL_Delay(10);
 80013fa:	200a      	movs	r0, #10
 80013fc:	f7ff ff68 	bl	80012d0 <HAL_Delay>
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, TIME_SLEEP, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8001400:	2204      	movs	r2, #4
 8001402:	213c      	movs	r1, #60	; 0x3c
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <goToDeepSleep+0x2c>)
 8001406:	f003 ffed 	bl	80053e4 <HAL_RTCEx_SetWakeUpTimer_IT>
	  sendToPC("STANDBY MODE is ON\n");
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <goToDeepSleep+0x30>)
 800140c:	f7ff ffda 	bl	80013c4 <sendToPC>
	  HAL_PWR_EnterSTANDBYMode();
 8001410:	f002 fb44 	bl	8003a9c <HAL_PWR_EnterSTANDBYMode>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	0800a2ac 	.word	0x0800a2ac
 800141c:	200002b0 	.word	0x200002b0
 8001420:	0800a2c4 	.word	0x0800a2c4

08001424 <connectToLora>:

void connectToLora()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	connectionRequestCounter++;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <connectToLora+0x60>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <connectToLora+0x60>)
 8001430:	6013      	str	r3, [r2, #0]
	sendJoinRequestToLora();
 8001432:	f7ff ffb1 	bl	8001398 <sendJoinRequestToLora>

	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 8001436:	e012      	b.n	800145e <connectToLora+0x3a>
//		sendConfigMessageToLora("AT+ID=DevAddr\r\n");
//		sendConfigMessageToLora("AT+ID=DevEui\r\n");
//		sendConfigMessageToLora("AT+ID=AppEui\r\n");
//		sendConfigMessageToLora("AT+LW=VER\r\n");

		sendConfigMessageToLora("AT+DR=EU868\r\n");
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <connectToLora+0x64>)
 800143a:	f7ff ff91 	bl	8001360 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+CH=NUM,0-2\r\n");
 800143e:	4813      	ldr	r0, [pc, #76]	; (800148c <connectToLora+0x68>)
 8001440:	f7ff ff8e 	bl	8001360 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+MODE=LWOTAA\r\n");
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <connectToLora+0x6c>)
 8001446:	f7ff ff8b 	bl	8001360 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+KEY=APPKEY,\"D5A115FED9A381224497F0D3C9688F88\"\r\n");
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <connectToLora+0x70>)
 800144c:	f7ff ff88 	bl	8001360 <sendConfigMessageToLora>
		sendJoinRequestToLora();
 8001450:	f7ff ffa2 	bl	8001398 <sendJoinRequestToLora>

		connectionRequestCounter++;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <connectToLora+0x60>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <connectToLora+0x60>)
 800145c:	6013      	str	r3, [r2, #0]
	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <connectToLora+0x74>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f083 0301 	eor.w	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <connectToLora+0x50>
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <connectToLora+0x60>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b04      	cmp	r3, #4
 8001472:	dde1      	ble.n	8001438 <connectToLora+0x14>
	}

	if(connectionRequestCounter == MAX_ATTEMPTS_CONNECTION) {
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <connectToLora+0x60>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b05      	cmp	r3, #5
 800147a:	d101      	bne.n	8001480 <connectToLora+0x5c>
		goToDeepSleep();
 800147c:	f7ff ffb8 	bl	80013f0 <goToDeepSleep>
	}
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200002ac 	.word	0x200002ac
 8001488:	0800a2d8 	.word	0x0800a2d8
 800148c:	0800a2e8 	.word	0x0800a2e8
 8001490:	0800a2f8 	.word	0x0800a2f8
 8001494:	0800a30c 	.word	0x0800a30c
 8001498:	20000260 	.word	0x20000260

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a0:	b08a      	sub	sp, #40	; 0x28
 80014a2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a4:	f000 fbb7 	bl	8001c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f878 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ac:	f7ff fe4c 	bl	8001148 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014b0:	f000 faa6 	bl	8001a00 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014b4:	f000 fa74 	bl	80019a0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014b8:	f7ff fd58 	bl	8000f6c <MX_ADC1_Init>
  MX_RTC_Init();
 80014bc:	f000 f8ca 	bl	8001654 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  sendToPC("Wakeup from the STANDBY MODE\n");
 80014c0:	482d      	ldr	r0, [pc, #180]	; (8001578 <main+0xdc>)
 80014c2:	f7ff ff7f 	bl	80013c4 <sendToPC>

  /* Wyłączenie trybu LOW-POWER (lora) i połączenie się z siecią */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) == 0) {
 80014c6:	2102      	movs	r1, #2
 80014c8:	482c      	ldr	r0, [pc, #176]	; (800157c <main+0xe0>)
 80014ca:	f004 f868 	bl	800559e <HAL_RTCEx_BKUPRead>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d108      	bne.n	80014e6 <main+0x4a>
	  HAL_Delay(1200);	// Przy pierwszym włączeniu należy poczekać, aż uruchomi się moduł LoRa
 80014d4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80014d8:	f7ff fefa 	bl	80012d0 <HAL_Delay>
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, 1);
 80014dc:	2201      	movs	r2, #1
 80014de:	2102      	movs	r1, #2
 80014e0:	4826      	ldr	r0, [pc, #152]	; (800157c <main+0xe0>)
 80014e2:	f004 f843 	bl	800556c <HAL_RTCEx_BKUPWrite>
  }
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	4925      	ldr	r1, [pc, #148]	; (8001580 <main+0xe4>)
 80014ea:	4826      	ldr	r0, [pc, #152]	; (8001584 <main+0xe8>)
 80014ec:	f004 f950 	bl	8005790 <HAL_UART_Receive_IT>
  sendConfigMessageToLora("ÿÿÿÿAT+LOWPOWER=AUTOOFF\r\n");
 80014f0:	4825      	ldr	r0, [pc, #148]	; (8001588 <main+0xec>)
 80014f2:	f7ff ff35 	bl	8001360 <sendConfigMessageToLora>
  connectToLora();
 80014f6:	f7ff ff95 	bl	8001424 <connectToLora>


  /* Właczenie modułu GPS */
  HAL_GPIO_WritePin(GPS_POWER_GPIO_Port, GPS_POWER_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2101      	movs	r1, #1
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f002 fa6f 	bl	80039e4 <HAL_GPIO_WritePin>
  {
	  //TODO: GPS
	  //TODO: Termometr

	  /** Wyłączenie modułu GPS */
	  HAL_GPIO_WritePin(GPS_POWER_GPIO_Port, GPS_POWER_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2101      	movs	r1, #1
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f002 fa69 	bl	80039e4 <HAL_GPIO_WritePin>


	  /* Pomiary i wysyłanie danych do TTN */
	  battery_init(&hadc1, HAL_MAX_DELAY);
 8001512:	f04f 31ff 	mov.w	r1, #4294967295
 8001516:	481d      	ldr	r0, [pc, #116]	; (800158c <main+0xf0>)
 8001518:	f006 f870 	bl	80075fc <battery_init>
	  float voltage = battery_getBatteryVolts();
 800151c:	f006 f8a9 	bl	8007672 <battery_getBatteryVolts>
 8001520:	ed87 0a05 	vstr	s0, [r7, #20]
	  int batteryLevel = battery_getBatteryChargeLevel();
 8001524:	f006 f884 	bl	8007630 <battery_getBatteryChargeLevel>
 8001528:	6138      	str	r0, [r7, #16]

	  float temperature = voltage;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	60fb      	str	r3, [r7, #12]
	  float longitude = 13.56438;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <main+0xf4>)
 8001530:	60bb      	str	r3, [r7, #8]
	  float latitude = 8.98432;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <main+0xf8>)
 8001534:	607b      	str	r3, [r7, #4]

	  printf("AT+MSG=%d_%f_%f_%f\r\n", batteryLevel, temperature, longitude, latitude);
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7ff f816 	bl	8000568 <__aeabi_f2d>
 800153c:	4680      	mov	r8, r0
 800153e:	4689      	mov	r9, r1
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f7ff f811 	bl	8000568 <__aeabi_f2d>
 8001546:	4604      	mov	r4, r0
 8001548:	460d      	mov	r5, r1
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff f80c 	bl	8000568 <__aeabi_f2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001558:	e9cd 4500 	strd	r4, r5, [sp]
 800155c:	4642      	mov	r2, r8
 800155e:	464b      	mov	r3, r9
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <main+0xfc>)
 8001564:	f006 fd32 	bl	8007fcc <iprintf>
	  HAL_Delay(1000); 	// czas na wysłanie danych
 8001568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156c:	f7ff feb0 	bl	80012d0 <HAL_Delay>


	  /* Uśpienie urządzenia wraz z podłączonymi czujnikami */
	  goToDeepSleep();
 8001570:	f7ff ff3e 	bl	80013f0 <goToDeepSleep>
  {
 8001574:	e7c7      	b.n	8001506 <main+0x6a>
 8001576:	bf00      	nop
 8001578:	0800a340 	.word	0x0800a340
 800157c:	200002b0 	.word	0x200002b0
 8001580:	20000264 	.word	0x20000264
 8001584:	200002d8 	.word	0x200002d8
 8001588:	0800a360 	.word	0x0800a360
 800158c:	200001fc 	.word	0x200001fc
 8001590:	415907b3 	.word	0x415907b3
 8001594:	410fbfc6 	.word	0x410fbfc6
 8001598:	0800a380 	.word	0x0800a380

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b096      	sub	sp, #88	; 0x58
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	2244      	movs	r2, #68	; 0x44
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f006 f89c 	bl	80076e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015c2:	f002 fa93 	bl	8003aec <HAL_PWREx_ControlVoltageScaling>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015cc:	f000 f83c 	bl	8001648 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015d0:	f002 fa20 	bl	8003a14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <SystemClock_Config+0xa8>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <SystemClock_Config+0xa8>)
 80015dc:	f023 0318 	bic.w	r3, r3, #24
 80015e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015e4:	2314      	movs	r3, #20
 80015e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015f4:	2360      	movs	r3, #96	; 0x60
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fb11 	bl	8003c28 <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800160c:	f000 f81c 	bl	8001648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	230f      	movs	r3, #15
 8001612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fed9 	bl	80043e0 <HAL_RCC_ClockConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001634:	f000 f808 	bl	8001648 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001638:	f003 fbe0 	bl	8004dfc <HAL_RCCEx_EnableMSIPLLMode>
}
 800163c:	bf00      	nop
 800163e:	3758      	adds	r7, #88	; 0x58
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164c:	b672      	cpsid	i
}
 800164e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001650:	e7fe      	b.n	8001650 <Error_Handler+0x8>
	...

08001654 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_RTC_Init+0x48>)
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <MX_RTC_Init+0x4c>)
 800165c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_RTC_Init+0x48>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <MX_RTC_Init+0x48>)
 8001666:	227f      	movs	r2, #127	; 0x7f
 8001668:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_RTC_Init+0x48>)
 800166c:	22ff      	movs	r2, #255	; 0xff
 800166e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_RTC_Init+0x48>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_RTC_Init+0x48>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_RTC_Init+0x48>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_RTC_Init+0x48>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_RTC_Init+0x48>)
 800168a:	f003 fd99 	bl	80051c0 <HAL_RTC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001694:	f7ff ffd8 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002b0 	.word	0x200002b0
 80016a0:	40002800 	.word	0x40002800

080016a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0a4      	sub	sp, #144	; 0x90
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	2288      	movs	r2, #136	; 0x88
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 f817 	bl	80076e8 <memset>
  if(rtcHandle->Instance==RTC)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_RTC_MspInit+0x6c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d120      	bne.n	8001706 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 f8a6 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80016e2:	f7ff ffb1 	bl	8001648 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RTC_MspInit+0x70>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_RTC_MspInit+0x70>)
 80016ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2003      	movs	r0, #3
 80016fc:	f001 ff13 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001700:	2003      	movs	r0, #3
 8001702:	f001 ff2c 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001706:	bf00      	nop
 8001708:	3790      	adds	r7, #144	; 0x90
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40002800 	.word	0x40002800
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_MspInit+0x44>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6613      	str	r3, [r2, #96]	; 0x60
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	; 0x58
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 fa88 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <RTC_WKUP_IRQHandler+0x10>)
 80017ba:	f003 fea7 	bl	800550c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200002b0 	.word	0x200002b0

080017c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <USART1_IRQHandler+0x10>)
 80017ce:	f004 f835 	bl	800583c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200002d8 	.word	0x200002d8

080017dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USART2_IRQHandler+0x10>)
 80017e2:	f004 f82b 	bl	800583c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000035c 	.word	0x2000035c

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180a:	f005 ff43 	bl	8007694 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
	return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fd49 	bl	8001320 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f005 fea8 	bl	8007694 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20018000 	.word	0x20018000
 8001970:	00000400 	.word	0x00000400
 8001974:	200002d4 	.word	0x200002d4
 8001978:	20000728 	.word	0x20000728

0800197c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <MX_USART1_UART_Init+0x5c>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART1_UART_Init+0x58>)
 80019e4:	f003 fdf1 	bl	80055ca <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019ee:	f7ff fe2b 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200002d8 	.word	0x200002d8
 80019fc:	40013800 	.word	0x40013800

08001a00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <MX_USART2_UART_Init+0x5c>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a44:	f003 fdc1 	bl	80055ca <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a4e:	f7ff fdfb 	bl	8001648 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000035c 	.word	0x2000035c
 8001a5c:	40004400 	.word	0x40004400

08001a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0ae      	sub	sp, #184	; 0xb8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2288      	movs	r2, #136	; 0x88
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f005 fe31 	bl	80076e8 <memset>
  if(uartHandle->Instance==USART1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a4b      	ldr	r2, [pc, #300]	; (8001bb8 <HAL_UART_MspInit+0x158>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d145      	bne.n	8001b1c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a94:	2300      	movs	r3, #0
 8001a96:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fec3 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aa8:	f7ff fdce 	bl	8001648 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab8:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	4a3c      	ldr	r2, [pc, #240]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad0:	4b3a      	ldr	r3, [pc, #232]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001adc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af6:	2307      	movs	r3, #7
 8001af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f001 fdc3 	bl	8003690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2025      	movs	r0, #37	; 0x25
 8001b10:	f001 fd09 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b14:	2025      	movs	r0, #37	; 0x25
 8001b16:	f001 fd22 	bl	800355e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b1a:	e048      	b.n	8001bae <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <HAL_UART_MspInit+0x160>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d143      	bne.n	8001bae <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fe78 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001b3e:	f7ff fd83 	bl	8001648 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_UART_MspInit+0x15c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b72:	230c      	movs	r3, #12
 8001b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f001 fd79 	bl	8003690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2026      	movs	r0, #38	; 0x26
 8001ba4:	f001 fcbf 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba8:	2026      	movs	r0, #38	; 0x26
 8001baa:	f001 fcd8 	bl	800355e <HAL_NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	37b8      	adds	r7, #184	; 0xb8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40004400 	.word	0x40004400

08001bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc8:	f7ff fed8 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f005 fd55 	bl	80076a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf6:	f7ff fc51 	bl	800149c <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c08:	0800a7cc 	.word	0x0800a7cc
  ldr r2, =_sbss
 8001c0c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c10:	20000728 	.word	0x20000728

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>

08001c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f001 fc75 	bl	8003510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 f80e 	bl	8001c48 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	71fb      	strb	r3, [r7, #7]
 8001c36:	e001      	b.n	8001c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c38:	f7ff fd6e 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_InitTick+0x6c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d023      	beq.n	8001ca4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_InitTick+0x70>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_InitTick+0x6c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fc81 	bl	800357a <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d809      	bhi.n	8001c98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f001 fc4b 	bl	8003526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_InitTick+0x74>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e007      	b.n	8001ca8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e004      	b.n	8001ca8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	e001      	b.n	8001ca8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	200003e0 	.word	0x200003e0

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200003e0 	.word	0x200003e0

08001d00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3360      	adds	r3, #96	; 0x60
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <LL_ADC_SetOffset+0x44>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001da0:	bf00      	nop
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	03fff000 	.word	0x03fff000

08001db0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3360      	adds	r3, #96	; 0x60
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3360      	adds	r3, #96	; 0x60
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e06:	bf00      	nop
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3330      	adds	r3, #48	; 0x30
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	4413      	add	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	211f      	movs	r1, #31
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0e9b      	lsrs	r3, r3, #26
 8001e70:	f003 011f 	and.w	r1, r3, #31
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e84:	bf00      	nop
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3314      	adds	r3, #20
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	0e5b      	lsrs	r3, r3, #25
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	0d1b      	lsrs	r3, r3, #20
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2107      	movs	r1, #7
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0d1b      	lsrs	r3, r3, #20
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0318 	and.w	r3, r3, #24
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f0c:	40d9      	lsrs	r1, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	400b      	ands	r3, r1
 8001f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	0007ffff 	.word	0x0007ffff

08001f30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6093      	str	r3, [r2, #8]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800203c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002040:	f043 0202 	orr.w	r2, r3, #2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <LL_ADC_IsEnabled+0x18>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <LL_ADC_IsEnabled+0x1a>
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d101      	bne.n	8002092 <LL_ADC_IsDisableOngoing+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_IsDisableOngoing+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020b4:	f043 0204 	orr.w	r2, r3, #4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d101      	bne.n	80020e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d101      	bne.n	8002106 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e136      	b.n	800239c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7fe ff99 	bl	8001074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff19 	bl	8001f8c <LL_ADC_IsDeepPowerDownEnabled>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff feff 	bl	8001f68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff34 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff18 	bl	8001fb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002184:	4b87      	ldr	r3, [pc, #540]	; (80023a4 <HAL_ADC_Init+0x290>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	4a87      	ldr	r2, [pc, #540]	; (80023a8 <HAL_ADC_Init+0x294>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff16 	bl	8001fdc <LL_ADC_IsInternalRegulatorEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	f043 0210 	orr.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff76 	bl	80020c8 <LL_ADC_REG_IsConversionOngoing>
 80021dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 80cf 	bne.w	800238a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80cb 	bne.w	800238a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021fc:	f043 0202 	orr.w	r2, r3, #2
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff23 	bl	8002054 <LL_ADC_IsEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d115      	bne.n	8002240 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002214:	4865      	ldr	r0, [pc, #404]	; (80023ac <HAL_ADC_Init+0x298>)
 8002216:	f7ff ff1d 	bl	8002054 <LL_ADC_IsEnabled>
 800221a:	4604      	mov	r4, r0
 800221c:	4864      	ldr	r0, [pc, #400]	; (80023b0 <HAL_ADC_Init+0x29c>)
 800221e:	f7ff ff19 	bl	8002054 <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	431c      	orrs	r4, r3
 8002226:	4863      	ldr	r0, [pc, #396]	; (80023b4 <HAL_ADC_Init+0x2a0>)
 8002228:	f7ff ff14 	bl	8002054 <LL_ADC_IsEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	4323      	orrs	r3, r4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4619      	mov	r1, r3
 800223a:	485f      	ldr	r0, [pc, #380]	; (80023b8 <HAL_ADC_Init+0x2a4>)
 800223c:	f7ff fd60 	bl	8001d00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7e5b      	ldrb	r3, [r3, #25]
 8002244:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800224a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002250:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002256:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d106      	bne.n	800227c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	3b01      	subs	r3, #1
 8002274:	045b      	lsls	r3, r3, #17
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_ADC_Init+0x2a8>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff09 	bl	80020c8 <LL_ADC_REG_IsConversionOngoing>
 80022b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff16 	bl	80020ee <LL_ADC_INJ_IsConversionOngoing>
 80022c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d13d      	bne.n	8002346 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d13a      	bne.n	8002346 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022dc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ec:	f023 0302 	bic.w	r3, r3, #2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	69b9      	ldr	r1, [r7, #24]
 80022f6:	430b      	orrs	r3, r1
 80022f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002300:	2b01      	cmp	r3, #1
 8002302:	d118      	bne.n	8002336 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800230e:	f023 0304 	bic.w	r3, r3, #4
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002326:	430a      	orrs	r2, r1
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	611a      	str	r2, [r3, #16]
 8002334:	e007      	b.n	8002346 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10c      	bne.n	8002368 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f023 010f 	bic.w	r1, r3, #15
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
 8002366:	e007      	b.n	8002378 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 020f 	bic.w	r2, r2, #15
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f023 0303 	bic.w	r3, r3, #3
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
 8002388:	e007      	b.n	800239a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800239a:	7ffb      	ldrb	r3, [r7, #31]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3724      	adds	r7, #36	; 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}
 80023a4:	20000000 	.word	0x20000000
 80023a8:	053e2d63 	.word	0x053e2d63
 80023ac:	50040000 	.word	0x50040000
 80023b0:	50040100 	.word	0x50040100
 80023b4:	50040200 	.word	0x50040200
 80023b8:	50040300 	.word	0x50040300
 80023bc:	fff0c007 	.word	0xfff0c007

080023c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c8:	4857      	ldr	r0, [pc, #348]	; (8002528 <HAL_ADC_Start+0x168>)
 80023ca:	f7ff fdb1 	bl	8001f30 <LL_ADC_GetMultimode>
 80023ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe77 	bl	80020c8 <LL_ADC_REG_IsConversionOngoing>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 809c 	bne.w	800251a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_Start+0x30>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e097      	b.n	8002520 <HAL_ADC_Start+0x160>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fd71 	bl	8002ee0 <ADC_Enable>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 8083 	bne.w	8002510 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a42      	ldr	r2, [pc, #264]	; (800252c <HAL_ADC_Start+0x16c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d002      	beq.n	800242e <HAL_ADC_Start+0x6e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e000      	b.n	8002430 <HAL_ADC_Start+0x70>
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_ADC_Start+0x170>)
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	4293      	cmp	r3, r2
 8002436:	d002      	beq.n	800243e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	d106      	bne.n	8002466 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f023 0206 	bic.w	r2, r3, #6
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	; 0x58
 8002464:	e002      	b.n	800246c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	221c      	movs	r2, #28
 8002472:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_ADC_Start+0x16c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d002      	beq.n	800248c <HAL_ADC_Start+0xcc>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e000      	b.n	800248e <HAL_ADC_Start+0xce>
 800248c:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_ADC_Start+0x170>)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4293      	cmp	r3, r2
 8002494:	d008      	beq.n	80024a8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d002      	beq.n	80024a8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d114      	bne.n	80024d2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fde8 	bl	80020a0 <LL_ADC_REG_StartConversion>
 80024d0:	e025      	b.n	800251e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_ADC_Start+0x16c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d002      	beq.n	80024ee <HAL_ADC_Start+0x12e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e000      	b.n	80024f0 <HAL_ADC_Start+0x130>
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_ADC_Start+0x170>)
 80024f0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00f      	beq.n	800251e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002506:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
 800250e:	e006      	b.n	800251e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002518:	e001      	b.n	800251e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	50040300 	.word	0x50040300
 800252c:	50040100 	.word	0x50040100
 8002530:	50040000 	.word	0x50040000

08002534 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800253e:	4866      	ldr	r0, [pc, #408]	; (80026d8 <HAL_ADC_PollForConversion+0x1a4>)
 8002540:	f7ff fcf6 	bl	8001f30 <LL_ADC_GetMultimode>
 8002544:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b08      	cmp	r3, #8
 800254c:	d102      	bne.n	8002554 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800254e:	2308      	movs	r3, #8
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e02a      	b.n	80025aa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d002      	beq.n	8002566 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b09      	cmp	r3, #9
 8002564:	d111      	bne.n	800258a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0a4      	b.n	80026ce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002584:	2304      	movs	r3, #4
 8002586:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002588:	e00f      	b.n	80025aa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800258a:	4853      	ldr	r0, [pc, #332]	; (80026d8 <HAL_ADC_PollForConversion+0x1a4>)
 800258c:	f7ff fcde 	bl	8001f4c <LL_ADC_GetMultiDMATransfer>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e093      	b.n	80026ce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025a6:	2304      	movs	r3, #4
 80025a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025aa:	f7ff fb9d 	bl	8001ce8 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025b0:	e021      	b.n	80025f6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d01d      	beq.n	80025f6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025ba:	f7ff fb95 	bl	8001ce8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <HAL_ADC_PollForConversion+0x9c>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d112      	bne.n	80025f6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10b      	bne.n	80025f6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e06b      	b.n	80026ce <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0d6      	beq.n	80025b2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fbfc 	bl	8001e12 <LL_ADC_REG_IsTriggerSourceSWStart>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01c      	beq.n	800265a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7e5b      	ldrb	r3, [r3, #25]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d118      	bne.n	800265a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b08      	cmp	r3, #8
 8002634:	d111      	bne.n	800265a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <HAL_ADC_PollForConversion+0x1a8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d002      	beq.n	800266a <HAL_ADC_PollForConversion+0x136>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	e000      	b.n	800266c <HAL_ADC_PollForConversion+0x138>
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_ADC_PollForConversion+0x1ac>)
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4293      	cmp	r3, r2
 8002672:	d008      	beq.n	8002686 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d002      	beq.n	8002686 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b09      	cmp	r3, #9
 8002684:	d104      	bne.n	8002690 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	e00c      	b.n	80026aa <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a11      	ldr	r2, [pc, #68]	; (80026dc <HAL_ADC_PollForConversion+0x1a8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d002      	beq.n	80026a0 <HAL_ADC_PollForConversion+0x16c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e000      	b.n	80026a2 <HAL_ADC_PollForConversion+0x16e>
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <HAL_ADC_PollForConversion+0x1ac>)
 80026a2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d104      	bne.n	80026ba <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2208      	movs	r2, #8
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e008      	b.n	80026cc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d103      	bne.n	80026cc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	220c      	movs	r2, #12
 80026ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	50040300 	.word	0x50040300
 80026dc:	50040100 	.word	0x50040100
 80026e0:	50040000 	.word	0x50040000

080026e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0b6      	sub	sp, #216	; 0xd8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x22>
 800271e:	2302      	movs	r3, #2
 8002720:	e3c7      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x7b2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fcca 	bl	80020c8 <LL_ADC_REG_IsConversionOngoing>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 83a8 	bne.w	8002e8c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d824      	bhi.n	800278e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	3b02      	subs	r3, #2
 800274a:	2b03      	cmp	r3, #3
 800274c:	d81b      	bhi.n	8002786 <HAL_ADC_ConfigChannel+0x86>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_ADC_ConfigChannel+0x54>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002765 	.word	0x08002765
 8002758:	0800276d 	.word	0x0800276d
 800275c:	08002775 	.word	0x08002775
 8002760:	0800277d 	.word	0x0800277d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	220c      	movs	r2, #12
 8002768:	605a      	str	r2, [r3, #4]
          break;
 800276a:	e011      	b.n	8002790 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2212      	movs	r2, #18
 8002770:	605a      	str	r2, [r3, #4]
          break;
 8002772:	e00d      	b.n	8002790 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2218      	movs	r2, #24
 8002778:	605a      	str	r2, [r3, #4]
          break;
 800277a:	e009      	b.n	8002790 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002782:	605a      	str	r2, [r3, #4]
          break;
 8002784:	e004      	b.n	8002790 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2206      	movs	r2, #6
 800278a:	605a      	str	r2, [r3, #4]
          break;
 800278c:	e000      	b.n	8002790 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800278e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	f7ff fb4b 	bl	8001e38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fc8e 	bl	80020c8 <LL_ADC_REG_IsConversionOngoing>
 80027ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fc9a 	bl	80020ee <LL_ADC_INJ_IsConversionOngoing>
 80027ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 81a6 	bne.w	8002b14 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 81a1 	bne.w	8002b14 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	461a      	mov	r2, r3
 80027e0:	f7ff fb56 	bl	8001e90 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	08db      	lsrs	r3, r3, #3
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d00a      	beq.n	800281c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002816:	f7ff faa7 	bl	8001d68 <LL_ADC_SetOffset>
 800281a:	e17b      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fac4 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x148>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fab9 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	e01e      	b.n	8002886 <HAL_ADC_ConfigChannel+0x186>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff faae 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800286a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800286e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e004      	b.n	8002884 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800287a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <HAL_ADC_ConfigChannel+0x19e>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0e9b      	lsrs	r3, r3, #26
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	e018      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1d0>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e004      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80028c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d106      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fa7d 	bl	8001ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fa61 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_ADC_ConfigChannel+0x20e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fa56 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	e01e      	b.n	800294c <HAL_ADC_ConfigChannel+0x24c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fa4b 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800292c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e004      	b.n	800294a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x264>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	e018      	b.n	8002996 <HAL_ADC_ConfigChannel+0x296>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002978:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800297c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e004      	b.n	8002996 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800298c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002996:	429a      	cmp	r2, r3
 8002998:	d106      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fa1a 	bl	8001ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2102      	movs	r1, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f9fe 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x2d4>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f9f3 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 021f 	and.w	r2, r3, #31
 80029d2:	e01e      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x312>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f9e8 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002a02:	2320      	movs	r3, #32
 8002a04:	e004      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x32a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	e016      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x358>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e004      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d106      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2102      	movs	r1, #2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f9b9 	bl	8001ddc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2103      	movs	r1, #3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f99d 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x396>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2103      	movs	r1, #3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f992 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	e017      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x3c6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2103      	movs	r1, #3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f987 	bl	8001db0 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	e003      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x3de>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	e011      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x402>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e003      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d106      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f964 	bl	8001ddc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fa9b 	bl	8002054 <LL_ADC_IsEnabled>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 813f 	bne.w	8002da4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	461a      	mov	r2, r3
 8002b34:	f7ff f9d8 	bl	8001ee8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a8e      	ldr	r2, [pc, #568]	; (8002d78 <HAL_ADC_ConfigChannel+0x678>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	f040 8130 	bne.w	8002da4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x46c>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2b09      	cmp	r3, #9
 8002b62:	bf94      	ite	ls
 8002b64:	2301      	movls	r3, #1
 8002b66:	2300      	movhi	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e019      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x4a0>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e003      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	bf94      	ite	ls
 8002b9a:	2301      	movls	r3, #1
 8002b9c:	2300      	movhi	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d079      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x4c0>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	069b      	lsls	r3, r3, #26
 8002bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bbe:	e015      	b.n	8002bec <HAL_ADC_ConfigChannel+0x4ec>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e003      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	069b      	lsls	r3, r3, #26
 8002be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x50c>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	e017      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x53c>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	ea42 0103 	orr.w	r1, r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x562>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	051b      	lsls	r3, r3, #20
 8002c60:	e018      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x594>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c94:	430b      	orrs	r3, r1
 8002c96:	e080      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x5b4>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	3301      	adds	r3, #1
 8002cac:	069b      	lsls	r3, r3, #26
 8002cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb2:	e015      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x5e0>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	069b      	lsls	r3, r3, #26
 8002cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x600>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	e017      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x630>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	61fb      	str	r3, [r7, #28]
  return result;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e003      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10d      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x65c>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	051b      	lsls	r3, r3, #20
 8002d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	e01d      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x698>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	613b      	str	r3, [r7, #16]
  return result;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002d74:	2320      	movs	r3, #32
 8002d76:	e005      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x684>
 8002d78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	3b1e      	subs	r3, #30
 8002d92:	051b      	lsls	r3, r3, #20
 8002d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	6892      	ldr	r2, [r2, #8]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7ff f876 	bl	8001e90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b44      	ldr	r3, [pc, #272]	; (8002ebc <HAL_ADC_ConfigChannel+0x7bc>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d07a      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002db0:	4843      	ldr	r0, [pc, #268]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002db2:	f7fe ffcb 	bl	8001d4c <LL_ADC_GetCommonPathInternalCh>
 8002db6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a41      	ldr	r2, [pc, #260]	; (8002ec4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d12c      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d126      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a3c      	ldr	r2, [pc, #240]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x6e4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <HAL_ADC_ConfigChannel+0x7cc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d15d      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dec:	4619      	mov	r1, r3
 8002dee:	4834      	ldr	r0, [pc, #208]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002df0:	f7fe ff99 	bl	8001d26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	4a36      	ldr	r2, [pc, #216]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e0e:	e002      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f9      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e1c:	e040      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d118      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x75a>
 8002e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d112      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x748>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_ADC_ConfigChannel+0x7cc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d12d      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e50:	4619      	mov	r1, r3
 8002e52:	481b      	ldr	r0, [pc, #108]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e54:	f7fe ff67 	bl	8001d26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e58:	e024      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_ADC_ConfigChannel+0x7dc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d120      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11a      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d115      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e82:	4619      	mov	r1, r3
 8002e84:	480e      	ldr	r0, [pc, #56]	; (8002ec0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e86:	f7fe ff4e 	bl	8001d26 <LL_ADC_SetCommonPathInternalCh>
 8002e8a:	e00c      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e9e:	e002      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ea0:	bf00      	nop
 8002ea2:	e000      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ea4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	37d8      	adds	r7, #216	; 0xd8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	80080000 	.word	0x80080000
 8002ec0:	50040300 	.word	0x50040300
 8002ec4:	c7520000 	.word	0xc7520000
 8002ec8:	50040000 	.word	0x50040000
 8002ecc:	50040200 	.word	0x50040200
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	053e2d63 	.word	0x053e2d63
 8002ed8:	cb840000 	.word	0xcb840000
 8002edc:	80000001 	.word	0x80000001

08002ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f8af 	bl	8002054 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d169      	bne.n	8002fd0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <ADC_Enable+0xfc>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e055      	b.n	8002fd2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f86a 	bl	8002004 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f30:	482b      	ldr	r0, [pc, #172]	; (8002fe0 <ADC_Enable+0x100>)
 8002f32:	f7fe ff0b 	bl	8001d4c <LL_ADC_GetCommonPathInternalCh>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <ADC_Enable+0x104>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <ADC_Enable+0x108>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f5a:	e002      	b.n	8002f62 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f9      	bne.n	8002f5c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f68:	f7fe febe 	bl	8001ce8 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f6e:	e028      	b.n	8002fc2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f86d 	bl	8002054 <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f83d 	bl	8002004 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f8a:	f7fe fead 	bl	8001ce8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d914      	bls.n	8002fc2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d00d      	beq.n	8002fc2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f043 0210 	orr.w	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e007      	b.n	8002fd2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d1cf      	bne.n	8002f70 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	8000003f 	.word	0x8000003f
 8002fe0:	50040300 	.word	0x50040300
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	053e2d63 	.word	0x053e2d63

08002fec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f83e 	bl	800207a <LL_ADC_IsDisableOngoing>
 8002ffe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff f825 	bl	8002054 <LL_ADC_IsEnabled>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d047      	beq.n	80030a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d144      	bne.n	80030a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030d 	and.w	r3, r3, #13
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10c      	bne.n	800303e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe ffff 	bl	800202c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2203      	movs	r2, #3
 8003034:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003036:	f7fe fe57 	bl	8001ce8 <HAL_GetTick>
 800303a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800303c:	e029      	b.n	8003092 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f043 0210 	orr.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e023      	b.n	80030a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800305a:	f7fe fe45 	bl	8001ce8 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d914      	bls.n	8003092 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e007      	b.n	80030a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1dc      	bne.n	800305a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <LL_ADC_IsEnabled>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_IsEnabled+0x18>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_IsEnabled+0x1a>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_StartCalibration>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80030e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_IsCalibrationOnGoing>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003116:	d101      	bne.n	800311c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_ADC_REG_IsConversionOngoing>:
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d101      	bne.n	8003142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_ADCEx_Calibration_Start+0x1c>
 8003168:	2302      	movs	r3, #2
 800316a:	e04d      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0xb8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff39 	bl	8002fec <ADC_Disable>
 800317a:	4603      	mov	r3, r0
 800317c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d136      	bne.n	80031f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800318c:	f023 0302 	bic.w	r3, r3, #2
 8003190:	f043 0202 	orr.w	r2, r3, #2
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff96 	bl	80030d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031a4:	e014      	b.n	80031d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80031b2:	d30d      	bcc.n	80031d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f023 0312 	bic.w	r3, r3, #18
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01b      	b.n	8003208 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff94 	bl	8003102 <LL_ADC_IsCalibrationOnGoing>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e2      	bne.n	80031a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f023 0303 	bic.w	r3, r3, #3
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
 80031f0:	e005      	b.n	80031fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b09f      	sub	sp, #124	; 0x7c
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e093      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003236:	2300      	movs	r3, #0
 8003238:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800323a:	2300      	movs	r3, #0
 800323c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a47      	ldr	r2, [pc, #284]	; (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d102      	bne.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	e001      	b.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e072      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff59 	bl	800312a <LL_ADC_REG_IsConversionOngoing>
 8003278:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff53 	bl	800312a <LL_ADC_REG_IsConversionOngoing>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d154      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800328a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328c:	2b00      	cmp	r3, #0
 800328e:	d151      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003292:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02c      	beq.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800329c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ae:	035b      	lsls	r3, r3, #13
 80032b0:	430b      	orrs	r3, r1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032b8:	4829      	ldr	r0, [pc, #164]	; (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032ba:	f7ff fef6 	bl	80030aa <LL_ADC_IsEnabled>
 80032be:	4604      	mov	r4, r0
 80032c0:	4828      	ldr	r0, [pc, #160]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032c2:	f7ff fef2 	bl	80030aa <LL_ADC_IsEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	431c      	orrs	r4, r3
 80032ca:	4828      	ldr	r0, [pc, #160]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032cc:	f7ff feed 	bl	80030aa <LL_ADC_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4323      	orrs	r3, r4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d137      	bne.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032e0:	f023 030f 	bic.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	6811      	ldr	r1, [r2, #0]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f4:	e028      	b.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003300:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003302:	4817      	ldr	r0, [pc, #92]	; (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003304:	f7ff fed1 	bl	80030aa <LL_ADC_IsEnabled>
 8003308:	4604      	mov	r4, r0
 800330a:	4816      	ldr	r0, [pc, #88]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800330c:	f7ff fecd 	bl	80030aa <LL_ADC_IsEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	431c      	orrs	r4, r3
 8003314:	4815      	ldr	r0, [pc, #84]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003316:	f7ff fec8 	bl	80030aa <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	4323      	orrs	r3, r4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d112      	bne.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800332a:	f023 030f 	bic.w	r3, r3, #15
 800332e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003330:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003332:	e009      	b.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003346:	e000      	b.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003348:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003352:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003356:	4618      	mov	r0, r3
 8003358:	377c      	adds	r7, #124	; 0x7c
 800335a:	46bd      	mov	sp, r7
 800335c:	bd90      	pop	{r4, r7, pc}
 800335e:	bf00      	nop
 8003360:	50040000 	.word	0x50040000
 8003364:	50040100 	.word	0x50040100
 8003368:	50040300 	.word	0x50040300
 800336c:	50040200 	.word	0x50040200

08003370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <__NVIC_GetPriorityGrouping+0x18>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0307 	and.w	r3, r3, #7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db0b      	blt.n	80033fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4907      	ldr	r1, [pc, #28]	; (800340c <__NVIC_EnableIRQ+0x38>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2001      	movs	r0, #1
 80033f6:	fa00 f202 	lsl.w	r2, r0, r2
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db0a      	blt.n	800343a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	490c      	ldr	r1, [pc, #48]	; (800345c <__NVIC_SetPriority+0x4c>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	440b      	add	r3, r1
 8003434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003438:	e00a      	b.n	8003450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4908      	ldr	r1, [pc, #32]	; (8003460 <__NVIC_SetPriority+0x50>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3b04      	subs	r3, #4
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	440b      	add	r3, r1
 800344e:	761a      	strb	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000e100 	.word	0xe000e100
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf28      	it	cs
 8003482:	2304      	movcs	r3, #4
 8003484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3304      	adds	r3, #4
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <NVIC_EncodePriority+0x30>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3b03      	subs	r3, #3
 8003492:	e000      	b.n	8003496 <NVIC_EncodePriority+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	401a      	ands	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	4313      	orrs	r3, r2
         );
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034dc:	d301      	bcc.n	80034e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034de:	2301      	movs	r3, #1
 80034e0:	e00f      	b.n	8003502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <SysTick_Config+0x40>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ea:	210f      	movs	r1, #15
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f7ff ff8e 	bl	8003410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <SysTick_Config+0x40>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <SysTick_Config+0x40>)
 80034fc:	2207      	movs	r2, #7
 80034fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000e010 	.word	0xe000e010

08003510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff29 	bl	8003370 <__NVIC_SetPriorityGrouping>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003538:	f7ff ff3e 	bl	80033b8 <__NVIC_GetPriorityGrouping>
 800353c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f7ff ff8e 	bl	8003464 <NVIC_EncodePriority>
 8003548:	4602      	mov	r2, r0
 800354a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff5d 	bl	8003410 <__NVIC_SetPriority>
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff31 	bl	80033d4 <__NVIC_EnableIRQ>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ffa2 	bl	80034cc <SysTick_Config>
 8003588:	4603      	mov	r3, r0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d008      	beq.n	80035bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2204      	movs	r2, #4
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e022      	b.n	8003602 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 020e 	bic.w	r2, r2, #14
 80035ca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	f003 021c 	and.w	r2, r3, #28
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d005      	beq.n	8003632 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2204      	movs	r2, #4
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e029      	b.n	8003686 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 020e 	bic.w	r2, r2, #14
 8003640:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f003 021c 	and.w	r2, r3, #28
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f202 	lsl.w	r2, r1, r2
 8003664:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	4798      	blx	r3
    }
  }
  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800369e:	e17f      	b.n	80039a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8171 	beq.w	800399a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d005      	beq.n	80036d0 <HAL_GPIO_Init+0x40>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d130      	bne.n	8003732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003706:	2201      	movs	r2, #1
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0201 	and.w	r2, r3, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b03      	cmp	r3, #3
 800373c:	d118      	bne.n	8003770 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	08db      	lsrs	r3, r3, #3
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d017      	beq.n	80037ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	220f      	movs	r2, #15
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	6939      	ldr	r1, [r7, #16]
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80ac 	beq.w	800399a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_GPIO_Init+0x330>)
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <HAL_GPIO_Init+0x330>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6613      	str	r3, [r2, #96]	; 0x60
 800384e:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_GPIO_Init+0x330>)
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800385a:	4a5a      	ldr	r2, [pc, #360]	; (80039c4 <HAL_GPIO_Init+0x334>)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003884:	d025      	beq.n	80038d2 <HAL_GPIO_Init+0x242>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <HAL_GPIO_Init+0x338>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <HAL_GPIO_Init+0x23e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <HAL_GPIO_Init+0x33c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d019      	beq.n	80038ca <HAL_GPIO_Init+0x23a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_GPIO_Init+0x340>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0x236>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_GPIO_Init+0x344>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00d      	beq.n	80038c2 <HAL_GPIO_Init+0x232>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <HAL_GPIO_Init+0x348>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <HAL_GPIO_Init+0x22e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <HAL_GPIO_Init+0x34c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_GPIO_Init+0x22a>
 80038b6:	2306      	movs	r3, #6
 80038b8:	e00c      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038ba:	2307      	movs	r3, #7
 80038bc:	e00a      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038be:	2305      	movs	r3, #5
 80038c0:	e008      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e004      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e002      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_GPIO_Init+0x244>
 80038d2:	2300      	movs	r3, #0
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	f002 0203 	and.w	r2, r2, #3
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	4093      	lsls	r3, r2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038e4:	4937      	ldr	r1, [pc, #220]	; (80039c4 <HAL_GPIO_Init+0x334>)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	3302      	adds	r3, #2
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038f2:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <HAL_GPIO_Init+0x350>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003916:	4a32      	ldr	r2, [pc, #200]	; (80039e0 <HAL_GPIO_Init+0x350>)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800391c:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <HAL_GPIO_Init+0x350>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <HAL_GPIO_Init+0x350>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_GPIO_Init+0x350>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_GPIO_Init+0x350>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_GPIO_Init+0x350>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003994:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <HAL_GPIO_Init+0x350>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	3301      	adds	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f ae78 	bne.w	80036a0 <HAL_GPIO_Init+0x10>
  }
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40010000 	.word	0x40010000
 80039c8:	48000400 	.word	0x48000400
 80039cc:	48000800 	.word	0x48000800
 80039d0:	48000c00 	.word	0x48000c00
 80039d4:	48001000 	.word	0x48001000
 80039d8:	48001400 	.word	0x48001400
 80039dc:	48001800 	.word	0x48001800
 80039e0:	40010400 	.word	0x40010400

080039e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
 80039f0:	4613      	mov	r3, r2
 80039f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f4:	787b      	ldrb	r3, [r7, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a00:	e002      	b.n	8003a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40007000 	.word	0x40007000

08003a34 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003a46:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a52:	d10e      	bne.n	8003a72 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003a54:	f000 f8b0 	bl	8003bb8 <HAL_PWREx_DisableLowPowerRunMode>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003a5e:	e016      	b.n	8003a8e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6c:	d001      	beq.n	8003a72 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003a6e:	f000 f893 	bl	8003b98 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003a84:	bf30      	wfi
 8003a86:	e002      	b.n	8003a8e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003a88:	bf40      	sev
    __WFE();
 8003a8a:	bf20      	wfe
    __WFE();
 8003a8c:	bf20      	wfe
  }

}
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40007000 	.word	0x40007000
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 0307 	bic.w	r3, r3, #7
 8003aa8:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003aaa:	f043 0303 	orr.w	r3, r3, #3
 8003aae:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	4a05      	ldr	r2, [pc, #20]	; (8003acc <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003ab6:	f043 0304 	orr.w	r3, r3, #4
 8003aba:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003abc:	bf30      	wfi
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40007000 	.word	0x40007000

08003aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afa:	d130      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003afc:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b08:	d038      	beq.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b12:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2232      	movs	r2, #50	; 0x32
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0c9b      	lsrs	r3, r3, #18
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b30:	e002      	b.n	8003b38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b44:	d102      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f2      	bne.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b58:	d110      	bne.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e00f      	b.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d007      	beq.n	8003b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b74:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	20000000 	.word	0x20000000
 8003b94:	431bde83 	.word	0x431bde83

08003b98 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40007000 	.word	0x40007000

08003bb8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2232      	movs	r2, #50	; 0x32
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0c9b      	lsrs	r3, r3, #18
 8003bdc:	3301      	adds	r3, #1
 8003bde:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003be0:	e002      	b.n	8003be8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf4:	d102      	bne.n	8003bfc <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f2      	bne.n	8003be2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d101      	bne.n	8003c0e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e000      	b.n	8003c10 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	20000000 	.word	0x20000000
 8003c24:	431bde83 	.word	0x431bde83

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e3ca      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3a:	4b97      	ldr	r3, [pc, #604]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c44:	4b94      	ldr	r3, [pc, #592]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80e4 	beq.w	8003e24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4a>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	f040 808b 	bne.w	8003d80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	f040 8087 	bne.w	8003d80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c72:	4b89      	ldr	r3, [pc, #548]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e3a2      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	4b82      	ldr	r3, [pc, #520]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x7c>
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca2:	e005      	b.n	8003cb0 <HAL_RCC_OscConfig+0x88>
 8003ca4:	4b7c      	ldr	r3, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d223      	bcs.n	8003cfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd55 	bl	8004768 <RCC_SetFlashLatencyFromMSIRange>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e383      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc8:	4b73      	ldr	r3, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a72      	ldr	r2, [pc, #456]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003cce:	f043 0308 	orr.w	r3, r3, #8
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b70      	ldr	r3, [pc, #448]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	496d      	ldr	r1, [pc, #436]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce6:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	4968      	ldr	r1, [pc, #416]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	604b      	str	r3, [r1, #4]
 8003cfa:	e025      	b.n	8003d48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cfc:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a65      	ldr	r2, [pc, #404]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d02:	f043 0308 	orr.w	r3, r3, #8
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4960      	ldr	r1, [pc, #384]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d1a:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	495b      	ldr	r1, [pc, #364]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fd15 	bl	8004768 <RCC_SetFlashLatencyFromMSIRange>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e343      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d48:	f000 fc4a 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b52      	ldr	r3, [pc, #328]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	091b      	lsrs	r3, r3, #4
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	4950      	ldr	r1, [pc, #320]	; (8003e9c <HAL_RCC_OscConfig+0x274>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
 8003d64:	4a4e      	ldr	r2, [pc, #312]	; (8003ea0 <HAL_RCC_OscConfig+0x278>)
 8003d66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d68:	4b4e      	ldr	r3, [pc, #312]	; (8003ea4 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd ff6b 	bl	8001c48 <HAL_InitTick>
 8003d72:	4603      	mov	r3, r0
 8003d74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d052      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	e327      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d032      	beq.n	8003dee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d88:	4b43      	ldr	r3, [pc, #268]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a42      	ldr	r2, [pc, #264]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d94:	f7fd ffa8 	bl	8001ce8 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d9c:	f7fd ffa4 	bl	8001ce8 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e310      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dae:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a36      	ldr	r2, [pc, #216]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4931      	ldr	r1, [pc, #196]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd8:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	492c      	ldr	r1, [pc, #176]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	e01a      	b.n	8003e24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd ff75 	bl	8001ce8 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e02:	f7fd ff71 	bl	8001ce8 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e2dd      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0x1da>
 8003e20:	e000      	b.n	8003e24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d074      	beq.n	8003f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x21a>
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d10e      	bne.n	8003e5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d064      	beq.n	8003f18 <HAL_RCC_OscConfig+0x2f0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d160      	bne.n	8003f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e2ba      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x24a>
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e026      	b.n	8003ec0 <HAL_RCC_OscConfig+0x298>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7a:	d115      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x280>
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a02      	ldr	r2, [pc, #8]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x298>
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	0800a398 	.word	0x0800a398
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	20000004 	.word	0x20000004
 8003ea8:	4ba0      	ldr	r3, [pc, #640]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a9f      	ldr	r2, [pc, #636]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b9d      	ldr	r3, [pc, #628]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a9c      	ldr	r2, [pc, #624]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd ff0e 	bl	8001ce8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fd ff0a 	bl	8001ce8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e276      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee2:	4b92      	ldr	r3, [pc, #584]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x2a8>
 8003eee:	e014      	b.n	8003f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fefa 	bl	8001ce8 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fef6 	bl	8001ce8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e262      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f0a:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2d0>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d060      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_OscConfig+0x310>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d119      	bne.n	8003f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d116      	bne.n	8003f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f38:	4b7c      	ldr	r3, [pc, #496]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_OscConfig+0x328>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e23f      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	4973      	ldr	r1, [pc, #460]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f64:	e040      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d023      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6e:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fd feb5 	bl	8001ce8 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fd feb1 	bl	8001ce8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e21d      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f94:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa0:	4b62      	ldr	r3, [pc, #392]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	495f      	ldr	r1, [pc, #380]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]
 8003fb4:	e018      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb6:	4b5d      	ldr	r3, [pc, #372]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a5c      	ldr	r2, [pc, #368]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fe91 	bl	8001ce8 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fca:	f7fd fe8d 	bl	8001ce8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e1f9      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d03c      	beq.n	800406e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01c      	beq.n	8004036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8003ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004002:	4a4a      	ldr	r2, [pc, #296]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fd fe6c 	bl	8001ce8 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004014:	f7fd fe68 	bl	8001ce8 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1d4      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004026:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ef      	beq.n	8004014 <HAL_RCC_OscConfig+0x3ec>
 8004034:	e01b      	b.n	800406e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403c:	4a3b      	ldr	r2, [pc, #236]	; (800412c <HAL_RCC_OscConfig+0x504>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fd fe4f 	bl	8001ce8 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404e:	f7fd fe4b 	bl	8001ce8 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e1b7      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ef      	bne.n	800404e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80a6 	beq.w	80041c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407c:	2300      	movs	r3, #0
 800407e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x504>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
 8004098:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x504>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a4:	2301      	movs	r3, #1
 80040a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_OscConfig+0x508>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d118      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b4:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <HAL_RCC_OscConfig+0x508>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <HAL_RCC_OscConfig+0x508>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c0:	f7fd fe12 	bl	8001ce8 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7fd fe0e 	bl	8001ce8 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e17a      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <HAL_RCC_OscConfig+0x508>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d108      	bne.n	8004100 <HAL_RCC_OscConfig+0x4d8>
 80040ee:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_RCC_OscConfig+0x504>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <HAL_RCC_OscConfig+0x504>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040fe:	e029      	b.n	8004154 <HAL_RCC_OscConfig+0x52c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b05      	cmp	r3, #5
 8004106:	d115      	bne.n	8004134 <HAL_RCC_OscConfig+0x50c>
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCC_OscConfig+0x504>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	4a07      	ldr	r2, [pc, #28]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_RCC_OscConfig+0x504>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	4a03      	ldr	r2, [pc, #12]	; (800412c <HAL_RCC_OscConfig+0x504>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004128:	e014      	b.n	8004154 <HAL_RCC_OscConfig+0x52c>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
 8004134:	4b9c      	ldr	r3, [pc, #624]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	4a9b      	ldr	r2, [pc, #620]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004144:	4b98      	ldr	r3, [pc, #608]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	4a97      	ldr	r2, [pc, #604]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800414c:	f023 0304 	bic.w	r3, r3, #4
 8004150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d016      	beq.n	800418a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd fdc4 	bl	8001ce8 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd fdc0 	bl	8001ce8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e12a      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800417a:	4b8b      	ldr	r3, [pc, #556]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0ed      	beq.n	8004164 <HAL_RCC_OscConfig+0x53c>
 8004188:	e015      	b.n	80041b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fd fdad 	bl	8001ce8 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004192:	f7fd fda9 	bl	8001ce8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e113      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a8:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ed      	bne.n	8004192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041bc:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a79      	ldr	r2, [pc, #484]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80041c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80fe 	beq.w	80043ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	f040 80d0 	bne.w	800437c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041dc:	4b72      	ldr	r3, [pc, #456]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f003 0203 	and.w	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d130      	bne.n	8004252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	3b01      	subs	r3, #1
 80041fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d127      	bne.n	8004252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d11f      	bne.n	8004252 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800421c:	2a07      	cmp	r2, #7
 800421e:	bf14      	ite	ne
 8004220:	2201      	movne	r2, #1
 8004222:	2200      	moveq	r2, #0
 8004224:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004226:	4293      	cmp	r3, r2
 8004228:	d113      	bne.n	8004252 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	3b01      	subs	r3, #1
 8004238:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d109      	bne.n	8004252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	085b      	lsrs	r3, r3, #1
 800424a:	3b01      	subs	r3, #1
 800424c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d06e      	beq.n	8004330 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d069      	beq.n	800432c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0ad      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004274:	4b4c      	ldr	r3, [pc, #304]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004280:	f7fd fd32 	bl	8001ce8 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fd fd2e 	bl	8001ce8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e09a      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429a:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a6:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_RCC_OscConfig+0x784>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042b6:	3a01      	subs	r2, #1
 80042b8:	0112      	lsls	r2, r2, #4
 80042ba:	4311      	orrs	r1, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c0:	0212      	lsls	r2, r2, #8
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042c8:	0852      	lsrs	r2, r2, #1
 80042ca:	3a01      	subs	r2, #1
 80042cc:	0552      	lsls	r2, r2, #21
 80042ce:	4311      	orrs	r1, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042d4:	0852      	lsrs	r2, r2, #1
 80042d6:	3a01      	subs	r2, #1
 80042d8:	0652      	lsls	r2, r2, #25
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e0:	0912      	lsrs	r2, r2, #4
 80042e2:	0452      	lsls	r2, r2, #17
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4930      	ldr	r1, [pc, #192]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042ec:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f8:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a2a      	ldr	r2, [pc, #168]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004304:	f7fd fcf0 	bl	8001ce8 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd fcec 	bl	8001ce8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e058      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431e:	4b22      	ldr	r3, [pc, #136]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800432a:	e050      	b.n	80043ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e04f      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004330:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d148      	bne.n	80043ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a16      	ldr	r2, [pc, #88]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 800434e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004352:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004354:	f7fd fcc8 	bl	8001ce8 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435c:	f7fd fcc4 	bl	8001ce8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e030      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x734>
 800437a:	e028      	b.n	80043ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d023      	beq.n	80043ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_RCC_OscConfig+0x780>)
 8004388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fd fcab 	bl	8001ce8 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	e00c      	b.n	80043b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004396:	f7fd fca7 	bl	8001ce8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d905      	bls.n	80043b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e013      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
 80043a8:	40021000 	.word	0x40021000
 80043ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x7b0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ec      	bne.n	8004396 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x7b0>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	4905      	ldr	r1, [pc, #20]	; (80043d8 <HAL_RCC_OscConfig+0x7b0>)
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_RCC_OscConfig+0x7b4>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	60cb      	str	r3, [r1, #12]
 80043c8:	e001      	b.n	80043ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	feeefffc 	.word	0xfeeefffc

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0e7      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b75      	ldr	r3, [pc, #468]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d910      	bls.n	8004424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b72      	ldr	r3, [pc, #456]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 0207 	bic.w	r2, r3, #7
 800440a:	4970      	ldr	r1, [pc, #448]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b6e      	ldr	r3, [pc, #440]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0cf      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	429a      	cmp	r2, r3
 800443e:	d908      	bls.n	8004452 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004440:	4b63      	ldr	r3, [pc, #396]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4960      	ldr	r1, [pc, #384]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d04c      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	4b5a      	ldr	r3, [pc, #360]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d121      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e0a6      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447e:	4b54      	ldr	r3, [pc, #336]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d115      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e09a      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004496:	4b4e      	ldr	r3, [pc, #312]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e08e      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a6:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e086      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044b6:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4943      	ldr	r1, [pc, #268]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fd fc0e 	bl	8001ce8 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d0:	f7fd fc0a 	bl	8001ce8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e06e      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 020c 	and.w	r2, r3, #12
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1eb      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d010      	beq.n	8004526 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004510:	429a      	cmp	r2, r3
 8004512:	d208      	bcs.n	8004526 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	492b      	ldr	r1, [pc, #172]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d210      	bcs.n	8004556 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 0207 	bic.w	r2, r3, #7
 800453c:	4923      	ldr	r1, [pc, #140]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e036      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4918      	ldr	r1, [pc, #96]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004580:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4910      	ldr	r1, [pc, #64]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004594:	f000 f824 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	490b      	ldr	r1, [pc, #44]	; (80045d4 <HAL_RCC_ClockConfig+0x1f4>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1fc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fd fb45 	bl	8001c48 <HAL_InitTick>
 80045be:	4603      	mov	r3, r0
 80045c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045c2:	7afb      	ldrb	r3, [r7, #11]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40021000 	.word	0x40021000
 80045d4:	0800a398 	.word	0x0800a398
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ee:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f8:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x34>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d121      	bne.n	8004652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d11e      	bne.n	8004652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004620:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	e005      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800463c:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10d      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004650:	e00a      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d102      	bne.n	800465e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e004      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d101      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004664:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d134      	bne.n	80046d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466e:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d003      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0xa6>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d003      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0xac>
 8004684:	e005      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004688:	617b      	str	r3, [r7, #20]
      break;
 800468a:	e005      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800468e:	617b      	str	r3, [r7, #20]
      break;
 8004690:	e002      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	617b      	str	r3, [r7, #20]
      break;
 8004696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	3301      	adds	r3, #1
 80046a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	fb03 f202 	mul.w	r2, r3, r2
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	0e5b      	lsrs	r3, r3, #25
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	3301      	adds	r3, #1
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046d8:	69bb      	ldr	r3, [r7, #24]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	0800a3b0 	.word	0x0800a3b0
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	007a1200 	.word	0x007a1200

080046f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_GetHCLKFreq+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000000 	.word	0x20000000

08004710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004714:	f7ff fff0 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4904      	ldr	r1, [pc, #16]	; (8004738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40021000 	.word	0x40021000
 8004738:	0800a3a8 	.word	0x0800a3a8

0800473c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004740:	f7ff ffda 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 8004744:	4602      	mov	r2, r0
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	0adb      	lsrs	r3, r3, #11
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4904      	ldr	r1, [pc, #16]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004752:	5ccb      	ldrb	r3, [r1, r3]
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	0800a3a8 	.word	0x0800a3a8

08004768 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004770:	2300      	movs	r3, #0
 8004772:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004774:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004780:	f7ff f9a6 	bl	8003ad0 <HAL_PWREx_GetVoltageRange>
 8004784:	6178      	str	r0, [r7, #20]
 8004786:	e014      	b.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800478a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478c:	4a24      	ldr	r2, [pc, #144]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800478e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004792:	6593      	str	r3, [r2, #88]	; 0x58
 8004794:	4b22      	ldr	r3, [pc, #136]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047a0:	f7ff f996 	bl	8003ad0 <HAL_PWREx_GetVoltageRange>
 80047a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047a6:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b8:	d10b      	bne.n	80047d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b80      	cmp	r3, #128	; 0x80
 80047be:	d919      	bls.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2ba0      	cmp	r3, #160	; 0xa0
 80047c4:	d902      	bls.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047c6:	2302      	movs	r3, #2
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e013      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047cc:	2301      	movs	r3, #1
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	e010      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b80      	cmp	r3, #128	; 0x80
 80047d6:	d902      	bls.n	80047de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047d8:	2303      	movs	r3, #3
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	e00a      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d102      	bne.n	80047ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047e4:	2302      	movs	r3, #2
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	e004      	b.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b70      	cmp	r3, #112	; 0x70
 80047ee:	d101      	bne.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047f0:	2301      	movs	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 0207 	bic.w	r2, r3, #7
 80047fc:	4909      	ldr	r1, [pc, #36]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	429a      	cmp	r2, r3
 8004810:	d001      	beq.n	8004816 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000
 8004824:	40022000 	.word	0x40022000

08004828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004830:	2300      	movs	r3, #0
 8004832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004834:	2300      	movs	r3, #0
 8004836:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004840:	2b00      	cmp	r3, #0
 8004842:	d041      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004848:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800484c:	d02a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800484e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004852:	d824      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004858:	d008      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800485a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800485e:	d81e      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004868:	d010      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800486a:	e018      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800486c:	4b86      	ldr	r3, [pc, #536]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a85      	ldr	r2, [pc, #532]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004876:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004878:	e015      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3304      	adds	r3, #4
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f000 facb 	bl	8004e1c <RCCEx_PLLSAI1_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800488a:	e00c      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3320      	adds	r3, #32
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fbb6 	bl	8005004 <RCCEx_PLLSAI2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800489c:	e003      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	74fb      	strb	r3, [r7, #19]
      break;
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ac:	4b76      	ldr	r3, [pc, #472]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ba:	4973      	ldr	r1, [pc, #460]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048c2:	e001      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d041      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048dc:	d02a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048e2:	d824      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e8:	d008      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ee:	d81e      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f8:	d010      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048fa:	e018      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048fc:	4b62      	ldr	r3, [pc, #392]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a61      	ldr	r2, [pc, #388]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004906:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004908:	e015      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3304      	adds	r3, #4
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fa83 	bl	8004e1c <RCCEx_PLLSAI1_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800491a:	e00c      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3320      	adds	r3, #32
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fb6e 	bl	8005004 <RCCEx_PLLSAI2_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	74fb      	strb	r3, [r7, #19]
      break;
 8004932:	e000      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800493c:	4b52      	ldr	r3, [pc, #328]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494a:	494f      	ldr	r1, [pc, #316]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004952:	e001      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	7cfb      	ldrb	r3, [r7, #19]
 8004956:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a0 	beq.w	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800496a:	4b47      	ldr	r3, [pc, #284]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	4a40      	ldr	r2, [pc, #256]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498a:	6593      	str	r3, [r2, #88]	; 0x58
 800498c:	4b3e      	ldr	r3, [pc, #248]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004998:	2301      	movs	r3, #1
 800499a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a3a      	ldr	r2, [pc, #232]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049a8:	f7fd f99e 	bl	8001ce8 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049ae:	e009      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fd f99a 	bl	8001ce8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d902      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	74fb      	strb	r3, [r7, #19]
        break;
 80049c2:	e005      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049c4:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0ef      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d15c      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049d6:	4b2c      	ldr	r3, [pc, #176]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d019      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fd f959 	bl	8001ce8 <HAL_GetTick>
 8004a36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a38:	e00b      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd f955 	bl	8001ce8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d902      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ec      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a76:	4904      	ldr	r1, [pc, #16]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a7e:	e009      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a94:	7c7b      	ldrb	r3, [r7, #17]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9a:	4b9e      	ldr	r3, [pc, #632]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	4a9d      	ldr	r2, [pc, #628]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ab2:	4b98      	ldr	r3, [pc, #608]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f023 0203 	bic.w	r2, r3, #3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	4994      	ldr	r1, [pc, #592]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ad4:	4b8f      	ldr	r3, [pc, #572]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ada:	f023 020c 	bic.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	498c      	ldr	r1, [pc, #560]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004af6:	4b87      	ldr	r3, [pc, #540]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	4983      	ldr	r1, [pc, #524]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b18:	4b7e      	ldr	r3, [pc, #504]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	497b      	ldr	r1, [pc, #492]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b3a:	4b76      	ldr	r3, [pc, #472]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	4972      	ldr	r1, [pc, #456]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b5c:	4b6d      	ldr	r3, [pc, #436]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	496a      	ldr	r1, [pc, #424]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	4961      	ldr	r1, [pc, #388]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ba0:	4b5c      	ldr	r3, [pc, #368]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bae:	4959      	ldr	r1, [pc, #356]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc2:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	4950      	ldr	r1, [pc, #320]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004be4:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	4948      	ldr	r1, [pc, #288]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c06:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	493f      	ldr	r1, [pc, #252]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d028      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c28:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	4937      	ldr	r1, [pc, #220]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c46:	d106      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a31      	ldr	r2, [pc, #196]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
 8004c54:	e011      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	2101      	movs	r1, #1
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f8d8 	bl	8004e1c <RCCEx_PLLSAI1_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d028      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c86:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	491f      	ldr	r1, [pc, #124]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca4:	d106      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb0:	60d3      	str	r3, [r2, #12]
 8004cb2:	e011      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f8a9 	bl	8004e1c <RCCEx_PLLSAI1_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d02b      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf2:	4908      	ldr	r1, [pc, #32]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d02:	d109      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a02      	ldr	r2, [pc, #8]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0e:	60d3      	str	r3, [r2, #12]
 8004d10:	e014      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f877 	bl	8004e1c <RCCEx_PLLSAI1_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02f      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d48:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d56:	4928      	ldr	r1, [pc, #160]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f854 	bl	8004e1c <RCCEx_PLLSAI1_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d014      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	74bb      	strb	r3, [r7, #18]
 8004d82:	e011      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3320      	adds	r3, #32
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f935 	bl	8005004 <RCCEx_PLLSAI2_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004db4:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc2:	490d      	ldr	r1, [pc, #52]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00b      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de6:	4904      	ldr	r1, [pc, #16]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dee:	7cbb      	ldrb	r3, [r7, #18]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000

08004dfc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a04      	ldr	r2, [pc, #16]	; (8004e18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e06:	f043 0304 	orr.w	r3, r3, #4
 8004e0a:	6013      	str	r3, [r2, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000

08004e1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e2a:	4b75      	ldr	r3, [pc, #468]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e36:	4b72      	ldr	r3, [pc, #456]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0203 	and.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d10d      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
       ||
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e4e:	4b6c      	ldr	r3, [pc, #432]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d047      	beq.n	8004ef2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
 8004e66:	e044      	b.n	8004ef2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d018      	beq.n	8004ea2 <RCCEx_PLLSAI1_Config+0x86>
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d825      	bhi.n	8004ec0 <RCCEx_PLLSAI1_Config+0xa4>
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d002      	beq.n	8004e7e <RCCEx_PLLSAI1_Config+0x62>
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d009      	beq.n	8004e90 <RCCEx_PLLSAI1_Config+0x74>
 8004e7c:	e020      	b.n	8004ec0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e7e:	4b60      	ldr	r3, [pc, #384]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11d      	bne.n	8004ec6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8e:	e01a      	b.n	8004ec6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e90:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d116      	bne.n	8004eca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea0:	e013      	b.n	8004eca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ea2:	4b57      	ldr	r3, [pc, #348]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eae:	4b54      	ldr	r3, [pc, #336]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ebe:	e006      	b.n	8004ece <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec4:	e004      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ed6:	4b4a      	ldr	r3, [pc, #296]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	430b      	orrs	r3, r1
 8004eec:	4944      	ldr	r1, [pc, #272]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d17d      	bne.n	8004ff4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ef8:	4b41      	ldr	r3, [pc, #260]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a40      	ldr	r2, [pc, #256]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f04:	f7fc fef0 	bl	8001ce8 <HAL_GetTick>
 8004f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f0a:	e009      	b.n	8004f20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f0c:	f7fc feec 	bl	8001ce8 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d902      	bls.n	8004f20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f1e:	e005      	b.n	8004f2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f20:	4b37      	ldr	r3, [pc, #220]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1ef      	bne.n	8004f0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d160      	bne.n	8004ff4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d111      	bne.n	8004f5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f38:	4b31      	ldr	r3, [pc, #196]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6892      	ldr	r2, [r2, #8]
 8004f48:	0211      	lsls	r1, r2, #8
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	0912      	lsrs	r2, r2, #4
 8004f50:	0452      	lsls	r2, r2, #17
 8004f52:	430a      	orrs	r2, r1
 8004f54:	492a      	ldr	r1, [pc, #168]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	610b      	str	r3, [r1, #16]
 8004f5a:	e027      	b.n	8004fac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d112      	bne.n	8004f88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6892      	ldr	r2, [r2, #8]
 8004f72:	0211      	lsls	r1, r2, #8
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6912      	ldr	r2, [r2, #16]
 8004f78:	0852      	lsrs	r2, r2, #1
 8004f7a:	3a01      	subs	r2, #1
 8004f7c:	0552      	lsls	r2, r2, #21
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	491f      	ldr	r1, [pc, #124]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	610b      	str	r3, [r1, #16]
 8004f86:	e011      	b.n	8004fac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f88:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6892      	ldr	r2, [r2, #8]
 8004f98:	0211      	lsls	r1, r2, #8
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6952      	ldr	r2, [r2, #20]
 8004f9e:	0852      	lsrs	r2, r2, #1
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	0652      	lsls	r2, r2, #25
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	4916      	ldr	r1, [pc, #88]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a13      	ldr	r2, [pc, #76]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fc fe96 	bl	8001ce8 <HAL_GetTick>
 8004fbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fbe:	e009      	b.n	8004fd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fc0:	f7fc fe92 	bl	8001ce8 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d902      	bls.n	8004fd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	73fb      	strb	r3, [r7, #15]
          break;
 8004fd2:	e005      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ef      	beq.n	8004fc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	4904      	ldr	r1, [pc, #16]	; (8005000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000

08005004 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005012:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d018      	beq.n	8005050 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800501e:	4b67      	ldr	r3, [pc, #412]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0203 	and.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d10d      	bne.n	800504a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
       ||
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005036:	4b61      	ldr	r3, [pc, #388]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
       ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d047      	beq.n	80050da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
 800504e:	e044      	b.n	80050da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d018      	beq.n	800508a <RCCEx_PLLSAI2_Config+0x86>
 8005058:	2b03      	cmp	r3, #3
 800505a:	d825      	bhi.n	80050a8 <RCCEx_PLLSAI2_Config+0xa4>
 800505c:	2b01      	cmp	r3, #1
 800505e:	d002      	beq.n	8005066 <RCCEx_PLLSAI2_Config+0x62>
 8005060:	2b02      	cmp	r3, #2
 8005062:	d009      	beq.n	8005078 <RCCEx_PLLSAI2_Config+0x74>
 8005064:	e020      	b.n	80050a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005066:	4b55      	ldr	r3, [pc, #340]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d11d      	bne.n	80050ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005076:	e01a      	b.n	80050ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005078:	4b50      	ldr	r3, [pc, #320]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d116      	bne.n	80050b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005088:	e013      	b.n	80050b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800508a:	4b4c      	ldr	r3, [pc, #304]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005096:	4b49      	ldr	r3, [pc, #292]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050a6:	e006      	b.n	80050b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      break;
 80050ac:	e004      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050ae:	bf00      	nop
 80050b0:	e002      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050be:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	430b      	orrs	r3, r1
 80050d4:	4939      	ldr	r1, [pc, #228]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d167      	bne.n	80051b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050e0:	4b36      	ldr	r3, [pc, #216]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a35      	ldr	r2, [pc, #212]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fc fdfc 	bl	8001ce8 <HAL_GetTick>
 80050f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050f2:	e009      	b.n	8005108 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050f4:	f7fc fdf8 	bl	8001ce8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d902      	bls.n	8005108 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	73fb      	strb	r3, [r7, #15]
        break;
 8005106:	e005      	b.n	8005114 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005108:	4b2c      	ldr	r3, [pc, #176]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ef      	bne.n	80050f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d14a      	bne.n	80051b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d111      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005120:	4b26      	ldr	r3, [pc, #152]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6892      	ldr	r2, [r2, #8]
 8005130:	0211      	lsls	r1, r2, #8
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68d2      	ldr	r2, [r2, #12]
 8005136:	0912      	lsrs	r2, r2, #4
 8005138:	0452      	lsls	r2, r2, #17
 800513a:	430a      	orrs	r2, r1
 800513c:	491f      	ldr	r1, [pc, #124]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800513e:	4313      	orrs	r3, r2
 8005140:	614b      	str	r3, [r1, #20]
 8005142:	e011      	b.n	8005168 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005144:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800514c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6892      	ldr	r2, [r2, #8]
 8005154:	0211      	lsls	r1, r2, #8
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6912      	ldr	r2, [r2, #16]
 800515a:	0852      	lsrs	r2, r2, #1
 800515c:	3a01      	subs	r2, #1
 800515e:	0652      	lsls	r2, r2, #25
 8005160:	430a      	orrs	r2, r1
 8005162:	4916      	ldr	r1, [pc, #88]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005168:	4b14      	ldr	r3, [pc, #80]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a13      	ldr	r2, [pc, #76]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800516e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7fc fdb8 	bl	8001ce8 <HAL_GetTick>
 8005178:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800517a:	e009      	b.n	8005190 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800517c:	f7fc fdb4 	bl	8001ce8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d902      	bls.n	8005190 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	73fb      	strb	r3, [r7, #15]
          break;
 800518e:	e005      	b.n	800519c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ef      	beq.n	800517c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051a2:	4b06      	ldr	r3, [pc, #24]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	4904      	ldr	r1, [pc, #16]	; (80051bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d06c      	beq.n	80052ac <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fa5c 	bl	80016a4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	22ca      	movs	r2, #202	; 0xca
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2253      	movs	r2, #83	; 0x53
 8005202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f87c 	bl	8005302 <RTC_EnterInitMode>
 800520a:	4603      	mov	r3, r0
 800520c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d14b      	bne.n	80052ac <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005226:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6899      	ldr	r1, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6919      	ldr	r1, [r3, #16]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	041a      	lsls	r2, r3, #16
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f87f 	bl	8005368 <RTC_ExitInitMode>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11b      	bne.n	80052ac <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0203 	bic.w	r2, r2, #3
 8005282:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69da      	ldr	r2, [r3, #28]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052cc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80052ce:	f7fc fd0b 	bl	8001ce8 <HAL_GetTick>
 80052d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052d4:	e009      	b.n	80052ea <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052d6:	f7fc fd07 	bl	8001ce8 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e4:	d901      	bls.n	80052ea <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e007      	b.n	80052fa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ee      	beq.n	80052d6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d120      	bne.n	800535e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f04f 32ff 	mov.w	r2, #4294967295
 8005324:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005326:	f7fc fcdf 	bl	8001ce8 <HAL_GetTick>
 800532a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800532c:	e00d      	b.n	800534a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800532e:	f7fc fcdb 	bl	8001ce8 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533c:	d905      	bls.n	800534a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <RTC_EnterInitMode+0x5c>
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d1e7      	bne.n	800532e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005374:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <RTC_ExitInitMode+0x78>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <RTC_ExitInitMode+0x78>)
 800537a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800537e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005380:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <RTC_ExitInitMode+0x78>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10c      	bne.n	80053a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ff92 	bl	80052b6 <HAL_RTC_WaitForSynchro>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01e      	beq.n	80053d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2203      	movs	r2, #3
 800539c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	e017      	b.n	80053d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <RTC_ExitInitMode+0x78>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <RTC_ExitInitMode+0x78>)
 80053ac:	f023 0320 	bic.w	r3, r3, #32
 80053b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ff7f 	bl	80052b6 <HAL_RTC_WaitForSynchro>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2203      	movs	r2, #3
 80053c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <RTC_ExitInitMode+0x78>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <RTC_ExitInitMode+0x78>)
 80053d0:	f043 0320 	orr.w	r3, r3, #32
 80053d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40002800 	.word	0x40002800

080053e4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e07f      	b.n	80054fe <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	22ca      	movs	r2, #202	; 0xca
 8005414:	625a      	str	r2, [r3, #36]	; 0x24
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2253      	movs	r2, #83	; 0x53
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800543e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d120      	bne.n	8005490 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800544e:	f7fc fc4b 	bl	8001ce8 <HAL_GetTick>
 8005452:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005454:	e015      	b.n	8005482 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005456:	f7fc fc47 	bl	8001ce8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005464:	d90d      	bls.n	8005482 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2203      	movs	r2, #3
 8005472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e03d      	b.n	80054fe <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0e2      	beq.n	8005456 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f023 0107 	bic.w	r1, r3, #7
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80054ac:	4b16      	ldr	r3, [pc, #88]	; (8005508 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a15      	ldr	r2, [pc, #84]	; (8005508 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80054b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	4a12      	ldr	r2, [pc, #72]	; (8005508 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40010400 	.word	0x40010400

0800550c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005514:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800551a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800553a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f80b 	bl	8005558 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40010400 	.word	0x40010400

08005558 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3350      	adds	r3, #80	; 0x50
 800557e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	009a      	lsls	r2, r3, #2
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	4413      	add	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	461a      	mov	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6013      	str	r3, [r2, #0]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3350      	adds	r3, #80	; 0x50
 80055ae:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e040      	b.n	800565e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fc fa37 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2224      	movs	r2, #36	; 0x24
 80055f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fc19 	bl	8005e40 <UART_SetConfig>
 800560e:	4603      	mov	r3, r0
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e022      	b.n	800565e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fec5 	bl	80063b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005634:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005644:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 ff4c 	bl	80064f4 <UART_CheckIdleState>
 800565c:	4603      	mov	r3, r0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08a      	sub	sp, #40	; 0x28
 800566a:	af02      	add	r7, sp, #8
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800567a:	2b20      	cmp	r3, #32
 800567c:	f040 8082 	bne.w	8005784 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_UART_Transmit+0x26>
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e07a      	b.n	8005786 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_UART_Transmit+0x38>
 800569a:	2302      	movs	r3, #2
 800569c:	e073      	b.n	8005786 <HAL_UART_Transmit+0x120>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2221      	movs	r2, #33	; 0x21
 80056b2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b4:	f7fc fb18 	bl	8001ce8 <HAL_GetTick>
 80056b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d108      	bne.n	80056e6 <HAL_UART_Transmit+0x80>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e003      	b.n	80056ee <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056f6:	e02d      	b.n	8005754 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 ff3f 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e039      	b.n	8005786 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	881a      	ldrh	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005724:	b292      	uxth	r2, r2
 8005726:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	3302      	adds	r3, #2
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e008      	b.n	8005742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	781a      	ldrb	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	b292      	uxth	r2, r2
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1cb      	bne.n	80056f8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	2140      	movs	r1, #64	; 0x40
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 ff0b 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e005      	b.n	8005786 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d142      	bne.n	800582c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_Receive_IT+0x22>
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e03b      	b.n	800582e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Receive_IT+0x34>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e034      	b.n	800582e <HAL_UART_Receive_IT+0x9e>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_UART_Receive_IT+0xa8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d01f      	beq.n	800581c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	613b      	str	r3, [r7, #16]
   return(result);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	69f9      	ldr	r1, [r7, #28]
 800580e:	6a3a      	ldr	r2, [r7, #32]
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	61bb      	str	r3, [r7, #24]
   return(result);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e6      	bne.n	80057ea <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	461a      	mov	r2, r3
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 ff74 	bl	8006710 <UART_Start_Receive_IT>
 8005828:	4603      	mov	r3, r0
 800582a:	e000      	b.n	800582e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800582c:	2302      	movs	r3, #2
  }
}
 800582e:	4618      	mov	r0, r3
 8005830:	3728      	adds	r7, #40	; 0x28
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40008000 	.word	0x40008000

0800583c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b0ba      	sub	sp, #232	; 0xe8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005862:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005866:	f640 030f 	movw	r3, #2063	; 0x80f
 800586a:	4013      	ands	r3, r2
 800586c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d115      	bne.n	80058a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00f      	beq.n	80058a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d009      	beq.n	80058a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 82a6 	beq.w	8005de6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
      }
      return;
 80058a2:	e2a0      	b.n	8005de6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80058a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8117 	beq.w	8005adc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058be:	4b85      	ldr	r3, [pc, #532]	; (8005ad4 <HAL_UART_IRQHandler+0x298>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 810a 	beq.w	8005adc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d011      	beq.n	80058f8 <HAL_UART_IRQHandler+0xbc>
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2201      	movs	r2, #1
 80058e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d011      	beq.n	8005928 <HAL_UART_IRQHandler+0xec>
 8005904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2202      	movs	r2, #2
 8005916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d011      	beq.n	8005958 <HAL_UART_IRQHandler+0x11c>
 8005934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2204      	movs	r2, #4
 8005946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800594e:	f043 0202 	orr.w	r2, r3, #2
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d017      	beq.n	8005994 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005974:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2208      	movs	r2, #8
 8005982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800598a:	f043 0208 	orr.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599c:	2b00      	cmp	r3, #0
 800599e:	d012      	beq.n	80059c6 <HAL_UART_IRQHandler+0x18a>
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00c      	beq.n	80059c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 820c 	beq.w	8005dea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d04f      	beq.n	8005abe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 ff40 	bl	80068a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b40      	cmp	r3, #64	; 0x40
 8005a30:	d141      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1d9      	bne.n	8005a32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <HAL_UART_IRQHandler+0x29c>)
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd fdbb 	bl	800360e <HAL_DMA_Abort_IT>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d017      	beq.n	8005ace <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	e00f      	b.n	8005ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9b0 	bl	8005e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	e00b      	b.n	8005ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9ac 	bl	8005e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	e007      	b.n	8005ace <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9a8 	bl	8005e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005acc:	e18d      	b.n	8005dea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ace:	bf00      	nop
    return;
 8005ad0:	e18b      	b.n	8005dea <HAL_UART_IRQHandler+0x5ae>
 8005ad2:	bf00      	nop
 8005ad4:	04000120 	.word	0x04000120
 8005ad8:	0800696b 	.word	0x0800696b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	f040 8146 	bne.w	8005d72 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 813f 	beq.w	8005d72 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8138 	beq.w	8005d72 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2210      	movs	r2, #16
 8005b08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	f040 80b4 	bne.w	8005c82 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 815f 	beq.w	8005dee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	f080 8157 	bcs.w	8005dee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 8085 	bne.w	8005c66 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1da      	bne.n	8005b5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3308      	adds	r3, #8
 8005bac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e1      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e3      	bne.n	8005be2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	f023 0310 	bic.w	r3, r3, #16
 8005c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e4      	bne.n	8005c26 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fd fc96 	bl	8003592 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f8d4 	bl	8005e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c80:	e0b5      	b.n	8005dee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 80a7 	beq.w	8005df2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005ca4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80a2 	beq.w	8005df2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e4      	bne.n	8005cae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d08:	633a      	str	r2, [r7, #48]	; 0x30
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e3      	bne.n	8005ce4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	69b9      	ldr	r1, [r7, #24]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e4      	bne.n	8005d2e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f85c 	bl	8005e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d70:	e03f      	b.n	8005df2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00e      	beq.n	8005d9c <HAL_UART_IRQHandler+0x560>
 8005d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 ff88 	bl	8006caa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d9a:	e02d      	b.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01c      	beq.n	8005df6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
    }
    return;
 8005dc4:	e017      	b.n	8005df6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d012      	beq.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
 8005dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fdd9 	bl	8006996 <UART_EndTransmit_IT>
    return;
 8005de4:	e008      	b.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005de6:	bf00      	nop
 8005de8:	e006      	b.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005df6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005df8:	37e8      	adds	r7, #232	; 0xe8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop

08005e00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e44:	b08a      	sub	sp, #40	; 0x28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4ba4      	ldr	r3, [pc, #656]	; (8006100 <UART_SetConfig+0x2c0>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a99      	ldr	r2, [pc, #612]	; (8006104 <UART_SetConfig+0x2c4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a90      	ldr	r2, [pc, #576]	; (8006108 <UART_SetConfig+0x2c8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d126      	bne.n	8005f18 <UART_SetConfig+0xd8>
 8005eca:	4b90      	ldr	r3, [pc, #576]	; (800610c <UART_SetConfig+0x2cc>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d81b      	bhi.n	8005f10 <UART_SetConfig+0xd0>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <UART_SetConfig+0xa0>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005ef1 	.word	0x08005ef1
 8005ee4:	08005f01 	.word	0x08005f01
 8005ee8:	08005ef9 	.word	0x08005ef9
 8005eec:	08005f09 	.word	0x08005f09
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef6:	e116      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efe:	e112      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f06:	e10e      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0e:	e10a      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f16:	e106      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7c      	ldr	r2, [pc, #496]	; (8006110 <UART_SetConfig+0x2d0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d138      	bne.n	8005f94 <UART_SetConfig+0x154>
 8005f22:	4b7a      	ldr	r3, [pc, #488]	; (800610c <UART_SetConfig+0x2cc>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	f003 030c 	and.w	r3, r3, #12
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	d82d      	bhi.n	8005f8c <UART_SetConfig+0x14c>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0xf8>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f6d 	.word	0x08005f6d
 8005f3c:	08005f8d 	.word	0x08005f8d
 8005f40:	08005f8d 	.word	0x08005f8d
 8005f44:	08005f8d 	.word	0x08005f8d
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f8d 	.word	0x08005f8d
 8005f50:	08005f8d 	.word	0x08005f8d
 8005f54:	08005f8d 	.word	0x08005f8d
 8005f58:	08005f75 	.word	0x08005f75
 8005f5c:	08005f8d 	.word	0x08005f8d
 8005f60:	08005f8d 	.word	0x08005f8d
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f85 	.word	0x08005f85
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f72:	e0d8      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f74:	2302      	movs	r3, #2
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7a:	e0d4      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f82:	e0d0      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f84:	2308      	movs	r3, #8
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8a:	e0cc      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f92:	e0c8      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5e      	ldr	r2, [pc, #376]	; (8006114 <UART_SetConfig+0x2d4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d125      	bne.n	8005fea <UART_SetConfig+0x1aa>
 8005f9e:	4b5b      	ldr	r3, [pc, #364]	; (800610c <UART_SetConfig+0x2cc>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fa8:	2b30      	cmp	r3, #48	; 0x30
 8005faa:	d016      	beq.n	8005fda <UART_SetConfig+0x19a>
 8005fac:	2b30      	cmp	r3, #48	; 0x30
 8005fae:	d818      	bhi.n	8005fe2 <UART_SetConfig+0x1a2>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d00a      	beq.n	8005fca <UART_SetConfig+0x18a>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d814      	bhi.n	8005fe2 <UART_SetConfig+0x1a2>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <UART_SetConfig+0x182>
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d008      	beq.n	8005fd2 <UART_SetConfig+0x192>
 8005fc0:	e00f      	b.n	8005fe2 <UART_SetConfig+0x1a2>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc8:	e0ad      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd0:	e0a9      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005fd2:	2304      	movs	r3, #4
 8005fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd8:	e0a5      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005fda:	2308      	movs	r3, #8
 8005fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe0:	e0a1      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005fe2:	2310      	movs	r3, #16
 8005fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe8:	e09d      	b.n	8006126 <UART_SetConfig+0x2e6>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a4a      	ldr	r2, [pc, #296]	; (8006118 <UART_SetConfig+0x2d8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d125      	bne.n	8006040 <UART_SetConfig+0x200>
 8005ff4:	4b45      	ldr	r3, [pc, #276]	; (800610c <UART_SetConfig+0x2cc>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8006000:	d016      	beq.n	8006030 <UART_SetConfig+0x1f0>
 8006002:	2bc0      	cmp	r3, #192	; 0xc0
 8006004:	d818      	bhi.n	8006038 <UART_SetConfig+0x1f8>
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d00a      	beq.n	8006020 <UART_SetConfig+0x1e0>
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d814      	bhi.n	8006038 <UART_SetConfig+0x1f8>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <UART_SetConfig+0x1d8>
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d008      	beq.n	8006028 <UART_SetConfig+0x1e8>
 8006016:	e00f      	b.n	8006038 <UART_SetConfig+0x1f8>
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601e:	e082      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006020:	2302      	movs	r3, #2
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006026:	e07e      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602e:	e07a      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006036:	e076      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603e:	e072      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a35      	ldr	r2, [pc, #212]	; (800611c <UART_SetConfig+0x2dc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d12a      	bne.n	80060a0 <UART_SetConfig+0x260>
 800604a:	4b30      	ldr	r3, [pc, #192]	; (800610c <UART_SetConfig+0x2cc>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006058:	d01a      	beq.n	8006090 <UART_SetConfig+0x250>
 800605a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605e:	d81b      	bhi.n	8006098 <UART_SetConfig+0x258>
 8006060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006064:	d00c      	beq.n	8006080 <UART_SetConfig+0x240>
 8006066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606a:	d815      	bhi.n	8006098 <UART_SetConfig+0x258>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <UART_SetConfig+0x238>
 8006070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006074:	d008      	beq.n	8006088 <UART_SetConfig+0x248>
 8006076:	e00f      	b.n	8006098 <UART_SetConfig+0x258>
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e052      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006080:	2302      	movs	r3, #2
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006086:	e04e      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608e:	e04a      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006096:	e046      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800609e:	e042      	b.n	8006126 <UART_SetConfig+0x2e6>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <UART_SetConfig+0x2c4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d13a      	bne.n	8006120 <UART_SetConfig+0x2e0>
 80060aa:	4b18      	ldr	r3, [pc, #96]	; (800610c <UART_SetConfig+0x2cc>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060b8:	d01a      	beq.n	80060f0 <UART_SetConfig+0x2b0>
 80060ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060be:	d81b      	bhi.n	80060f8 <UART_SetConfig+0x2b8>
 80060c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c4:	d00c      	beq.n	80060e0 <UART_SetConfig+0x2a0>
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ca:	d815      	bhi.n	80060f8 <UART_SetConfig+0x2b8>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <UART_SetConfig+0x298>
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d4:	d008      	beq.n	80060e8 <UART_SetConfig+0x2a8>
 80060d6:	e00f      	b.n	80060f8 <UART_SetConfig+0x2b8>
 80060d8:	2300      	movs	r3, #0
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060de:	e022      	b.n	8006126 <UART_SetConfig+0x2e6>
 80060e0:	2302      	movs	r3, #2
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e6:	e01e      	b.n	8006126 <UART_SetConfig+0x2e6>
 80060e8:	2304      	movs	r3, #4
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ee:	e01a      	b.n	8006126 <UART_SetConfig+0x2e6>
 80060f0:	2308      	movs	r3, #8
 80060f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f6:	e016      	b.n	8006126 <UART_SetConfig+0x2e6>
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fe:	e012      	b.n	8006126 <UART_SetConfig+0x2e6>
 8006100:	efff69f3 	.word	0xefff69f3
 8006104:	40008000 	.word	0x40008000
 8006108:	40013800 	.word	0x40013800
 800610c:	40021000 	.word	0x40021000
 8006110:	40004400 	.word	0x40004400
 8006114:	40004800 	.word	0x40004800
 8006118:	40004c00 	.word	0x40004c00
 800611c:	40005000 	.word	0x40005000
 8006120:	2310      	movs	r3, #16
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a9f      	ldr	r2, [pc, #636]	; (80063a8 <UART_SetConfig+0x568>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d17a      	bne.n	8006226 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006134:	2b08      	cmp	r3, #8
 8006136:	d824      	bhi.n	8006182 <UART_SetConfig+0x342>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <UART_SetConfig+0x300>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006165 	.word	0x08006165
 8006144:	08006183 	.word	0x08006183
 8006148:	0800616d 	.word	0x0800616d
 800614c:	08006183 	.word	0x08006183
 8006150:	08006173 	.word	0x08006173
 8006154:	08006183 	.word	0x08006183
 8006158:	08006183 	.word	0x08006183
 800615c:	08006183 	.word	0x08006183
 8006160:	0800617b 	.word	0x0800617b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006164:	f7fe fad4 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8006168:	61f8      	str	r0, [r7, #28]
        break;
 800616a:	e010      	b.n	800618e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800616c:	4b8f      	ldr	r3, [pc, #572]	; (80063ac <UART_SetConfig+0x56c>)
 800616e:	61fb      	str	r3, [r7, #28]
        break;
 8006170:	e00d      	b.n	800618e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006172:	f7fe fa35 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8006176:	61f8      	str	r0, [r7, #28]
        break;
 8006178:	e009      	b.n	800618e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	61fb      	str	r3, [r7, #28]
        break;
 8006180:	e005      	b.n	800618e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800618c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80fb 	beq.w	800638c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	4413      	add	r3, r2
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d305      	bcc.n	80061b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d903      	bls.n	80061ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b8:	e0e8      	b.n	800638c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2200      	movs	r2, #0
 80061be:	461c      	mov	r4, r3
 80061c0:	4615      	mov	r5, r2
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	022b      	lsls	r3, r5, #8
 80061cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061d0:	0222      	lsls	r2, r4, #8
 80061d2:	68f9      	ldr	r1, [r7, #12]
 80061d4:	6849      	ldr	r1, [r1, #4]
 80061d6:	0849      	lsrs	r1, r1, #1
 80061d8:	2000      	movs	r0, #0
 80061da:	4688      	mov	r8, r1
 80061dc:	4681      	mov	r9, r0
 80061de:	eb12 0a08 	adds.w	sl, r2, r8
 80061e2:	eb43 0b09 	adc.w	fp, r3, r9
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f4:	4650      	mov	r0, sl
 80061f6:	4659      	mov	r1, fp
 80061f8:	f7fa fd36 	bl	8000c68 <__aeabi_uldivmod>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4613      	mov	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800620a:	d308      	bcc.n	800621e <UART_SetConfig+0x3de>
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006212:	d204      	bcs.n	800621e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	60da      	str	r2, [r3, #12]
 800621c:	e0b6      	b.n	800638c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006224:	e0b2      	b.n	800638c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622e:	d15e      	bne.n	80062ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006234:	2b08      	cmp	r3, #8
 8006236:	d828      	bhi.n	800628a <UART_SetConfig+0x44a>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x400>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006265 	.word	0x08006265
 8006244:	0800626d 	.word	0x0800626d
 8006248:	08006275 	.word	0x08006275
 800624c:	0800628b 	.word	0x0800628b
 8006250:	0800627b 	.word	0x0800627b
 8006254:	0800628b 	.word	0x0800628b
 8006258:	0800628b 	.word	0x0800628b
 800625c:	0800628b 	.word	0x0800628b
 8006260:	08006283 	.word	0x08006283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006264:	f7fe fa54 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8006268:	61f8      	str	r0, [r7, #28]
        break;
 800626a:	e014      	b.n	8006296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800626c:	f7fe fa66 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 8006270:	61f8      	str	r0, [r7, #28]
        break;
 8006272:	e010      	b.n	8006296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006274:	4b4d      	ldr	r3, [pc, #308]	; (80063ac <UART_SetConfig+0x56c>)
 8006276:	61fb      	str	r3, [r7, #28]
        break;
 8006278:	e00d      	b.n	8006296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627a:	f7fe f9b1 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800627e:	61f8      	str	r0, [r7, #28]
        break;
 8006280:	e009      	b.n	8006296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006286:	61fb      	str	r3, [r7, #28]
        break;
 8006288:	e005      	b.n	8006296 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d077      	beq.n	800638c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	005a      	lsls	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	441a      	add	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b0f      	cmp	r3, #15
 80062b6:	d916      	bls.n	80062e6 <UART_SetConfig+0x4a6>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062be:	d212      	bcs.n	80062e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	f023 030f 	bic.w	r3, r3, #15
 80062c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	8afb      	ldrh	r3, [r7, #22]
 80062d8:	4313      	orrs	r3, r2
 80062da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	8afa      	ldrh	r2, [r7, #22]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e052      	b.n	800638c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062ec:	e04e      	b.n	800638c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d827      	bhi.n	8006346 <UART_SetConfig+0x506>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <UART_SetConfig+0x4bc>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006329 	.word	0x08006329
 8006304:	08006331 	.word	0x08006331
 8006308:	08006347 	.word	0x08006347
 800630c:	08006337 	.word	0x08006337
 8006310:	08006347 	.word	0x08006347
 8006314:	08006347 	.word	0x08006347
 8006318:	08006347 	.word	0x08006347
 800631c:	0800633f 	.word	0x0800633f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006320:	f7fe f9f6 	bl	8004710 <HAL_RCC_GetPCLK1Freq>
 8006324:	61f8      	str	r0, [r7, #28]
        break;
 8006326:	e014      	b.n	8006352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7fe fa08 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 800632c:	61f8      	str	r0, [r7, #28]
        break;
 800632e:	e010      	b.n	8006352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <UART_SetConfig+0x56c>)
 8006332:	61fb      	str	r3, [r7, #28]
        break;
 8006334:	e00d      	b.n	8006352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006336:	f7fe f953 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800633a:	61f8      	str	r0, [r7, #28]
        break;
 800633c:	e009      	b.n	8006352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	61fb      	str	r3, [r7, #28]
        break;
 8006344:	e005      	b.n	8006352 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006350:	bf00      	nop
    }

    if (pclk != 0U)
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d019      	beq.n	800638c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	085a      	lsrs	r2, r3, #1
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	441a      	add	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	2b0f      	cmp	r3, #15
 8006370:	d909      	bls.n	8006386 <UART_SetConfig+0x546>
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006378:	d205      	bcs.n	8006386 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	e002      	b.n	800638c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006398:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800639c:	4618      	mov	r0, r3
 800639e:	3728      	adds	r7, #40	; 0x28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063a6:	bf00      	nop
 80063a8:	40008000 	.word	0x40008000
 80063ac:	00f42400 	.word	0x00f42400

080063b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ae:	d10a      	bne.n	80064c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006504:	f7fb fbf0 	bl	8001ce8 <HAL_GetTick>
 8006508:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10e      	bne.n	8006536 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f82d 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e023      	b.n	800657e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d10e      	bne.n	8006562 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f817 	bl	8006586 <UART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e00d      	b.n	800657e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b09c      	sub	sp, #112	; 0x70
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006596:	e0a5      	b.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	f000 80a1 	beq.w	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a2:	f7fb fba1 	bl	8001ce8 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d302      	bcc.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80065b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d13e      	bne.n	8006636 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065cc:	667b      	str	r3, [r7, #100]	; 0x64
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e6      	bne.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	663b      	str	r3, [r7, #96]	; 0x60
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800660a:	64ba      	str	r2, [r7, #72]	; 0x48
 800660c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e067      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d04f      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006652:	d147      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800665c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	637b      	str	r3, [r7, #52]	; 0x34
 800667e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e6      	bne.n	800665e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3308      	adds	r3, #8
 8006696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	613b      	str	r3, [r7, #16]
   return(result);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066b0:	623a      	str	r2, [r7, #32]
 80066b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	69f9      	ldr	r1, [r7, #28]
 80066b6:	6a3a      	ldr	r2, [r7, #32]
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e5      	bne.n	8006690 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e010      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69da      	ldr	r2, [r3, #28]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	429a      	cmp	r2, r3
 8006700:	f43f af4a 	beq.w	8006598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3770      	adds	r7, #112	; 0x70
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006710:	b480      	push	{r7}
 8006712:	b097      	sub	sp, #92	; 0x5c
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006742:	d10e      	bne.n	8006762 <UART_Start_Receive_IT+0x52>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <UART_Start_Receive_IT+0x48>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006756:	e02d      	b.n	80067b4 <UART_Start_Receive_IT+0xa4>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	22ff      	movs	r2, #255	; 0xff
 800675c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006760:	e028      	b.n	80067b4 <UART_Start_Receive_IT+0xa4>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10d      	bne.n	8006786 <UART_Start_Receive_IT+0x76>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <UART_Start_Receive_IT+0x6c>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800677a:	e01b      	b.n	80067b4 <UART_Start_Receive_IT+0xa4>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	227f      	movs	r2, #127	; 0x7f
 8006780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006784:	e016      	b.n	80067b4 <UART_Start_Receive_IT+0xa4>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678e:	d10d      	bne.n	80067ac <UART_Start_Receive_IT+0x9c>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <UART_Start_Receive_IT+0x92>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	227f      	movs	r2, #127	; 0x7f
 800679c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067a0:	e008      	b.n	80067b4 <UART_Start_Receive_IT+0xa4>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	223f      	movs	r2, #63	; 0x3f
 80067a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067aa:	e003      	b.n	80067b4 <UART_Start_Receive_IT+0xa4>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2222      	movs	r2, #34	; 0x22
 80067c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	657b      	str	r3, [r7, #84]	; 0x54
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80067e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fe:	d107      	bne.n	8006810 <UART_Start_Receive_IT+0x100>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a24      	ldr	r2, [pc, #144]	; (800689c <UART_Start_Receive_IT+0x18c>)
 800680c:	665a      	str	r2, [r3, #100]	; 0x64
 800680e:	e002      	b.n	8006816 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a23      	ldr	r2, [pc, #140]	; (80068a0 <UART_Start_Receive_IT+0x190>)
 8006814:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d019      	beq.n	800685a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
 8006846:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800684a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e6      	bne.n	8006826 <UART_Start_Receive_IT+0x116>
 8006858:	e018      	b.n	800688c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	613b      	str	r3, [r7, #16]
   return(result);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f043 0320 	orr.w	r3, r3, #32
 800686e:	653b      	str	r3, [r7, #80]	; 0x50
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	6a3a      	ldr	r2, [r7, #32]
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	61bb      	str	r3, [r7, #24]
   return(result);
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e6      	bne.n	800685a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	375c      	adds	r7, #92	; 0x5c
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	08006b4b 	.word	0x08006b4b
 80068a0:	080069eb 	.word	0x080069eb

080068a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b095      	sub	sp, #84	; 0x54
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ca:	643b      	str	r3, [r7, #64]	; 0x40
 80068cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e5      	bne.n	80068de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006916:	2b01      	cmp	r3, #1
 8006918:	d118      	bne.n	800694c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	60bb      	str	r3, [r7, #8]
   return(result);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f023 0310 	bic.w	r3, r3, #16
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6979      	ldr	r1, [r7, #20]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	613b      	str	r3, [r7, #16]
   return(result);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800695e:	bf00      	nop
 8006960:	3754      	adds	r7, #84	; 0x54
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fa43 	bl	8005e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b088      	sub	sp, #32
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff fa0f 	bl	8005e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e2:	bf00      	nop
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b096      	sub	sp, #88	; 0x58
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a00:	2b22      	cmp	r3, #34	; 0x22
 8006a02:	f040 8094 	bne.w	8006b2e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a10:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a14:	b2d9      	uxtb	r1, r3
 8006a16:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	400a      	ands	r2, r1
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d179      	bne.n	8006b42 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a62:	653b      	str	r3, [r7, #80]	; 0x50
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3308      	adds	r3, #8
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aa0:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e5      	bne.n	8006a80 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d12e      	bne.n	8006b26 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0310 	bic.w	r3, r3, #16
 8006ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aec:	61fb      	str	r3, [r7, #28]
 8006aee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	69b9      	ldr	r1, [r7, #24]
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	617b      	str	r3, [r7, #20]
   return(result);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d103      	bne.n	8006b16 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2210      	movs	r2, #16
 8006b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff f982 	bl	8005e28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b24:	e00d      	b.n	8006b42 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fa fb4c 	bl	80011c4 <HAL_UART_RxCpltCallback>
}
 8006b2c:	e009      	b.n	8006b42 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	8b1b      	ldrh	r3, [r3, #24]
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0208 	orr.w	r2, r2, #8
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	831a      	strh	r2, [r3, #24]
}
 8006b42:	bf00      	nop
 8006b44:	3758      	adds	r7, #88	; 0x58
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b096      	sub	sp, #88	; 0x58
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b60:	2b22      	cmp	r3, #34	; 0x22
 8006b62:	f040 8094 	bne.w	8006c8e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b76:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b7e:	4013      	ands	r3, r2
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	1c9a      	adds	r2, r3, #2
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d179      	bne.n	8006ca2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8006bce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e6      	bne.n	8006bae <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d12e      	bne.n	8006c86 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f023 0310 	bic.w	r3, r3, #16
 8006c42:	647b      	str	r3, [r7, #68]	; 0x44
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6979      	ldr	r1, [r7, #20]
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e6      	bne.n	8006c2e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b10      	cmp	r3, #16
 8006c6c:	d103      	bne.n	8006c76 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2210      	movs	r2, #16
 8006c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7ff f8d2 	bl	8005e28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c84:	e00d      	b.n	8006ca2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fa fa9c 	bl	80011c4 <HAL_UART_RxCpltCallback>
}
 8006c8c:	e009      	b.n	8006ca2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	8b1b      	ldrh	r3, [r3, #24]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0208 	orr.w	r2, r2, #8
 8006c9e:	b292      	uxth	r2, r2
 8006ca0:	831a      	strh	r2, [r3, #24]
}
 8006ca2:	bf00      	nop
 8006ca4:	3758      	adds	r7, #88	; 0x58
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <_initVoltsArray>:

/*
 * Private functions
 */

static void _initVoltsArray(void){
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
    _vs[0] = 3.200; 
 8006cc4:	49b4      	ldr	r1, [pc, #720]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006cc6:	a36e      	add	r3, pc, #440	; (adr r3, 8006e80 <_initVoltsArray+0x1c0>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	e9c1 2300 	strd	r2, r3, [r1]
    _vs[1] = 3.250; _vs[2] = 3.300; _vs[3] = 3.350; _vs[4] = 3.400; _vs[5] = 3.450;
 8006cd0:	49b1      	ldr	r1, [pc, #708]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	4bb1      	ldr	r3, [pc, #708]	; (8006f9c <_initVoltsArray+0x2dc>)
 8006cd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006cdc:	49ae      	ldr	r1, [pc, #696]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006cde:	a36a      	add	r3, pc, #424	; (adr r3, 8006e88 <_initVoltsArray+0x1c8>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006ce8:	49ab      	ldr	r1, [pc, #684]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006cea:	a369      	add	r3, pc, #420	; (adr r3, 8006e90 <_initVoltsArray+0x1d0>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8006cf4:	49a8      	ldr	r1, [pc, #672]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006cf6:	a368      	add	r3, pc, #416	; (adr r3, 8006e98 <_initVoltsArray+0x1d8>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8006d00:	49a5      	ldr	r1, [pc, #660]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d02:	a367      	add	r3, pc, #412	; (adr r3, 8006ea0 <_initVoltsArray+0x1e0>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    _vs[6] = 3.500; _vs[7] = 3.550; _vs[8] = 3.600; _vs[9] = 3.650; _vs[10] = 3.700;
 8006d0c:	49a2      	ldr	r1, [pc, #648]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	4ba3      	ldr	r3, [pc, #652]	; (8006fa0 <_initVoltsArray+0x2e0>)
 8006d14:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8006d18:	499f      	ldr	r1, [pc, #636]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d1a:	a363      	add	r3, pc, #396	; (adr r3, 8006ea8 <_initVoltsArray+0x1e8>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8006d24:	499c      	ldr	r1, [pc, #624]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d26:	a362      	add	r3, pc, #392	; (adr r3, 8006eb0 <_initVoltsArray+0x1f0>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8006d30:	4999      	ldr	r1, [pc, #612]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d32:	a361      	add	r3, pc, #388	; (adr r3, 8006eb8 <_initVoltsArray+0x1f8>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006d3c:	4996      	ldr	r1, [pc, #600]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d3e:	a360      	add	r3, pc, #384	; (adr r3, 8006ec0 <_initVoltsArray+0x200>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    _vs[11] = 3.703; _vs[12] = 3.706; _vs[13] = 3.710; _vs[14] = 3.713; _vs[15] = 3.716;
 8006d48:	4993      	ldr	r1, [pc, #588]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d4a:	a35f      	add	r3, pc, #380	; (adr r3, 8006ec8 <_initVoltsArray+0x208>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8006d54:	4990      	ldr	r1, [pc, #576]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d56:	a35e      	add	r3, pc, #376	; (adr r3, 8006ed0 <_initVoltsArray+0x210>)
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006d60:	498d      	ldr	r1, [pc, #564]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d62:	a35d      	add	r3, pc, #372	; (adr r3, 8006ed8 <_initVoltsArray+0x218>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8006d6c:	498a      	ldr	r1, [pc, #552]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d6e:	a35c      	add	r3, pc, #368	; (adr r3, 8006ee0 <_initVoltsArray+0x220>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8006d78:	4987      	ldr	r1, [pc, #540]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d7a:	a35b      	add	r3, pc, #364	; (adr r3, 8006ee8 <_initVoltsArray+0x228>)
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    _vs[16] = 3.719; _vs[17] = 3.723; _vs[18] = 3.726; _vs[19] = 3.729; _vs[20] = 3.732;
 8006d84:	4984      	ldr	r1, [pc, #528]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d86:	a35a      	add	r3, pc, #360	; (adr r3, 8006ef0 <_initVoltsArray+0x230>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8006d90:	4981      	ldr	r1, [pc, #516]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d92:	a359      	add	r3, pc, #356	; (adr r3, 8006ef8 <_initVoltsArray+0x238>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8006d9c:	497e      	ldr	r1, [pc, #504]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006d9e:	a358      	add	r3, pc, #352	; (adr r3, 8006f00 <_initVoltsArray+0x240>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8006da8:	497b      	ldr	r1, [pc, #492]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006daa:	a357      	add	r3, pc, #348	; (adr r3, 8006f08 <_initVoltsArray+0x248>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8006db4:	4978      	ldr	r1, [pc, #480]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006db6:	a356      	add	r3, pc, #344	; (adr r3, 8006f10 <_initVoltsArray+0x250>)
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    _vs[21] = 3.735; _vs[22] = 3.739; _vs[23] = 3.742; _vs[24] = 3.745; _vs[25] = 3.748;
 8006dc0:	4975      	ldr	r1, [pc, #468]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006dc2:	a355      	add	r3, pc, #340	; (adr r3, 8006f18 <_initVoltsArray+0x258>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8006dcc:	4972      	ldr	r1, [pc, #456]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006dce:	a354      	add	r3, pc, #336	; (adr r3, 8006f20 <_initVoltsArray+0x260>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
 8006dd8:	496f      	ldr	r1, [pc, #444]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006dda:	a353      	add	r3, pc, #332	; (adr r3, 8006f28 <_initVoltsArray+0x268>)
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8006de4:	496c      	ldr	r1, [pc, #432]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006de6:	a352      	add	r3, pc, #328	; (adr r3, 8006f30 <_initVoltsArray+0x270>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8006df0:	4969      	ldr	r1, [pc, #420]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006df2:	a351      	add	r3, pc, #324	; (adr r3, 8006f38 <_initVoltsArray+0x278>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    _vs[26] = 3.752; _vs[27] = 3.755; _vs[28] = 3.758; _vs[29] = 3.761; _vs[30] = 3.765;
 8006dfc:	4966      	ldr	r1, [pc, #408]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006dfe:	a350      	add	r3, pc, #320	; (adr r3, 8006f40 <_initVoltsArray+0x280>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
 8006e08:	4963      	ldr	r1, [pc, #396]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e0a:	a34f      	add	r3, pc, #316	; (adr r3, 8006f48 <_initVoltsArray+0x288>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 8006e14:	4960      	ldr	r1, [pc, #384]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e16:	a34e      	add	r3, pc, #312	; (adr r3, 8006f50 <_initVoltsArray+0x290>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 8006e20:	495d      	ldr	r1, [pc, #372]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e22:	a34d      	add	r3, pc, #308	; (adr r3, 8006f58 <_initVoltsArray+0x298>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 8006e2c:	495a      	ldr	r1, [pc, #360]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e2e:	a34c      	add	r3, pc, #304	; (adr r3, 8006f60 <_initVoltsArray+0x2a0>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    _vs[31] = 3.768; _vs[32] = 3.771; _vs[33] = 3.774; _vs[34] = 3.777; _vs[35] = 3.781;
 8006e38:	4957      	ldr	r1, [pc, #348]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e3a:	a34b      	add	r3, pc, #300	; (adr r3, 8006f68 <_initVoltsArray+0x2a8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8006e44:	4954      	ldr	r1, [pc, #336]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e46:	a34a      	add	r3, pc, #296	; (adr r3, 8006f70 <_initVoltsArray+0x2b0>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
 8006e50:	4951      	ldr	r1, [pc, #324]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e52:	a349      	add	r3, pc, #292	; (adr r3, 8006f78 <_initVoltsArray+0x2b8>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 8006e5c:	494e      	ldr	r1, [pc, #312]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e5e:	a348      	add	r3, pc, #288	; (adr r3, 8006f80 <_initVoltsArray+0x2c0>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 8006e68:	494b      	ldr	r1, [pc, #300]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e6a:	a347      	add	r3, pc, #284	; (adr r3, 8006f88 <_initVoltsArray+0x2c8>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    _vs[36] = 3.784; _vs[37] = 3.787; _vs[38] = 3.790; _vs[39] = 3.794; _vs[40] = 3.797;
 8006e74:	4948      	ldr	r1, [pc, #288]	; (8006f98 <_initVoltsArray+0x2d8>)
 8006e76:	a346      	add	r3, pc, #280	; (adr r3, 8006f90 <_initVoltsArray+0x2d0>)
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	e092      	b.n	8006fa4 <_initVoltsArray+0x2e4>
 8006e7e:	bf00      	nop
 8006e80:	9999999a 	.word	0x9999999a
 8006e84:	40099999 	.word	0x40099999
 8006e88:	66666666 	.word	0x66666666
 8006e8c:	400a6666 	.word	0x400a6666
 8006e90:	cccccccd 	.word	0xcccccccd
 8006e94:	400acccc 	.word	0x400acccc
 8006e98:	33333333 	.word	0x33333333
 8006e9c:	400b3333 	.word	0x400b3333
 8006ea0:	9999999a 	.word	0x9999999a
 8006ea4:	400b9999 	.word	0x400b9999
 8006ea8:	66666666 	.word	0x66666666
 8006eac:	400c6666 	.word	0x400c6666
 8006eb0:	cccccccd 	.word	0xcccccccd
 8006eb4:	400ccccc 	.word	0x400ccccc
 8006eb8:	33333333 	.word	0x33333333
 8006ebc:	400d3333 	.word	0x400d3333
 8006ec0:	9999999a 	.word	0x9999999a
 8006ec4:	400d9999 	.word	0x400d9999
 8006ec8:	76c8b439 	.word	0x76c8b439
 8006ecc:	400d9fbe 	.word	0x400d9fbe
 8006ed0:	53f7ced9 	.word	0x53f7ced9
 8006ed4:	400da5e3 	.word	0x400da5e3
 8006ed8:	7ae147ae 	.word	0x7ae147ae
 8006edc:	400dae14 	.word	0x400dae14
 8006ee0:	5810624e 	.word	0x5810624e
 8006ee4:	400db439 	.word	0x400db439
 8006ee8:	353f7cee 	.word	0x353f7cee
 8006eec:	400dba5e 	.word	0x400dba5e
 8006ef0:	126e978d 	.word	0x126e978d
 8006ef4:	400dc083 	.word	0x400dc083
 8006ef8:	39581062 	.word	0x39581062
 8006efc:	400dc8b4 	.word	0x400dc8b4
 8006f00:	16872b02 	.word	0x16872b02
 8006f04:	400dced9 	.word	0x400dced9
 8006f08:	f3b645a2 	.word	0xf3b645a2
 8006f0c:	400dd4fd 	.word	0x400dd4fd
 8006f10:	d0e56042 	.word	0xd0e56042
 8006f14:	400ddb22 	.word	0x400ddb22
 8006f18:	ae147ae1 	.word	0xae147ae1
 8006f1c:	400de147 	.word	0x400de147
 8006f20:	d4fdf3b6 	.word	0xd4fdf3b6
 8006f24:	400de978 	.word	0x400de978
 8006f28:	b22d0e56 	.word	0xb22d0e56
 8006f2c:	400def9d 	.word	0x400def9d
 8006f30:	8f5c28f6 	.word	0x8f5c28f6
 8006f34:	400df5c2 	.word	0x400df5c2
 8006f38:	6c8b4396 	.word	0x6c8b4396
 8006f3c:	400dfbe7 	.word	0x400dfbe7
 8006f40:	9374bc6a 	.word	0x9374bc6a
 8006f44:	400e0418 	.word	0x400e0418
 8006f48:	70a3d70a 	.word	0x70a3d70a
 8006f4c:	400e0a3d 	.word	0x400e0a3d
 8006f50:	4dd2f1aa 	.word	0x4dd2f1aa
 8006f54:	400e1062 	.word	0x400e1062
 8006f58:	2b020c4a 	.word	0x2b020c4a
 8006f5c:	400e1687 	.word	0x400e1687
 8006f60:	51eb851f 	.word	0x51eb851f
 8006f64:	400e1eb8 	.word	0x400e1eb8
 8006f68:	2f1a9fbe 	.word	0x2f1a9fbe
 8006f6c:	400e24dd 	.word	0x400e24dd
 8006f70:	0c49ba5e 	.word	0x0c49ba5e
 8006f74:	400e2b02 	.word	0x400e2b02
 8006f78:	e978d4fe 	.word	0xe978d4fe
 8006f7c:	400e3126 	.word	0x400e3126
 8006f80:	c6a7ef9e 	.word	0xc6a7ef9e
 8006f84:	400e374b 	.word	0x400e374b
 8006f88:	ed916873 	.word	0xed916873
 8006f8c:	400e3f7c 	.word	0x400e3f7c
 8006f90:	cac08312 	.word	0xcac08312
 8006f94:	400e45a1 	.word	0x400e45a1
 8006f98:	200003e8 	.word	0x200003e8
 8006f9c:	400a0000 	.word	0x400a0000
 8006fa0:	400c0000 	.word	0x400c0000
 8006fa4:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8006fa8:	49b5      	ldr	r1, [pc, #724]	; (8007280 <_initVoltsArray+0x5c0>)
 8006faa:	a36d      	add	r3, pc, #436	; (adr r3, 8007160 <_initVoltsArray+0x4a0>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
 8006fb4:	49b2      	ldr	r1, [pc, #712]	; (8007280 <_initVoltsArray+0x5c0>)
 8006fb6:	a36c      	add	r3, pc, #432	; (adr r3, 8007168 <_initVoltsArray+0x4a8>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 8006fc0:	49af      	ldr	r1, [pc, #700]	; (8007280 <_initVoltsArray+0x5c0>)
 8006fc2:	a36b      	add	r3, pc, #428	; (adr r3, 8007170 <_initVoltsArray+0x4b0>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 8006fcc:	49ac      	ldr	r1, [pc, #688]	; (8007280 <_initVoltsArray+0x5c0>)
 8006fce:	a36a      	add	r3, pc, #424	; (adr r3, 8007178 <_initVoltsArray+0x4b8>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    _vs[41] = 3.800; _vs[42] = 3.805; _vs[43] = 3.811; _vs[44] = 3.816; _vs[45] = 3.821;
 8006fd8:	49a9      	ldr	r1, [pc, #676]	; (8007280 <_initVoltsArray+0x5c0>)
 8006fda:	a369      	add	r3, pc, #420	; (adr r3, 8007180 <_initVoltsArray+0x4c0>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 8006fe4:	49a6      	ldr	r1, [pc, #664]	; (8007280 <_initVoltsArray+0x5c0>)
 8006fe6:	a368      	add	r3, pc, #416	; (adr r3, 8007188 <_initVoltsArray+0x4c8>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
 8006ff0:	49a3      	ldr	r1, [pc, #652]	; (8007280 <_initVoltsArray+0x5c0>)
 8006ff2:	a367      	add	r3, pc, #412	; (adr r3, 8007190 <_initVoltsArray+0x4d0>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
 8006ffc:	49a0      	ldr	r1, [pc, #640]	; (8007280 <_initVoltsArray+0x5c0>)
 8006ffe:	a366      	add	r3, pc, #408	; (adr r3, 8007198 <_initVoltsArray+0x4d8>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
 8007008:	499d      	ldr	r1, [pc, #628]	; (8007280 <_initVoltsArray+0x5c0>)
 800700a:	a365      	add	r3, pc, #404	; (adr r3, 80071a0 <_initVoltsArray+0x4e0>)
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
    _vs[46] = 3.826; _vs[47] = 3.832; _vs[48] = 3.837; _vs[49] = 3.842; _vs[50] = 3.847;
 8007014:	499a      	ldr	r1, [pc, #616]	; (8007280 <_initVoltsArray+0x5c0>)
 8007016:	a364      	add	r3, pc, #400	; (adr r3, 80071a8 <_initVoltsArray+0x4e8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
 8007020:	4997      	ldr	r1, [pc, #604]	; (8007280 <_initVoltsArray+0x5c0>)
 8007022:	a363      	add	r3, pc, #396	; (adr r3, 80071b0 <_initVoltsArray+0x4f0>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 800702c:	4994      	ldr	r1, [pc, #592]	; (8007280 <_initVoltsArray+0x5c0>)
 800702e:	a362      	add	r3, pc, #392	; (adr r3, 80071b8 <_initVoltsArray+0x4f8>)
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 8007038:	4991      	ldr	r1, [pc, #580]	; (8007280 <_initVoltsArray+0x5c0>)
 800703a:	a361      	add	r3, pc, #388	; (adr r3, 80071c0 <_initVoltsArray+0x500>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 8007044:	498e      	ldr	r1, [pc, #568]	; (8007280 <_initVoltsArray+0x5c0>)
 8007046:	a360      	add	r3, pc, #384	; (adr r3, 80071c8 <_initVoltsArray+0x508>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
    _vs[51] = 3.853; _vs[52] = 3.858; _vs[53] = 3.863; _vs[54] = 3.868; _vs[55] = 3.874;
 8007050:	498b      	ldr	r1, [pc, #556]	; (8007280 <_initVoltsArray+0x5c0>)
 8007052:	a35f      	add	r3, pc, #380	; (adr r3, 80071d0 <_initVoltsArray+0x510>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
 800705c:	4988      	ldr	r1, [pc, #544]	; (8007280 <_initVoltsArray+0x5c0>)
 800705e:	a35e      	add	r3, pc, #376	; (adr r3, 80071d8 <_initVoltsArray+0x518>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
 8007068:	4985      	ldr	r1, [pc, #532]	; (8007280 <_initVoltsArray+0x5c0>)
 800706a:	a35d      	add	r3, pc, #372	; (adr r3, 80071e0 <_initVoltsArray+0x520>)
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8007074:	4982      	ldr	r1, [pc, #520]	; (8007280 <_initVoltsArray+0x5c0>)
 8007076:	a35c      	add	r3, pc, #368	; (adr r3, 80071e8 <_initVoltsArray+0x528>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 8007080:	497f      	ldr	r1, [pc, #508]	; (8007280 <_initVoltsArray+0x5c0>)
 8007082:	a35b      	add	r3, pc, #364	; (adr r3, 80071f0 <_initVoltsArray+0x530>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    _vs[56] = 3.879; _vs[57] = 3.884; _vs[58] = 3.889; _vs[59] = 3.895; _vs[60] = 3.900;
 800708c:	497c      	ldr	r1, [pc, #496]	; (8007280 <_initVoltsArray+0x5c0>)
 800708e:	a35a      	add	r3, pc, #360	; (adr r3, 80071f8 <_initVoltsArray+0x538>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8007098:	4979      	ldr	r1, [pc, #484]	; (8007280 <_initVoltsArray+0x5c0>)
 800709a:	a359      	add	r3, pc, #356	; (adr r3, 8007200 <_initVoltsArray+0x540>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
 80070a4:	4976      	ldr	r1, [pc, #472]	; (8007280 <_initVoltsArray+0x5c0>)
 80070a6:	a358      	add	r3, pc, #352	; (adr r3, 8007208 <_initVoltsArray+0x548>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
 80070b0:	4973      	ldr	r1, [pc, #460]	; (8007280 <_initVoltsArray+0x5c0>)
 80070b2:	a357      	add	r3, pc, #348	; (adr r3, 8007210 <_initVoltsArray+0x550>)
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 80070bc:	4970      	ldr	r1, [pc, #448]	; (8007280 <_initVoltsArray+0x5c0>)
 80070be:	a356      	add	r3, pc, #344	; (adr r3, 8007218 <_initVoltsArray+0x558>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    _vs[61] = 3.906; _vs[62] = 3.911; _vs[63] = 3.917; _vs[64] = 3.922; _vs[65] = 3.928;
 80070c8:	496d      	ldr	r1, [pc, #436]	; (8007280 <_initVoltsArray+0x5c0>)
 80070ca:	a355      	add	r3, pc, #340	; (adr r3, 8007220 <_initVoltsArray+0x560>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
 80070d4:	496a      	ldr	r1, [pc, #424]	; (8007280 <_initVoltsArray+0x5c0>)
 80070d6:	a354      	add	r3, pc, #336	; (adr r3, 8007228 <_initVoltsArray+0x568>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
 80070e0:	4967      	ldr	r1, [pc, #412]	; (8007280 <_initVoltsArray+0x5c0>)
 80070e2:	a353      	add	r3, pc, #332	; (adr r3, 8007230 <_initVoltsArray+0x570>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
 80070ec:	4964      	ldr	r1, [pc, #400]	; (8007280 <_initVoltsArray+0x5c0>)
 80070ee:	a352      	add	r3, pc, #328	; (adr r3, 8007238 <_initVoltsArray+0x578>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200
 80070f8:	4961      	ldr	r1, [pc, #388]	; (8007280 <_initVoltsArray+0x5c0>)
 80070fa:	a351      	add	r3, pc, #324	; (adr r3, 8007240 <_initVoltsArray+0x580>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    _vs[66] = 3.933; _vs[67] = 3.939; _vs[68] = 3.944; _vs[69] = 3.950; _vs[70] = 3.956;
 8007104:	495e      	ldr	r1, [pc, #376]	; (8007280 <_initVoltsArray+0x5c0>)
 8007106:	a350      	add	r3, pc, #320	; (adr r3, 8007248 <_initVoltsArray+0x588>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
 8007110:	495b      	ldr	r1, [pc, #364]	; (8007280 <_initVoltsArray+0x5c0>)
 8007112:	a34f      	add	r3, pc, #316	; (adr r3, 8007250 <_initVoltsArray+0x590>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 800711c:	4958      	ldr	r1, [pc, #352]	; (8007280 <_initVoltsArray+0x5c0>)
 800711e:	a34e      	add	r3, pc, #312	; (adr r3, 8007258 <_initVoltsArray+0x598>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
 8007128:	4955      	ldr	r1, [pc, #340]	; (8007280 <_initVoltsArray+0x5c0>)
 800712a:	a34d      	add	r3, pc, #308	; (adr r3, 8007260 <_initVoltsArray+0x5a0>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8007134:	4952      	ldr	r1, [pc, #328]	; (8007280 <_initVoltsArray+0x5c0>)
 8007136:	a34c      	add	r3, pc, #304	; (adr r3, 8007268 <_initVoltsArray+0x5a8>)
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    _vs[71] = 3.961; _vs[72] = 3.967; _vs[73] = 3.972; _vs[74] = 3.978; _vs[75] = 3.983;
 8007140:	494f      	ldr	r1, [pc, #316]	; (8007280 <_initVoltsArray+0x5c0>)
 8007142:	a34b      	add	r3, pc, #300	; (adr r3, 8007270 <_initVoltsArray+0x5b0>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
 800714c:	494c      	ldr	r1, [pc, #304]	; (8007280 <_initVoltsArray+0x5c0>)
 800714e:	a34a      	add	r3, pc, #296	; (adr r3, 8007278 <_initVoltsArray+0x5b8>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
 8007158:	e094      	b.n	8007284 <_initVoltsArray+0x5c4>
 800715a:	bf00      	nop
 800715c:	f3af 8000 	nop.w
 8007160:	a7ef9db2 	.word	0xa7ef9db2
 8007164:	400e4bc6 	.word	0x400e4bc6
 8007168:	851eb852 	.word	0x851eb852
 800716c:	400e51eb 	.word	0x400e51eb
 8007170:	ac083127 	.word	0xac083127
 8007174:	400e5a1c 	.word	0x400e5a1c
 8007178:	89374bc7 	.word	0x89374bc7
 800717c:	400e6041 	.word	0x400e6041
 8007180:	66666666 	.word	0x66666666
 8007184:	400e6666 	.word	0x400e6666
 8007188:	d70a3d71 	.word	0xd70a3d71
 800718c:	400e70a3 	.word	0x400e70a3
 8007190:	916872b0 	.word	0x916872b0
 8007194:	400e7ced 	.word	0x400e7ced
 8007198:	020c49ba 	.word	0x020c49ba
 800719c:	400e872b 	.word	0x400e872b
 80071a0:	72b020c5 	.word	0x72b020c5
 80071a4:	400e9168 	.word	0x400e9168
 80071a8:	e353f7cf 	.word	0xe353f7cf
 80071ac:	400e9ba5 	.word	0x400e9ba5
 80071b0:	9db22d0e 	.word	0x9db22d0e
 80071b4:	400ea7ef 	.word	0x400ea7ef
 80071b8:	0e560419 	.word	0x0e560419
 80071bc:	400eb22d 	.word	0x400eb22d
 80071c0:	7ef9db23 	.word	0x7ef9db23
 80071c4:	400ebc6a 	.word	0x400ebc6a
 80071c8:	ef9db22d 	.word	0xef9db22d
 80071cc:	400ec6a7 	.word	0x400ec6a7
 80071d0:	a9fbe76d 	.word	0xa9fbe76d
 80071d4:	400ed2f1 	.word	0x400ed2f1
 80071d8:	1a9fbe77 	.word	0x1a9fbe77
 80071dc:	400edd2f 	.word	0x400edd2f
 80071e0:	8b439581 	.word	0x8b439581
 80071e4:	400ee76c 	.word	0x400ee76c
 80071e8:	fbe76c8b 	.word	0xfbe76c8b
 80071ec:	400ef1a9 	.word	0x400ef1a9
 80071f0:	b645a1cb 	.word	0xb645a1cb
 80071f4:	400efdf3 	.word	0x400efdf3
 80071f8:	26e978d5 	.word	0x26e978d5
 80071fc:	400f0831 	.word	0x400f0831
 8007200:	978d4fdf 	.word	0x978d4fdf
 8007204:	400f126e 	.word	0x400f126e
 8007208:	083126e9 	.word	0x083126e9
 800720c:	400f1cac 	.word	0x400f1cac
 8007210:	c28f5c29 	.word	0xc28f5c29
 8007214:	400f28f5 	.word	0x400f28f5
 8007218:	33333333 	.word	0x33333333
 800721c:	400f3333 	.word	0x400f3333
 8007220:	ed916873 	.word	0xed916873
 8007224:	400f3f7c 	.word	0x400f3f7c
 8007228:	5e353f7d 	.word	0x5e353f7d
 800722c:	400f49ba 	.word	0x400f49ba
 8007230:	189374bc 	.word	0x189374bc
 8007234:	400f5604 	.word	0x400f5604
 8007238:	89374bc7 	.word	0x89374bc7
 800723c:	400f6041 	.word	0x400f6041
 8007240:	43958106 	.word	0x43958106
 8007244:	400f6c8b 	.word	0x400f6c8b
 8007248:	b4395810 	.word	0xb4395810
 800724c:	400f76c8 	.word	0x400f76c8
 8007250:	6e978d50 	.word	0x6e978d50
 8007254:	400f8312 	.word	0x400f8312
 8007258:	df3b645a 	.word	0xdf3b645a
 800725c:	400f8d4f 	.word	0x400f8d4f
 8007260:	9999999a 	.word	0x9999999a
 8007264:	400f9999 	.word	0x400f9999
 8007268:	53f7ced9 	.word	0x53f7ced9
 800726c:	400fa5e3 	.word	0x400fa5e3
 8007270:	c49ba5e3 	.word	0xc49ba5e3
 8007274:	400fb020 	.word	0x400fb020
 8007278:	7ef9db23 	.word	0x7ef9db23
 800727c:	400fbc6a 	.word	0x400fbc6a
 8007280:	200003e8 	.word	0x200003e8
 8007284:	498c      	ldr	r1, [pc, #560]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007286:	a356      	add	r3, pc, #344	; (adr r3, 80073e0 <_initVoltsArray+0x720>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
 8007290:	4989      	ldr	r1, [pc, #548]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007292:	a355      	add	r3, pc, #340	; (adr r3, 80073e8 <_initVoltsArray+0x728>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 800729c:	4986      	ldr	r1, [pc, #536]	; (80074b8 <_initVoltsArray+0x7f8>)
 800729e:	a354      	add	r3, pc, #336	; (adr r3, 80073f0 <_initVoltsArray+0x730>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
    _vs[76] = 3.989; _vs[77] = 3.994; _vs[78] = 4.000; _vs[79] = 4.008; _vs[80] = 4.015;
 80072a8:	4983      	ldr	r1, [pc, #524]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072aa:	a353      	add	r3, pc, #332	; (adr r3, 80073f8 <_initVoltsArray+0x738>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 80072b4:	4980      	ldr	r1, [pc, #512]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072b6:	a352      	add	r3, pc, #328	; (adr r3, 8007400 <_initVoltsArray+0x740>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
 80072c0:	497d      	ldr	r1, [pc, #500]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	4b7d      	ldr	r3, [pc, #500]	; (80074bc <_initVoltsArray+0x7fc>)
 80072c8:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
 80072cc:	497a      	ldr	r1, [pc, #488]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072ce:	a34e      	add	r3, pc, #312	; (adr r3, 8007408 <_initVoltsArray+0x748>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
 80072d8:	4977      	ldr	r1, [pc, #476]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072da:	a34d      	add	r3, pc, #308	; (adr r3, 8007410 <_initVoltsArray+0x750>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
    _vs[81] = 4.023; _vs[82] = 4.031; _vs[83] = 4.038; _vs[84] = 4.046; _vs[85] = 4.054;
 80072e4:	4974      	ldr	r1, [pc, #464]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072e6:	a34c      	add	r3, pc, #304	; (adr r3, 8007418 <_initVoltsArray+0x758>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
 80072f0:	4971      	ldr	r1, [pc, #452]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072f2:	a34b      	add	r3, pc, #300	; (adr r3, 8007420 <_initVoltsArray+0x760>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
 80072fc:	496e      	ldr	r1, [pc, #440]	; (80074b8 <_initVoltsArray+0x7f8>)
 80072fe:	a34a      	add	r3, pc, #296	; (adr r3, 8007428 <_initVoltsArray+0x768>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
 8007308:	496b      	ldr	r1, [pc, #428]	; (80074b8 <_initVoltsArray+0x7f8>)
 800730a:	a349      	add	r3, pc, #292	; (adr r3, 8007430 <_initVoltsArray+0x770>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
 8007314:	4968      	ldr	r1, [pc, #416]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007316:	a348      	add	r3, pc, #288	; (adr r3, 8007438 <_initVoltsArray+0x778>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
    _vs[86] = 4.062; _vs[87] = 4.069; _vs[88] = 4.077; _vs[89] = 4.085; _vs[90] = 4.092;
 8007320:	4965      	ldr	r1, [pc, #404]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007322:	a347      	add	r3, pc, #284	; (adr r3, 8007440 <_initVoltsArray+0x780>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
 800732c:	4962      	ldr	r1, [pc, #392]	; (80074b8 <_initVoltsArray+0x7f8>)
 800732e:	a346      	add	r3, pc, #280	; (adr r3, 8007448 <_initVoltsArray+0x788>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
 8007338:	495f      	ldr	r1, [pc, #380]	; (80074b8 <_initVoltsArray+0x7f8>)
 800733a:	a345      	add	r3, pc, #276	; (adr r3, 8007450 <_initVoltsArray+0x790>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
 8007344:	495c      	ldr	r1, [pc, #368]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007346:	a344      	add	r3, pc, #272	; (adr r3, 8007458 <_initVoltsArray+0x798>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
 8007350:	4959      	ldr	r1, [pc, #356]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007352:	a343      	add	r3, pc, #268	; (adr r3, 8007460 <_initVoltsArray+0x7a0>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
    _vs[91] = 4.100; _vs[92] = 4.111; _vs[93] = 4.122; _vs[94] = 4.133; _vs[95] = 4.144;
 800735c:	4956      	ldr	r1, [pc, #344]	; (80074b8 <_initVoltsArray+0x7f8>)
 800735e:	a342      	add	r3, pc, #264	; (adr r3, 8007468 <_initVoltsArray+0x7a8>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8007368:	4953      	ldr	r1, [pc, #332]	; (80074b8 <_initVoltsArray+0x7f8>)
 800736a:	a341      	add	r3, pc, #260	; (adr r3, 8007470 <_initVoltsArray+0x7b0>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0
 8007374:	4950      	ldr	r1, [pc, #320]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007376:	a340      	add	r3, pc, #256	; (adr r3, 8007478 <_initVoltsArray+0x7b8>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
 8007380:	494d      	ldr	r1, [pc, #308]	; (80074b8 <_initVoltsArray+0x7f8>)
 8007382:	a33f      	add	r3, pc, #252	; (adr r3, 8007480 <_initVoltsArray+0x7c0>)
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 800738c:	494a      	ldr	r1, [pc, #296]	; (80074b8 <_initVoltsArray+0x7f8>)
 800738e:	a33e      	add	r3, pc, #248	; (adr r3, 8007488 <_initVoltsArray+0x7c8>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    _vs[96] = 4.156; _vs[97] = 4.167; _vs[98] = 4.178; _vs[99] = 4.189; _vs[100] = 4.200;
 8007398:	4947      	ldr	r1, [pc, #284]	; (80074b8 <_initVoltsArray+0x7f8>)
 800739a:	a33d      	add	r3, pc, #244	; (adr r3, 8007490 <_initVoltsArray+0x7d0>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	e9c1 23c0 	strd	r2, r3, [r1, #768]	; 0x300
 80073a4:	4944      	ldr	r1, [pc, #272]	; (80074b8 <_initVoltsArray+0x7f8>)
 80073a6:	a33c      	add	r3, pc, #240	; (adr r3, 8007498 <_initVoltsArray+0x7d8>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	e9c1 23c2 	strd	r2, r3, [r1, #776]	; 0x308
 80073b0:	4941      	ldr	r1, [pc, #260]	; (80074b8 <_initVoltsArray+0x7f8>)
 80073b2:	a33b      	add	r3, pc, #236	; (adr r3, 80074a0 <_initVoltsArray+0x7e0>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310
 80073bc:	493e      	ldr	r1, [pc, #248]	; (80074b8 <_initVoltsArray+0x7f8>)
 80073be:	a33a      	add	r3, pc, #232	; (adr r3, 80074a8 <_initVoltsArray+0x7e8>)
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	e9c1 23c6 	strd	r2, r3, [r1, #792]	; 0x318
 80073c8:	493b      	ldr	r1, [pc, #236]	; (80074b8 <_initVoltsArray+0x7f8>)
 80073ca:	a339      	add	r3, pc, #228	; (adr r3, 80074b0 <_initVoltsArray+0x7f0>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	ef9db22d 	.word	0xef9db22d
 80073e4:	400fc6a7 	.word	0x400fc6a7
 80073e8:	a9fbe76d 	.word	0xa9fbe76d
 80073ec:	400fd2f1 	.word	0x400fd2f1
 80073f0:	1a9fbe77 	.word	0x1a9fbe77
 80073f4:	400fdd2f 	.word	0x400fdd2f
 80073f8:	d4fdf3b6 	.word	0xd4fdf3b6
 80073fc:	400fe978 	.word	0x400fe978
 8007400:	45a1cac1 	.word	0x45a1cac1
 8007404:	400ff3b6 	.word	0x400ff3b6
 8007408:	26e978d5 	.word	0x26e978d5
 800740c:	40100831 	.word	0x40100831
 8007410:	28f5c28f 	.word	0x28f5c28f
 8007414:	40100f5c 	.word	0x40100f5c
 8007418:	4fdf3b64 	.word	0x4fdf3b64
 800741c:	4010178d 	.word	0x4010178d
 8007420:	76c8b439 	.word	0x76c8b439
 8007424:	40101fbe 	.word	0x40101fbe
 8007428:	78d4fdf4 	.word	0x78d4fdf4
 800742c:	401026e9 	.word	0x401026e9
 8007430:	9fbe76c9 	.word	0x9fbe76c9
 8007434:	40102f1a 	.word	0x40102f1a
 8007438:	c6a7ef9e 	.word	0xc6a7ef9e
 800743c:	4010374b 	.word	0x4010374b
 8007440:	ed916873 	.word	0xed916873
 8007444:	40103f7c 	.word	0x40103f7c
 8007448:	ef9db22d 	.word	0xef9db22d
 800744c:	401046a7 	.word	0x401046a7
 8007450:	16872b02 	.word	0x16872b02
 8007454:	40104ed9 	.word	0x40104ed9
 8007458:	3d70a3d7 	.word	0x3d70a3d7
 800745c:	4010570a 	.word	0x4010570a
 8007460:	3f7ced91 	.word	0x3f7ced91
 8007464:	40105e35 	.word	0x40105e35
 8007468:	66666666 	.word	0x66666666
 800746c:	40106666 	.word	0x40106666
 8007470:	fbe76c8b 	.word	0xfbe76c8b
 8007474:	401071a9 	.word	0x401071a9
 8007478:	916872b0 	.word	0x916872b0
 800747c:	40107ced 	.word	0x40107ced
 8007480:	26e978d5 	.word	0x26e978d5
 8007484:	40108831 	.word	0x40108831
 8007488:	bc6a7efa 	.word	0xbc6a7efa
 800748c:	40109374 	.word	0x40109374
 8007490:	76c8b439 	.word	0x76c8b439
 8007494:	40109fbe 	.word	0x40109fbe
 8007498:	0c49ba5e 	.word	0x0c49ba5e
 800749c:	4010ab02 	.word	0x4010ab02
 80074a0:	a1cac083 	.word	0xa1cac083
 80074a4:	4010b645 	.word	0x4010b645
 80074a8:	374bc6a8 	.word	0x374bc6a8
 80074ac:	4010c189 	.word	0x4010c189
 80074b0:	cccccccd 	.word	0xcccccccd
 80074b4:	4010cccc 	.word	0x4010cccc
 80074b8:	200003e8 	.word	0x200003e8
 80074bc:	40100000 	.word	0x40100000

080074c0 <_analogRead>:

static uint32_t _analogRead(void) {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
    HAL_ADC_Start(_hadc);
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <_analogRead+0x30>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fa ff79 	bl	80023c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(_hadc, _timeout);
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <_analogRead+0x30>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a08      	ldr	r2, [pc, #32]	; (80074f4 <_analogRead+0x34>)
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	4611      	mov	r1, r2
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fb f82b 	bl	8002534 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(_hadc);
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <_analogRead+0x30>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fb f8fe 	bl	80026e4 <HAL_ADC_GetValue>
 80074e8:	4603      	mov	r3, r0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000714 	.word	0x20000714
 80074f4:	20000710 	.word	0x20000710

080074f8 <_analogReadToVolts>:

static float _analogReadToVolts(uint32_t readValue) {
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  float volts = 2.0f * readValue * 3.3f / 4096.0f;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800750e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007538 <_analogReadToVolts+0x40>
 8007512:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007516:	eddf 6a09 	vldr	s13, [pc, #36]	; 800753c <_analogReadToVolts+0x44>
 800751a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800751e:	edc7 7a03 	vstr	s15, [r7, #12]
  return volts;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	ee07 3a90 	vmov	s15, r3
}
 8007528:	eeb0 0a67 	vmov.f32	s0, s15
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40533333 	.word	0x40533333
 800753c:	45800000 	.word	0x45800000

08007540 <_getChargeLevel>:

static int _getChargeLevel(float volts) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	ed87 0a01 	vstr	s0, [r7, #4]
  int idx = 50;
 800754a:	2332      	movs	r3, #50	; 0x32
 800754c:	617b      	str	r3, [r7, #20]
  int prev = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
  int half = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
  if (volts >= 4.2){
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7f9 f806 	bl	8000568 <__aeabi_f2d>
 800755c:	a323      	add	r3, pc, #140	; (adr r3, 80075ec <_getChargeLevel+0xac>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f9 fadf 	bl	8000b24 <__aeabi_dcmpge>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <_getChargeLevel+0x30>
    return 100;
 800756c:	2364      	movs	r3, #100	; 0x64
 800756e:	e037      	b.n	80075e0 <_getChargeLevel+0xa0>
  }
  if (volts <= 3.2){
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7f8 fff9 	bl	8000568 <__aeabi_f2d>
 8007576:	a31f      	add	r3, pc, #124	; (adr r3, 80075f4 <_getChargeLevel+0xb4>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f9 fac8 	bl	8000b10 <__aeabi_dcmple>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d100      	bne.n	8007588 <_getChargeLevel+0x48>
 8007586:	e001      	b.n	800758c <_getChargeLevel+0x4c>
    return 0;
 8007588:	2300      	movs	r3, #0
 800758a:	e029      	b.n	80075e0 <_getChargeLevel+0xa0>
  }
  while(1){
    half = abs(idx - prev) / 2;
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	bfb8      	it	lt
 8007596:	425b      	neglt	r3, r3
 8007598:	0fda      	lsrs	r2, r3, #31
 800759a:	4413      	add	r3, r2
 800759c:	105b      	asrs	r3, r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
    prev = idx;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	613b      	str	r3, [r7, #16]
    if(volts >= _vs[idx]){
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7f8 ffdf 	bl	8000568 <__aeabi_f2d>
 80075aa:	4a0f      	ldr	r2, [pc, #60]	; (80075e8 <_getChargeLevel+0xa8>)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4413      	add	r3, r2
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f9 fab5 	bl	8000b24 <__aeabi_dcmpge>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <_getChargeLevel+0x8a>
      idx = idx + half;
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e003      	b.n	80075d2 <_getChargeLevel+0x92>
    }else{
      idx = idx - half;
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	617b      	str	r3, [r7, #20]
    }
    if (prev == idx){
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d000      	beq.n	80075dc <_getChargeLevel+0x9c>
    half = abs(idx - prev) / 2;
 80075da:	e7d7      	b.n	800758c <_getChargeLevel+0x4c>
      break;
 80075dc:	bf00      	nop
    }
  }
  return idx;
 80075de:	697b      	ldr	r3, [r7, #20]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200003e8 	.word	0x200003e8
 80075ec:	cccccccd 	.word	0xcccccccd
 80075f0:	4010cccc 	.word	0x4010cccc
 80075f4:	9999999a 	.word	0x9999999a
 80075f8:	40099999 	.word	0x40099999

080075fc <battery_init>:

/*
 * Public functions
 */

void battery_init(ADC_HandleTypeDef* hadc, uint32_t timeout) {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
	_hadc = hadc;
 8007606:	4a08      	ldr	r2, [pc, #32]	; (8007628 <battery_init+0x2c>)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6013      	str	r3, [r2, #0]
	_timeout = timeout;
 800760c:	4a07      	ldr	r2, [pc, #28]	; (800762c <battery_init+0x30>)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6013      	str	r3, [r2, #0]
	_initVoltsArray();
 8007612:	f7ff fb55 	bl	8006cc0 <_initVoltsArray>
    HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 8007616:	217f      	movs	r1, #127	; 0x7f
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fb fd99 	bl	8003150 <HAL_ADCEx_Calibration_Start>
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000714 	.word	0x20000714
 800762c:	20000710 	.word	0x20000710

08007630 <battery_getBatteryChargeLevel>:


int battery_getBatteryChargeLevel(void) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 8007636:	f7ff ff43 	bl	80074c0 <_analogRead>
 800763a:	6178      	str	r0, [r7, #20]
    double volts = _analogReadToVolts(readValue);
 800763c:	6978      	ldr	r0, [r7, #20]
 800763e:	f7ff ff5b 	bl	80074f8 <_analogReadToVolts>
 8007642:	ee10 3a10 	vmov	r3, s0
 8007646:	4618      	mov	r0, r3
 8007648:	f7f8 ff8e 	bl	8000568 <__aeabi_f2d>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int chargeLevel = _getChargeLevel(volts);
 8007654:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007658:	f7f9 fab6 	bl	8000bc8 <__aeabi_d2f>
 800765c:	4603      	mov	r3, r0
 800765e:	ee00 3a10 	vmov	s0, r3
 8007662:	f7ff ff6d 	bl	8007540 <_getChargeLevel>
 8007666:	6078      	str	r0, [r7, #4]
    return chargeLevel;
 8007668:	687b      	ldr	r3, [r7, #4]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <battery_getBatteryVolts>:

float battery_getBatteryVolts(void) {
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 8007678:	f7ff ff22 	bl	80074c0 <_analogRead>
 800767c:	6078      	str	r0, [r7, #4]
    return _analogReadToVolts(readValue);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff ff3a 	bl	80074f8 <_analogReadToVolts>
 8007684:	eef0 7a40 	vmov.f32	s15, s0
}
 8007688:	eeb0 0a67 	vmov.f32	s0, s15
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <__errno>:
 8007694:	4b01      	ldr	r3, [pc, #4]	; (800769c <__errno+0x8>)
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	2000000c 	.word	0x2000000c

080076a0 <__libc_init_array>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	4d0d      	ldr	r5, [pc, #52]	; (80076d8 <__libc_init_array+0x38>)
 80076a4:	4c0d      	ldr	r4, [pc, #52]	; (80076dc <__libc_init_array+0x3c>)
 80076a6:	1b64      	subs	r4, r4, r5
 80076a8:	10a4      	asrs	r4, r4, #2
 80076aa:	2600      	movs	r6, #0
 80076ac:	42a6      	cmp	r6, r4
 80076ae:	d109      	bne.n	80076c4 <__libc_init_array+0x24>
 80076b0:	4d0b      	ldr	r5, [pc, #44]	; (80076e0 <__libc_init_array+0x40>)
 80076b2:	4c0c      	ldr	r4, [pc, #48]	; (80076e4 <__libc_init_array+0x44>)
 80076b4:	f002 fdc2 	bl	800a23c <_init>
 80076b8:	1b64      	subs	r4, r4, r5
 80076ba:	10a4      	asrs	r4, r4, #2
 80076bc:	2600      	movs	r6, #0
 80076be:	42a6      	cmp	r6, r4
 80076c0:	d105      	bne.n	80076ce <__libc_init_array+0x2e>
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c8:	4798      	blx	r3
 80076ca:	3601      	adds	r6, #1
 80076cc:	e7ee      	b.n	80076ac <__libc_init_array+0xc>
 80076ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d2:	4798      	blx	r3
 80076d4:	3601      	adds	r6, #1
 80076d6:	e7f2      	b.n	80076be <__libc_init_array+0x1e>
 80076d8:	0800a7c4 	.word	0x0800a7c4
 80076dc:	0800a7c4 	.word	0x0800a7c4
 80076e0:	0800a7c4 	.word	0x0800a7c4
 80076e4:	0800a7c8 	.word	0x0800a7c8

080076e8 <memset>:
 80076e8:	4402      	add	r2, r0
 80076ea:	4603      	mov	r3, r0
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d100      	bne.n	80076f2 <memset+0xa>
 80076f0:	4770      	bx	lr
 80076f2:	f803 1b01 	strb.w	r1, [r3], #1
 80076f6:	e7f9      	b.n	80076ec <memset+0x4>

080076f8 <__cvt>:
 80076f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	ec55 4b10 	vmov	r4, r5, d0
 8007700:	2d00      	cmp	r5, #0
 8007702:	460e      	mov	r6, r1
 8007704:	4619      	mov	r1, r3
 8007706:	462b      	mov	r3, r5
 8007708:	bfbb      	ittet	lt
 800770a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800770e:	461d      	movlt	r5, r3
 8007710:	2300      	movge	r3, #0
 8007712:	232d      	movlt	r3, #45	; 0x2d
 8007714:	700b      	strb	r3, [r1, #0]
 8007716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007718:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800771c:	4691      	mov	r9, r2
 800771e:	f023 0820 	bic.w	r8, r3, #32
 8007722:	bfbc      	itt	lt
 8007724:	4622      	movlt	r2, r4
 8007726:	4614      	movlt	r4, r2
 8007728:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800772c:	d005      	beq.n	800773a <__cvt+0x42>
 800772e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007732:	d100      	bne.n	8007736 <__cvt+0x3e>
 8007734:	3601      	adds	r6, #1
 8007736:	2102      	movs	r1, #2
 8007738:	e000      	b.n	800773c <__cvt+0x44>
 800773a:	2103      	movs	r1, #3
 800773c:	ab03      	add	r3, sp, #12
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	ab02      	add	r3, sp, #8
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	ec45 4b10 	vmov	d0, r4, r5
 8007748:	4653      	mov	r3, sl
 800774a:	4632      	mov	r2, r6
 800774c:	f000 fe18 	bl	8008380 <_dtoa_r>
 8007750:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007754:	4607      	mov	r7, r0
 8007756:	d102      	bne.n	800775e <__cvt+0x66>
 8007758:	f019 0f01 	tst.w	r9, #1
 800775c:	d022      	beq.n	80077a4 <__cvt+0xac>
 800775e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007762:	eb07 0906 	add.w	r9, r7, r6
 8007766:	d110      	bne.n	800778a <__cvt+0x92>
 8007768:	783b      	ldrb	r3, [r7, #0]
 800776a:	2b30      	cmp	r3, #48	; 0x30
 800776c:	d10a      	bne.n	8007784 <__cvt+0x8c>
 800776e:	2200      	movs	r2, #0
 8007770:	2300      	movs	r3, #0
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	f7f9 f9b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800777a:	b918      	cbnz	r0, 8007784 <__cvt+0x8c>
 800777c:	f1c6 0601 	rsb	r6, r6, #1
 8007780:	f8ca 6000 	str.w	r6, [sl]
 8007784:	f8da 3000 	ldr.w	r3, [sl]
 8007788:	4499      	add	r9, r3
 800778a:	2200      	movs	r2, #0
 800778c:	2300      	movs	r3, #0
 800778e:	4620      	mov	r0, r4
 8007790:	4629      	mov	r1, r5
 8007792:	f7f9 f9a9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007796:	b108      	cbz	r0, 800779c <__cvt+0xa4>
 8007798:	f8cd 900c 	str.w	r9, [sp, #12]
 800779c:	2230      	movs	r2, #48	; 0x30
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	454b      	cmp	r3, r9
 80077a2:	d307      	bcc.n	80077b4 <__cvt+0xbc>
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077a8:	1bdb      	subs	r3, r3, r7
 80077aa:	4638      	mov	r0, r7
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	b004      	add	sp, #16
 80077b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b4:	1c59      	adds	r1, r3, #1
 80077b6:	9103      	str	r1, [sp, #12]
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	e7f0      	b.n	800779e <__cvt+0xa6>

080077bc <__exponent>:
 80077bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077be:	4603      	mov	r3, r0
 80077c0:	2900      	cmp	r1, #0
 80077c2:	bfb8      	it	lt
 80077c4:	4249      	neglt	r1, r1
 80077c6:	f803 2b02 	strb.w	r2, [r3], #2
 80077ca:	bfb4      	ite	lt
 80077cc:	222d      	movlt	r2, #45	; 0x2d
 80077ce:	222b      	movge	r2, #43	; 0x2b
 80077d0:	2909      	cmp	r1, #9
 80077d2:	7042      	strb	r2, [r0, #1]
 80077d4:	dd2a      	ble.n	800782c <__exponent+0x70>
 80077d6:	f10d 0407 	add.w	r4, sp, #7
 80077da:	46a4      	mov	ip, r4
 80077dc:	270a      	movs	r7, #10
 80077de:	46a6      	mov	lr, r4
 80077e0:	460a      	mov	r2, r1
 80077e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80077e6:	fb07 1516 	mls	r5, r7, r6, r1
 80077ea:	3530      	adds	r5, #48	; 0x30
 80077ec:	2a63      	cmp	r2, #99	; 0x63
 80077ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80077f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077f6:	4631      	mov	r1, r6
 80077f8:	dcf1      	bgt.n	80077de <__exponent+0x22>
 80077fa:	3130      	adds	r1, #48	; 0x30
 80077fc:	f1ae 0502 	sub.w	r5, lr, #2
 8007800:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007804:	1c44      	adds	r4, r0, #1
 8007806:	4629      	mov	r1, r5
 8007808:	4561      	cmp	r1, ip
 800780a:	d30a      	bcc.n	8007822 <__exponent+0x66>
 800780c:	f10d 0209 	add.w	r2, sp, #9
 8007810:	eba2 020e 	sub.w	r2, r2, lr
 8007814:	4565      	cmp	r5, ip
 8007816:	bf88      	it	hi
 8007818:	2200      	movhi	r2, #0
 800781a:	4413      	add	r3, r2
 800781c:	1a18      	subs	r0, r3, r0
 800781e:	b003      	add	sp, #12
 8007820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007826:	f804 2f01 	strb.w	r2, [r4, #1]!
 800782a:	e7ed      	b.n	8007808 <__exponent+0x4c>
 800782c:	2330      	movs	r3, #48	; 0x30
 800782e:	3130      	adds	r1, #48	; 0x30
 8007830:	7083      	strb	r3, [r0, #2]
 8007832:	70c1      	strb	r1, [r0, #3]
 8007834:	1d03      	adds	r3, r0, #4
 8007836:	e7f1      	b.n	800781c <__exponent+0x60>

08007838 <_printf_float>:
 8007838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	ed2d 8b02 	vpush	{d8}
 8007840:	b08d      	sub	sp, #52	; 0x34
 8007842:	460c      	mov	r4, r1
 8007844:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007848:	4616      	mov	r6, r2
 800784a:	461f      	mov	r7, r3
 800784c:	4605      	mov	r5, r0
 800784e:	f001 fd3d 	bl	80092cc <_localeconv_r>
 8007852:	f8d0 a000 	ldr.w	sl, [r0]
 8007856:	4650      	mov	r0, sl
 8007858:	f7f8 fcc4 	bl	80001e4 <strlen>
 800785c:	2300      	movs	r3, #0
 800785e:	930a      	str	r3, [sp, #40]	; 0x28
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	9305      	str	r3, [sp, #20]
 8007864:	f8d8 3000 	ldr.w	r3, [r8]
 8007868:	f894 b018 	ldrb.w	fp, [r4, #24]
 800786c:	3307      	adds	r3, #7
 800786e:	f023 0307 	bic.w	r3, r3, #7
 8007872:	f103 0208 	add.w	r2, r3, #8
 8007876:	f8c8 2000 	str.w	r2, [r8]
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007882:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007886:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800788a:	9307      	str	r3, [sp, #28]
 800788c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007890:	ee08 0a10 	vmov	s16, r0
 8007894:	4b9f      	ldr	r3, [pc, #636]	; (8007b14 <_printf_float+0x2dc>)
 8007896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800789a:	f04f 32ff 	mov.w	r2, #4294967295
 800789e:	f7f9 f955 	bl	8000b4c <__aeabi_dcmpun>
 80078a2:	bb88      	cbnz	r0, 8007908 <_printf_float+0xd0>
 80078a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078a8:	4b9a      	ldr	r3, [pc, #616]	; (8007b14 <_printf_float+0x2dc>)
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295
 80078ae:	f7f9 f92f 	bl	8000b10 <__aeabi_dcmple>
 80078b2:	bb48      	cbnz	r0, 8007908 <_printf_float+0xd0>
 80078b4:	2200      	movs	r2, #0
 80078b6:	2300      	movs	r3, #0
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f9 f91e 	bl	8000afc <__aeabi_dcmplt>
 80078c0:	b110      	cbz	r0, 80078c8 <_printf_float+0x90>
 80078c2:	232d      	movs	r3, #45	; 0x2d
 80078c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c8:	4b93      	ldr	r3, [pc, #588]	; (8007b18 <_printf_float+0x2e0>)
 80078ca:	4894      	ldr	r0, [pc, #592]	; (8007b1c <_printf_float+0x2e4>)
 80078cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078d0:	bf94      	ite	ls
 80078d2:	4698      	movls	r8, r3
 80078d4:	4680      	movhi	r8, r0
 80078d6:	2303      	movs	r3, #3
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	9b05      	ldr	r3, [sp, #20]
 80078dc:	f023 0204 	bic.w	r2, r3, #4
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	f04f 0900 	mov.w	r9, #0
 80078e6:	9700      	str	r7, [sp, #0]
 80078e8:	4633      	mov	r3, r6
 80078ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80078ec:	4621      	mov	r1, r4
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 f9d8 	bl	8007ca4 <_printf_common>
 80078f4:	3001      	adds	r0, #1
 80078f6:	f040 8090 	bne.w	8007a1a <_printf_float+0x1e2>
 80078fa:	f04f 30ff 	mov.w	r0, #4294967295
 80078fe:	b00d      	add	sp, #52	; 0x34
 8007900:	ecbd 8b02 	vpop	{d8}
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f9 f91c 	bl	8000b4c <__aeabi_dcmpun>
 8007914:	b140      	cbz	r0, 8007928 <_printf_float+0xf0>
 8007916:	464b      	mov	r3, r9
 8007918:	2b00      	cmp	r3, #0
 800791a:	bfbc      	itt	lt
 800791c:	232d      	movlt	r3, #45	; 0x2d
 800791e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007922:	487f      	ldr	r0, [pc, #508]	; (8007b20 <_printf_float+0x2e8>)
 8007924:	4b7f      	ldr	r3, [pc, #508]	; (8007b24 <_printf_float+0x2ec>)
 8007926:	e7d1      	b.n	80078cc <_printf_float+0x94>
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800792e:	9206      	str	r2, [sp, #24]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	d13f      	bne.n	80079b4 <_printf_float+0x17c>
 8007934:	2306      	movs	r3, #6
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	9b05      	ldr	r3, [sp, #20]
 800793a:	6861      	ldr	r1, [r4, #4]
 800793c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007940:	2300      	movs	r3, #0
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	ab0a      	add	r3, sp, #40	; 0x28
 8007946:	e9cd b301 	strd	fp, r3, [sp, #4]
 800794a:	ab09      	add	r3, sp, #36	; 0x24
 800794c:	ec49 8b10 	vmov	d0, r8, r9
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007958:	4628      	mov	r0, r5
 800795a:	f7ff fecd 	bl	80076f8 <__cvt>
 800795e:	9b06      	ldr	r3, [sp, #24]
 8007960:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007962:	2b47      	cmp	r3, #71	; 0x47
 8007964:	4680      	mov	r8, r0
 8007966:	d108      	bne.n	800797a <_printf_float+0x142>
 8007968:	1cc8      	adds	r0, r1, #3
 800796a:	db02      	blt.n	8007972 <_printf_float+0x13a>
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	4299      	cmp	r1, r3
 8007970:	dd41      	ble.n	80079f6 <_printf_float+0x1be>
 8007972:	f1ab 0b02 	sub.w	fp, fp, #2
 8007976:	fa5f fb8b 	uxtb.w	fp, fp
 800797a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800797e:	d820      	bhi.n	80079c2 <_printf_float+0x18a>
 8007980:	3901      	subs	r1, #1
 8007982:	465a      	mov	r2, fp
 8007984:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007988:	9109      	str	r1, [sp, #36]	; 0x24
 800798a:	f7ff ff17 	bl	80077bc <__exponent>
 800798e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007990:	1813      	adds	r3, r2, r0
 8007992:	2a01      	cmp	r2, #1
 8007994:	4681      	mov	r9, r0
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	dc02      	bgt.n	80079a0 <_printf_float+0x168>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	07d2      	lsls	r2, r2, #31
 800799e:	d501      	bpl.n	80079a4 <_printf_float+0x16c>
 80079a0:	3301      	adds	r3, #1
 80079a2:	6123      	str	r3, [r4, #16]
 80079a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d09c      	beq.n	80078e6 <_printf_float+0xae>
 80079ac:	232d      	movs	r3, #45	; 0x2d
 80079ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b2:	e798      	b.n	80078e6 <_printf_float+0xae>
 80079b4:	9a06      	ldr	r2, [sp, #24]
 80079b6:	2a47      	cmp	r2, #71	; 0x47
 80079b8:	d1be      	bne.n	8007938 <_printf_float+0x100>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1bc      	bne.n	8007938 <_printf_float+0x100>
 80079be:	2301      	movs	r3, #1
 80079c0:	e7b9      	b.n	8007936 <_printf_float+0xfe>
 80079c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80079c6:	d118      	bne.n	80079fa <_printf_float+0x1c2>
 80079c8:	2900      	cmp	r1, #0
 80079ca:	6863      	ldr	r3, [r4, #4]
 80079cc:	dd0b      	ble.n	80079e6 <_printf_float+0x1ae>
 80079ce:	6121      	str	r1, [r4, #16]
 80079d0:	b913      	cbnz	r3, 80079d8 <_printf_float+0x1a0>
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	07d0      	lsls	r0, r2, #31
 80079d6:	d502      	bpl.n	80079de <_printf_float+0x1a6>
 80079d8:	3301      	adds	r3, #1
 80079da:	440b      	add	r3, r1
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	65a1      	str	r1, [r4, #88]	; 0x58
 80079e0:	f04f 0900 	mov.w	r9, #0
 80079e4:	e7de      	b.n	80079a4 <_printf_float+0x16c>
 80079e6:	b913      	cbnz	r3, 80079ee <_printf_float+0x1b6>
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	07d2      	lsls	r2, r2, #31
 80079ec:	d501      	bpl.n	80079f2 <_printf_float+0x1ba>
 80079ee:	3302      	adds	r3, #2
 80079f0:	e7f4      	b.n	80079dc <_printf_float+0x1a4>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e7f2      	b.n	80079dc <_printf_float+0x1a4>
 80079f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079fc:	4299      	cmp	r1, r3
 80079fe:	db05      	blt.n	8007a0c <_printf_float+0x1d4>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	6121      	str	r1, [r4, #16]
 8007a04:	07d8      	lsls	r0, r3, #31
 8007a06:	d5ea      	bpl.n	80079de <_printf_float+0x1a6>
 8007a08:	1c4b      	adds	r3, r1, #1
 8007a0a:	e7e7      	b.n	80079dc <_printf_float+0x1a4>
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	bfd4      	ite	le
 8007a10:	f1c1 0202 	rsble	r2, r1, #2
 8007a14:	2201      	movgt	r2, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	e7e0      	b.n	80079dc <_printf_float+0x1a4>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	055a      	lsls	r2, r3, #21
 8007a1e:	d407      	bmi.n	8007a30 <_printf_float+0x1f8>
 8007a20:	6923      	ldr	r3, [r4, #16]
 8007a22:	4642      	mov	r2, r8
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b8      	blx	r7
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d12c      	bne.n	8007a88 <_printf_float+0x250>
 8007a2e:	e764      	b.n	80078fa <_printf_float+0xc2>
 8007a30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a34:	f240 80e0 	bls.w	8007bf8 <_printf_float+0x3c0>
 8007a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f7f9 f852 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d034      	beq.n	8007ab2 <_printf_float+0x27a>
 8007a48:	4a37      	ldr	r2, [pc, #220]	; (8007b28 <_printf_float+0x2f0>)
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4628      	mov	r0, r5
 8007a50:	47b8      	blx	r7
 8007a52:	3001      	adds	r0, #1
 8007a54:	f43f af51 	beq.w	80078fa <_printf_float+0xc2>
 8007a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	db02      	blt.n	8007a66 <_printf_float+0x22e>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	07d8      	lsls	r0, r3, #31
 8007a64:	d510      	bpl.n	8007a88 <_printf_float+0x250>
 8007a66:	ee18 3a10 	vmov	r3, s16
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	f43f af41 	beq.w	80078fa <_printf_float+0xc2>
 8007a78:	f04f 0800 	mov.w	r8, #0
 8007a7c:	f104 091a 	add.w	r9, r4, #26
 8007a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a82:	3b01      	subs	r3, #1
 8007a84:	4543      	cmp	r3, r8
 8007a86:	dc09      	bgt.n	8007a9c <_printf_float+0x264>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	079b      	lsls	r3, r3, #30
 8007a8c:	f100 8105 	bmi.w	8007c9a <_printf_float+0x462>
 8007a90:	68e0      	ldr	r0, [r4, #12]
 8007a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a94:	4298      	cmp	r0, r3
 8007a96:	bfb8      	it	lt
 8007a98:	4618      	movlt	r0, r3
 8007a9a:	e730      	b.n	80078fe <_printf_float+0xc6>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	464a      	mov	r2, r9
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f af27 	beq.w	80078fa <_printf_float+0xc2>
 8007aac:	f108 0801 	add.w	r8, r8, #1
 8007ab0:	e7e6      	b.n	8007a80 <_printf_float+0x248>
 8007ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dc39      	bgt.n	8007b2c <_printf_float+0x2f4>
 8007ab8:	4a1b      	ldr	r2, [pc, #108]	; (8007b28 <_printf_float+0x2f0>)
 8007aba:	2301      	movs	r3, #1
 8007abc:	4631      	mov	r1, r6
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	f43f af19 	beq.w	80078fa <_printf_float+0xc2>
 8007ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007acc:	4313      	orrs	r3, r2
 8007ace:	d102      	bne.n	8007ad6 <_printf_float+0x29e>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	07d9      	lsls	r1, r3, #31
 8007ad4:	d5d8      	bpl.n	8007a88 <_printf_float+0x250>
 8007ad6:	ee18 3a10 	vmov	r3, s16
 8007ada:	4652      	mov	r2, sl
 8007adc:	4631      	mov	r1, r6
 8007ade:	4628      	mov	r0, r5
 8007ae0:	47b8      	blx	r7
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	f43f af09 	beq.w	80078fa <_printf_float+0xc2>
 8007ae8:	f04f 0900 	mov.w	r9, #0
 8007aec:	f104 0a1a 	add.w	sl, r4, #26
 8007af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af2:	425b      	negs	r3, r3
 8007af4:	454b      	cmp	r3, r9
 8007af6:	dc01      	bgt.n	8007afc <_printf_float+0x2c4>
 8007af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afa:	e792      	b.n	8007a22 <_printf_float+0x1ea>
 8007afc:	2301      	movs	r3, #1
 8007afe:	4652      	mov	r2, sl
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	f43f aef7 	beq.w	80078fa <_printf_float+0xc2>
 8007b0c:	f109 0901 	add.w	r9, r9, #1
 8007b10:	e7ee      	b.n	8007af0 <_printf_float+0x2b8>
 8007b12:	bf00      	nop
 8007b14:	7fefffff 	.word	0x7fefffff
 8007b18:	0800a3e4 	.word	0x0800a3e4
 8007b1c:	0800a3e8 	.word	0x0800a3e8
 8007b20:	0800a3f0 	.word	0x0800a3f0
 8007b24:	0800a3ec 	.word	0x0800a3ec
 8007b28:	0800a3f4 	.word	0x0800a3f4
 8007b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b30:	429a      	cmp	r2, r3
 8007b32:	bfa8      	it	ge
 8007b34:	461a      	movge	r2, r3
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	4691      	mov	r9, r2
 8007b3a:	dc37      	bgt.n	8007bac <_printf_float+0x374>
 8007b3c:	f04f 0b00 	mov.w	fp, #0
 8007b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b44:	f104 021a 	add.w	r2, r4, #26
 8007b48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	eba3 0309 	sub.w	r3, r3, r9
 8007b50:	455b      	cmp	r3, fp
 8007b52:	dc33      	bgt.n	8007bbc <_printf_float+0x384>
 8007b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	db3b      	blt.n	8007bd4 <_printf_float+0x39c>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	07da      	lsls	r2, r3, #31
 8007b60:	d438      	bmi.n	8007bd4 <_printf_float+0x39c>
 8007b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b64:	9a05      	ldr	r2, [sp, #20]
 8007b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b68:	1a9a      	subs	r2, r3, r2
 8007b6a:	eba3 0901 	sub.w	r9, r3, r1
 8007b6e:	4591      	cmp	r9, r2
 8007b70:	bfa8      	it	ge
 8007b72:	4691      	movge	r9, r2
 8007b74:	f1b9 0f00 	cmp.w	r9, #0
 8007b78:	dc35      	bgt.n	8007be6 <_printf_float+0x3ae>
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b82:	f104 0a1a 	add.w	sl, r4, #26
 8007b86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	eba3 0309 	sub.w	r3, r3, r9
 8007b90:	4543      	cmp	r3, r8
 8007b92:	f77f af79 	ble.w	8007a88 <_printf_float+0x250>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4652      	mov	r2, sl
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	47b8      	blx	r7
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f43f aeaa 	beq.w	80078fa <_printf_float+0xc2>
 8007ba6:	f108 0801 	add.w	r8, r8, #1
 8007baa:	e7ec      	b.n	8007b86 <_printf_float+0x34e>
 8007bac:	4613      	mov	r3, r2
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d1c0      	bne.n	8007b3c <_printf_float+0x304>
 8007bba:	e69e      	b.n	80078fa <_printf_float+0xc2>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	9205      	str	r2, [sp, #20]
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f ae97 	beq.w	80078fa <_printf_float+0xc2>
 8007bcc:	9a05      	ldr	r2, [sp, #20]
 8007bce:	f10b 0b01 	add.w	fp, fp, #1
 8007bd2:	e7b9      	b.n	8007b48 <_printf_float+0x310>
 8007bd4:	ee18 3a10 	vmov	r3, s16
 8007bd8:	4652      	mov	r2, sl
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	d1be      	bne.n	8007b62 <_printf_float+0x32a>
 8007be4:	e689      	b.n	80078fa <_printf_float+0xc2>
 8007be6:	9a05      	ldr	r2, [sp, #20]
 8007be8:	464b      	mov	r3, r9
 8007bea:	4442      	add	r2, r8
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d1c1      	bne.n	8007b7a <_printf_float+0x342>
 8007bf6:	e680      	b.n	80078fa <_printf_float+0xc2>
 8007bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bfa:	2a01      	cmp	r2, #1
 8007bfc:	dc01      	bgt.n	8007c02 <_printf_float+0x3ca>
 8007bfe:	07db      	lsls	r3, r3, #31
 8007c00:	d538      	bpl.n	8007c74 <_printf_float+0x43c>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4642      	mov	r2, r8
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae74 	beq.w	80078fa <_printf_float+0xc2>
 8007c12:	ee18 3a10 	vmov	r3, s16
 8007c16:	4652      	mov	r2, sl
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f ae6b 	beq.w	80078fa <_printf_float+0xc2>
 8007c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f7f8 ff5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c30:	b9d8      	cbnz	r0, 8007c6a <_printf_float+0x432>
 8007c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c34:	f108 0201 	add.w	r2, r8, #1
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	d10e      	bne.n	8007c62 <_printf_float+0x42a>
 8007c44:	e659      	b.n	80078fa <_printf_float+0xc2>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4652      	mov	r2, sl
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f ae52 	beq.w	80078fa <_printf_float+0xc2>
 8007c56:	f108 0801 	add.w	r8, r8, #1
 8007c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	4543      	cmp	r3, r8
 8007c60:	dcf1      	bgt.n	8007c46 <_printf_float+0x40e>
 8007c62:	464b      	mov	r3, r9
 8007c64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c68:	e6dc      	b.n	8007a24 <_printf_float+0x1ec>
 8007c6a:	f04f 0800 	mov.w	r8, #0
 8007c6e:	f104 0a1a 	add.w	sl, r4, #26
 8007c72:	e7f2      	b.n	8007c5a <_printf_float+0x422>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4642      	mov	r2, r8
 8007c78:	e7df      	b.n	8007c3a <_printf_float+0x402>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	464a      	mov	r2, r9
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f ae38 	beq.w	80078fa <_printf_float+0xc2>
 8007c8a:	f108 0801 	add.w	r8, r8, #1
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c92:	1a5b      	subs	r3, r3, r1
 8007c94:	4543      	cmp	r3, r8
 8007c96:	dcf0      	bgt.n	8007c7a <_printf_float+0x442>
 8007c98:	e6fa      	b.n	8007a90 <_printf_float+0x258>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	f104 0919 	add.w	r9, r4, #25
 8007ca2:	e7f4      	b.n	8007c8e <_printf_float+0x456>

08007ca4 <_printf_common>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	4616      	mov	r6, r2
 8007caa:	4699      	mov	r9, r3
 8007cac:	688a      	ldr	r2, [r1, #8]
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bfb8      	it	lt
 8007cb8:	4613      	movlt	r3, r2
 8007cba:	6033      	str	r3, [r6, #0]
 8007cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b10a      	cbz	r2, 8007cca <_printf_common+0x26>
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0699      	lsls	r1, r3, #26
 8007cce:	bf42      	ittt	mi
 8007cd0:	6833      	ldrmi	r3, [r6, #0]
 8007cd2:	3302      	addmi	r3, #2
 8007cd4:	6033      	strmi	r3, [r6, #0]
 8007cd6:	6825      	ldr	r5, [r4, #0]
 8007cd8:	f015 0506 	ands.w	r5, r5, #6
 8007cdc:	d106      	bne.n	8007cec <_printf_common+0x48>
 8007cde:	f104 0a19 	add.w	sl, r4, #25
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	6832      	ldr	r2, [r6, #0]
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dc26      	bgt.n	8007d3a <_printf_common+0x96>
 8007cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cf0:	1e13      	subs	r3, r2, #0
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	bf18      	it	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	0692      	lsls	r2, r2, #26
 8007cfa:	d42b      	bmi.n	8007d54 <_printf_common+0xb0>
 8007cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d00:	4649      	mov	r1, r9
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c0      	blx	r8
 8007d06:	3001      	adds	r0, #1
 8007d08:	d01e      	beq.n	8007d48 <_printf_common+0xa4>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	68e5      	ldr	r5, [r4, #12]
 8007d0e:	6832      	ldr	r2, [r6, #0]
 8007d10:	f003 0306 	and.w	r3, r3, #6
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	bf08      	it	eq
 8007d18:	1aad      	subeq	r5, r5, r2
 8007d1a:	68a3      	ldr	r3, [r4, #8]
 8007d1c:	6922      	ldr	r2, [r4, #16]
 8007d1e:	bf0c      	ite	eq
 8007d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d24:	2500      	movne	r5, #0
 8007d26:	4293      	cmp	r3, r2
 8007d28:	bfc4      	itt	gt
 8007d2a:	1a9b      	subgt	r3, r3, r2
 8007d2c:	18ed      	addgt	r5, r5, r3
 8007d2e:	2600      	movs	r6, #0
 8007d30:	341a      	adds	r4, #26
 8007d32:	42b5      	cmp	r5, r6
 8007d34:	d11a      	bne.n	8007d6c <_printf_common+0xc8>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e008      	b.n	8007d4c <_printf_common+0xa8>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	4649      	mov	r1, r9
 8007d40:	4638      	mov	r0, r7
 8007d42:	47c0      	blx	r8
 8007d44:	3001      	adds	r0, #1
 8007d46:	d103      	bne.n	8007d50 <_printf_common+0xac>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d50:	3501      	adds	r5, #1
 8007d52:	e7c6      	b.n	8007ce2 <_printf_common+0x3e>
 8007d54:	18e1      	adds	r1, r4, r3
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	2030      	movs	r0, #48	; 0x30
 8007d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d5e:	4422      	add	r2, r4
 8007d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d68:	3302      	adds	r3, #2
 8007d6a:	e7c7      	b.n	8007cfc <_printf_common+0x58>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4622      	mov	r2, r4
 8007d70:	4649      	mov	r1, r9
 8007d72:	4638      	mov	r0, r7
 8007d74:	47c0      	blx	r8
 8007d76:	3001      	adds	r0, #1
 8007d78:	d0e6      	beq.n	8007d48 <_printf_common+0xa4>
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	e7d9      	b.n	8007d32 <_printf_common+0x8e>
	...

08007d80 <_printf_i>:
 8007d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	7e0f      	ldrb	r7, [r1, #24]
 8007d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d88:	2f78      	cmp	r7, #120	; 0x78
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	469a      	mov	sl, r3
 8007d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d96:	d807      	bhi.n	8007da8 <_printf_i+0x28>
 8007d98:	2f62      	cmp	r7, #98	; 0x62
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x32>
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	f000 80d8 	beq.w	8007f52 <_printf_i+0x1d2>
 8007da2:	2f58      	cmp	r7, #88	; 0x58
 8007da4:	f000 80a3 	beq.w	8007eee <_printf_i+0x16e>
 8007da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007db0:	e03a      	b.n	8007e28 <_printf_i+0xa8>
 8007db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007db6:	2b15      	cmp	r3, #21
 8007db8:	d8f6      	bhi.n	8007da8 <_printf_i+0x28>
 8007dba:	a101      	add	r1, pc, #4	; (adr r1, 8007dc0 <_printf_i+0x40>)
 8007dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007da9 	.word	0x08007da9
 8007dcc:	08007da9 	.word	0x08007da9
 8007dd0:	08007da9 	.word	0x08007da9
 8007dd4:	08007da9 	.word	0x08007da9
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007da9 	.word	0x08007da9
 8007de0:	08007da9 	.word	0x08007da9
 8007de4:	08007da9 	.word	0x08007da9
 8007de8:	08007da9 	.word	0x08007da9
 8007dec:	08007f39 	.word	0x08007f39
 8007df0:	08007e5d 	.word	0x08007e5d
 8007df4:	08007f1b 	.word	0x08007f1b
 8007df8:	08007da9 	.word	0x08007da9
 8007dfc:	08007da9 	.word	0x08007da9
 8007e00:	08007f5b 	.word	0x08007f5b
 8007e04:	08007da9 	.word	0x08007da9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007da9 	.word	0x08007da9
 8007e10:	08007da9 	.word	0x08007da9
 8007e14:	08007f23 	.word	0x08007f23
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	602a      	str	r2, [r5, #0]
 8007e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0a3      	b.n	8007f74 <_printf_i+0x1f4>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	6829      	ldr	r1, [r5, #0]
 8007e30:	0606      	lsls	r6, r0, #24
 8007e32:	f101 0304 	add.w	r3, r1, #4
 8007e36:	d50a      	bpl.n	8007e4e <_printf_i+0xce>
 8007e38:	680e      	ldr	r6, [r1, #0]
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	2e00      	cmp	r6, #0
 8007e3e:	da03      	bge.n	8007e48 <_printf_i+0xc8>
 8007e40:	232d      	movs	r3, #45	; 0x2d
 8007e42:	4276      	negs	r6, r6
 8007e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e48:	485e      	ldr	r0, [pc, #376]	; (8007fc4 <_printf_i+0x244>)
 8007e4a:	230a      	movs	r3, #10
 8007e4c:	e019      	b.n	8007e82 <_printf_i+0x102>
 8007e4e:	680e      	ldr	r6, [r1, #0]
 8007e50:	602b      	str	r3, [r5, #0]
 8007e52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e56:	bf18      	it	ne
 8007e58:	b236      	sxthne	r6, r6
 8007e5a:	e7ef      	b.n	8007e3c <_printf_i+0xbc>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	1d19      	adds	r1, r3, #4
 8007e62:	6029      	str	r1, [r5, #0]
 8007e64:	0601      	lsls	r1, r0, #24
 8007e66:	d501      	bpl.n	8007e6c <_printf_i+0xec>
 8007e68:	681e      	ldr	r6, [r3, #0]
 8007e6a:	e002      	b.n	8007e72 <_printf_i+0xf2>
 8007e6c:	0646      	lsls	r6, r0, #25
 8007e6e:	d5fb      	bpl.n	8007e68 <_printf_i+0xe8>
 8007e70:	881e      	ldrh	r6, [r3, #0]
 8007e72:	4854      	ldr	r0, [pc, #336]	; (8007fc4 <_printf_i+0x244>)
 8007e74:	2f6f      	cmp	r7, #111	; 0x6f
 8007e76:	bf0c      	ite	eq
 8007e78:	2308      	moveq	r3, #8
 8007e7a:	230a      	movne	r3, #10
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e82:	6865      	ldr	r5, [r4, #4]
 8007e84:	60a5      	str	r5, [r4, #8]
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	bfa2      	ittt	ge
 8007e8a:	6821      	ldrge	r1, [r4, #0]
 8007e8c:	f021 0104 	bicge.w	r1, r1, #4
 8007e90:	6021      	strge	r1, [r4, #0]
 8007e92:	b90e      	cbnz	r6, 8007e98 <_printf_i+0x118>
 8007e94:	2d00      	cmp	r5, #0
 8007e96:	d04d      	beq.n	8007f34 <_printf_i+0x1b4>
 8007e98:	4615      	mov	r5, r2
 8007e9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e9e:	fb03 6711 	mls	r7, r3, r1, r6
 8007ea2:	5dc7      	ldrb	r7, [r0, r7]
 8007ea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ea8:	4637      	mov	r7, r6
 8007eaa:	42bb      	cmp	r3, r7
 8007eac:	460e      	mov	r6, r1
 8007eae:	d9f4      	bls.n	8007e9a <_printf_i+0x11a>
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d10b      	bne.n	8007ecc <_printf_i+0x14c>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	07de      	lsls	r6, r3, #31
 8007eb8:	d508      	bpl.n	8007ecc <_printf_i+0x14c>
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	6861      	ldr	r1, [r4, #4]
 8007ebe:	4299      	cmp	r1, r3
 8007ec0:	bfde      	ittt	le
 8007ec2:	2330      	movle	r3, #48	; 0x30
 8007ec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ec8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ecc:	1b52      	subs	r2, r2, r5
 8007ece:	6122      	str	r2, [r4, #16]
 8007ed0:	f8cd a000 	str.w	sl, [sp]
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	aa03      	add	r2, sp, #12
 8007ed8:	4621      	mov	r1, r4
 8007eda:	4640      	mov	r0, r8
 8007edc:	f7ff fee2 	bl	8007ca4 <_printf_common>
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d14c      	bne.n	8007f7e <_printf_i+0x1fe>
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	b004      	add	sp, #16
 8007eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eee:	4835      	ldr	r0, [pc, #212]	; (8007fc4 <_printf_i+0x244>)
 8007ef0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ef4:	6829      	ldr	r1, [r5, #0]
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007efc:	6029      	str	r1, [r5, #0]
 8007efe:	061d      	lsls	r5, r3, #24
 8007f00:	d514      	bpl.n	8007f2c <_printf_i+0x1ac>
 8007f02:	07df      	lsls	r7, r3, #31
 8007f04:	bf44      	itt	mi
 8007f06:	f043 0320 	orrmi.w	r3, r3, #32
 8007f0a:	6023      	strmi	r3, [r4, #0]
 8007f0c:	b91e      	cbnz	r6, 8007f16 <_printf_i+0x196>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	f023 0320 	bic.w	r3, r3, #32
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	2310      	movs	r3, #16
 8007f18:	e7b0      	b.n	8007e7c <_printf_i+0xfc>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	f043 0320 	orr.w	r3, r3, #32
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	2378      	movs	r3, #120	; 0x78
 8007f24:	4828      	ldr	r0, [pc, #160]	; (8007fc8 <_printf_i+0x248>)
 8007f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f2a:	e7e3      	b.n	8007ef4 <_printf_i+0x174>
 8007f2c:	0659      	lsls	r1, r3, #25
 8007f2e:	bf48      	it	mi
 8007f30:	b2b6      	uxthmi	r6, r6
 8007f32:	e7e6      	b.n	8007f02 <_printf_i+0x182>
 8007f34:	4615      	mov	r5, r2
 8007f36:	e7bb      	b.n	8007eb0 <_printf_i+0x130>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	6826      	ldr	r6, [r4, #0]
 8007f3c:	6961      	ldr	r1, [r4, #20]
 8007f3e:	1d18      	adds	r0, r3, #4
 8007f40:	6028      	str	r0, [r5, #0]
 8007f42:	0635      	lsls	r5, r6, #24
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	d501      	bpl.n	8007f4c <_printf_i+0x1cc>
 8007f48:	6019      	str	r1, [r3, #0]
 8007f4a:	e002      	b.n	8007f52 <_printf_i+0x1d2>
 8007f4c:	0670      	lsls	r0, r6, #25
 8007f4e:	d5fb      	bpl.n	8007f48 <_printf_i+0x1c8>
 8007f50:	8019      	strh	r1, [r3, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	4615      	mov	r5, r2
 8007f58:	e7ba      	b.n	8007ed0 <_printf_i+0x150>
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	1d1a      	adds	r2, r3, #4
 8007f5e:	602a      	str	r2, [r5, #0]
 8007f60:	681d      	ldr	r5, [r3, #0]
 8007f62:	6862      	ldr	r2, [r4, #4]
 8007f64:	2100      	movs	r1, #0
 8007f66:	4628      	mov	r0, r5
 8007f68:	f7f8 f94a 	bl	8000200 <memchr>
 8007f6c:	b108      	cbz	r0, 8007f72 <_printf_i+0x1f2>
 8007f6e:	1b40      	subs	r0, r0, r5
 8007f70:	6060      	str	r0, [r4, #4]
 8007f72:	6863      	ldr	r3, [r4, #4]
 8007f74:	6123      	str	r3, [r4, #16]
 8007f76:	2300      	movs	r3, #0
 8007f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f7c:	e7a8      	b.n	8007ed0 <_printf_i+0x150>
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	462a      	mov	r2, r5
 8007f82:	4649      	mov	r1, r9
 8007f84:	4640      	mov	r0, r8
 8007f86:	47d0      	blx	sl
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d0ab      	beq.n	8007ee4 <_printf_i+0x164>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	079b      	lsls	r3, r3, #30
 8007f90:	d413      	bmi.n	8007fba <_printf_i+0x23a>
 8007f92:	68e0      	ldr	r0, [r4, #12]
 8007f94:	9b03      	ldr	r3, [sp, #12]
 8007f96:	4298      	cmp	r0, r3
 8007f98:	bfb8      	it	lt
 8007f9a:	4618      	movlt	r0, r3
 8007f9c:	e7a4      	b.n	8007ee8 <_printf_i+0x168>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	4640      	mov	r0, r8
 8007fa6:	47d0      	blx	sl
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d09b      	beq.n	8007ee4 <_printf_i+0x164>
 8007fac:	3501      	adds	r5, #1
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	9903      	ldr	r1, [sp, #12]
 8007fb2:	1a5b      	subs	r3, r3, r1
 8007fb4:	42ab      	cmp	r3, r5
 8007fb6:	dcf2      	bgt.n	8007f9e <_printf_i+0x21e>
 8007fb8:	e7eb      	b.n	8007f92 <_printf_i+0x212>
 8007fba:	2500      	movs	r5, #0
 8007fbc:	f104 0619 	add.w	r6, r4, #25
 8007fc0:	e7f5      	b.n	8007fae <_printf_i+0x22e>
 8007fc2:	bf00      	nop
 8007fc4:	0800a3f6 	.word	0x0800a3f6
 8007fc8:	0800a407 	.word	0x0800a407

08007fcc <iprintf>:
 8007fcc:	b40f      	push	{r0, r1, r2, r3}
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <iprintf+0x2c>)
 8007fd0:	b513      	push	{r0, r1, r4, lr}
 8007fd2:	681c      	ldr	r4, [r3, #0]
 8007fd4:	b124      	cbz	r4, 8007fe0 <iprintf+0x14>
 8007fd6:	69a3      	ldr	r3, [r4, #24]
 8007fd8:	b913      	cbnz	r3, 8007fe0 <iprintf+0x14>
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f001 f8d8 	bl	8009190 <__sinit>
 8007fe0:	ab05      	add	r3, sp, #20
 8007fe2:	9a04      	ldr	r2, [sp, #16]
 8007fe4:	68a1      	ldr	r1, [r4, #8]
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f001 fe95 	bl	8009d18 <_vfiprintf_r>
 8007fee:	b002      	add	sp, #8
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	b004      	add	sp, #16
 8007ff6:	4770      	bx	lr
 8007ff8:	2000000c 	.word	0x2000000c

08007ffc <_puts_r>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	460e      	mov	r6, r1
 8008000:	4605      	mov	r5, r0
 8008002:	b118      	cbz	r0, 800800c <_puts_r+0x10>
 8008004:	6983      	ldr	r3, [r0, #24]
 8008006:	b90b      	cbnz	r3, 800800c <_puts_r+0x10>
 8008008:	f001 f8c2 	bl	8009190 <__sinit>
 800800c:	69ab      	ldr	r3, [r5, #24]
 800800e:	68ac      	ldr	r4, [r5, #8]
 8008010:	b913      	cbnz	r3, 8008018 <_puts_r+0x1c>
 8008012:	4628      	mov	r0, r5
 8008014:	f001 f8bc 	bl	8009190 <__sinit>
 8008018:	4b2c      	ldr	r3, [pc, #176]	; (80080cc <_puts_r+0xd0>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d120      	bne.n	8008060 <_puts_r+0x64>
 800801e:	686c      	ldr	r4, [r5, #4]
 8008020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008022:	07db      	lsls	r3, r3, #31
 8008024:	d405      	bmi.n	8008032 <_puts_r+0x36>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	0598      	lsls	r0, r3, #22
 800802a:	d402      	bmi.n	8008032 <_puts_r+0x36>
 800802c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802e:	f001 f952 	bl	80092d6 <__retarget_lock_acquire_recursive>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	0719      	lsls	r1, r3, #28
 8008036:	d51d      	bpl.n	8008074 <_puts_r+0x78>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	b1db      	cbz	r3, 8008074 <_puts_r+0x78>
 800803c:	3e01      	subs	r6, #1
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008044:	3b01      	subs	r3, #1
 8008046:	60a3      	str	r3, [r4, #8]
 8008048:	bb39      	cbnz	r1, 800809a <_puts_r+0x9e>
 800804a:	2b00      	cmp	r3, #0
 800804c:	da38      	bge.n	80080c0 <_puts_r+0xc4>
 800804e:	4622      	mov	r2, r4
 8008050:	210a      	movs	r1, #10
 8008052:	4628      	mov	r0, r5
 8008054:	f000 f848 	bl	80080e8 <__swbuf_r>
 8008058:	3001      	adds	r0, #1
 800805a:	d011      	beq.n	8008080 <_puts_r+0x84>
 800805c:	250a      	movs	r5, #10
 800805e:	e011      	b.n	8008084 <_puts_r+0x88>
 8008060:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <_puts_r+0xd4>)
 8008062:	429c      	cmp	r4, r3
 8008064:	d101      	bne.n	800806a <_puts_r+0x6e>
 8008066:	68ac      	ldr	r4, [r5, #8]
 8008068:	e7da      	b.n	8008020 <_puts_r+0x24>
 800806a:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <_puts_r+0xd8>)
 800806c:	429c      	cmp	r4, r3
 800806e:	bf08      	it	eq
 8008070:	68ec      	ldreq	r4, [r5, #12]
 8008072:	e7d5      	b.n	8008020 <_puts_r+0x24>
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f888 	bl	800818c <__swsetup_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	d0dd      	beq.n	800803c <_puts_r+0x40>
 8008080:	f04f 35ff 	mov.w	r5, #4294967295
 8008084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008086:	07da      	lsls	r2, r3, #31
 8008088:	d405      	bmi.n	8008096 <_puts_r+0x9a>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	059b      	lsls	r3, r3, #22
 800808e:	d402      	bmi.n	8008096 <_puts_r+0x9a>
 8008090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008092:	f001 f921 	bl	80092d8 <__retarget_lock_release_recursive>
 8008096:	4628      	mov	r0, r5
 8008098:	bd70      	pop	{r4, r5, r6, pc}
 800809a:	2b00      	cmp	r3, #0
 800809c:	da04      	bge.n	80080a8 <_puts_r+0xac>
 800809e:	69a2      	ldr	r2, [r4, #24]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	dc06      	bgt.n	80080b2 <_puts_r+0xb6>
 80080a4:	290a      	cmp	r1, #10
 80080a6:	d004      	beq.n	80080b2 <_puts_r+0xb6>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	6022      	str	r2, [r4, #0]
 80080ae:	7019      	strb	r1, [r3, #0]
 80080b0:	e7c5      	b.n	800803e <_puts_r+0x42>
 80080b2:	4622      	mov	r2, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 f817 	bl	80080e8 <__swbuf_r>
 80080ba:	3001      	adds	r0, #1
 80080bc:	d1bf      	bne.n	800803e <_puts_r+0x42>
 80080be:	e7df      	b.n	8008080 <_puts_r+0x84>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	250a      	movs	r5, #10
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	701d      	strb	r5, [r3, #0]
 80080ca:	e7db      	b.n	8008084 <_puts_r+0x88>
 80080cc:	0800a4c8 	.word	0x0800a4c8
 80080d0:	0800a4e8 	.word	0x0800a4e8
 80080d4:	0800a4a8 	.word	0x0800a4a8

080080d8 <puts>:
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <puts+0xc>)
 80080da:	4601      	mov	r1, r0
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f7ff bf8d 	b.w	8007ffc <_puts_r>
 80080e2:	bf00      	nop
 80080e4:	2000000c 	.word	0x2000000c

080080e8 <__swbuf_r>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	460e      	mov	r6, r1
 80080ec:	4614      	mov	r4, r2
 80080ee:	4605      	mov	r5, r0
 80080f0:	b118      	cbz	r0, 80080fa <__swbuf_r+0x12>
 80080f2:	6983      	ldr	r3, [r0, #24]
 80080f4:	b90b      	cbnz	r3, 80080fa <__swbuf_r+0x12>
 80080f6:	f001 f84b 	bl	8009190 <__sinit>
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <__swbuf_r+0x98>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	d12b      	bne.n	8008158 <__swbuf_r+0x70>
 8008100:	686c      	ldr	r4, [r5, #4]
 8008102:	69a3      	ldr	r3, [r4, #24]
 8008104:	60a3      	str	r3, [r4, #8]
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	071a      	lsls	r2, r3, #28
 800810a:	d52f      	bpl.n	800816c <__swbuf_r+0x84>
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	b36b      	cbz	r3, 800816c <__swbuf_r+0x84>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	6820      	ldr	r0, [r4, #0]
 8008114:	1ac0      	subs	r0, r0, r3
 8008116:	6963      	ldr	r3, [r4, #20]
 8008118:	b2f6      	uxtb	r6, r6
 800811a:	4283      	cmp	r3, r0
 800811c:	4637      	mov	r7, r6
 800811e:	dc04      	bgt.n	800812a <__swbuf_r+0x42>
 8008120:	4621      	mov	r1, r4
 8008122:	4628      	mov	r0, r5
 8008124:	f000 ffa0 	bl	8009068 <_fflush_r>
 8008128:	bb30      	cbnz	r0, 8008178 <__swbuf_r+0x90>
 800812a:	68a3      	ldr	r3, [r4, #8]
 800812c:	3b01      	subs	r3, #1
 800812e:	60a3      	str	r3, [r4, #8]
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	6022      	str	r2, [r4, #0]
 8008136:	701e      	strb	r6, [r3, #0]
 8008138:	6963      	ldr	r3, [r4, #20]
 800813a:	3001      	adds	r0, #1
 800813c:	4283      	cmp	r3, r0
 800813e:	d004      	beq.n	800814a <__swbuf_r+0x62>
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	07db      	lsls	r3, r3, #31
 8008144:	d506      	bpl.n	8008154 <__swbuf_r+0x6c>
 8008146:	2e0a      	cmp	r6, #10
 8008148:	d104      	bne.n	8008154 <__swbuf_r+0x6c>
 800814a:	4621      	mov	r1, r4
 800814c:	4628      	mov	r0, r5
 800814e:	f000 ff8b 	bl	8009068 <_fflush_r>
 8008152:	b988      	cbnz	r0, 8008178 <__swbuf_r+0x90>
 8008154:	4638      	mov	r0, r7
 8008156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <__swbuf_r+0x9c>)
 800815a:	429c      	cmp	r4, r3
 800815c:	d101      	bne.n	8008162 <__swbuf_r+0x7a>
 800815e:	68ac      	ldr	r4, [r5, #8]
 8008160:	e7cf      	b.n	8008102 <__swbuf_r+0x1a>
 8008162:	4b09      	ldr	r3, [pc, #36]	; (8008188 <__swbuf_r+0xa0>)
 8008164:	429c      	cmp	r4, r3
 8008166:	bf08      	it	eq
 8008168:	68ec      	ldreq	r4, [r5, #12]
 800816a:	e7ca      	b.n	8008102 <__swbuf_r+0x1a>
 800816c:	4621      	mov	r1, r4
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f80c 	bl	800818c <__swsetup_r>
 8008174:	2800      	cmp	r0, #0
 8008176:	d0cb      	beq.n	8008110 <__swbuf_r+0x28>
 8008178:	f04f 37ff 	mov.w	r7, #4294967295
 800817c:	e7ea      	b.n	8008154 <__swbuf_r+0x6c>
 800817e:	bf00      	nop
 8008180:	0800a4c8 	.word	0x0800a4c8
 8008184:	0800a4e8 	.word	0x0800a4e8
 8008188:	0800a4a8 	.word	0x0800a4a8

0800818c <__swsetup_r>:
 800818c:	4b32      	ldr	r3, [pc, #200]	; (8008258 <__swsetup_r+0xcc>)
 800818e:	b570      	push	{r4, r5, r6, lr}
 8008190:	681d      	ldr	r5, [r3, #0]
 8008192:	4606      	mov	r6, r0
 8008194:	460c      	mov	r4, r1
 8008196:	b125      	cbz	r5, 80081a2 <__swsetup_r+0x16>
 8008198:	69ab      	ldr	r3, [r5, #24]
 800819a:	b913      	cbnz	r3, 80081a2 <__swsetup_r+0x16>
 800819c:	4628      	mov	r0, r5
 800819e:	f000 fff7 	bl	8009190 <__sinit>
 80081a2:	4b2e      	ldr	r3, [pc, #184]	; (800825c <__swsetup_r+0xd0>)
 80081a4:	429c      	cmp	r4, r3
 80081a6:	d10f      	bne.n	80081c8 <__swsetup_r+0x3c>
 80081a8:	686c      	ldr	r4, [r5, #4]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081b0:	0719      	lsls	r1, r3, #28
 80081b2:	d42c      	bmi.n	800820e <__swsetup_r+0x82>
 80081b4:	06dd      	lsls	r5, r3, #27
 80081b6:	d411      	bmi.n	80081dc <__swsetup_r+0x50>
 80081b8:	2309      	movs	r3, #9
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295
 80081c6:	e03e      	b.n	8008246 <__swsetup_r+0xba>
 80081c8:	4b25      	ldr	r3, [pc, #148]	; (8008260 <__swsetup_r+0xd4>)
 80081ca:	429c      	cmp	r4, r3
 80081cc:	d101      	bne.n	80081d2 <__swsetup_r+0x46>
 80081ce:	68ac      	ldr	r4, [r5, #8]
 80081d0:	e7eb      	b.n	80081aa <__swsetup_r+0x1e>
 80081d2:	4b24      	ldr	r3, [pc, #144]	; (8008264 <__swsetup_r+0xd8>)
 80081d4:	429c      	cmp	r4, r3
 80081d6:	bf08      	it	eq
 80081d8:	68ec      	ldreq	r4, [r5, #12]
 80081da:	e7e6      	b.n	80081aa <__swsetup_r+0x1e>
 80081dc:	0758      	lsls	r0, r3, #29
 80081de:	d512      	bpl.n	8008206 <__swsetup_r+0x7a>
 80081e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081e2:	b141      	cbz	r1, 80081f6 <__swsetup_r+0x6a>
 80081e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e8:	4299      	cmp	r1, r3
 80081ea:	d002      	beq.n	80081f2 <__swsetup_r+0x66>
 80081ec:	4630      	mov	r0, r6
 80081ee:	f001 fc89 	bl	8009b04 <_free_r>
 80081f2:	2300      	movs	r3, #0
 80081f4:	6363      	str	r3, [r4, #52]	; 0x34
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	2300      	movs	r3, #0
 8008200:	6063      	str	r3, [r4, #4]
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	f043 0308 	orr.w	r3, r3, #8
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	b94b      	cbnz	r3, 8008226 <__swsetup_r+0x9a>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800821c:	d003      	beq.n	8008226 <__swsetup_r+0x9a>
 800821e:	4621      	mov	r1, r4
 8008220:	4630      	mov	r0, r6
 8008222:	f001 f87f 	bl	8009324 <__smakebuf_r>
 8008226:	89a0      	ldrh	r0, [r4, #12]
 8008228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800822c:	f010 0301 	ands.w	r3, r0, #1
 8008230:	d00a      	beq.n	8008248 <__swsetup_r+0xbc>
 8008232:	2300      	movs	r3, #0
 8008234:	60a3      	str	r3, [r4, #8]
 8008236:	6963      	ldr	r3, [r4, #20]
 8008238:	425b      	negs	r3, r3
 800823a:	61a3      	str	r3, [r4, #24]
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	b943      	cbnz	r3, 8008252 <__swsetup_r+0xc6>
 8008240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008244:	d1ba      	bne.n	80081bc <__swsetup_r+0x30>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	0781      	lsls	r1, r0, #30
 800824a:	bf58      	it	pl
 800824c:	6963      	ldrpl	r3, [r4, #20]
 800824e:	60a3      	str	r3, [r4, #8]
 8008250:	e7f4      	b.n	800823c <__swsetup_r+0xb0>
 8008252:	2000      	movs	r0, #0
 8008254:	e7f7      	b.n	8008246 <__swsetup_r+0xba>
 8008256:	bf00      	nop
 8008258:	2000000c 	.word	0x2000000c
 800825c:	0800a4c8 	.word	0x0800a4c8
 8008260:	0800a4e8 	.word	0x0800a4e8
 8008264:	0800a4a8 	.word	0x0800a4a8

08008268 <quorem>:
 8008268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	6903      	ldr	r3, [r0, #16]
 800826e:	690c      	ldr	r4, [r1, #16]
 8008270:	42a3      	cmp	r3, r4
 8008272:	4607      	mov	r7, r0
 8008274:	f2c0 8081 	blt.w	800837a <quorem+0x112>
 8008278:	3c01      	subs	r4, #1
 800827a:	f101 0814 	add.w	r8, r1, #20
 800827e:	f100 0514 	add.w	r5, r0, #20
 8008282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800828c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008290:	3301      	adds	r3, #1
 8008292:	429a      	cmp	r2, r3
 8008294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800829c:	fbb2 f6f3 	udiv	r6, r2, r3
 80082a0:	d331      	bcc.n	8008306 <quorem+0x9e>
 80082a2:	f04f 0e00 	mov.w	lr, #0
 80082a6:	4640      	mov	r0, r8
 80082a8:	46ac      	mov	ip, r5
 80082aa:	46f2      	mov	sl, lr
 80082ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80082b0:	b293      	uxth	r3, r2
 80082b2:	fb06 e303 	mla	r3, r6, r3, lr
 80082b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	ebaa 0303 	sub.w	r3, sl, r3
 80082c0:	f8dc a000 	ldr.w	sl, [ip]
 80082c4:	0c12      	lsrs	r2, r2, #16
 80082c6:	fa13 f38a 	uxtah	r3, r3, sl
 80082ca:	fb06 e202 	mla	r2, r6, r2, lr
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082d6:	b292      	uxth	r2, r2
 80082d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80082e4:	4581      	cmp	r9, r0
 80082e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ea:	f84c 3b04 	str.w	r3, [ip], #4
 80082ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082f2:	d2db      	bcs.n	80082ac <quorem+0x44>
 80082f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80082f8:	b92b      	cbnz	r3, 8008306 <quorem+0x9e>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	3b04      	subs	r3, #4
 80082fe:	429d      	cmp	r5, r3
 8008300:	461a      	mov	r2, r3
 8008302:	d32e      	bcc.n	8008362 <quorem+0xfa>
 8008304:	613c      	str	r4, [r7, #16]
 8008306:	4638      	mov	r0, r7
 8008308:	f001 fae4 	bl	80098d4 <__mcmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	db24      	blt.n	800835a <quorem+0xf2>
 8008310:	3601      	adds	r6, #1
 8008312:	4628      	mov	r0, r5
 8008314:	f04f 0c00 	mov.w	ip, #0
 8008318:	f858 2b04 	ldr.w	r2, [r8], #4
 800831c:	f8d0 e000 	ldr.w	lr, [r0]
 8008320:	b293      	uxth	r3, r2
 8008322:	ebac 0303 	sub.w	r3, ip, r3
 8008326:	0c12      	lsrs	r2, r2, #16
 8008328:	fa13 f38e 	uxtah	r3, r3, lr
 800832c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008334:	b29b      	uxth	r3, r3
 8008336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800833a:	45c1      	cmp	r9, r8
 800833c:	f840 3b04 	str.w	r3, [r0], #4
 8008340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008344:	d2e8      	bcs.n	8008318 <quorem+0xb0>
 8008346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834e:	b922      	cbnz	r2, 800835a <quorem+0xf2>
 8008350:	3b04      	subs	r3, #4
 8008352:	429d      	cmp	r5, r3
 8008354:	461a      	mov	r2, r3
 8008356:	d30a      	bcc.n	800836e <quorem+0x106>
 8008358:	613c      	str	r4, [r7, #16]
 800835a:	4630      	mov	r0, r6
 800835c:	b003      	add	sp, #12
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	3b04      	subs	r3, #4
 8008366:	2a00      	cmp	r2, #0
 8008368:	d1cc      	bne.n	8008304 <quorem+0x9c>
 800836a:	3c01      	subs	r4, #1
 800836c:	e7c7      	b.n	80082fe <quorem+0x96>
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	3b04      	subs	r3, #4
 8008372:	2a00      	cmp	r2, #0
 8008374:	d1f0      	bne.n	8008358 <quorem+0xf0>
 8008376:	3c01      	subs	r4, #1
 8008378:	e7eb      	b.n	8008352 <quorem+0xea>
 800837a:	2000      	movs	r0, #0
 800837c:	e7ee      	b.n	800835c <quorem+0xf4>
	...

08008380 <_dtoa_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	ed2d 8b04 	vpush	{d8-d9}
 8008388:	ec57 6b10 	vmov	r6, r7, d0
 800838c:	b093      	sub	sp, #76	; 0x4c
 800838e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008394:	9106      	str	r1, [sp, #24]
 8008396:	ee10 aa10 	vmov	sl, s0
 800839a:	4604      	mov	r4, r0
 800839c:	9209      	str	r2, [sp, #36]	; 0x24
 800839e:	930c      	str	r3, [sp, #48]	; 0x30
 80083a0:	46bb      	mov	fp, r7
 80083a2:	b975      	cbnz	r5, 80083c2 <_dtoa_r+0x42>
 80083a4:	2010      	movs	r0, #16
 80083a6:	f000 fffd 	bl	80093a4 <malloc>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6260      	str	r0, [r4, #36]	; 0x24
 80083ae:	b920      	cbnz	r0, 80083ba <_dtoa_r+0x3a>
 80083b0:	4ba7      	ldr	r3, [pc, #668]	; (8008650 <_dtoa_r+0x2d0>)
 80083b2:	21ea      	movs	r1, #234	; 0xea
 80083b4:	48a7      	ldr	r0, [pc, #668]	; (8008654 <_dtoa_r+0x2d4>)
 80083b6:	f001 fe45 	bl	800a044 <__assert_func>
 80083ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083be:	6005      	str	r5, [r0, #0]
 80083c0:	60c5      	str	r5, [r0, #12]
 80083c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c4:	6819      	ldr	r1, [r3, #0]
 80083c6:	b151      	cbz	r1, 80083de <_dtoa_r+0x5e>
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	604a      	str	r2, [r1, #4]
 80083cc:	2301      	movs	r3, #1
 80083ce:	4093      	lsls	r3, r2
 80083d0:	608b      	str	r3, [r1, #8]
 80083d2:	4620      	mov	r0, r4
 80083d4:	f001 f83c 	bl	8009450 <_Bfree>
 80083d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	1e3b      	subs	r3, r7, #0
 80083e0:	bfaa      	itet	ge
 80083e2:	2300      	movge	r3, #0
 80083e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083e8:	f8c8 3000 	strge.w	r3, [r8]
 80083ec:	4b9a      	ldr	r3, [pc, #616]	; (8008658 <_dtoa_r+0x2d8>)
 80083ee:	bfbc      	itt	lt
 80083f0:	2201      	movlt	r2, #1
 80083f2:	f8c8 2000 	strlt.w	r2, [r8]
 80083f6:	ea33 030b 	bics.w	r3, r3, fp
 80083fa:	d11b      	bne.n	8008434 <_dtoa_r+0xb4>
 80083fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008408:	4333      	orrs	r3, r6
 800840a:	f000 8592 	beq.w	8008f32 <_dtoa_r+0xbb2>
 800840e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008410:	b963      	cbnz	r3, 800842c <_dtoa_r+0xac>
 8008412:	4b92      	ldr	r3, [pc, #584]	; (800865c <_dtoa_r+0x2dc>)
 8008414:	e022      	b.n	800845c <_dtoa_r+0xdc>
 8008416:	4b92      	ldr	r3, [pc, #584]	; (8008660 <_dtoa_r+0x2e0>)
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	3308      	adds	r3, #8
 800841c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	9801      	ldr	r0, [sp, #4]
 8008422:	b013      	add	sp, #76	; 0x4c
 8008424:	ecbd 8b04 	vpop	{d8-d9}
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	4b8b      	ldr	r3, [pc, #556]	; (800865c <_dtoa_r+0x2dc>)
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	3303      	adds	r3, #3
 8008432:	e7f3      	b.n	800841c <_dtoa_r+0x9c>
 8008434:	2200      	movs	r2, #0
 8008436:	2300      	movs	r3, #0
 8008438:	4650      	mov	r0, sl
 800843a:	4659      	mov	r1, fp
 800843c:	f7f8 fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 8008440:	ec4b ab19 	vmov	d9, sl, fp
 8008444:	4680      	mov	r8, r0
 8008446:	b158      	cbz	r0, 8008460 <_dtoa_r+0xe0>
 8008448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800844a:	2301      	movs	r3, #1
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 856b 	beq.w	8008f2c <_dtoa_r+0xbac>
 8008456:	4883      	ldr	r0, [pc, #524]	; (8008664 <_dtoa_r+0x2e4>)
 8008458:	6018      	str	r0, [r3, #0]
 800845a:	1e43      	subs	r3, r0, #1
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	e7df      	b.n	8008420 <_dtoa_r+0xa0>
 8008460:	ec4b ab10 	vmov	d0, sl, fp
 8008464:	aa10      	add	r2, sp, #64	; 0x40
 8008466:	a911      	add	r1, sp, #68	; 0x44
 8008468:	4620      	mov	r0, r4
 800846a:	f001 fad9 	bl	8009a20 <__d2b>
 800846e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008472:	ee08 0a10 	vmov	s16, r0
 8008476:	2d00      	cmp	r5, #0
 8008478:	f000 8084 	beq.w	8008584 <_dtoa_r+0x204>
 800847c:	ee19 3a90 	vmov	r3, s19
 8008480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008484:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008488:	4656      	mov	r6, sl
 800848a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800848e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008492:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008496:	4b74      	ldr	r3, [pc, #464]	; (8008668 <_dtoa_r+0x2e8>)
 8008498:	2200      	movs	r2, #0
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	f7f7 ff03 	bl	80002a8 <__aeabi_dsub>
 80084a2:	a365      	add	r3, pc, #404	; (adr r3, 8008638 <_dtoa_r+0x2b8>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f8 f8b6 	bl	8000618 <__aeabi_dmul>
 80084ac:	a364      	add	r3, pc, #400	; (adr r3, 8008640 <_dtoa_r+0x2c0>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f7 fefb 	bl	80002ac <__adddf3>
 80084b6:	4606      	mov	r6, r0
 80084b8:	4628      	mov	r0, r5
 80084ba:	460f      	mov	r7, r1
 80084bc:	f7f8 f842 	bl	8000544 <__aeabi_i2d>
 80084c0:	a361      	add	r3, pc, #388	; (adr r3, 8008648 <_dtoa_r+0x2c8>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f7f8 f8a7 	bl	8000618 <__aeabi_dmul>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 feeb 	bl	80002ac <__adddf3>
 80084d6:	4606      	mov	r6, r0
 80084d8:	460f      	mov	r7, r1
 80084da:	f7f8 fb4d 	bl	8000b78 <__aeabi_d2iz>
 80084de:	2200      	movs	r2, #0
 80084e0:	9000      	str	r0, [sp, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	4630      	mov	r0, r6
 80084e6:	4639      	mov	r1, r7
 80084e8:	f7f8 fb08 	bl	8000afc <__aeabi_dcmplt>
 80084ec:	b150      	cbz	r0, 8008504 <_dtoa_r+0x184>
 80084ee:	9800      	ldr	r0, [sp, #0]
 80084f0:	f7f8 f828 	bl	8000544 <__aeabi_i2d>
 80084f4:	4632      	mov	r2, r6
 80084f6:	463b      	mov	r3, r7
 80084f8:	f7f8 faf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80084fc:	b910      	cbnz	r0, 8008504 <_dtoa_r+0x184>
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	3b01      	subs	r3, #1
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	2b16      	cmp	r3, #22
 8008508:	d85a      	bhi.n	80085c0 <_dtoa_r+0x240>
 800850a:	9a00      	ldr	r2, [sp, #0]
 800850c:	4b57      	ldr	r3, [pc, #348]	; (800866c <_dtoa_r+0x2ec>)
 800850e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	ec51 0b19 	vmov	r0, r1, d9
 800851a:	f7f8 faef 	bl	8000afc <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	d050      	beq.n	80085c4 <_dtoa_r+0x244>
 8008522:	9b00      	ldr	r3, [sp, #0]
 8008524:	3b01      	subs	r3, #1
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	2300      	movs	r3, #0
 800852a:	930b      	str	r3, [sp, #44]	; 0x2c
 800852c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800852e:	1b5d      	subs	r5, r3, r5
 8008530:	1e6b      	subs	r3, r5, #1
 8008532:	9305      	str	r3, [sp, #20]
 8008534:	bf45      	ittet	mi
 8008536:	f1c5 0301 	rsbmi	r3, r5, #1
 800853a:	9304      	strmi	r3, [sp, #16]
 800853c:	2300      	movpl	r3, #0
 800853e:	2300      	movmi	r3, #0
 8008540:	bf4c      	ite	mi
 8008542:	9305      	strmi	r3, [sp, #20]
 8008544:	9304      	strpl	r3, [sp, #16]
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	db3d      	blt.n	80085c8 <_dtoa_r+0x248>
 800854c:	9b05      	ldr	r3, [sp, #20]
 800854e:	9a00      	ldr	r2, [sp, #0]
 8008550:	920a      	str	r2, [sp, #40]	; 0x28
 8008552:	4413      	add	r3, r2
 8008554:	9305      	str	r3, [sp, #20]
 8008556:	2300      	movs	r3, #0
 8008558:	9307      	str	r3, [sp, #28]
 800855a:	9b06      	ldr	r3, [sp, #24]
 800855c:	2b09      	cmp	r3, #9
 800855e:	f200 8089 	bhi.w	8008674 <_dtoa_r+0x2f4>
 8008562:	2b05      	cmp	r3, #5
 8008564:	bfc4      	itt	gt
 8008566:	3b04      	subgt	r3, #4
 8008568:	9306      	strgt	r3, [sp, #24]
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	f1a3 0302 	sub.w	r3, r3, #2
 8008570:	bfcc      	ite	gt
 8008572:	2500      	movgt	r5, #0
 8008574:	2501      	movle	r5, #1
 8008576:	2b03      	cmp	r3, #3
 8008578:	f200 8087 	bhi.w	800868a <_dtoa_r+0x30a>
 800857c:	e8df f003 	tbb	[pc, r3]
 8008580:	59383a2d 	.word	0x59383a2d
 8008584:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008588:	441d      	add	r5, r3
 800858a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800858e:	2b20      	cmp	r3, #32
 8008590:	bfc1      	itttt	gt
 8008592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008596:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800859a:	fa0b f303 	lslgt.w	r3, fp, r3
 800859e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085a2:	bfda      	itte	le
 80085a4:	f1c3 0320 	rsble	r3, r3, #32
 80085a8:	fa06 f003 	lslle.w	r0, r6, r3
 80085ac:	4318      	orrgt	r0, r3
 80085ae:	f7f7 ffb9 	bl	8000524 <__aeabi_ui2d>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4606      	mov	r6, r0
 80085b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085ba:	3d01      	subs	r5, #1
 80085bc:	930e      	str	r3, [sp, #56]	; 0x38
 80085be:	e76a      	b.n	8008496 <_dtoa_r+0x116>
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7b2      	b.n	800852a <_dtoa_r+0x1aa>
 80085c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80085c6:	e7b1      	b.n	800852c <_dtoa_r+0x1ac>
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	9a00      	ldr	r2, [sp, #0]
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	4253      	negs	r3, r2
 80085d2:	9307      	str	r3, [sp, #28]
 80085d4:	2300      	movs	r3, #0
 80085d6:	930a      	str	r3, [sp, #40]	; 0x28
 80085d8:	e7bf      	b.n	800855a <_dtoa_r+0x1da>
 80085da:	2300      	movs	r3, #0
 80085dc:	9308      	str	r3, [sp, #32]
 80085de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dc55      	bgt.n	8008690 <_dtoa_r+0x310>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085ea:	461a      	mov	r2, r3
 80085ec:	9209      	str	r2, [sp, #36]	; 0x24
 80085ee:	e00c      	b.n	800860a <_dtoa_r+0x28a>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e7f3      	b.n	80085dc <_dtoa_r+0x25c>
 80085f4:	2300      	movs	r3, #0
 80085f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f8:	9308      	str	r3, [sp, #32]
 80085fa:	9b00      	ldr	r3, [sp, #0]
 80085fc:	4413      	add	r3, r2
 80085fe:	9302      	str	r3, [sp, #8]
 8008600:	3301      	adds	r3, #1
 8008602:	2b01      	cmp	r3, #1
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	bfb8      	it	lt
 8008608:	2301      	movlt	r3, #1
 800860a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800860c:	2200      	movs	r2, #0
 800860e:	6042      	str	r2, [r0, #4]
 8008610:	2204      	movs	r2, #4
 8008612:	f102 0614 	add.w	r6, r2, #20
 8008616:	429e      	cmp	r6, r3
 8008618:	6841      	ldr	r1, [r0, #4]
 800861a:	d93d      	bls.n	8008698 <_dtoa_r+0x318>
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fed7 	bl	80093d0 <_Balloc>
 8008622:	9001      	str	r0, [sp, #4]
 8008624:	2800      	cmp	r0, #0
 8008626:	d13b      	bne.n	80086a0 <_dtoa_r+0x320>
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <_dtoa_r+0x2f0>)
 800862a:	4602      	mov	r2, r0
 800862c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008630:	e6c0      	b.n	80083b4 <_dtoa_r+0x34>
 8008632:	2301      	movs	r3, #1
 8008634:	e7df      	b.n	80085f6 <_dtoa_r+0x276>
 8008636:	bf00      	nop
 8008638:	636f4361 	.word	0x636f4361
 800863c:	3fd287a7 	.word	0x3fd287a7
 8008640:	8b60c8b3 	.word	0x8b60c8b3
 8008644:	3fc68a28 	.word	0x3fc68a28
 8008648:	509f79fb 	.word	0x509f79fb
 800864c:	3fd34413 	.word	0x3fd34413
 8008650:	0800a425 	.word	0x0800a425
 8008654:	0800a43c 	.word	0x0800a43c
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	0800a421 	.word	0x0800a421
 8008660:	0800a418 	.word	0x0800a418
 8008664:	0800a3f5 	.word	0x0800a3f5
 8008668:	3ff80000 	.word	0x3ff80000
 800866c:	0800a590 	.word	0x0800a590
 8008670:	0800a497 	.word	0x0800a497
 8008674:	2501      	movs	r5, #1
 8008676:	2300      	movs	r3, #0
 8008678:	9306      	str	r3, [sp, #24]
 800867a:	9508      	str	r5, [sp, #32]
 800867c:	f04f 33ff 	mov.w	r3, #4294967295
 8008680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	2312      	movs	r3, #18
 8008688:	e7b0      	b.n	80085ec <_dtoa_r+0x26c>
 800868a:	2301      	movs	r3, #1
 800868c:	9308      	str	r3, [sp, #32]
 800868e:	e7f5      	b.n	800867c <_dtoa_r+0x2fc>
 8008690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008696:	e7b8      	b.n	800860a <_dtoa_r+0x28a>
 8008698:	3101      	adds	r1, #1
 800869a:	6041      	str	r1, [r0, #4]
 800869c:	0052      	lsls	r2, r2, #1
 800869e:	e7b8      	b.n	8008612 <_dtoa_r+0x292>
 80086a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086a2:	9a01      	ldr	r2, [sp, #4]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	2b0e      	cmp	r3, #14
 80086aa:	f200 809d 	bhi.w	80087e8 <_dtoa_r+0x468>
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	f000 809a 	beq.w	80087e8 <_dtoa_r+0x468>
 80086b4:	9b00      	ldr	r3, [sp, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd32      	ble.n	8008720 <_dtoa_r+0x3a0>
 80086ba:	4ab7      	ldr	r2, [pc, #732]	; (8008998 <_dtoa_r+0x618>)
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	05d8      	lsls	r0, r3, #23
 80086cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086d0:	d516      	bpl.n	8008700 <_dtoa_r+0x380>
 80086d2:	4bb2      	ldr	r3, [pc, #712]	; (800899c <_dtoa_r+0x61c>)
 80086d4:	ec51 0b19 	vmov	r0, r1, d9
 80086d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086dc:	f7f8 f8c6 	bl	800086c <__aeabi_ddiv>
 80086e0:	f007 070f 	and.w	r7, r7, #15
 80086e4:	4682      	mov	sl, r0
 80086e6:	468b      	mov	fp, r1
 80086e8:	2503      	movs	r5, #3
 80086ea:	4eac      	ldr	r6, [pc, #688]	; (800899c <_dtoa_r+0x61c>)
 80086ec:	b957      	cbnz	r7, 8008704 <_dtoa_r+0x384>
 80086ee:	4642      	mov	r2, r8
 80086f0:	464b      	mov	r3, r9
 80086f2:	4650      	mov	r0, sl
 80086f4:	4659      	mov	r1, fp
 80086f6:	f7f8 f8b9 	bl	800086c <__aeabi_ddiv>
 80086fa:	4682      	mov	sl, r0
 80086fc:	468b      	mov	fp, r1
 80086fe:	e028      	b.n	8008752 <_dtoa_r+0x3d2>
 8008700:	2502      	movs	r5, #2
 8008702:	e7f2      	b.n	80086ea <_dtoa_r+0x36a>
 8008704:	07f9      	lsls	r1, r7, #31
 8008706:	d508      	bpl.n	800871a <_dtoa_r+0x39a>
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008710:	f7f7 ff82 	bl	8000618 <__aeabi_dmul>
 8008714:	3501      	adds	r5, #1
 8008716:	4680      	mov	r8, r0
 8008718:	4689      	mov	r9, r1
 800871a:	107f      	asrs	r7, r7, #1
 800871c:	3608      	adds	r6, #8
 800871e:	e7e5      	b.n	80086ec <_dtoa_r+0x36c>
 8008720:	f000 809b 	beq.w	800885a <_dtoa_r+0x4da>
 8008724:	9b00      	ldr	r3, [sp, #0]
 8008726:	4f9d      	ldr	r7, [pc, #628]	; (800899c <_dtoa_r+0x61c>)
 8008728:	425e      	negs	r6, r3
 800872a:	4b9b      	ldr	r3, [pc, #620]	; (8008998 <_dtoa_r+0x618>)
 800872c:	f006 020f 	and.w	r2, r6, #15
 8008730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	ec51 0b19 	vmov	r0, r1, d9
 800873c:	f7f7 ff6c 	bl	8000618 <__aeabi_dmul>
 8008740:	1136      	asrs	r6, r6, #4
 8008742:	4682      	mov	sl, r0
 8008744:	468b      	mov	fp, r1
 8008746:	2300      	movs	r3, #0
 8008748:	2502      	movs	r5, #2
 800874a:	2e00      	cmp	r6, #0
 800874c:	d17a      	bne.n	8008844 <_dtoa_r+0x4c4>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1d3      	bne.n	80086fa <_dtoa_r+0x37a>
 8008752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 8082 	beq.w	800885e <_dtoa_r+0x4de>
 800875a:	4b91      	ldr	r3, [pc, #580]	; (80089a0 <_dtoa_r+0x620>)
 800875c:	2200      	movs	r2, #0
 800875e:	4650      	mov	r0, sl
 8008760:	4659      	mov	r1, fp
 8008762:	f7f8 f9cb 	bl	8000afc <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	d079      	beq.n	800885e <_dtoa_r+0x4de>
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d076      	beq.n	800885e <_dtoa_r+0x4de>
 8008770:	9b02      	ldr	r3, [sp, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dd36      	ble.n	80087e4 <_dtoa_r+0x464>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	4650      	mov	r0, sl
 800877a:	4659      	mov	r1, fp
 800877c:	1e5f      	subs	r7, r3, #1
 800877e:	2200      	movs	r2, #0
 8008780:	4b88      	ldr	r3, [pc, #544]	; (80089a4 <_dtoa_r+0x624>)
 8008782:	f7f7 ff49 	bl	8000618 <__aeabi_dmul>
 8008786:	9e02      	ldr	r6, [sp, #8]
 8008788:	4682      	mov	sl, r0
 800878a:	468b      	mov	fp, r1
 800878c:	3501      	adds	r5, #1
 800878e:	4628      	mov	r0, r5
 8008790:	f7f7 fed8 	bl	8000544 <__aeabi_i2d>
 8008794:	4652      	mov	r2, sl
 8008796:	465b      	mov	r3, fp
 8008798:	f7f7 ff3e 	bl	8000618 <__aeabi_dmul>
 800879c:	4b82      	ldr	r3, [pc, #520]	; (80089a8 <_dtoa_r+0x628>)
 800879e:	2200      	movs	r2, #0
 80087a0:	f7f7 fd84 	bl	80002ac <__adddf3>
 80087a4:	46d0      	mov	r8, sl
 80087a6:	46d9      	mov	r9, fp
 80087a8:	4682      	mov	sl, r0
 80087aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d158      	bne.n	8008864 <_dtoa_r+0x4e4>
 80087b2:	4b7e      	ldr	r3, [pc, #504]	; (80089ac <_dtoa_r+0x62c>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f7 fd75 	bl	80002a8 <__aeabi_dsub>
 80087be:	4652      	mov	r2, sl
 80087c0:	465b      	mov	r3, fp
 80087c2:	4680      	mov	r8, r0
 80087c4:	4689      	mov	r9, r1
 80087c6:	f7f8 f9b7 	bl	8000b38 <__aeabi_dcmpgt>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	f040 8295 	bne.w	8008cfa <_dtoa_r+0x97a>
 80087d0:	4652      	mov	r2, sl
 80087d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087d6:	4640      	mov	r0, r8
 80087d8:	4649      	mov	r1, r9
 80087da:	f7f8 f98f 	bl	8000afc <__aeabi_dcmplt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f040 8289 	bne.w	8008cf6 <_dtoa_r+0x976>
 80087e4:	ec5b ab19 	vmov	sl, fp, d9
 80087e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f2c0 8148 	blt.w	8008a80 <_dtoa_r+0x700>
 80087f0:	9a00      	ldr	r2, [sp, #0]
 80087f2:	2a0e      	cmp	r2, #14
 80087f4:	f300 8144 	bgt.w	8008a80 <_dtoa_r+0x700>
 80087f8:	4b67      	ldr	r3, [pc, #412]	; (8008998 <_dtoa_r+0x618>)
 80087fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008804:	2b00      	cmp	r3, #0
 8008806:	f280 80d5 	bge.w	80089b4 <_dtoa_r+0x634>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f300 80d1 	bgt.w	80089b4 <_dtoa_r+0x634>
 8008812:	f040 826f 	bne.w	8008cf4 <_dtoa_r+0x974>
 8008816:	4b65      	ldr	r3, [pc, #404]	; (80089ac <_dtoa_r+0x62c>)
 8008818:	2200      	movs	r2, #0
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f7 fefb 	bl	8000618 <__aeabi_dmul>
 8008822:	4652      	mov	r2, sl
 8008824:	465b      	mov	r3, fp
 8008826:	f7f8 f97d 	bl	8000b24 <__aeabi_dcmpge>
 800882a:	9e03      	ldr	r6, [sp, #12]
 800882c:	4637      	mov	r7, r6
 800882e:	2800      	cmp	r0, #0
 8008830:	f040 8245 	bne.w	8008cbe <_dtoa_r+0x93e>
 8008834:	9d01      	ldr	r5, [sp, #4]
 8008836:	2331      	movs	r3, #49	; 0x31
 8008838:	f805 3b01 	strb.w	r3, [r5], #1
 800883c:	9b00      	ldr	r3, [sp, #0]
 800883e:	3301      	adds	r3, #1
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	e240      	b.n	8008cc6 <_dtoa_r+0x946>
 8008844:	07f2      	lsls	r2, r6, #31
 8008846:	d505      	bpl.n	8008854 <_dtoa_r+0x4d4>
 8008848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884c:	f7f7 fee4 	bl	8000618 <__aeabi_dmul>
 8008850:	3501      	adds	r5, #1
 8008852:	2301      	movs	r3, #1
 8008854:	1076      	asrs	r6, r6, #1
 8008856:	3708      	adds	r7, #8
 8008858:	e777      	b.n	800874a <_dtoa_r+0x3ca>
 800885a:	2502      	movs	r5, #2
 800885c:	e779      	b.n	8008752 <_dtoa_r+0x3d2>
 800885e:	9f00      	ldr	r7, [sp, #0]
 8008860:	9e03      	ldr	r6, [sp, #12]
 8008862:	e794      	b.n	800878e <_dtoa_r+0x40e>
 8008864:	9901      	ldr	r1, [sp, #4]
 8008866:	4b4c      	ldr	r3, [pc, #304]	; (8008998 <_dtoa_r+0x618>)
 8008868:	4431      	add	r1, r6
 800886a:	910d      	str	r1, [sp, #52]	; 0x34
 800886c:	9908      	ldr	r1, [sp, #32]
 800886e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008876:	2900      	cmp	r1, #0
 8008878:	d043      	beq.n	8008902 <_dtoa_r+0x582>
 800887a:	494d      	ldr	r1, [pc, #308]	; (80089b0 <_dtoa_r+0x630>)
 800887c:	2000      	movs	r0, #0
 800887e:	f7f7 fff5 	bl	800086c <__aeabi_ddiv>
 8008882:	4652      	mov	r2, sl
 8008884:	465b      	mov	r3, fp
 8008886:	f7f7 fd0f 	bl	80002a8 <__aeabi_dsub>
 800888a:	9d01      	ldr	r5, [sp, #4]
 800888c:	4682      	mov	sl, r0
 800888e:	468b      	mov	fp, r1
 8008890:	4649      	mov	r1, r9
 8008892:	4640      	mov	r0, r8
 8008894:	f7f8 f970 	bl	8000b78 <__aeabi_d2iz>
 8008898:	4606      	mov	r6, r0
 800889a:	f7f7 fe53 	bl	8000544 <__aeabi_i2d>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fcff 	bl	80002a8 <__aeabi_dsub>
 80088aa:	3630      	adds	r6, #48	; 0x30
 80088ac:	f805 6b01 	strb.w	r6, [r5], #1
 80088b0:	4652      	mov	r2, sl
 80088b2:	465b      	mov	r3, fp
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	f7f8 f920 	bl	8000afc <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d163      	bne.n	8008988 <_dtoa_r+0x608>
 80088c0:	4642      	mov	r2, r8
 80088c2:	464b      	mov	r3, r9
 80088c4:	4936      	ldr	r1, [pc, #216]	; (80089a0 <_dtoa_r+0x620>)
 80088c6:	2000      	movs	r0, #0
 80088c8:	f7f7 fcee 	bl	80002a8 <__aeabi_dsub>
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	f7f8 f914 	bl	8000afc <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f040 80b5 	bne.w	8008a44 <_dtoa_r+0x6c4>
 80088da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088dc:	429d      	cmp	r5, r3
 80088de:	d081      	beq.n	80087e4 <_dtoa_r+0x464>
 80088e0:	4b30      	ldr	r3, [pc, #192]	; (80089a4 <_dtoa_r+0x624>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	4650      	mov	r0, sl
 80088e6:	4659      	mov	r1, fp
 80088e8:	f7f7 fe96 	bl	8000618 <__aeabi_dmul>
 80088ec:	4b2d      	ldr	r3, [pc, #180]	; (80089a4 <_dtoa_r+0x624>)
 80088ee:	4682      	mov	sl, r0
 80088f0:	468b      	mov	fp, r1
 80088f2:	4640      	mov	r0, r8
 80088f4:	4649      	mov	r1, r9
 80088f6:	2200      	movs	r2, #0
 80088f8:	f7f7 fe8e 	bl	8000618 <__aeabi_dmul>
 80088fc:	4680      	mov	r8, r0
 80088fe:	4689      	mov	r9, r1
 8008900:	e7c6      	b.n	8008890 <_dtoa_r+0x510>
 8008902:	4650      	mov	r0, sl
 8008904:	4659      	mov	r1, fp
 8008906:	f7f7 fe87 	bl	8000618 <__aeabi_dmul>
 800890a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800890c:	9d01      	ldr	r5, [sp, #4]
 800890e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008910:	4682      	mov	sl, r0
 8008912:	468b      	mov	fp, r1
 8008914:	4649      	mov	r1, r9
 8008916:	4640      	mov	r0, r8
 8008918:	f7f8 f92e 	bl	8000b78 <__aeabi_d2iz>
 800891c:	4606      	mov	r6, r0
 800891e:	f7f7 fe11 	bl	8000544 <__aeabi_i2d>
 8008922:	3630      	adds	r6, #48	; 0x30
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4640      	mov	r0, r8
 800892a:	4649      	mov	r1, r9
 800892c:	f7f7 fcbc 	bl	80002a8 <__aeabi_dsub>
 8008930:	f805 6b01 	strb.w	r6, [r5], #1
 8008934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008936:	429d      	cmp	r5, r3
 8008938:	4680      	mov	r8, r0
 800893a:	4689      	mov	r9, r1
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	d124      	bne.n	800898c <_dtoa_r+0x60c>
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <_dtoa_r+0x630>)
 8008944:	4650      	mov	r0, sl
 8008946:	4659      	mov	r1, fp
 8008948:	f7f7 fcb0 	bl	80002ac <__adddf3>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	f7f8 f8f0 	bl	8000b38 <__aeabi_dcmpgt>
 8008958:	2800      	cmp	r0, #0
 800895a:	d173      	bne.n	8008a44 <_dtoa_r+0x6c4>
 800895c:	4652      	mov	r2, sl
 800895e:	465b      	mov	r3, fp
 8008960:	4913      	ldr	r1, [pc, #76]	; (80089b0 <_dtoa_r+0x630>)
 8008962:	2000      	movs	r0, #0
 8008964:	f7f7 fca0 	bl	80002a8 <__aeabi_dsub>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4640      	mov	r0, r8
 800896e:	4649      	mov	r1, r9
 8008970:	f7f8 f8c4 	bl	8000afc <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f43f af35 	beq.w	80087e4 <_dtoa_r+0x464>
 800897a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800897c:	1e6b      	subs	r3, r5, #1
 800897e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008984:	2b30      	cmp	r3, #48	; 0x30
 8008986:	d0f8      	beq.n	800897a <_dtoa_r+0x5fa>
 8008988:	9700      	str	r7, [sp, #0]
 800898a:	e049      	b.n	8008a20 <_dtoa_r+0x6a0>
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <_dtoa_r+0x624>)
 800898e:	f7f7 fe43 	bl	8000618 <__aeabi_dmul>
 8008992:	4680      	mov	r8, r0
 8008994:	4689      	mov	r9, r1
 8008996:	e7bd      	b.n	8008914 <_dtoa_r+0x594>
 8008998:	0800a590 	.word	0x0800a590
 800899c:	0800a568 	.word	0x0800a568
 80089a0:	3ff00000 	.word	0x3ff00000
 80089a4:	40240000 	.word	0x40240000
 80089a8:	401c0000 	.word	0x401c0000
 80089ac:	40140000 	.word	0x40140000
 80089b0:	3fe00000 	.word	0x3fe00000
 80089b4:	9d01      	ldr	r5, [sp, #4]
 80089b6:	4656      	mov	r6, sl
 80089b8:	465f      	mov	r7, fp
 80089ba:	4642      	mov	r2, r8
 80089bc:	464b      	mov	r3, r9
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 ff53 	bl	800086c <__aeabi_ddiv>
 80089c6:	f7f8 f8d7 	bl	8000b78 <__aeabi_d2iz>
 80089ca:	4682      	mov	sl, r0
 80089cc:	f7f7 fdba 	bl	8000544 <__aeabi_i2d>
 80089d0:	4642      	mov	r2, r8
 80089d2:	464b      	mov	r3, r9
 80089d4:	f7f7 fe20 	bl	8000618 <__aeabi_dmul>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4630      	mov	r0, r6
 80089de:	4639      	mov	r1, r7
 80089e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089e4:	f7f7 fc60 	bl	80002a8 <__aeabi_dsub>
 80089e8:	f805 6b01 	strb.w	r6, [r5], #1
 80089ec:	9e01      	ldr	r6, [sp, #4]
 80089ee:	9f03      	ldr	r7, [sp, #12]
 80089f0:	1bae      	subs	r6, r5, r6
 80089f2:	42b7      	cmp	r7, r6
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	d135      	bne.n	8008a66 <_dtoa_r+0x6e6>
 80089fa:	f7f7 fc57 	bl	80002ac <__adddf3>
 80089fe:	4642      	mov	r2, r8
 8008a00:	464b      	mov	r3, r9
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	f7f8 f897 	bl	8000b38 <__aeabi_dcmpgt>
 8008a0a:	b9d0      	cbnz	r0, 8008a42 <_dtoa_r+0x6c2>
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	464b      	mov	r3, r9
 8008a10:	4630      	mov	r0, r6
 8008a12:	4639      	mov	r1, r7
 8008a14:	f7f8 f868 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a18:	b110      	cbz	r0, 8008a20 <_dtoa_r+0x6a0>
 8008a1a:	f01a 0f01 	tst.w	sl, #1
 8008a1e:	d110      	bne.n	8008a42 <_dtoa_r+0x6c2>
 8008a20:	4620      	mov	r0, r4
 8008a22:	ee18 1a10 	vmov	r1, s16
 8008a26:	f000 fd13 	bl	8009450 <_Bfree>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9800      	ldr	r0, [sp, #0]
 8008a2e:	702b      	strb	r3, [r5, #0]
 8008a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a32:	3001      	adds	r0, #1
 8008a34:	6018      	str	r0, [r3, #0]
 8008a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f43f acf1 	beq.w	8008420 <_dtoa_r+0xa0>
 8008a3e:	601d      	str	r5, [r3, #0]
 8008a40:	e4ee      	b.n	8008420 <_dtoa_r+0xa0>
 8008a42:	9f00      	ldr	r7, [sp, #0]
 8008a44:	462b      	mov	r3, r5
 8008a46:	461d      	mov	r5, r3
 8008a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4c:	2a39      	cmp	r2, #57	; 0x39
 8008a4e:	d106      	bne.n	8008a5e <_dtoa_r+0x6de>
 8008a50:	9a01      	ldr	r2, [sp, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d1f7      	bne.n	8008a46 <_dtoa_r+0x6c6>
 8008a56:	9901      	ldr	r1, [sp, #4]
 8008a58:	2230      	movs	r2, #48	; 0x30
 8008a5a:	3701      	adds	r7, #1
 8008a5c:	700a      	strb	r2, [r1, #0]
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	3201      	adds	r2, #1
 8008a62:	701a      	strb	r2, [r3, #0]
 8008a64:	e790      	b.n	8008988 <_dtoa_r+0x608>
 8008a66:	4ba6      	ldr	r3, [pc, #664]	; (8008d00 <_dtoa_r+0x980>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f7f7 fdd5 	bl	8000618 <__aeabi_dmul>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2300      	movs	r3, #0
 8008a72:	4606      	mov	r6, r0
 8008a74:	460f      	mov	r7, r1
 8008a76:	f7f8 f837 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d09d      	beq.n	80089ba <_dtoa_r+0x63a>
 8008a7e:	e7cf      	b.n	8008a20 <_dtoa_r+0x6a0>
 8008a80:	9a08      	ldr	r2, [sp, #32]
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	f000 80d7 	beq.w	8008c36 <_dtoa_r+0x8b6>
 8008a88:	9a06      	ldr	r2, [sp, #24]
 8008a8a:	2a01      	cmp	r2, #1
 8008a8c:	f300 80ba 	bgt.w	8008c04 <_dtoa_r+0x884>
 8008a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	f000 80b2 	beq.w	8008bfc <_dtoa_r+0x87c>
 8008a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a9c:	9e07      	ldr	r6, [sp, #28]
 8008a9e:	9d04      	ldr	r5, [sp, #16]
 8008aa0:	9a04      	ldr	r2, [sp, #16]
 8008aa2:	441a      	add	r2, r3
 8008aa4:	9204      	str	r2, [sp, #16]
 8008aa6:	9a05      	ldr	r2, [sp, #20]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	441a      	add	r2, r3
 8008aac:	4620      	mov	r0, r4
 8008aae:	9205      	str	r2, [sp, #20]
 8008ab0:	f000 fd86 	bl	80095c0 <__i2b>
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	dd0c      	ble.n	8008ad4 <_dtoa_r+0x754>
 8008aba:	9b05      	ldr	r3, [sp, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd09      	ble.n	8008ad4 <_dtoa_r+0x754>
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	9a04      	ldr	r2, [sp, #16]
 8008ac4:	bfa8      	it	ge
 8008ac6:	462b      	movge	r3, r5
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	9204      	str	r2, [sp, #16]
 8008acc:	9a05      	ldr	r2, [sp, #20]
 8008ace:	1aed      	subs	r5, r5, r3
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	9305      	str	r3, [sp, #20]
 8008ad4:	9b07      	ldr	r3, [sp, #28]
 8008ad6:	b31b      	cbz	r3, 8008b20 <_dtoa_r+0x7a0>
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80af 	beq.w	8008c3e <_dtoa_r+0x8be>
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	dd13      	ble.n	8008b0c <_dtoa_r+0x78c>
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fe29 	bl	8009740 <__pow5mult>
 8008aee:	ee18 2a10 	vmov	r2, s16
 8008af2:	4601      	mov	r1, r0
 8008af4:	4607      	mov	r7, r0
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 fd78 	bl	80095ec <__multiply>
 8008afc:	ee18 1a10 	vmov	r1, s16
 8008b00:	4680      	mov	r8, r0
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 fca4 	bl	8009450 <_Bfree>
 8008b08:	ee08 8a10 	vmov	s16, r8
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	1b9a      	subs	r2, r3, r6
 8008b10:	d006      	beq.n	8008b20 <_dtoa_r+0x7a0>
 8008b12:	ee18 1a10 	vmov	r1, s16
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fe12 	bl	8009740 <__pow5mult>
 8008b1c:	ee08 0a10 	vmov	s16, r0
 8008b20:	2101      	movs	r1, #1
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 fd4c 	bl	80095c0 <__i2b>
 8008b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	f340 8088 	ble.w	8008c42 <_dtoa_r+0x8c2>
 8008b32:	461a      	mov	r2, r3
 8008b34:	4601      	mov	r1, r0
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fe02 	bl	8009740 <__pow5mult>
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	4606      	mov	r6, r0
 8008b42:	f340 8081 	ble.w	8008c48 <_dtoa_r+0x8c8>
 8008b46:	f04f 0800 	mov.w	r8, #0
 8008b4a:	6933      	ldr	r3, [r6, #16]
 8008b4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b50:	6918      	ldr	r0, [r3, #16]
 8008b52:	f000 fce5 	bl	8009520 <__hi0bits>
 8008b56:	f1c0 0020 	rsb	r0, r0, #32
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	4418      	add	r0, r3
 8008b5e:	f010 001f 	ands.w	r0, r0, #31
 8008b62:	f000 8092 	beq.w	8008c8a <_dtoa_r+0x90a>
 8008b66:	f1c0 0320 	rsb	r3, r0, #32
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	f340 808a 	ble.w	8008c84 <_dtoa_r+0x904>
 8008b70:	f1c0 001c 	rsb	r0, r0, #28
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	4403      	add	r3, r0
 8008b78:	9304      	str	r3, [sp, #16]
 8008b7a:	9b05      	ldr	r3, [sp, #20]
 8008b7c:	4403      	add	r3, r0
 8008b7e:	4405      	add	r5, r0
 8008b80:	9305      	str	r3, [sp, #20]
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dd07      	ble.n	8008b98 <_dtoa_r+0x818>
 8008b88:	ee18 1a10 	vmov	r1, s16
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fe30 	bl	80097f4 <__lshift>
 8008b94:	ee08 0a10 	vmov	s16, r0
 8008b98:	9b05      	ldr	r3, [sp, #20]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dd05      	ble.n	8008baa <_dtoa_r+0x82a>
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 fe26 	bl	80097f4 <__lshift>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d06e      	beq.n	8008c8e <_dtoa_r+0x90e>
 8008bb0:	ee18 0a10 	vmov	r0, s16
 8008bb4:	4631      	mov	r1, r6
 8008bb6:	f000 fe8d 	bl	80098d4 <__mcmp>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	da67      	bge.n	8008c8e <_dtoa_r+0x90e>
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	ee18 1a10 	vmov	r1, s16
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	220a      	movs	r2, #10
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 fc61 	bl	8009494 <__multadd>
 8008bd2:	9b08      	ldr	r3, [sp, #32]
 8008bd4:	ee08 0a10 	vmov	s16, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 81b1 	beq.w	8008f40 <_dtoa_r+0xbc0>
 8008bde:	2300      	movs	r3, #0
 8008be0:	4639      	mov	r1, r7
 8008be2:	220a      	movs	r2, #10
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fc55 	bl	8009494 <__multadd>
 8008bea:	9b02      	ldr	r3, [sp, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	4607      	mov	r7, r0
 8008bf0:	f300 808e 	bgt.w	8008d10 <_dtoa_r+0x990>
 8008bf4:	9b06      	ldr	r3, [sp, #24]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	dc51      	bgt.n	8008c9e <_dtoa_r+0x91e>
 8008bfa:	e089      	b.n	8008d10 <_dtoa_r+0x990>
 8008bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c02:	e74b      	b.n	8008a9c <_dtoa_r+0x71c>
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	1e5e      	subs	r6, r3, #1
 8008c08:	9b07      	ldr	r3, [sp, #28]
 8008c0a:	42b3      	cmp	r3, r6
 8008c0c:	bfbf      	itttt	lt
 8008c0e:	9b07      	ldrlt	r3, [sp, #28]
 8008c10:	9607      	strlt	r6, [sp, #28]
 8008c12:	1af2      	sublt	r2, r6, r3
 8008c14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c16:	bfb6      	itet	lt
 8008c18:	189b      	addlt	r3, r3, r2
 8008c1a:	1b9e      	subge	r6, r3, r6
 8008c1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	bfb8      	it	lt
 8008c22:	2600      	movlt	r6, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bfb7      	itett	lt
 8008c28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008c2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c30:	1a9d      	sublt	r5, r3, r2
 8008c32:	2300      	movlt	r3, #0
 8008c34:	e734      	b.n	8008aa0 <_dtoa_r+0x720>
 8008c36:	9e07      	ldr	r6, [sp, #28]
 8008c38:	9d04      	ldr	r5, [sp, #16]
 8008c3a:	9f08      	ldr	r7, [sp, #32]
 8008c3c:	e73b      	b.n	8008ab6 <_dtoa_r+0x736>
 8008c3e:	9a07      	ldr	r2, [sp, #28]
 8008c40:	e767      	b.n	8008b12 <_dtoa_r+0x792>
 8008c42:	9b06      	ldr	r3, [sp, #24]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	dc18      	bgt.n	8008c7a <_dtoa_r+0x8fa>
 8008c48:	f1ba 0f00 	cmp.w	sl, #0
 8008c4c:	d115      	bne.n	8008c7a <_dtoa_r+0x8fa>
 8008c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c52:	b993      	cbnz	r3, 8008c7a <_dtoa_r+0x8fa>
 8008c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c58:	0d1b      	lsrs	r3, r3, #20
 8008c5a:	051b      	lsls	r3, r3, #20
 8008c5c:	b183      	cbz	r3, 8008c80 <_dtoa_r+0x900>
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	9b05      	ldr	r3, [sp, #20]
 8008c66:	3301      	adds	r3, #1
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	f04f 0801 	mov.w	r8, #1
 8008c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f af6a 	bne.w	8008b4a <_dtoa_r+0x7ca>
 8008c76:	2001      	movs	r0, #1
 8008c78:	e76f      	b.n	8008b5a <_dtoa_r+0x7da>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	e7f6      	b.n	8008c6e <_dtoa_r+0x8ee>
 8008c80:	4698      	mov	r8, r3
 8008c82:	e7f4      	b.n	8008c6e <_dtoa_r+0x8ee>
 8008c84:	f43f af7d 	beq.w	8008b82 <_dtoa_r+0x802>
 8008c88:	4618      	mov	r0, r3
 8008c8a:	301c      	adds	r0, #28
 8008c8c:	e772      	b.n	8008b74 <_dtoa_r+0x7f4>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dc37      	bgt.n	8008d04 <_dtoa_r+0x984>
 8008c94:	9b06      	ldr	r3, [sp, #24]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	dd34      	ble.n	8008d04 <_dtoa_r+0x984>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	9302      	str	r3, [sp, #8]
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	b96b      	cbnz	r3, 8008cbe <_dtoa_r+0x93e>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	2205      	movs	r2, #5
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 fbf4 	bl	8009494 <__multadd>
 8008cac:	4601      	mov	r1, r0
 8008cae:	4606      	mov	r6, r0
 8008cb0:	ee18 0a10 	vmov	r0, s16
 8008cb4:	f000 fe0e 	bl	80098d4 <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	f73f adbb 	bgt.w	8008834 <_dtoa_r+0x4b4>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc0:	9d01      	ldr	r5, [sp, #4]
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 fbbf 	bl	8009450 <_Bfree>
 8008cd2:	2f00      	cmp	r7, #0
 8008cd4:	f43f aea4 	beq.w	8008a20 <_dtoa_r+0x6a0>
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d005      	beq.n	8008cea <_dtoa_r+0x96a>
 8008cde:	45b8      	cmp	r8, r7
 8008ce0:	d003      	beq.n	8008cea <_dtoa_r+0x96a>
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fbb3 	bl	8009450 <_Bfree>
 8008cea:	4639      	mov	r1, r7
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fbaf 	bl	8009450 <_Bfree>
 8008cf2:	e695      	b.n	8008a20 <_dtoa_r+0x6a0>
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	4637      	mov	r7, r6
 8008cf8:	e7e1      	b.n	8008cbe <_dtoa_r+0x93e>
 8008cfa:	9700      	str	r7, [sp, #0]
 8008cfc:	4637      	mov	r7, r6
 8008cfe:	e599      	b.n	8008834 <_dtoa_r+0x4b4>
 8008d00:	40240000 	.word	0x40240000
 8008d04:	9b08      	ldr	r3, [sp, #32]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80ca 	beq.w	8008ea0 <_dtoa_r+0xb20>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	dd05      	ble.n	8008d20 <_dtoa_r+0x9a0>
 8008d14:	4639      	mov	r1, r7
 8008d16:	462a      	mov	r2, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fd6b 	bl	80097f4 <__lshift>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	f1b8 0f00 	cmp.w	r8, #0
 8008d24:	d05b      	beq.n	8008dde <_dtoa_r+0xa5e>
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fb51 	bl	80093d0 <_Balloc>
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b928      	cbnz	r0, 8008d3e <_dtoa_r+0x9be>
 8008d32:	4b87      	ldr	r3, [pc, #540]	; (8008f50 <_dtoa_r+0xbd0>)
 8008d34:	4602      	mov	r2, r0
 8008d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d3a:	f7ff bb3b 	b.w	80083b4 <_dtoa_r+0x34>
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	3202      	adds	r2, #2
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	f107 010c 	add.w	r1, r7, #12
 8008d48:	300c      	adds	r0, #12
 8008d4a:	f000 fb33 	bl	80093b4 <memcpy>
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4629      	mov	r1, r5
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fd4e 	bl	80097f4 <__lshift>
 8008d58:	9b01      	ldr	r3, [sp, #4]
 8008d5a:	f103 0901 	add.w	r9, r3, #1
 8008d5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	9305      	str	r3, [sp, #20]
 8008d66:	f00a 0301 	and.w	r3, sl, #1
 8008d6a:	46b8      	mov	r8, r7
 8008d6c:	9304      	str	r3, [sp, #16]
 8008d6e:	4607      	mov	r7, r0
 8008d70:	4631      	mov	r1, r6
 8008d72:	ee18 0a10 	vmov	r0, s16
 8008d76:	f7ff fa77 	bl	8008268 <quorem>
 8008d7a:	4641      	mov	r1, r8
 8008d7c:	9002      	str	r0, [sp, #8]
 8008d7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d82:	ee18 0a10 	vmov	r0, s16
 8008d86:	f000 fda5 	bl	80098d4 <__mcmp>
 8008d8a:	463a      	mov	r2, r7
 8008d8c:	9003      	str	r0, [sp, #12]
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fdbb 	bl	800990c <__mdiff>
 8008d96:	68c2      	ldr	r2, [r0, #12]
 8008d98:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	bb02      	cbnz	r2, 8008de2 <_dtoa_r+0xa62>
 8008da0:	4601      	mov	r1, r0
 8008da2:	ee18 0a10 	vmov	r0, s16
 8008da6:	f000 fd95 	bl	80098d4 <__mcmp>
 8008daa:	4602      	mov	r2, r0
 8008dac:	4629      	mov	r1, r5
 8008dae:	4620      	mov	r0, r4
 8008db0:	9207      	str	r2, [sp, #28]
 8008db2:	f000 fb4d 	bl	8009450 <_Bfree>
 8008db6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008dba:	ea43 0102 	orr.w	r1, r3, r2
 8008dbe:	9b04      	ldr	r3, [sp, #16]
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	464d      	mov	r5, r9
 8008dc4:	d10f      	bne.n	8008de6 <_dtoa_r+0xa66>
 8008dc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dca:	d02a      	beq.n	8008e22 <_dtoa_r+0xaa2>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	dd02      	ble.n	8008dd8 <_dtoa_r+0xa58>
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008dd8:	f88b a000 	strb.w	sl, [fp]
 8008ddc:	e775      	b.n	8008cca <_dtoa_r+0x94a>
 8008dde:	4638      	mov	r0, r7
 8008de0:	e7ba      	b.n	8008d58 <_dtoa_r+0x9d8>
 8008de2:	2201      	movs	r2, #1
 8008de4:	e7e2      	b.n	8008dac <_dtoa_r+0xa2c>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	db04      	blt.n	8008df6 <_dtoa_r+0xa76>
 8008dec:	9906      	ldr	r1, [sp, #24]
 8008dee:	430b      	orrs	r3, r1
 8008df0:	9904      	ldr	r1, [sp, #16]
 8008df2:	430b      	orrs	r3, r1
 8008df4:	d122      	bne.n	8008e3c <_dtoa_r+0xabc>
 8008df6:	2a00      	cmp	r2, #0
 8008df8:	ddee      	ble.n	8008dd8 <_dtoa_r+0xa58>
 8008dfa:	ee18 1a10 	vmov	r1, s16
 8008dfe:	2201      	movs	r2, #1
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 fcf7 	bl	80097f4 <__lshift>
 8008e06:	4631      	mov	r1, r6
 8008e08:	ee08 0a10 	vmov	s16, r0
 8008e0c:	f000 fd62 	bl	80098d4 <__mcmp>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	dc03      	bgt.n	8008e1c <_dtoa_r+0xa9c>
 8008e14:	d1e0      	bne.n	8008dd8 <_dtoa_r+0xa58>
 8008e16:	f01a 0f01 	tst.w	sl, #1
 8008e1a:	d0dd      	beq.n	8008dd8 <_dtoa_r+0xa58>
 8008e1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e20:	d1d7      	bne.n	8008dd2 <_dtoa_r+0xa52>
 8008e22:	2339      	movs	r3, #57	; 0x39
 8008e24:	f88b 3000 	strb.w	r3, [fp]
 8008e28:	462b      	mov	r3, r5
 8008e2a:	461d      	mov	r5, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e32:	2a39      	cmp	r2, #57	; 0x39
 8008e34:	d071      	beq.n	8008f1a <_dtoa_r+0xb9a>
 8008e36:	3201      	adds	r2, #1
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	e746      	b.n	8008cca <_dtoa_r+0x94a>
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	dd07      	ble.n	8008e50 <_dtoa_r+0xad0>
 8008e40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e44:	d0ed      	beq.n	8008e22 <_dtoa_r+0xaa2>
 8008e46:	f10a 0301 	add.w	r3, sl, #1
 8008e4a:	f88b 3000 	strb.w	r3, [fp]
 8008e4e:	e73c      	b.n	8008cca <_dtoa_r+0x94a>
 8008e50:	9b05      	ldr	r3, [sp, #20]
 8008e52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e56:	4599      	cmp	r9, r3
 8008e58:	d047      	beq.n	8008eea <_dtoa_r+0xb6a>
 8008e5a:	ee18 1a10 	vmov	r1, s16
 8008e5e:	2300      	movs	r3, #0
 8008e60:	220a      	movs	r2, #10
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fb16 	bl	8009494 <__multadd>
 8008e68:	45b8      	cmp	r8, r7
 8008e6a:	ee08 0a10 	vmov	s16, r0
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	f04f 020a 	mov.w	r2, #10
 8008e76:	4641      	mov	r1, r8
 8008e78:	4620      	mov	r0, r4
 8008e7a:	d106      	bne.n	8008e8a <_dtoa_r+0xb0a>
 8008e7c:	f000 fb0a 	bl	8009494 <__multadd>
 8008e80:	4680      	mov	r8, r0
 8008e82:	4607      	mov	r7, r0
 8008e84:	f109 0901 	add.w	r9, r9, #1
 8008e88:	e772      	b.n	8008d70 <_dtoa_r+0x9f0>
 8008e8a:	f000 fb03 	bl	8009494 <__multadd>
 8008e8e:	4639      	mov	r1, r7
 8008e90:	4680      	mov	r8, r0
 8008e92:	2300      	movs	r3, #0
 8008e94:	220a      	movs	r2, #10
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 fafc 	bl	8009494 <__multadd>
 8008e9c:	4607      	mov	r7, r0
 8008e9e:	e7f1      	b.n	8008e84 <_dtoa_r+0xb04>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	9302      	str	r3, [sp, #8]
 8008ea4:	9d01      	ldr	r5, [sp, #4]
 8008ea6:	ee18 0a10 	vmov	r0, s16
 8008eaa:	4631      	mov	r1, r6
 8008eac:	f7ff f9dc 	bl	8008268 <quorem>
 8008eb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	f805 ab01 	strb.w	sl, [r5], #1
 8008eba:	1aea      	subs	r2, r5, r3
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	dd09      	ble.n	8008ed6 <_dtoa_r+0xb56>
 8008ec2:	ee18 1a10 	vmov	r1, s16
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	220a      	movs	r2, #10
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fae2 	bl	8009494 <__multadd>
 8008ed0:	ee08 0a10 	vmov	s16, r0
 8008ed4:	e7e7      	b.n	8008ea6 <_dtoa_r+0xb26>
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfc8      	it	gt
 8008edc:	461d      	movgt	r5, r3
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	bfd8      	it	le
 8008ee2:	2501      	movle	r5, #1
 8008ee4:	441d      	add	r5, r3
 8008ee6:	f04f 0800 	mov.w	r8, #0
 8008eea:	ee18 1a10 	vmov	r1, s16
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fc7f 	bl	80097f4 <__lshift>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	ee08 0a10 	vmov	s16, r0
 8008efc:	f000 fcea 	bl	80098d4 <__mcmp>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	dc91      	bgt.n	8008e28 <_dtoa_r+0xaa8>
 8008f04:	d102      	bne.n	8008f0c <_dtoa_r+0xb8c>
 8008f06:	f01a 0f01 	tst.w	sl, #1
 8008f0a:	d18d      	bne.n	8008e28 <_dtoa_r+0xaa8>
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	461d      	mov	r5, r3
 8008f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f14:	2a30      	cmp	r2, #48	; 0x30
 8008f16:	d0fa      	beq.n	8008f0e <_dtoa_r+0xb8e>
 8008f18:	e6d7      	b.n	8008cca <_dtoa_r+0x94a>
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d184      	bne.n	8008e2a <_dtoa_r+0xaaa>
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	3301      	adds	r3, #1
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	2331      	movs	r3, #49	; 0x31
 8008f28:	7013      	strb	r3, [r2, #0]
 8008f2a:	e6ce      	b.n	8008cca <_dtoa_r+0x94a>
 8008f2c:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <_dtoa_r+0xbd4>)
 8008f2e:	f7ff ba95 	b.w	800845c <_dtoa_r+0xdc>
 8008f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f aa6e 	bne.w	8008416 <_dtoa_r+0x96>
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <_dtoa_r+0xbd8>)
 8008f3c:	f7ff ba8e 	b.w	800845c <_dtoa_r+0xdc>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dcae      	bgt.n	8008ea4 <_dtoa_r+0xb24>
 8008f46:	9b06      	ldr	r3, [sp, #24]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	f73f aea8 	bgt.w	8008c9e <_dtoa_r+0x91e>
 8008f4e:	e7a9      	b.n	8008ea4 <_dtoa_r+0xb24>
 8008f50:	0800a497 	.word	0x0800a497
 8008f54:	0800a3f4 	.word	0x0800a3f4
 8008f58:	0800a418 	.word	0x0800a418

08008f5c <__sflush_r>:
 8008f5c:	898a      	ldrh	r2, [r1, #12]
 8008f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	0710      	lsls	r0, r2, #28
 8008f66:	460c      	mov	r4, r1
 8008f68:	d458      	bmi.n	800901c <__sflush_r+0xc0>
 8008f6a:	684b      	ldr	r3, [r1, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dc05      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dc02      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	d0f9      	beq.n	8008f76 <__sflush_r+0x1a>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f88:	682f      	ldr	r7, [r5, #0]
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	d032      	beq.n	8008ff4 <__sflush_r+0x98>
 8008f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	075a      	lsls	r2, r3, #29
 8008f94:	d505      	bpl.n	8008fa2 <__sflush_r+0x46>
 8008f96:	6863      	ldr	r3, [r4, #4]
 8008f98:	1ac0      	subs	r0, r0, r3
 8008f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f9c:	b10b      	cbz	r3, 8008fa2 <__sflush_r+0x46>
 8008f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fa0:	1ac0      	subs	r0, r0, r3
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa8:	6a21      	ldr	r1, [r4, #32]
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b0      	blx	r6
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	d106      	bne.n	8008fc2 <__sflush_r+0x66>
 8008fb4:	6829      	ldr	r1, [r5, #0]
 8008fb6:	291d      	cmp	r1, #29
 8008fb8:	d82c      	bhi.n	8009014 <__sflush_r+0xb8>
 8008fba:	4a2a      	ldr	r2, [pc, #168]	; (8009064 <__sflush_r+0x108>)
 8008fbc:	40ca      	lsrs	r2, r1
 8008fbe:	07d6      	lsls	r6, r2, #31
 8008fc0:	d528      	bpl.n	8009014 <__sflush_r+0xb8>
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	6062      	str	r2, [r4, #4]
 8008fc6:	04d9      	lsls	r1, r3, #19
 8008fc8:	6922      	ldr	r2, [r4, #16]
 8008fca:	6022      	str	r2, [r4, #0]
 8008fcc:	d504      	bpl.n	8008fd8 <__sflush_r+0x7c>
 8008fce:	1c42      	adds	r2, r0, #1
 8008fd0:	d101      	bne.n	8008fd6 <__sflush_r+0x7a>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	b903      	cbnz	r3, 8008fd8 <__sflush_r+0x7c>
 8008fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8008fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fda:	602f      	str	r7, [r5, #0]
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	d0ca      	beq.n	8008f76 <__sflush_r+0x1a>
 8008fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	d002      	beq.n	8008fee <__sflush_r+0x92>
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 fd8b 	bl	8009b04 <_free_r>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ff2:	e7c1      	b.n	8008f78 <__sflush_r+0x1c>
 8008ff4:	6a21      	ldr	r1, [r4, #32]
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b0      	blx	r6
 8008ffc:	1c41      	adds	r1, r0, #1
 8008ffe:	d1c7      	bne.n	8008f90 <__sflush_r+0x34>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c4      	beq.n	8008f90 <__sflush_r+0x34>
 8009006:	2b1d      	cmp	r3, #29
 8009008:	d001      	beq.n	800900e <__sflush_r+0xb2>
 800900a:	2b16      	cmp	r3, #22
 800900c:	d101      	bne.n	8009012 <__sflush_r+0xb6>
 800900e:	602f      	str	r7, [r5, #0]
 8009010:	e7b1      	b.n	8008f76 <__sflush_r+0x1a>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	e7ad      	b.n	8008f78 <__sflush_r+0x1c>
 800901c:	690f      	ldr	r7, [r1, #16]
 800901e:	2f00      	cmp	r7, #0
 8009020:	d0a9      	beq.n	8008f76 <__sflush_r+0x1a>
 8009022:	0793      	lsls	r3, r2, #30
 8009024:	680e      	ldr	r6, [r1, #0]
 8009026:	bf08      	it	eq
 8009028:	694b      	ldreq	r3, [r1, #20]
 800902a:	600f      	str	r7, [r1, #0]
 800902c:	bf18      	it	ne
 800902e:	2300      	movne	r3, #0
 8009030:	eba6 0807 	sub.w	r8, r6, r7
 8009034:	608b      	str	r3, [r1, #8]
 8009036:	f1b8 0f00 	cmp.w	r8, #0
 800903a:	dd9c      	ble.n	8008f76 <__sflush_r+0x1a>
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009040:	4643      	mov	r3, r8
 8009042:	463a      	mov	r2, r7
 8009044:	4628      	mov	r0, r5
 8009046:	47b0      	blx	r6
 8009048:	2800      	cmp	r0, #0
 800904a:	dc06      	bgt.n	800905a <__sflush_r+0xfe>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	e78e      	b.n	8008f78 <__sflush_r+0x1c>
 800905a:	4407      	add	r7, r0
 800905c:	eba8 0800 	sub.w	r8, r8, r0
 8009060:	e7e9      	b.n	8009036 <__sflush_r+0xda>
 8009062:	bf00      	nop
 8009064:	20400001 	.word	0x20400001

08009068 <_fflush_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	690b      	ldr	r3, [r1, #16]
 800906c:	4605      	mov	r5, r0
 800906e:	460c      	mov	r4, r1
 8009070:	b913      	cbnz	r3, 8009078 <_fflush_r+0x10>
 8009072:	2500      	movs	r5, #0
 8009074:	4628      	mov	r0, r5
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	b118      	cbz	r0, 8009082 <_fflush_r+0x1a>
 800907a:	6983      	ldr	r3, [r0, #24]
 800907c:	b90b      	cbnz	r3, 8009082 <_fflush_r+0x1a>
 800907e:	f000 f887 	bl	8009190 <__sinit>
 8009082:	4b14      	ldr	r3, [pc, #80]	; (80090d4 <_fflush_r+0x6c>)
 8009084:	429c      	cmp	r4, r3
 8009086:	d11b      	bne.n	80090c0 <_fflush_r+0x58>
 8009088:	686c      	ldr	r4, [r5, #4]
 800908a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0ef      	beq.n	8009072 <_fflush_r+0xa>
 8009092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009094:	07d0      	lsls	r0, r2, #31
 8009096:	d404      	bmi.n	80090a2 <_fflush_r+0x3a>
 8009098:	0599      	lsls	r1, r3, #22
 800909a:	d402      	bmi.n	80090a2 <_fflush_r+0x3a>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f000 f91a 	bl	80092d6 <__retarget_lock_acquire_recursive>
 80090a2:	4628      	mov	r0, r5
 80090a4:	4621      	mov	r1, r4
 80090a6:	f7ff ff59 	bl	8008f5c <__sflush_r>
 80090aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ac:	07da      	lsls	r2, r3, #31
 80090ae:	4605      	mov	r5, r0
 80090b0:	d4e0      	bmi.n	8009074 <_fflush_r+0xc>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	059b      	lsls	r3, r3, #22
 80090b6:	d4dd      	bmi.n	8009074 <_fflush_r+0xc>
 80090b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ba:	f000 f90d 	bl	80092d8 <__retarget_lock_release_recursive>
 80090be:	e7d9      	b.n	8009074 <_fflush_r+0xc>
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <_fflush_r+0x70>)
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d101      	bne.n	80090ca <_fflush_r+0x62>
 80090c6:	68ac      	ldr	r4, [r5, #8]
 80090c8:	e7df      	b.n	800908a <_fflush_r+0x22>
 80090ca:	4b04      	ldr	r3, [pc, #16]	; (80090dc <_fflush_r+0x74>)
 80090cc:	429c      	cmp	r4, r3
 80090ce:	bf08      	it	eq
 80090d0:	68ec      	ldreq	r4, [r5, #12]
 80090d2:	e7da      	b.n	800908a <_fflush_r+0x22>
 80090d4:	0800a4c8 	.word	0x0800a4c8
 80090d8:	0800a4e8 	.word	0x0800a4e8
 80090dc:	0800a4a8 	.word	0x0800a4a8

080090e0 <std>:
 80090e0:	2300      	movs	r3, #0
 80090e2:	b510      	push	{r4, lr}
 80090e4:	4604      	mov	r4, r0
 80090e6:	e9c0 3300 	strd	r3, r3, [r0]
 80090ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ee:	6083      	str	r3, [r0, #8]
 80090f0:	8181      	strh	r1, [r0, #12]
 80090f2:	6643      	str	r3, [r0, #100]	; 0x64
 80090f4:	81c2      	strh	r2, [r0, #14]
 80090f6:	6183      	str	r3, [r0, #24]
 80090f8:	4619      	mov	r1, r3
 80090fa:	2208      	movs	r2, #8
 80090fc:	305c      	adds	r0, #92	; 0x5c
 80090fe:	f7fe faf3 	bl	80076e8 <memset>
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <std+0x38>)
 8009104:	6263      	str	r3, [r4, #36]	; 0x24
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <std+0x3c>)
 8009108:	62a3      	str	r3, [r4, #40]	; 0x28
 800910a:	4b05      	ldr	r3, [pc, #20]	; (8009120 <std+0x40>)
 800910c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800910e:	4b05      	ldr	r3, [pc, #20]	; (8009124 <std+0x44>)
 8009110:	6224      	str	r4, [r4, #32]
 8009112:	6323      	str	r3, [r4, #48]	; 0x30
 8009114:	bd10      	pop	{r4, pc}
 8009116:	bf00      	nop
 8009118:	08009f99 	.word	0x08009f99
 800911c:	08009fbb 	.word	0x08009fbb
 8009120:	08009ff3 	.word	0x08009ff3
 8009124:	0800a017 	.word	0x0800a017

08009128 <_cleanup_r>:
 8009128:	4901      	ldr	r1, [pc, #4]	; (8009130 <_cleanup_r+0x8>)
 800912a:	f000 b8af 	b.w	800928c <_fwalk_reent>
 800912e:	bf00      	nop
 8009130:	08009069 	.word	0x08009069

08009134 <__sfmoreglue>:
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	2268      	movs	r2, #104	; 0x68
 8009138:	1e4d      	subs	r5, r1, #1
 800913a:	4355      	muls	r5, r2
 800913c:	460e      	mov	r6, r1
 800913e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009142:	f000 fd4b 	bl	8009bdc <_malloc_r>
 8009146:	4604      	mov	r4, r0
 8009148:	b140      	cbz	r0, 800915c <__sfmoreglue+0x28>
 800914a:	2100      	movs	r1, #0
 800914c:	e9c0 1600 	strd	r1, r6, [r0]
 8009150:	300c      	adds	r0, #12
 8009152:	60a0      	str	r0, [r4, #8]
 8009154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009158:	f7fe fac6 	bl	80076e8 <memset>
 800915c:	4620      	mov	r0, r4
 800915e:	bd70      	pop	{r4, r5, r6, pc}

08009160 <__sfp_lock_acquire>:
 8009160:	4801      	ldr	r0, [pc, #4]	; (8009168 <__sfp_lock_acquire+0x8>)
 8009162:	f000 b8b8 	b.w	80092d6 <__retarget_lock_acquire_recursive>
 8009166:	bf00      	nop
 8009168:	20000719 	.word	0x20000719

0800916c <__sfp_lock_release>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__sfp_lock_release+0x8>)
 800916e:	f000 b8b3 	b.w	80092d8 <__retarget_lock_release_recursive>
 8009172:	bf00      	nop
 8009174:	20000719 	.word	0x20000719

08009178 <__sinit_lock_acquire>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__sinit_lock_acquire+0x8>)
 800917a:	f000 b8ac 	b.w	80092d6 <__retarget_lock_acquire_recursive>
 800917e:	bf00      	nop
 8009180:	2000071a 	.word	0x2000071a

08009184 <__sinit_lock_release>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__sinit_lock_release+0x8>)
 8009186:	f000 b8a7 	b.w	80092d8 <__retarget_lock_release_recursive>
 800918a:	bf00      	nop
 800918c:	2000071a 	.word	0x2000071a

08009190 <__sinit>:
 8009190:	b510      	push	{r4, lr}
 8009192:	4604      	mov	r4, r0
 8009194:	f7ff fff0 	bl	8009178 <__sinit_lock_acquire>
 8009198:	69a3      	ldr	r3, [r4, #24]
 800919a:	b11b      	cbz	r3, 80091a4 <__sinit+0x14>
 800919c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a0:	f7ff bff0 	b.w	8009184 <__sinit_lock_release>
 80091a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091a8:	6523      	str	r3, [r4, #80]	; 0x50
 80091aa:	4b13      	ldr	r3, [pc, #76]	; (80091f8 <__sinit+0x68>)
 80091ac:	4a13      	ldr	r2, [pc, #76]	; (80091fc <__sinit+0x6c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091b2:	42a3      	cmp	r3, r4
 80091b4:	bf04      	itt	eq
 80091b6:	2301      	moveq	r3, #1
 80091b8:	61a3      	streq	r3, [r4, #24]
 80091ba:	4620      	mov	r0, r4
 80091bc:	f000 f820 	bl	8009200 <__sfp>
 80091c0:	6060      	str	r0, [r4, #4]
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 f81c 	bl	8009200 <__sfp>
 80091c8:	60a0      	str	r0, [r4, #8]
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 f818 	bl	8009200 <__sfp>
 80091d0:	2200      	movs	r2, #0
 80091d2:	60e0      	str	r0, [r4, #12]
 80091d4:	2104      	movs	r1, #4
 80091d6:	6860      	ldr	r0, [r4, #4]
 80091d8:	f7ff ff82 	bl	80090e0 <std>
 80091dc:	68a0      	ldr	r0, [r4, #8]
 80091de:	2201      	movs	r2, #1
 80091e0:	2109      	movs	r1, #9
 80091e2:	f7ff ff7d 	bl	80090e0 <std>
 80091e6:	68e0      	ldr	r0, [r4, #12]
 80091e8:	2202      	movs	r2, #2
 80091ea:	2112      	movs	r1, #18
 80091ec:	f7ff ff78 	bl	80090e0 <std>
 80091f0:	2301      	movs	r3, #1
 80091f2:	61a3      	str	r3, [r4, #24]
 80091f4:	e7d2      	b.n	800919c <__sinit+0xc>
 80091f6:	bf00      	nop
 80091f8:	0800a3e0 	.word	0x0800a3e0
 80091fc:	08009129 	.word	0x08009129

08009200 <__sfp>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	4607      	mov	r7, r0
 8009204:	f7ff ffac 	bl	8009160 <__sfp_lock_acquire>
 8009208:	4b1e      	ldr	r3, [pc, #120]	; (8009284 <__sfp+0x84>)
 800920a:	681e      	ldr	r6, [r3, #0]
 800920c:	69b3      	ldr	r3, [r6, #24]
 800920e:	b913      	cbnz	r3, 8009216 <__sfp+0x16>
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff ffbd 	bl	8009190 <__sinit>
 8009216:	3648      	adds	r6, #72	; 0x48
 8009218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800921c:	3b01      	subs	r3, #1
 800921e:	d503      	bpl.n	8009228 <__sfp+0x28>
 8009220:	6833      	ldr	r3, [r6, #0]
 8009222:	b30b      	cbz	r3, 8009268 <__sfp+0x68>
 8009224:	6836      	ldr	r6, [r6, #0]
 8009226:	e7f7      	b.n	8009218 <__sfp+0x18>
 8009228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800922c:	b9d5      	cbnz	r5, 8009264 <__sfp+0x64>
 800922e:	4b16      	ldr	r3, [pc, #88]	; (8009288 <__sfp+0x88>)
 8009230:	60e3      	str	r3, [r4, #12]
 8009232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009236:	6665      	str	r5, [r4, #100]	; 0x64
 8009238:	f000 f84c 	bl	80092d4 <__retarget_lock_init_recursive>
 800923c:	f7ff ff96 	bl	800916c <__sfp_lock_release>
 8009240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009248:	6025      	str	r5, [r4, #0]
 800924a:	61a5      	str	r5, [r4, #24]
 800924c:	2208      	movs	r2, #8
 800924e:	4629      	mov	r1, r5
 8009250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009254:	f7fe fa48 	bl	80076e8 <memset>
 8009258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800925c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009260:	4620      	mov	r0, r4
 8009262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009264:	3468      	adds	r4, #104	; 0x68
 8009266:	e7d9      	b.n	800921c <__sfp+0x1c>
 8009268:	2104      	movs	r1, #4
 800926a:	4638      	mov	r0, r7
 800926c:	f7ff ff62 	bl	8009134 <__sfmoreglue>
 8009270:	4604      	mov	r4, r0
 8009272:	6030      	str	r0, [r6, #0]
 8009274:	2800      	cmp	r0, #0
 8009276:	d1d5      	bne.n	8009224 <__sfp+0x24>
 8009278:	f7ff ff78 	bl	800916c <__sfp_lock_release>
 800927c:	230c      	movs	r3, #12
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	e7ee      	b.n	8009260 <__sfp+0x60>
 8009282:	bf00      	nop
 8009284:	0800a3e0 	.word	0x0800a3e0
 8009288:	ffff0001 	.word	0xffff0001

0800928c <_fwalk_reent>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	4606      	mov	r6, r0
 8009292:	4688      	mov	r8, r1
 8009294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009298:	2700      	movs	r7, #0
 800929a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800929e:	f1b9 0901 	subs.w	r9, r9, #1
 80092a2:	d505      	bpl.n	80092b0 <_fwalk_reent+0x24>
 80092a4:	6824      	ldr	r4, [r4, #0]
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	d1f7      	bne.n	800929a <_fwalk_reent+0xe>
 80092aa:	4638      	mov	r0, r7
 80092ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b0:	89ab      	ldrh	r3, [r5, #12]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d907      	bls.n	80092c6 <_fwalk_reent+0x3a>
 80092b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092ba:	3301      	adds	r3, #1
 80092bc:	d003      	beq.n	80092c6 <_fwalk_reent+0x3a>
 80092be:	4629      	mov	r1, r5
 80092c0:	4630      	mov	r0, r6
 80092c2:	47c0      	blx	r8
 80092c4:	4307      	orrs	r7, r0
 80092c6:	3568      	adds	r5, #104	; 0x68
 80092c8:	e7e9      	b.n	800929e <_fwalk_reent+0x12>
	...

080092cc <_localeconv_r>:
 80092cc:	4800      	ldr	r0, [pc, #0]	; (80092d0 <_localeconv_r+0x4>)
 80092ce:	4770      	bx	lr
 80092d0:	20000160 	.word	0x20000160

080092d4 <__retarget_lock_init_recursive>:
 80092d4:	4770      	bx	lr

080092d6 <__retarget_lock_acquire_recursive>:
 80092d6:	4770      	bx	lr

080092d8 <__retarget_lock_release_recursive>:
 80092d8:	4770      	bx	lr

080092da <__swhatbuf_r>:
 80092da:	b570      	push	{r4, r5, r6, lr}
 80092dc:	460e      	mov	r6, r1
 80092de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e2:	2900      	cmp	r1, #0
 80092e4:	b096      	sub	sp, #88	; 0x58
 80092e6:	4614      	mov	r4, r2
 80092e8:	461d      	mov	r5, r3
 80092ea:	da08      	bge.n	80092fe <__swhatbuf_r+0x24>
 80092ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	602a      	str	r2, [r5, #0]
 80092f4:	061a      	lsls	r2, r3, #24
 80092f6:	d410      	bmi.n	800931a <__swhatbuf_r+0x40>
 80092f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fc:	e00e      	b.n	800931c <__swhatbuf_r+0x42>
 80092fe:	466a      	mov	r2, sp
 8009300:	f000 fee0 	bl	800a0c4 <_fstat_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	dbf1      	blt.n	80092ec <__swhatbuf_r+0x12>
 8009308:	9a01      	ldr	r2, [sp, #4]
 800930a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800930e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009312:	425a      	negs	r2, r3
 8009314:	415a      	adcs	r2, r3
 8009316:	602a      	str	r2, [r5, #0]
 8009318:	e7ee      	b.n	80092f8 <__swhatbuf_r+0x1e>
 800931a:	2340      	movs	r3, #64	; 0x40
 800931c:	2000      	movs	r0, #0
 800931e:	6023      	str	r3, [r4, #0]
 8009320:	b016      	add	sp, #88	; 0x58
 8009322:	bd70      	pop	{r4, r5, r6, pc}

08009324 <__smakebuf_r>:
 8009324:	898b      	ldrh	r3, [r1, #12]
 8009326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009328:	079d      	lsls	r5, r3, #30
 800932a:	4606      	mov	r6, r0
 800932c:	460c      	mov	r4, r1
 800932e:	d507      	bpl.n	8009340 <__smakebuf_r+0x1c>
 8009330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	2301      	movs	r3, #1
 800933a:	6163      	str	r3, [r4, #20]
 800933c:	b002      	add	sp, #8
 800933e:	bd70      	pop	{r4, r5, r6, pc}
 8009340:	ab01      	add	r3, sp, #4
 8009342:	466a      	mov	r2, sp
 8009344:	f7ff ffc9 	bl	80092da <__swhatbuf_r>
 8009348:	9900      	ldr	r1, [sp, #0]
 800934a:	4605      	mov	r5, r0
 800934c:	4630      	mov	r0, r6
 800934e:	f000 fc45 	bl	8009bdc <_malloc_r>
 8009352:	b948      	cbnz	r0, 8009368 <__smakebuf_r+0x44>
 8009354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009358:	059a      	lsls	r2, r3, #22
 800935a:	d4ef      	bmi.n	800933c <__smakebuf_r+0x18>
 800935c:	f023 0303 	bic.w	r3, r3, #3
 8009360:	f043 0302 	orr.w	r3, r3, #2
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	e7e3      	b.n	8009330 <__smakebuf_r+0xc>
 8009368:	4b0d      	ldr	r3, [pc, #52]	; (80093a0 <__smakebuf_r+0x7c>)
 800936a:	62b3      	str	r3, [r6, #40]	; 0x28
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	6020      	str	r0, [r4, #0]
 8009370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	6163      	str	r3, [r4, #20]
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	6120      	str	r0, [r4, #16]
 800937e:	b15b      	cbz	r3, 8009398 <__smakebuf_r+0x74>
 8009380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009384:	4630      	mov	r0, r6
 8009386:	f000 feaf 	bl	800a0e8 <_isatty_r>
 800938a:	b128      	cbz	r0, 8009398 <__smakebuf_r+0x74>
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	f043 0301 	orr.w	r3, r3, #1
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	89a0      	ldrh	r0, [r4, #12]
 800939a:	4305      	orrs	r5, r0
 800939c:	81a5      	strh	r5, [r4, #12]
 800939e:	e7cd      	b.n	800933c <__smakebuf_r+0x18>
 80093a0:	08009129 	.word	0x08009129

080093a4 <malloc>:
 80093a4:	4b02      	ldr	r3, [pc, #8]	; (80093b0 <malloc+0xc>)
 80093a6:	4601      	mov	r1, r0
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f000 bc17 	b.w	8009bdc <_malloc_r>
 80093ae:	bf00      	nop
 80093b0:	2000000c 	.word	0x2000000c

080093b4 <memcpy>:
 80093b4:	440a      	add	r2, r1
 80093b6:	4291      	cmp	r1, r2
 80093b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80093bc:	d100      	bne.n	80093c0 <memcpy+0xc>
 80093be:	4770      	bx	lr
 80093c0:	b510      	push	{r4, lr}
 80093c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ca:	4291      	cmp	r1, r2
 80093cc:	d1f9      	bne.n	80093c2 <memcpy+0xe>
 80093ce:	bd10      	pop	{r4, pc}

080093d0 <_Balloc>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	b976      	cbnz	r6, 80093f8 <_Balloc+0x28>
 80093da:	2010      	movs	r0, #16
 80093dc:	f7ff ffe2 	bl	80093a4 <malloc>
 80093e0:	4602      	mov	r2, r0
 80093e2:	6260      	str	r0, [r4, #36]	; 0x24
 80093e4:	b920      	cbnz	r0, 80093f0 <_Balloc+0x20>
 80093e6:	4b18      	ldr	r3, [pc, #96]	; (8009448 <_Balloc+0x78>)
 80093e8:	4818      	ldr	r0, [pc, #96]	; (800944c <_Balloc+0x7c>)
 80093ea:	2166      	movs	r1, #102	; 0x66
 80093ec:	f000 fe2a 	bl	800a044 <__assert_func>
 80093f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093f4:	6006      	str	r6, [r0, #0]
 80093f6:	60c6      	str	r6, [r0, #12]
 80093f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093fa:	68f3      	ldr	r3, [r6, #12]
 80093fc:	b183      	cbz	r3, 8009420 <_Balloc+0x50>
 80093fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009406:	b9b8      	cbnz	r0, 8009438 <_Balloc+0x68>
 8009408:	2101      	movs	r1, #1
 800940a:	fa01 f605 	lsl.w	r6, r1, r5
 800940e:	1d72      	adds	r2, r6, #5
 8009410:	0092      	lsls	r2, r2, #2
 8009412:	4620      	mov	r0, r4
 8009414:	f000 fb60 	bl	8009ad8 <_calloc_r>
 8009418:	b160      	cbz	r0, 8009434 <_Balloc+0x64>
 800941a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800941e:	e00e      	b.n	800943e <_Balloc+0x6e>
 8009420:	2221      	movs	r2, #33	; 0x21
 8009422:	2104      	movs	r1, #4
 8009424:	4620      	mov	r0, r4
 8009426:	f000 fb57 	bl	8009ad8 <_calloc_r>
 800942a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942c:	60f0      	str	r0, [r6, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e4      	bne.n	80093fe <_Balloc+0x2e>
 8009434:	2000      	movs	r0, #0
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	6802      	ldr	r2, [r0, #0]
 800943a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800943e:	2300      	movs	r3, #0
 8009440:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009444:	e7f7      	b.n	8009436 <_Balloc+0x66>
 8009446:	bf00      	nop
 8009448:	0800a425 	.word	0x0800a425
 800944c:	0800a508 	.word	0x0800a508

08009450 <_Bfree>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009454:	4605      	mov	r5, r0
 8009456:	460c      	mov	r4, r1
 8009458:	b976      	cbnz	r6, 8009478 <_Bfree+0x28>
 800945a:	2010      	movs	r0, #16
 800945c:	f7ff ffa2 	bl	80093a4 <malloc>
 8009460:	4602      	mov	r2, r0
 8009462:	6268      	str	r0, [r5, #36]	; 0x24
 8009464:	b920      	cbnz	r0, 8009470 <_Bfree+0x20>
 8009466:	4b09      	ldr	r3, [pc, #36]	; (800948c <_Bfree+0x3c>)
 8009468:	4809      	ldr	r0, [pc, #36]	; (8009490 <_Bfree+0x40>)
 800946a:	218a      	movs	r1, #138	; 0x8a
 800946c:	f000 fdea 	bl	800a044 <__assert_func>
 8009470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009474:	6006      	str	r6, [r0, #0]
 8009476:	60c6      	str	r6, [r0, #12]
 8009478:	b13c      	cbz	r4, 800948a <_Bfree+0x3a>
 800947a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800947c:	6862      	ldr	r2, [r4, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009484:	6021      	str	r1, [r4, #0]
 8009486:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	0800a425 	.word	0x0800a425
 8009490:	0800a508 	.word	0x0800a508

08009494 <__multadd>:
 8009494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009498:	690d      	ldr	r5, [r1, #16]
 800949a:	4607      	mov	r7, r0
 800949c:	460c      	mov	r4, r1
 800949e:	461e      	mov	r6, r3
 80094a0:	f101 0c14 	add.w	ip, r1, #20
 80094a4:	2000      	movs	r0, #0
 80094a6:	f8dc 3000 	ldr.w	r3, [ip]
 80094aa:	b299      	uxth	r1, r3
 80094ac:	fb02 6101 	mla	r1, r2, r1, r6
 80094b0:	0c1e      	lsrs	r6, r3, #16
 80094b2:	0c0b      	lsrs	r3, r1, #16
 80094b4:	fb02 3306 	mla	r3, r2, r6, r3
 80094b8:	b289      	uxth	r1, r1
 80094ba:	3001      	adds	r0, #1
 80094bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094c0:	4285      	cmp	r5, r0
 80094c2:	f84c 1b04 	str.w	r1, [ip], #4
 80094c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094ca:	dcec      	bgt.n	80094a6 <__multadd+0x12>
 80094cc:	b30e      	cbz	r6, 8009512 <__multadd+0x7e>
 80094ce:	68a3      	ldr	r3, [r4, #8]
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dc19      	bgt.n	8009508 <__multadd+0x74>
 80094d4:	6861      	ldr	r1, [r4, #4]
 80094d6:	4638      	mov	r0, r7
 80094d8:	3101      	adds	r1, #1
 80094da:	f7ff ff79 	bl	80093d0 <_Balloc>
 80094de:	4680      	mov	r8, r0
 80094e0:	b928      	cbnz	r0, 80094ee <__multadd+0x5a>
 80094e2:	4602      	mov	r2, r0
 80094e4:	4b0c      	ldr	r3, [pc, #48]	; (8009518 <__multadd+0x84>)
 80094e6:	480d      	ldr	r0, [pc, #52]	; (800951c <__multadd+0x88>)
 80094e8:	21b5      	movs	r1, #181	; 0xb5
 80094ea:	f000 fdab 	bl	800a044 <__assert_func>
 80094ee:	6922      	ldr	r2, [r4, #16]
 80094f0:	3202      	adds	r2, #2
 80094f2:	f104 010c 	add.w	r1, r4, #12
 80094f6:	0092      	lsls	r2, r2, #2
 80094f8:	300c      	adds	r0, #12
 80094fa:	f7ff ff5b 	bl	80093b4 <memcpy>
 80094fe:	4621      	mov	r1, r4
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff ffa5 	bl	8009450 <_Bfree>
 8009506:	4644      	mov	r4, r8
 8009508:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800950c:	3501      	adds	r5, #1
 800950e:	615e      	str	r6, [r3, #20]
 8009510:	6125      	str	r5, [r4, #16]
 8009512:	4620      	mov	r0, r4
 8009514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009518:	0800a497 	.word	0x0800a497
 800951c:	0800a508 	.word	0x0800a508

08009520 <__hi0bits>:
 8009520:	0c03      	lsrs	r3, r0, #16
 8009522:	041b      	lsls	r3, r3, #16
 8009524:	b9d3      	cbnz	r3, 800955c <__hi0bits+0x3c>
 8009526:	0400      	lsls	r0, r0, #16
 8009528:	2310      	movs	r3, #16
 800952a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800952e:	bf04      	itt	eq
 8009530:	0200      	lsleq	r0, r0, #8
 8009532:	3308      	addeq	r3, #8
 8009534:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009538:	bf04      	itt	eq
 800953a:	0100      	lsleq	r0, r0, #4
 800953c:	3304      	addeq	r3, #4
 800953e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009542:	bf04      	itt	eq
 8009544:	0080      	lsleq	r0, r0, #2
 8009546:	3302      	addeq	r3, #2
 8009548:	2800      	cmp	r0, #0
 800954a:	db05      	blt.n	8009558 <__hi0bits+0x38>
 800954c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009550:	f103 0301 	add.w	r3, r3, #1
 8009554:	bf08      	it	eq
 8009556:	2320      	moveq	r3, #32
 8009558:	4618      	mov	r0, r3
 800955a:	4770      	bx	lr
 800955c:	2300      	movs	r3, #0
 800955e:	e7e4      	b.n	800952a <__hi0bits+0xa>

08009560 <__lo0bits>:
 8009560:	6803      	ldr	r3, [r0, #0]
 8009562:	f013 0207 	ands.w	r2, r3, #7
 8009566:	4601      	mov	r1, r0
 8009568:	d00b      	beq.n	8009582 <__lo0bits+0x22>
 800956a:	07da      	lsls	r2, r3, #31
 800956c:	d423      	bmi.n	80095b6 <__lo0bits+0x56>
 800956e:	0798      	lsls	r0, r3, #30
 8009570:	bf49      	itett	mi
 8009572:	085b      	lsrmi	r3, r3, #1
 8009574:	089b      	lsrpl	r3, r3, #2
 8009576:	2001      	movmi	r0, #1
 8009578:	600b      	strmi	r3, [r1, #0]
 800957a:	bf5c      	itt	pl
 800957c:	600b      	strpl	r3, [r1, #0]
 800957e:	2002      	movpl	r0, #2
 8009580:	4770      	bx	lr
 8009582:	b298      	uxth	r0, r3
 8009584:	b9a8      	cbnz	r0, 80095b2 <__lo0bits+0x52>
 8009586:	0c1b      	lsrs	r3, r3, #16
 8009588:	2010      	movs	r0, #16
 800958a:	b2da      	uxtb	r2, r3
 800958c:	b90a      	cbnz	r2, 8009592 <__lo0bits+0x32>
 800958e:	3008      	adds	r0, #8
 8009590:	0a1b      	lsrs	r3, r3, #8
 8009592:	071a      	lsls	r2, r3, #28
 8009594:	bf04      	itt	eq
 8009596:	091b      	lsreq	r3, r3, #4
 8009598:	3004      	addeq	r0, #4
 800959a:	079a      	lsls	r2, r3, #30
 800959c:	bf04      	itt	eq
 800959e:	089b      	lsreq	r3, r3, #2
 80095a0:	3002      	addeq	r0, #2
 80095a2:	07da      	lsls	r2, r3, #31
 80095a4:	d403      	bmi.n	80095ae <__lo0bits+0x4e>
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	f100 0001 	add.w	r0, r0, #1
 80095ac:	d005      	beq.n	80095ba <__lo0bits+0x5a>
 80095ae:	600b      	str	r3, [r1, #0]
 80095b0:	4770      	bx	lr
 80095b2:	4610      	mov	r0, r2
 80095b4:	e7e9      	b.n	800958a <__lo0bits+0x2a>
 80095b6:	2000      	movs	r0, #0
 80095b8:	4770      	bx	lr
 80095ba:	2020      	movs	r0, #32
 80095bc:	4770      	bx	lr
	...

080095c0 <__i2b>:
 80095c0:	b510      	push	{r4, lr}
 80095c2:	460c      	mov	r4, r1
 80095c4:	2101      	movs	r1, #1
 80095c6:	f7ff ff03 	bl	80093d0 <_Balloc>
 80095ca:	4602      	mov	r2, r0
 80095cc:	b928      	cbnz	r0, 80095da <__i2b+0x1a>
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <__i2b+0x24>)
 80095d0:	4805      	ldr	r0, [pc, #20]	; (80095e8 <__i2b+0x28>)
 80095d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095d6:	f000 fd35 	bl	800a044 <__assert_func>
 80095da:	2301      	movs	r3, #1
 80095dc:	6144      	str	r4, [r0, #20]
 80095de:	6103      	str	r3, [r0, #16]
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	bf00      	nop
 80095e4:	0800a497 	.word	0x0800a497
 80095e8:	0800a508 	.word	0x0800a508

080095ec <__multiply>:
 80095ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	4691      	mov	r9, r2
 80095f2:	690a      	ldr	r2, [r1, #16]
 80095f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	bfb8      	it	lt
 80095fc:	460b      	movlt	r3, r1
 80095fe:	460c      	mov	r4, r1
 8009600:	bfbc      	itt	lt
 8009602:	464c      	movlt	r4, r9
 8009604:	4699      	movlt	r9, r3
 8009606:	6927      	ldr	r7, [r4, #16]
 8009608:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800960c:	68a3      	ldr	r3, [r4, #8]
 800960e:	6861      	ldr	r1, [r4, #4]
 8009610:	eb07 060a 	add.w	r6, r7, sl
 8009614:	42b3      	cmp	r3, r6
 8009616:	b085      	sub	sp, #20
 8009618:	bfb8      	it	lt
 800961a:	3101      	addlt	r1, #1
 800961c:	f7ff fed8 	bl	80093d0 <_Balloc>
 8009620:	b930      	cbnz	r0, 8009630 <__multiply+0x44>
 8009622:	4602      	mov	r2, r0
 8009624:	4b44      	ldr	r3, [pc, #272]	; (8009738 <__multiply+0x14c>)
 8009626:	4845      	ldr	r0, [pc, #276]	; (800973c <__multiply+0x150>)
 8009628:	f240 115d 	movw	r1, #349	; 0x15d
 800962c:	f000 fd0a 	bl	800a044 <__assert_func>
 8009630:	f100 0514 	add.w	r5, r0, #20
 8009634:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009638:	462b      	mov	r3, r5
 800963a:	2200      	movs	r2, #0
 800963c:	4543      	cmp	r3, r8
 800963e:	d321      	bcc.n	8009684 <__multiply+0x98>
 8009640:	f104 0314 	add.w	r3, r4, #20
 8009644:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009648:	f109 0314 	add.w	r3, r9, #20
 800964c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009650:	9202      	str	r2, [sp, #8]
 8009652:	1b3a      	subs	r2, r7, r4
 8009654:	3a15      	subs	r2, #21
 8009656:	f022 0203 	bic.w	r2, r2, #3
 800965a:	3204      	adds	r2, #4
 800965c:	f104 0115 	add.w	r1, r4, #21
 8009660:	428f      	cmp	r7, r1
 8009662:	bf38      	it	cc
 8009664:	2204      	movcc	r2, #4
 8009666:	9201      	str	r2, [sp, #4]
 8009668:	9a02      	ldr	r2, [sp, #8]
 800966a:	9303      	str	r3, [sp, #12]
 800966c:	429a      	cmp	r2, r3
 800966e:	d80c      	bhi.n	800968a <__multiply+0x9e>
 8009670:	2e00      	cmp	r6, #0
 8009672:	dd03      	ble.n	800967c <__multiply+0x90>
 8009674:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009678:	2b00      	cmp	r3, #0
 800967a:	d05a      	beq.n	8009732 <__multiply+0x146>
 800967c:	6106      	str	r6, [r0, #16]
 800967e:	b005      	add	sp, #20
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	f843 2b04 	str.w	r2, [r3], #4
 8009688:	e7d8      	b.n	800963c <__multiply+0x50>
 800968a:	f8b3 a000 	ldrh.w	sl, [r3]
 800968e:	f1ba 0f00 	cmp.w	sl, #0
 8009692:	d024      	beq.n	80096de <__multiply+0xf2>
 8009694:	f104 0e14 	add.w	lr, r4, #20
 8009698:	46a9      	mov	r9, r5
 800969a:	f04f 0c00 	mov.w	ip, #0
 800969e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096a2:	f8d9 1000 	ldr.w	r1, [r9]
 80096a6:	fa1f fb82 	uxth.w	fp, r2
 80096aa:	b289      	uxth	r1, r1
 80096ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80096b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096b4:	f8d9 2000 	ldr.w	r2, [r9]
 80096b8:	4461      	add	r1, ip
 80096ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096be:	fb0a c20b 	mla	r2, sl, fp, ip
 80096c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096c6:	b289      	uxth	r1, r1
 80096c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096cc:	4577      	cmp	r7, lr
 80096ce:	f849 1b04 	str.w	r1, [r9], #4
 80096d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096d6:	d8e2      	bhi.n	800969e <__multiply+0xb2>
 80096d8:	9a01      	ldr	r2, [sp, #4]
 80096da:	f845 c002 	str.w	ip, [r5, r2]
 80096de:	9a03      	ldr	r2, [sp, #12]
 80096e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096e4:	3304      	adds	r3, #4
 80096e6:	f1b9 0f00 	cmp.w	r9, #0
 80096ea:	d020      	beq.n	800972e <__multiply+0x142>
 80096ec:	6829      	ldr	r1, [r5, #0]
 80096ee:	f104 0c14 	add.w	ip, r4, #20
 80096f2:	46ae      	mov	lr, r5
 80096f4:	f04f 0a00 	mov.w	sl, #0
 80096f8:	f8bc b000 	ldrh.w	fp, [ip]
 80096fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009700:	fb09 220b 	mla	r2, r9, fp, r2
 8009704:	4492      	add	sl, r2
 8009706:	b289      	uxth	r1, r1
 8009708:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800970c:	f84e 1b04 	str.w	r1, [lr], #4
 8009710:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009714:	f8be 1000 	ldrh.w	r1, [lr]
 8009718:	0c12      	lsrs	r2, r2, #16
 800971a:	fb09 1102 	mla	r1, r9, r2, r1
 800971e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009722:	4567      	cmp	r7, ip
 8009724:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009728:	d8e6      	bhi.n	80096f8 <__multiply+0x10c>
 800972a:	9a01      	ldr	r2, [sp, #4]
 800972c:	50a9      	str	r1, [r5, r2]
 800972e:	3504      	adds	r5, #4
 8009730:	e79a      	b.n	8009668 <__multiply+0x7c>
 8009732:	3e01      	subs	r6, #1
 8009734:	e79c      	b.n	8009670 <__multiply+0x84>
 8009736:	bf00      	nop
 8009738:	0800a497 	.word	0x0800a497
 800973c:	0800a508 	.word	0x0800a508

08009740 <__pow5mult>:
 8009740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009744:	4615      	mov	r5, r2
 8009746:	f012 0203 	ands.w	r2, r2, #3
 800974a:	4606      	mov	r6, r0
 800974c:	460f      	mov	r7, r1
 800974e:	d007      	beq.n	8009760 <__pow5mult+0x20>
 8009750:	4c25      	ldr	r4, [pc, #148]	; (80097e8 <__pow5mult+0xa8>)
 8009752:	3a01      	subs	r2, #1
 8009754:	2300      	movs	r3, #0
 8009756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800975a:	f7ff fe9b 	bl	8009494 <__multadd>
 800975e:	4607      	mov	r7, r0
 8009760:	10ad      	asrs	r5, r5, #2
 8009762:	d03d      	beq.n	80097e0 <__pow5mult+0xa0>
 8009764:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009766:	b97c      	cbnz	r4, 8009788 <__pow5mult+0x48>
 8009768:	2010      	movs	r0, #16
 800976a:	f7ff fe1b 	bl	80093a4 <malloc>
 800976e:	4602      	mov	r2, r0
 8009770:	6270      	str	r0, [r6, #36]	; 0x24
 8009772:	b928      	cbnz	r0, 8009780 <__pow5mult+0x40>
 8009774:	4b1d      	ldr	r3, [pc, #116]	; (80097ec <__pow5mult+0xac>)
 8009776:	481e      	ldr	r0, [pc, #120]	; (80097f0 <__pow5mult+0xb0>)
 8009778:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800977c:	f000 fc62 	bl	800a044 <__assert_func>
 8009780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009784:	6004      	str	r4, [r0, #0]
 8009786:	60c4      	str	r4, [r0, #12]
 8009788:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800978c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009790:	b94c      	cbnz	r4, 80097a6 <__pow5mult+0x66>
 8009792:	f240 2171 	movw	r1, #625	; 0x271
 8009796:	4630      	mov	r0, r6
 8009798:	f7ff ff12 	bl	80095c0 <__i2b>
 800979c:	2300      	movs	r3, #0
 800979e:	f8c8 0008 	str.w	r0, [r8, #8]
 80097a2:	4604      	mov	r4, r0
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	f04f 0900 	mov.w	r9, #0
 80097aa:	07eb      	lsls	r3, r5, #31
 80097ac:	d50a      	bpl.n	80097c4 <__pow5mult+0x84>
 80097ae:	4639      	mov	r1, r7
 80097b0:	4622      	mov	r2, r4
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff ff1a 	bl	80095ec <__multiply>
 80097b8:	4639      	mov	r1, r7
 80097ba:	4680      	mov	r8, r0
 80097bc:	4630      	mov	r0, r6
 80097be:	f7ff fe47 	bl	8009450 <_Bfree>
 80097c2:	4647      	mov	r7, r8
 80097c4:	106d      	asrs	r5, r5, #1
 80097c6:	d00b      	beq.n	80097e0 <__pow5mult+0xa0>
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	b938      	cbnz	r0, 80097dc <__pow5mult+0x9c>
 80097cc:	4622      	mov	r2, r4
 80097ce:	4621      	mov	r1, r4
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7ff ff0b 	bl	80095ec <__multiply>
 80097d6:	6020      	str	r0, [r4, #0]
 80097d8:	f8c0 9000 	str.w	r9, [r0]
 80097dc:	4604      	mov	r4, r0
 80097de:	e7e4      	b.n	80097aa <__pow5mult+0x6a>
 80097e0:	4638      	mov	r0, r7
 80097e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097e6:	bf00      	nop
 80097e8:	0800a658 	.word	0x0800a658
 80097ec:	0800a425 	.word	0x0800a425
 80097f0:	0800a508 	.word	0x0800a508

080097f4 <__lshift>:
 80097f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f8:	460c      	mov	r4, r1
 80097fa:	6849      	ldr	r1, [r1, #4]
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	4607      	mov	r7, r0
 8009806:	4691      	mov	r9, r2
 8009808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800980c:	f108 0601 	add.w	r6, r8, #1
 8009810:	42b3      	cmp	r3, r6
 8009812:	db0b      	blt.n	800982c <__lshift+0x38>
 8009814:	4638      	mov	r0, r7
 8009816:	f7ff fddb 	bl	80093d0 <_Balloc>
 800981a:	4605      	mov	r5, r0
 800981c:	b948      	cbnz	r0, 8009832 <__lshift+0x3e>
 800981e:	4602      	mov	r2, r0
 8009820:	4b2a      	ldr	r3, [pc, #168]	; (80098cc <__lshift+0xd8>)
 8009822:	482b      	ldr	r0, [pc, #172]	; (80098d0 <__lshift+0xdc>)
 8009824:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009828:	f000 fc0c 	bl	800a044 <__assert_func>
 800982c:	3101      	adds	r1, #1
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	e7ee      	b.n	8009810 <__lshift+0x1c>
 8009832:	2300      	movs	r3, #0
 8009834:	f100 0114 	add.w	r1, r0, #20
 8009838:	f100 0210 	add.w	r2, r0, #16
 800983c:	4618      	mov	r0, r3
 800983e:	4553      	cmp	r3, sl
 8009840:	db37      	blt.n	80098b2 <__lshift+0xbe>
 8009842:	6920      	ldr	r0, [r4, #16]
 8009844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009848:	f104 0314 	add.w	r3, r4, #20
 800984c:	f019 091f 	ands.w	r9, r9, #31
 8009850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009854:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009858:	d02f      	beq.n	80098ba <__lshift+0xc6>
 800985a:	f1c9 0e20 	rsb	lr, r9, #32
 800985e:	468a      	mov	sl, r1
 8009860:	f04f 0c00 	mov.w	ip, #0
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	fa02 f209 	lsl.w	r2, r2, r9
 800986a:	ea42 020c 	orr.w	r2, r2, ip
 800986e:	f84a 2b04 	str.w	r2, [sl], #4
 8009872:	f853 2b04 	ldr.w	r2, [r3], #4
 8009876:	4298      	cmp	r0, r3
 8009878:	fa22 fc0e 	lsr.w	ip, r2, lr
 800987c:	d8f2      	bhi.n	8009864 <__lshift+0x70>
 800987e:	1b03      	subs	r3, r0, r4
 8009880:	3b15      	subs	r3, #21
 8009882:	f023 0303 	bic.w	r3, r3, #3
 8009886:	3304      	adds	r3, #4
 8009888:	f104 0215 	add.w	r2, r4, #21
 800988c:	4290      	cmp	r0, r2
 800988e:	bf38      	it	cc
 8009890:	2304      	movcc	r3, #4
 8009892:	f841 c003 	str.w	ip, [r1, r3]
 8009896:	f1bc 0f00 	cmp.w	ip, #0
 800989a:	d001      	beq.n	80098a0 <__lshift+0xac>
 800989c:	f108 0602 	add.w	r6, r8, #2
 80098a0:	3e01      	subs	r6, #1
 80098a2:	4638      	mov	r0, r7
 80098a4:	612e      	str	r6, [r5, #16]
 80098a6:	4621      	mov	r1, r4
 80098a8:	f7ff fdd2 	bl	8009450 <_Bfree>
 80098ac:	4628      	mov	r0, r5
 80098ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80098b6:	3301      	adds	r3, #1
 80098b8:	e7c1      	b.n	800983e <__lshift+0x4a>
 80098ba:	3904      	subs	r1, #4
 80098bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80098c4:	4298      	cmp	r0, r3
 80098c6:	d8f9      	bhi.n	80098bc <__lshift+0xc8>
 80098c8:	e7ea      	b.n	80098a0 <__lshift+0xac>
 80098ca:	bf00      	nop
 80098cc:	0800a497 	.word	0x0800a497
 80098d0:	0800a508 	.word	0x0800a508

080098d4 <__mcmp>:
 80098d4:	b530      	push	{r4, r5, lr}
 80098d6:	6902      	ldr	r2, [r0, #16]
 80098d8:	690c      	ldr	r4, [r1, #16]
 80098da:	1b12      	subs	r2, r2, r4
 80098dc:	d10e      	bne.n	80098fc <__mcmp+0x28>
 80098de:	f100 0314 	add.w	r3, r0, #20
 80098e2:	3114      	adds	r1, #20
 80098e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098f4:	42a5      	cmp	r5, r4
 80098f6:	d003      	beq.n	8009900 <__mcmp+0x2c>
 80098f8:	d305      	bcc.n	8009906 <__mcmp+0x32>
 80098fa:	2201      	movs	r2, #1
 80098fc:	4610      	mov	r0, r2
 80098fe:	bd30      	pop	{r4, r5, pc}
 8009900:	4283      	cmp	r3, r0
 8009902:	d3f3      	bcc.n	80098ec <__mcmp+0x18>
 8009904:	e7fa      	b.n	80098fc <__mcmp+0x28>
 8009906:	f04f 32ff 	mov.w	r2, #4294967295
 800990a:	e7f7      	b.n	80098fc <__mcmp+0x28>

0800990c <__mdiff>:
 800990c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	460c      	mov	r4, r1
 8009912:	4606      	mov	r6, r0
 8009914:	4611      	mov	r1, r2
 8009916:	4620      	mov	r0, r4
 8009918:	4690      	mov	r8, r2
 800991a:	f7ff ffdb 	bl	80098d4 <__mcmp>
 800991e:	1e05      	subs	r5, r0, #0
 8009920:	d110      	bne.n	8009944 <__mdiff+0x38>
 8009922:	4629      	mov	r1, r5
 8009924:	4630      	mov	r0, r6
 8009926:	f7ff fd53 	bl	80093d0 <_Balloc>
 800992a:	b930      	cbnz	r0, 800993a <__mdiff+0x2e>
 800992c:	4b3a      	ldr	r3, [pc, #232]	; (8009a18 <__mdiff+0x10c>)
 800992e:	4602      	mov	r2, r0
 8009930:	f240 2132 	movw	r1, #562	; 0x232
 8009934:	4839      	ldr	r0, [pc, #228]	; (8009a1c <__mdiff+0x110>)
 8009936:	f000 fb85 	bl	800a044 <__assert_func>
 800993a:	2301      	movs	r3, #1
 800993c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009944:	bfa4      	itt	ge
 8009946:	4643      	movge	r3, r8
 8009948:	46a0      	movge	r8, r4
 800994a:	4630      	mov	r0, r6
 800994c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009950:	bfa6      	itte	ge
 8009952:	461c      	movge	r4, r3
 8009954:	2500      	movge	r5, #0
 8009956:	2501      	movlt	r5, #1
 8009958:	f7ff fd3a 	bl	80093d0 <_Balloc>
 800995c:	b920      	cbnz	r0, 8009968 <__mdiff+0x5c>
 800995e:	4b2e      	ldr	r3, [pc, #184]	; (8009a18 <__mdiff+0x10c>)
 8009960:	4602      	mov	r2, r0
 8009962:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009966:	e7e5      	b.n	8009934 <__mdiff+0x28>
 8009968:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800996c:	6926      	ldr	r6, [r4, #16]
 800996e:	60c5      	str	r5, [r0, #12]
 8009970:	f104 0914 	add.w	r9, r4, #20
 8009974:	f108 0514 	add.w	r5, r8, #20
 8009978:	f100 0e14 	add.w	lr, r0, #20
 800997c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009980:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009984:	f108 0210 	add.w	r2, r8, #16
 8009988:	46f2      	mov	sl, lr
 800998a:	2100      	movs	r1, #0
 800998c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009990:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009994:	fa1f f883 	uxth.w	r8, r3
 8009998:	fa11 f18b 	uxtah	r1, r1, fp
 800999c:	0c1b      	lsrs	r3, r3, #16
 800999e:	eba1 0808 	sub.w	r8, r1, r8
 80099a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099aa:	fa1f f888 	uxth.w	r8, r8
 80099ae:	1419      	asrs	r1, r3, #16
 80099b0:	454e      	cmp	r6, r9
 80099b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099b6:	f84a 3b04 	str.w	r3, [sl], #4
 80099ba:	d8e7      	bhi.n	800998c <__mdiff+0x80>
 80099bc:	1b33      	subs	r3, r6, r4
 80099be:	3b15      	subs	r3, #21
 80099c0:	f023 0303 	bic.w	r3, r3, #3
 80099c4:	3304      	adds	r3, #4
 80099c6:	3415      	adds	r4, #21
 80099c8:	42a6      	cmp	r6, r4
 80099ca:	bf38      	it	cc
 80099cc:	2304      	movcc	r3, #4
 80099ce:	441d      	add	r5, r3
 80099d0:	4473      	add	r3, lr
 80099d2:	469e      	mov	lr, r3
 80099d4:	462e      	mov	r6, r5
 80099d6:	4566      	cmp	r6, ip
 80099d8:	d30e      	bcc.n	80099f8 <__mdiff+0xec>
 80099da:	f10c 0203 	add.w	r2, ip, #3
 80099de:	1b52      	subs	r2, r2, r5
 80099e0:	f022 0203 	bic.w	r2, r2, #3
 80099e4:	3d03      	subs	r5, #3
 80099e6:	45ac      	cmp	ip, r5
 80099e8:	bf38      	it	cc
 80099ea:	2200      	movcc	r2, #0
 80099ec:	441a      	add	r2, r3
 80099ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80099f2:	b17b      	cbz	r3, 8009a14 <__mdiff+0x108>
 80099f4:	6107      	str	r7, [r0, #16]
 80099f6:	e7a3      	b.n	8009940 <__mdiff+0x34>
 80099f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80099fc:	fa11 f288 	uxtah	r2, r1, r8
 8009a00:	1414      	asrs	r4, r2, #16
 8009a02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a06:	b292      	uxth	r2, r2
 8009a08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a0c:	f84e 2b04 	str.w	r2, [lr], #4
 8009a10:	1421      	asrs	r1, r4, #16
 8009a12:	e7e0      	b.n	80099d6 <__mdiff+0xca>
 8009a14:	3f01      	subs	r7, #1
 8009a16:	e7ea      	b.n	80099ee <__mdiff+0xe2>
 8009a18:	0800a497 	.word	0x0800a497
 8009a1c:	0800a508 	.word	0x0800a508

08009a20 <__d2b>:
 8009a20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a24:	4689      	mov	r9, r1
 8009a26:	2101      	movs	r1, #1
 8009a28:	ec57 6b10 	vmov	r6, r7, d0
 8009a2c:	4690      	mov	r8, r2
 8009a2e:	f7ff fccf 	bl	80093d0 <_Balloc>
 8009a32:	4604      	mov	r4, r0
 8009a34:	b930      	cbnz	r0, 8009a44 <__d2b+0x24>
 8009a36:	4602      	mov	r2, r0
 8009a38:	4b25      	ldr	r3, [pc, #148]	; (8009ad0 <__d2b+0xb0>)
 8009a3a:	4826      	ldr	r0, [pc, #152]	; (8009ad4 <__d2b+0xb4>)
 8009a3c:	f240 310a 	movw	r1, #778	; 0x30a
 8009a40:	f000 fb00 	bl	800a044 <__assert_func>
 8009a44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a4c:	bb35      	cbnz	r5, 8009a9c <__d2b+0x7c>
 8009a4e:	2e00      	cmp	r6, #0
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	d028      	beq.n	8009aa6 <__d2b+0x86>
 8009a54:	4668      	mov	r0, sp
 8009a56:	9600      	str	r6, [sp, #0]
 8009a58:	f7ff fd82 	bl	8009560 <__lo0bits>
 8009a5c:	9900      	ldr	r1, [sp, #0]
 8009a5e:	b300      	cbz	r0, 8009aa2 <__d2b+0x82>
 8009a60:	9a01      	ldr	r2, [sp, #4]
 8009a62:	f1c0 0320 	rsb	r3, r0, #32
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	430b      	orrs	r3, r1
 8009a6c:	40c2      	lsrs	r2, r0
 8009a6e:	6163      	str	r3, [r4, #20]
 8009a70:	9201      	str	r2, [sp, #4]
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	61a3      	str	r3, [r4, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bf14      	ite	ne
 8009a7a:	2202      	movne	r2, #2
 8009a7c:	2201      	moveq	r2, #1
 8009a7e:	6122      	str	r2, [r4, #16]
 8009a80:	b1d5      	cbz	r5, 8009ab8 <__d2b+0x98>
 8009a82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a86:	4405      	add	r5, r0
 8009a88:	f8c9 5000 	str.w	r5, [r9]
 8009a8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a90:	f8c8 0000 	str.w	r0, [r8]
 8009a94:	4620      	mov	r0, r4
 8009a96:	b003      	add	sp, #12
 8009a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa0:	e7d5      	b.n	8009a4e <__d2b+0x2e>
 8009aa2:	6161      	str	r1, [r4, #20]
 8009aa4:	e7e5      	b.n	8009a72 <__d2b+0x52>
 8009aa6:	a801      	add	r0, sp, #4
 8009aa8:	f7ff fd5a 	bl	8009560 <__lo0bits>
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	6163      	str	r3, [r4, #20]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	6122      	str	r2, [r4, #16]
 8009ab4:	3020      	adds	r0, #32
 8009ab6:	e7e3      	b.n	8009a80 <__d2b+0x60>
 8009ab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009abc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ac0:	f8c9 0000 	str.w	r0, [r9]
 8009ac4:	6918      	ldr	r0, [r3, #16]
 8009ac6:	f7ff fd2b 	bl	8009520 <__hi0bits>
 8009aca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ace:	e7df      	b.n	8009a90 <__d2b+0x70>
 8009ad0:	0800a497 	.word	0x0800a497
 8009ad4:	0800a508 	.word	0x0800a508

08009ad8 <_calloc_r>:
 8009ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ada:	fba1 2402 	umull	r2, r4, r1, r2
 8009ade:	b94c      	cbnz	r4, 8009af4 <_calloc_r+0x1c>
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	9201      	str	r2, [sp, #4]
 8009ae4:	f000 f87a 	bl	8009bdc <_malloc_r>
 8009ae8:	9a01      	ldr	r2, [sp, #4]
 8009aea:	4605      	mov	r5, r0
 8009aec:	b930      	cbnz	r0, 8009afc <_calloc_r+0x24>
 8009aee:	4628      	mov	r0, r5
 8009af0:	b003      	add	sp, #12
 8009af2:	bd30      	pop	{r4, r5, pc}
 8009af4:	220c      	movs	r2, #12
 8009af6:	6002      	str	r2, [r0, #0]
 8009af8:	2500      	movs	r5, #0
 8009afa:	e7f8      	b.n	8009aee <_calloc_r+0x16>
 8009afc:	4621      	mov	r1, r4
 8009afe:	f7fd fdf3 	bl	80076e8 <memset>
 8009b02:	e7f4      	b.n	8009aee <_calloc_r+0x16>

08009b04 <_free_r>:
 8009b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b06:	2900      	cmp	r1, #0
 8009b08:	d044      	beq.n	8009b94 <_free_r+0x90>
 8009b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b0e:	9001      	str	r0, [sp, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f1a1 0404 	sub.w	r4, r1, #4
 8009b16:	bfb8      	it	lt
 8009b18:	18e4      	addlt	r4, r4, r3
 8009b1a:	f000 fb19 	bl	800a150 <__malloc_lock>
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <_free_r+0x94>)
 8009b20:	9801      	ldr	r0, [sp, #4]
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	b933      	cbnz	r3, 8009b34 <_free_r+0x30>
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	6014      	str	r4, [r2, #0]
 8009b2a:	b003      	add	sp, #12
 8009b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b30:	f000 bb14 	b.w	800a15c <__malloc_unlock>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d908      	bls.n	8009b4a <_free_r+0x46>
 8009b38:	6825      	ldr	r5, [r4, #0]
 8009b3a:	1961      	adds	r1, r4, r5
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf01      	itttt	eq
 8009b40:	6819      	ldreq	r1, [r3, #0]
 8009b42:	685b      	ldreq	r3, [r3, #4]
 8009b44:	1949      	addeq	r1, r1, r5
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	e7ed      	b.n	8009b26 <_free_r+0x22>
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	b10b      	cbz	r3, 8009b54 <_free_r+0x50>
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	d9fa      	bls.n	8009b4a <_free_r+0x46>
 8009b54:	6811      	ldr	r1, [r2, #0]
 8009b56:	1855      	adds	r5, r2, r1
 8009b58:	42a5      	cmp	r5, r4
 8009b5a:	d10b      	bne.n	8009b74 <_free_r+0x70>
 8009b5c:	6824      	ldr	r4, [r4, #0]
 8009b5e:	4421      	add	r1, r4
 8009b60:	1854      	adds	r4, r2, r1
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	d1e0      	bne.n	8009b2a <_free_r+0x26>
 8009b68:	681c      	ldr	r4, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	6053      	str	r3, [r2, #4]
 8009b6e:	4421      	add	r1, r4
 8009b70:	6011      	str	r1, [r2, #0]
 8009b72:	e7da      	b.n	8009b2a <_free_r+0x26>
 8009b74:	d902      	bls.n	8009b7c <_free_r+0x78>
 8009b76:	230c      	movs	r3, #12
 8009b78:	6003      	str	r3, [r0, #0]
 8009b7a:	e7d6      	b.n	8009b2a <_free_r+0x26>
 8009b7c:	6825      	ldr	r5, [r4, #0]
 8009b7e:	1961      	adds	r1, r4, r5
 8009b80:	428b      	cmp	r3, r1
 8009b82:	bf04      	itt	eq
 8009b84:	6819      	ldreq	r1, [r3, #0]
 8009b86:	685b      	ldreq	r3, [r3, #4]
 8009b88:	6063      	str	r3, [r4, #4]
 8009b8a:	bf04      	itt	eq
 8009b8c:	1949      	addeq	r1, r1, r5
 8009b8e:	6021      	streq	r1, [r4, #0]
 8009b90:	6054      	str	r4, [r2, #4]
 8009b92:	e7ca      	b.n	8009b2a <_free_r+0x26>
 8009b94:	b003      	add	sp, #12
 8009b96:	bd30      	pop	{r4, r5, pc}
 8009b98:	2000071c 	.word	0x2000071c

08009b9c <sbrk_aligned>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4e0e      	ldr	r6, [pc, #56]	; (8009bd8 <sbrk_aligned+0x3c>)
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	6831      	ldr	r1, [r6, #0]
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	b911      	cbnz	r1, 8009bae <sbrk_aligned+0x12>
 8009ba8:	f000 f9e6 	bl	8009f78 <_sbrk_r>
 8009bac:	6030      	str	r0, [r6, #0]
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f000 f9e1 	bl	8009f78 <_sbrk_r>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	d00a      	beq.n	8009bd0 <sbrk_aligned+0x34>
 8009bba:	1cc4      	adds	r4, r0, #3
 8009bbc:	f024 0403 	bic.w	r4, r4, #3
 8009bc0:	42a0      	cmp	r0, r4
 8009bc2:	d007      	beq.n	8009bd4 <sbrk_aligned+0x38>
 8009bc4:	1a21      	subs	r1, r4, r0
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f9d6 	bl	8009f78 <_sbrk_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d101      	bne.n	8009bd4 <sbrk_aligned+0x38>
 8009bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	20000720 	.word	0x20000720

08009bdc <_malloc_r>:
 8009bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be0:	1ccd      	adds	r5, r1, #3
 8009be2:	f025 0503 	bic.w	r5, r5, #3
 8009be6:	3508      	adds	r5, #8
 8009be8:	2d0c      	cmp	r5, #12
 8009bea:	bf38      	it	cc
 8009bec:	250c      	movcc	r5, #12
 8009bee:	2d00      	cmp	r5, #0
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	db01      	blt.n	8009bf8 <_malloc_r+0x1c>
 8009bf4:	42a9      	cmp	r1, r5
 8009bf6:	d905      	bls.n	8009c04 <_malloc_r+0x28>
 8009bf8:	230c      	movs	r3, #12
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	4630      	mov	r0, r6
 8009c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c04:	4e2e      	ldr	r6, [pc, #184]	; (8009cc0 <_malloc_r+0xe4>)
 8009c06:	f000 faa3 	bl	800a150 <__malloc_lock>
 8009c0a:	6833      	ldr	r3, [r6, #0]
 8009c0c:	461c      	mov	r4, r3
 8009c0e:	bb34      	cbnz	r4, 8009c5e <_malloc_r+0x82>
 8009c10:	4629      	mov	r1, r5
 8009c12:	4638      	mov	r0, r7
 8009c14:	f7ff ffc2 	bl	8009b9c <sbrk_aligned>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	d14d      	bne.n	8009cba <_malloc_r+0xde>
 8009c1e:	6834      	ldr	r4, [r6, #0]
 8009c20:	4626      	mov	r6, r4
 8009c22:	2e00      	cmp	r6, #0
 8009c24:	d140      	bne.n	8009ca8 <_malloc_r+0xcc>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	eb04 0803 	add.w	r8, r4, r3
 8009c30:	f000 f9a2 	bl	8009f78 <_sbrk_r>
 8009c34:	4580      	cmp	r8, r0
 8009c36:	d13a      	bne.n	8009cae <_malloc_r+0xd2>
 8009c38:	6821      	ldr	r1, [r4, #0]
 8009c3a:	3503      	adds	r5, #3
 8009c3c:	1a6d      	subs	r5, r5, r1
 8009c3e:	f025 0503 	bic.w	r5, r5, #3
 8009c42:	3508      	adds	r5, #8
 8009c44:	2d0c      	cmp	r5, #12
 8009c46:	bf38      	it	cc
 8009c48:	250c      	movcc	r5, #12
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	f7ff ffa5 	bl	8009b9c <sbrk_aligned>
 8009c52:	3001      	adds	r0, #1
 8009c54:	d02b      	beq.n	8009cae <_malloc_r+0xd2>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	442b      	add	r3, r5
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	e00e      	b.n	8009c7c <_malloc_r+0xa0>
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	1b52      	subs	r2, r2, r5
 8009c62:	d41e      	bmi.n	8009ca2 <_malloc_r+0xc6>
 8009c64:	2a0b      	cmp	r2, #11
 8009c66:	d916      	bls.n	8009c96 <_malloc_r+0xba>
 8009c68:	1961      	adds	r1, r4, r5
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	6025      	str	r5, [r4, #0]
 8009c6e:	bf18      	it	ne
 8009c70:	6059      	strne	r1, [r3, #4]
 8009c72:	6863      	ldr	r3, [r4, #4]
 8009c74:	bf08      	it	eq
 8009c76:	6031      	streq	r1, [r6, #0]
 8009c78:	5162      	str	r2, [r4, r5]
 8009c7a:	604b      	str	r3, [r1, #4]
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f104 060b 	add.w	r6, r4, #11
 8009c82:	f000 fa6b 	bl	800a15c <__malloc_unlock>
 8009c86:	f026 0607 	bic.w	r6, r6, #7
 8009c8a:	1d23      	adds	r3, r4, #4
 8009c8c:	1af2      	subs	r2, r6, r3
 8009c8e:	d0b6      	beq.n	8009bfe <_malloc_r+0x22>
 8009c90:	1b9b      	subs	r3, r3, r6
 8009c92:	50a3      	str	r3, [r4, r2]
 8009c94:	e7b3      	b.n	8009bfe <_malloc_r+0x22>
 8009c96:	6862      	ldr	r2, [r4, #4]
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	bf0c      	ite	eq
 8009c9c:	6032      	streq	r2, [r6, #0]
 8009c9e:	605a      	strne	r2, [r3, #4]
 8009ca0:	e7ec      	b.n	8009c7c <_malloc_r+0xa0>
 8009ca2:	4623      	mov	r3, r4
 8009ca4:	6864      	ldr	r4, [r4, #4]
 8009ca6:	e7b2      	b.n	8009c0e <_malloc_r+0x32>
 8009ca8:	4634      	mov	r4, r6
 8009caa:	6876      	ldr	r6, [r6, #4]
 8009cac:	e7b9      	b.n	8009c22 <_malloc_r+0x46>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	603b      	str	r3, [r7, #0]
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	f000 fa52 	bl	800a15c <__malloc_unlock>
 8009cb8:	e7a1      	b.n	8009bfe <_malloc_r+0x22>
 8009cba:	6025      	str	r5, [r4, #0]
 8009cbc:	e7de      	b.n	8009c7c <_malloc_r+0xa0>
 8009cbe:	bf00      	nop
 8009cc0:	2000071c 	.word	0x2000071c

08009cc4 <__sfputc_r>:
 8009cc4:	6893      	ldr	r3, [r2, #8]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	b410      	push	{r4}
 8009ccc:	6093      	str	r3, [r2, #8]
 8009cce:	da08      	bge.n	8009ce2 <__sfputc_r+0x1e>
 8009cd0:	6994      	ldr	r4, [r2, #24]
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	db01      	blt.n	8009cda <__sfputc_r+0x16>
 8009cd6:	290a      	cmp	r1, #10
 8009cd8:	d103      	bne.n	8009ce2 <__sfputc_r+0x1e>
 8009cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cde:	f7fe ba03 	b.w	80080e8 <__swbuf_r>
 8009ce2:	6813      	ldr	r3, [r2, #0]
 8009ce4:	1c58      	adds	r0, r3, #1
 8009ce6:	6010      	str	r0, [r2, #0]
 8009ce8:	7019      	strb	r1, [r3, #0]
 8009cea:	4608      	mov	r0, r1
 8009cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <__sfputs_r>:
 8009cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	460f      	mov	r7, r1
 8009cf8:	4614      	mov	r4, r2
 8009cfa:	18d5      	adds	r5, r2, r3
 8009cfc:	42ac      	cmp	r4, r5
 8009cfe:	d101      	bne.n	8009d04 <__sfputs_r+0x12>
 8009d00:	2000      	movs	r0, #0
 8009d02:	e007      	b.n	8009d14 <__sfputs_r+0x22>
 8009d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d08:	463a      	mov	r2, r7
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ffda 	bl	8009cc4 <__sfputc_r>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d1f3      	bne.n	8009cfc <__sfputs_r+0xa>
 8009d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d18 <_vfiprintf_r>:
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	b09d      	sub	sp, #116	; 0x74
 8009d20:	4614      	mov	r4, r2
 8009d22:	4698      	mov	r8, r3
 8009d24:	4606      	mov	r6, r0
 8009d26:	b118      	cbz	r0, 8009d30 <_vfiprintf_r+0x18>
 8009d28:	6983      	ldr	r3, [r0, #24]
 8009d2a:	b90b      	cbnz	r3, 8009d30 <_vfiprintf_r+0x18>
 8009d2c:	f7ff fa30 	bl	8009190 <__sinit>
 8009d30:	4b89      	ldr	r3, [pc, #548]	; (8009f58 <_vfiprintf_r+0x240>)
 8009d32:	429d      	cmp	r5, r3
 8009d34:	d11b      	bne.n	8009d6e <_vfiprintf_r+0x56>
 8009d36:	6875      	ldr	r5, [r6, #4]
 8009d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d3a:	07d9      	lsls	r1, r3, #31
 8009d3c:	d405      	bmi.n	8009d4a <_vfiprintf_r+0x32>
 8009d3e:	89ab      	ldrh	r3, [r5, #12]
 8009d40:	059a      	lsls	r2, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_vfiprintf_r+0x32>
 8009d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d46:	f7ff fac6 	bl	80092d6 <__retarget_lock_acquire_recursive>
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	071b      	lsls	r3, r3, #28
 8009d4e:	d501      	bpl.n	8009d54 <_vfiprintf_r+0x3c>
 8009d50:	692b      	ldr	r3, [r5, #16]
 8009d52:	b9eb      	cbnz	r3, 8009d90 <_vfiprintf_r+0x78>
 8009d54:	4629      	mov	r1, r5
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7fe fa18 	bl	800818c <__swsetup_r>
 8009d5c:	b1c0      	cbz	r0, 8009d90 <_vfiprintf_r+0x78>
 8009d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d60:	07dc      	lsls	r4, r3, #31
 8009d62:	d50e      	bpl.n	8009d82 <_vfiprintf_r+0x6a>
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	b01d      	add	sp, #116	; 0x74
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	4b7b      	ldr	r3, [pc, #492]	; (8009f5c <_vfiprintf_r+0x244>)
 8009d70:	429d      	cmp	r5, r3
 8009d72:	d101      	bne.n	8009d78 <_vfiprintf_r+0x60>
 8009d74:	68b5      	ldr	r5, [r6, #8]
 8009d76:	e7df      	b.n	8009d38 <_vfiprintf_r+0x20>
 8009d78:	4b79      	ldr	r3, [pc, #484]	; (8009f60 <_vfiprintf_r+0x248>)
 8009d7a:	429d      	cmp	r5, r3
 8009d7c:	bf08      	it	eq
 8009d7e:	68f5      	ldreq	r5, [r6, #12]
 8009d80:	e7da      	b.n	8009d38 <_vfiprintf_r+0x20>
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	0598      	lsls	r0, r3, #22
 8009d86:	d4ed      	bmi.n	8009d64 <_vfiprintf_r+0x4c>
 8009d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d8a:	f7ff faa5 	bl	80092d8 <__retarget_lock_release_recursive>
 8009d8e:	e7e9      	b.n	8009d64 <_vfiprintf_r+0x4c>
 8009d90:	2300      	movs	r3, #0
 8009d92:	9309      	str	r3, [sp, #36]	; 0x24
 8009d94:	2320      	movs	r3, #32
 8009d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d9e:	2330      	movs	r3, #48	; 0x30
 8009da0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f64 <_vfiprintf_r+0x24c>
 8009da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009da8:	f04f 0901 	mov.w	r9, #1
 8009dac:	4623      	mov	r3, r4
 8009dae:	469a      	mov	sl, r3
 8009db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009db4:	b10a      	cbz	r2, 8009dba <_vfiprintf_r+0xa2>
 8009db6:	2a25      	cmp	r2, #37	; 0x25
 8009db8:	d1f9      	bne.n	8009dae <_vfiprintf_r+0x96>
 8009dba:	ebba 0b04 	subs.w	fp, sl, r4
 8009dbe:	d00b      	beq.n	8009dd8 <_vfiprintf_r+0xc0>
 8009dc0:	465b      	mov	r3, fp
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	f7ff ff93 	bl	8009cf2 <__sfputs_r>
 8009dcc:	3001      	adds	r0, #1
 8009dce:	f000 80aa 	beq.w	8009f26 <_vfiprintf_r+0x20e>
 8009dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dd4:	445a      	add	r2, fp
 8009dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8009dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 80a2 	beq.w	8009f26 <_vfiprintf_r+0x20e>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295
 8009de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dec:	f10a 0a01 	add.w	sl, sl, #1
 8009df0:	9304      	str	r3, [sp, #16]
 8009df2:	9307      	str	r3, [sp, #28]
 8009df4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009df8:	931a      	str	r3, [sp, #104]	; 0x68
 8009dfa:	4654      	mov	r4, sl
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e02:	4858      	ldr	r0, [pc, #352]	; (8009f64 <_vfiprintf_r+0x24c>)
 8009e04:	f7f6 f9fc 	bl	8000200 <memchr>
 8009e08:	9a04      	ldr	r2, [sp, #16]
 8009e0a:	b9d8      	cbnz	r0, 8009e44 <_vfiprintf_r+0x12c>
 8009e0c:	06d1      	lsls	r1, r2, #27
 8009e0e:	bf44      	itt	mi
 8009e10:	2320      	movmi	r3, #32
 8009e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e16:	0713      	lsls	r3, r2, #28
 8009e18:	bf44      	itt	mi
 8009e1a:	232b      	movmi	r3, #43	; 0x2b
 8009e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e20:	f89a 3000 	ldrb.w	r3, [sl]
 8009e24:	2b2a      	cmp	r3, #42	; 0x2a
 8009e26:	d015      	beq.n	8009e54 <_vfiprintf_r+0x13c>
 8009e28:	9a07      	ldr	r2, [sp, #28]
 8009e2a:	4654      	mov	r4, sl
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f04f 0c0a 	mov.w	ip, #10
 8009e32:	4621      	mov	r1, r4
 8009e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e38:	3b30      	subs	r3, #48	; 0x30
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	d94e      	bls.n	8009edc <_vfiprintf_r+0x1c4>
 8009e3e:	b1b0      	cbz	r0, 8009e6e <_vfiprintf_r+0x156>
 8009e40:	9207      	str	r2, [sp, #28]
 8009e42:	e014      	b.n	8009e6e <_vfiprintf_r+0x156>
 8009e44:	eba0 0308 	sub.w	r3, r0, r8
 8009e48:	fa09 f303 	lsl.w	r3, r9, r3
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	9304      	str	r3, [sp, #16]
 8009e50:	46a2      	mov	sl, r4
 8009e52:	e7d2      	b.n	8009dfa <_vfiprintf_r+0xe2>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	1d19      	adds	r1, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	9103      	str	r1, [sp, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfbb      	ittet	lt
 8009e60:	425b      	neglt	r3, r3
 8009e62:	f042 0202 	orrlt.w	r2, r2, #2
 8009e66:	9307      	strge	r3, [sp, #28]
 8009e68:	9307      	strlt	r3, [sp, #28]
 8009e6a:	bfb8      	it	lt
 8009e6c:	9204      	strlt	r2, [sp, #16]
 8009e6e:	7823      	ldrb	r3, [r4, #0]
 8009e70:	2b2e      	cmp	r3, #46	; 0x2e
 8009e72:	d10c      	bne.n	8009e8e <_vfiprintf_r+0x176>
 8009e74:	7863      	ldrb	r3, [r4, #1]
 8009e76:	2b2a      	cmp	r3, #42	; 0x2a
 8009e78:	d135      	bne.n	8009ee6 <_vfiprintf_r+0x1ce>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	1d1a      	adds	r2, r3, #4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	9203      	str	r2, [sp, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bfb8      	it	lt
 8009e86:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e8a:	3402      	adds	r4, #2
 8009e8c:	9305      	str	r3, [sp, #20]
 8009e8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f74 <_vfiprintf_r+0x25c>
 8009e92:	7821      	ldrb	r1, [r4, #0]
 8009e94:	2203      	movs	r2, #3
 8009e96:	4650      	mov	r0, sl
 8009e98:	f7f6 f9b2 	bl	8000200 <memchr>
 8009e9c:	b140      	cbz	r0, 8009eb0 <_vfiprintf_r+0x198>
 8009e9e:	2340      	movs	r3, #64	; 0x40
 8009ea0:	eba0 000a 	sub.w	r0, r0, sl
 8009ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ea8:	9b04      	ldr	r3, [sp, #16]
 8009eaa:	4303      	orrs	r3, r0
 8009eac:	3401      	adds	r4, #1
 8009eae:	9304      	str	r3, [sp, #16]
 8009eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eb4:	482c      	ldr	r0, [pc, #176]	; (8009f68 <_vfiprintf_r+0x250>)
 8009eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eba:	2206      	movs	r2, #6
 8009ebc:	f7f6 f9a0 	bl	8000200 <memchr>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d03f      	beq.n	8009f44 <_vfiprintf_r+0x22c>
 8009ec4:	4b29      	ldr	r3, [pc, #164]	; (8009f6c <_vfiprintf_r+0x254>)
 8009ec6:	bb1b      	cbnz	r3, 8009f10 <_vfiprintf_r+0x1f8>
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	3307      	adds	r3, #7
 8009ecc:	f023 0307 	bic.w	r3, r3, #7
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	9303      	str	r3, [sp, #12]
 8009ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ed6:	443b      	add	r3, r7
 8009ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eda:	e767      	b.n	8009dac <_vfiprintf_r+0x94>
 8009edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	e7a5      	b.n	8009e32 <_vfiprintf_r+0x11a>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	3401      	adds	r4, #1
 8009eea:	9305      	str	r3, [sp, #20]
 8009eec:	4619      	mov	r1, r3
 8009eee:	f04f 0c0a 	mov.w	ip, #10
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ef8:	3a30      	subs	r2, #48	; 0x30
 8009efa:	2a09      	cmp	r2, #9
 8009efc:	d903      	bls.n	8009f06 <_vfiprintf_r+0x1ee>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0c5      	beq.n	8009e8e <_vfiprintf_r+0x176>
 8009f02:	9105      	str	r1, [sp, #20]
 8009f04:	e7c3      	b.n	8009e8e <_vfiprintf_r+0x176>
 8009f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e7f0      	b.n	8009ef2 <_vfiprintf_r+0x1da>
 8009f10:	ab03      	add	r3, sp, #12
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	462a      	mov	r2, r5
 8009f16:	4b16      	ldr	r3, [pc, #88]	; (8009f70 <_vfiprintf_r+0x258>)
 8009f18:	a904      	add	r1, sp, #16
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7fd fc8c 	bl	8007838 <_printf_float>
 8009f20:	4607      	mov	r7, r0
 8009f22:	1c78      	adds	r0, r7, #1
 8009f24:	d1d6      	bne.n	8009ed4 <_vfiprintf_r+0x1bc>
 8009f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f28:	07d9      	lsls	r1, r3, #31
 8009f2a:	d405      	bmi.n	8009f38 <_vfiprintf_r+0x220>
 8009f2c:	89ab      	ldrh	r3, [r5, #12]
 8009f2e:	059a      	lsls	r2, r3, #22
 8009f30:	d402      	bmi.n	8009f38 <_vfiprintf_r+0x220>
 8009f32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f34:	f7ff f9d0 	bl	80092d8 <__retarget_lock_release_recursive>
 8009f38:	89ab      	ldrh	r3, [r5, #12]
 8009f3a:	065b      	lsls	r3, r3, #25
 8009f3c:	f53f af12 	bmi.w	8009d64 <_vfiprintf_r+0x4c>
 8009f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f42:	e711      	b.n	8009d68 <_vfiprintf_r+0x50>
 8009f44:	ab03      	add	r3, sp, #12
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	462a      	mov	r2, r5
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <_vfiprintf_r+0x258>)
 8009f4c:	a904      	add	r1, sp, #16
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7fd ff16 	bl	8007d80 <_printf_i>
 8009f54:	e7e4      	b.n	8009f20 <_vfiprintf_r+0x208>
 8009f56:	bf00      	nop
 8009f58:	0800a4c8 	.word	0x0800a4c8
 8009f5c:	0800a4e8 	.word	0x0800a4e8
 8009f60:	0800a4a8 	.word	0x0800a4a8
 8009f64:	0800a664 	.word	0x0800a664
 8009f68:	0800a66e 	.word	0x0800a66e
 8009f6c:	08007839 	.word	0x08007839
 8009f70:	08009cf3 	.word	0x08009cf3
 8009f74:	0800a66a 	.word	0x0800a66a

08009f78 <_sbrk_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	; (8009f94 <_sbrk_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f7 fcc4 	bl	8001910 <_sbrk>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_sbrk_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_sbrk_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	20000724 	.word	0x20000724

08009f98 <__sread>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa0:	f000 f8e2 	bl	800a168 <_read_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	bfab      	itete	ge
 8009fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009faa:	89a3      	ldrhlt	r3, [r4, #12]
 8009fac:	181b      	addge	r3, r3, r0
 8009fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fb2:	bfac      	ite	ge
 8009fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fb6:	81a3      	strhlt	r3, [r4, #12]
 8009fb8:	bd10      	pop	{r4, pc}

08009fba <__swrite>:
 8009fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbe:	461f      	mov	r7, r3
 8009fc0:	898b      	ldrh	r3, [r1, #12]
 8009fc2:	05db      	lsls	r3, r3, #23
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	4616      	mov	r6, r2
 8009fca:	d505      	bpl.n	8009fd8 <__swrite+0x1e>
 8009fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f000 f898 	bl	800a108 <_lseek_r>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	4628      	mov	r0, r5
 8009fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	f000 b817 	b.w	800a020 <_write_r>

08009ff2 <__sseek>:
 8009ff2:	b510      	push	{r4, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffa:	f000 f885 	bl	800a108 <_lseek_r>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	bf15      	itete	ne
 800a004:	6560      	strne	r0, [r4, #84]	; 0x54
 800a006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a00a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a00e:	81a3      	strheq	r3, [r4, #12]
 800a010:	bf18      	it	ne
 800a012:	81a3      	strhne	r3, [r4, #12]
 800a014:	bd10      	pop	{r4, pc}

0800a016 <__sclose>:
 800a016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01a:	f000 b831 	b.w	800a080 <_close_r>
	...

0800a020 <_write_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	; (800a040 <_write_r+0x20>)
 800a024:	4604      	mov	r4, r0
 800a026:	4608      	mov	r0, r1
 800a028:	4611      	mov	r1, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	602a      	str	r2, [r5, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	f7f7 fc1d 	bl	800186e <_write>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_write_r+0x1e>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_write_r+0x1e>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	20000724 	.word	0x20000724

0800a044 <__assert_func>:
 800a044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a046:	4614      	mov	r4, r2
 800a048:	461a      	mov	r2, r3
 800a04a:	4b09      	ldr	r3, [pc, #36]	; (800a070 <__assert_func+0x2c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4605      	mov	r5, r0
 800a050:	68d8      	ldr	r0, [r3, #12]
 800a052:	b14c      	cbz	r4, 800a068 <__assert_func+0x24>
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <__assert_func+0x30>)
 800a056:	9100      	str	r1, [sp, #0]
 800a058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a05c:	4906      	ldr	r1, [pc, #24]	; (800a078 <__assert_func+0x34>)
 800a05e:	462b      	mov	r3, r5
 800a060:	f000 f81e 	bl	800a0a0 <fiprintf>
 800a064:	f000 f89f 	bl	800a1a6 <abort>
 800a068:	4b04      	ldr	r3, [pc, #16]	; (800a07c <__assert_func+0x38>)
 800a06a:	461c      	mov	r4, r3
 800a06c:	e7f3      	b.n	800a056 <__assert_func+0x12>
 800a06e:	bf00      	nop
 800a070:	2000000c 	.word	0x2000000c
 800a074:	0800a675 	.word	0x0800a675
 800a078:	0800a682 	.word	0x0800a682
 800a07c:	0800a6b0 	.word	0x0800a6b0

0800a080 <_close_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d06      	ldr	r5, [pc, #24]	; (800a09c <_close_r+0x1c>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	f7f7 fc0b 	bl	80018a6 <_close>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_close_r+0x1a>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_close_r+0x1a>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	20000724 	.word	0x20000724

0800a0a0 <fiprintf>:
 800a0a0:	b40e      	push	{r1, r2, r3}
 800a0a2:	b503      	push	{r0, r1, lr}
 800a0a4:	4601      	mov	r1, r0
 800a0a6:	ab03      	add	r3, sp, #12
 800a0a8:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <fiprintf+0x20>)
 800a0aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ae:	6800      	ldr	r0, [r0, #0]
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	f7ff fe31 	bl	8009d18 <_vfiprintf_r>
 800a0b6:	b002      	add	sp, #8
 800a0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0bc:	b003      	add	sp, #12
 800a0be:	4770      	bx	lr
 800a0c0:	2000000c 	.word	0x2000000c

0800a0c4 <_fstat_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4d07      	ldr	r5, [pc, #28]	; (800a0e4 <_fstat_r+0x20>)
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	f7f7 fbf4 	bl	80018be <_fstat>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	d102      	bne.n	800a0e0 <_fstat_r+0x1c>
 800a0da:	682b      	ldr	r3, [r5, #0]
 800a0dc:	b103      	cbz	r3, 800a0e0 <_fstat_r+0x1c>
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	bd38      	pop	{r3, r4, r5, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000724 	.word	0x20000724

0800a0e8 <_isatty_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d06      	ldr	r5, [pc, #24]	; (800a104 <_isatty_r+0x1c>)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	f7f7 fbf3 	bl	80018de <_isatty>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_isatty_r+0x1a>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_isatty_r+0x1a>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20000724 	.word	0x20000724

0800a108 <_lseek_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d07      	ldr	r5, [pc, #28]	; (800a128 <_lseek_r+0x20>)
 800a10c:	4604      	mov	r4, r0
 800a10e:	4608      	mov	r0, r1
 800a110:	4611      	mov	r1, r2
 800a112:	2200      	movs	r2, #0
 800a114:	602a      	str	r2, [r5, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	f7f7 fbec 	bl	80018f4 <_lseek>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_lseek_r+0x1e>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b103      	cbz	r3, 800a126 <_lseek_r+0x1e>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	20000724 	.word	0x20000724

0800a12c <__ascii_mbtowc>:
 800a12c:	b082      	sub	sp, #8
 800a12e:	b901      	cbnz	r1, 800a132 <__ascii_mbtowc+0x6>
 800a130:	a901      	add	r1, sp, #4
 800a132:	b142      	cbz	r2, 800a146 <__ascii_mbtowc+0x1a>
 800a134:	b14b      	cbz	r3, 800a14a <__ascii_mbtowc+0x1e>
 800a136:	7813      	ldrb	r3, [r2, #0]
 800a138:	600b      	str	r3, [r1, #0]
 800a13a:	7812      	ldrb	r2, [r2, #0]
 800a13c:	1e10      	subs	r0, r2, #0
 800a13e:	bf18      	it	ne
 800a140:	2001      	movne	r0, #1
 800a142:	b002      	add	sp, #8
 800a144:	4770      	bx	lr
 800a146:	4610      	mov	r0, r2
 800a148:	e7fb      	b.n	800a142 <__ascii_mbtowc+0x16>
 800a14a:	f06f 0001 	mvn.w	r0, #1
 800a14e:	e7f8      	b.n	800a142 <__ascii_mbtowc+0x16>

0800a150 <__malloc_lock>:
 800a150:	4801      	ldr	r0, [pc, #4]	; (800a158 <__malloc_lock+0x8>)
 800a152:	f7ff b8c0 	b.w	80092d6 <__retarget_lock_acquire_recursive>
 800a156:	bf00      	nop
 800a158:	20000718 	.word	0x20000718

0800a15c <__malloc_unlock>:
 800a15c:	4801      	ldr	r0, [pc, #4]	; (800a164 <__malloc_unlock+0x8>)
 800a15e:	f7ff b8bb 	b.w	80092d8 <__retarget_lock_release_recursive>
 800a162:	bf00      	nop
 800a164:	20000718 	.word	0x20000718

0800a168 <_read_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4d07      	ldr	r5, [pc, #28]	; (800a188 <_read_r+0x20>)
 800a16c:	4604      	mov	r4, r0
 800a16e:	4608      	mov	r0, r1
 800a170:	4611      	mov	r1, r2
 800a172:	2200      	movs	r2, #0
 800a174:	602a      	str	r2, [r5, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	f7f7 fb5c 	bl	8001834 <_read>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_read_r+0x1e>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_read_r+0x1e>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	20000724 	.word	0x20000724

0800a18c <__ascii_wctomb>:
 800a18c:	b149      	cbz	r1, 800a1a2 <__ascii_wctomb+0x16>
 800a18e:	2aff      	cmp	r2, #255	; 0xff
 800a190:	bf85      	ittet	hi
 800a192:	238a      	movhi	r3, #138	; 0x8a
 800a194:	6003      	strhi	r3, [r0, #0]
 800a196:	700a      	strbls	r2, [r1, #0]
 800a198:	f04f 30ff 	movhi.w	r0, #4294967295
 800a19c:	bf98      	it	ls
 800a19e:	2001      	movls	r0, #1
 800a1a0:	4770      	bx	lr
 800a1a2:	4608      	mov	r0, r1
 800a1a4:	4770      	bx	lr

0800a1a6 <abort>:
 800a1a6:	b508      	push	{r3, lr}
 800a1a8:	2006      	movs	r0, #6
 800a1aa:	f000 f82b 	bl	800a204 <raise>
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	f7f7 fb36 	bl	8001820 <_exit>

0800a1b4 <_raise_r>:
 800a1b4:	291f      	cmp	r1, #31
 800a1b6:	b538      	push	{r3, r4, r5, lr}
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	d904      	bls.n	800a1c8 <_raise_r+0x14>
 800a1be:	2316      	movs	r3, #22
 800a1c0:	6003      	str	r3, [r0, #0]
 800a1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1ca:	b112      	cbz	r2, 800a1d2 <_raise_r+0x1e>
 800a1cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1d0:	b94b      	cbnz	r3, 800a1e6 <_raise_r+0x32>
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 f830 	bl	800a238 <_getpid_r>
 800a1d8:	462a      	mov	r2, r5
 800a1da:	4601      	mov	r1, r0
 800a1dc:	4620      	mov	r0, r4
 800a1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e2:	f000 b817 	b.w	800a214 <_kill_r>
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d00a      	beq.n	800a200 <_raise_r+0x4c>
 800a1ea:	1c59      	adds	r1, r3, #1
 800a1ec:	d103      	bne.n	800a1f6 <_raise_r+0x42>
 800a1ee:	2316      	movs	r3, #22
 800a1f0:	6003      	str	r3, [r0, #0]
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	e7e7      	b.n	800a1c6 <_raise_r+0x12>
 800a1f6:	2400      	movs	r4, #0
 800a1f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	4798      	blx	r3
 800a200:	2000      	movs	r0, #0
 800a202:	e7e0      	b.n	800a1c6 <_raise_r+0x12>

0800a204 <raise>:
 800a204:	4b02      	ldr	r3, [pc, #8]	; (800a210 <raise+0xc>)
 800a206:	4601      	mov	r1, r0
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	f7ff bfd3 	b.w	800a1b4 <_raise_r>
 800a20e:	bf00      	nop
 800a210:	2000000c 	.word	0x2000000c

0800a214 <_kill_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_kill_r+0x20>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	4611      	mov	r1, r2
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	f7f7 faed 	bl	8001800 <_kill>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d102      	bne.n	800a230 <_kill_r+0x1c>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	b103      	cbz	r3, 800a230 <_kill_r+0x1c>
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	bd38      	pop	{r3, r4, r5, pc}
 800a232:	bf00      	nop
 800a234:	20000724 	.word	0x20000724

0800a238 <_getpid_r>:
 800a238:	f7f7 bada 	b.w	80017f0 <_getpid>

0800a23c <_init>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	bf00      	nop
 800a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a242:	bc08      	pop	{r3}
 800a244:	469e      	mov	lr, r3
 800a246:	4770      	bx	lr

0800a248 <_fini>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	bf00      	nop
 800a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24e:	bc08      	pop	{r3}
 800a250:	469e      	mov	lr, r3
 800a252:	4770      	bx	lr
