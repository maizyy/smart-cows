
smart-cows-stm32-my.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d71c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800d8b0  0800d8b0  0001d8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df34  0800df34  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800df34  0800df34  0001df34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df3c  0800df3c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df40  0800df40  0001df40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800df44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001e0  0800e124  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  0800e124  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d30a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f02  00000000  00000000  0003d51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00041420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00042cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8cb  00000000  00000000  000443b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9c0  00000000  00000000  00070c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ff24  00000000  00000000  0008f643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f98  00000000  00000000  0019f5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d894 	.word	0x0800d894

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d894 	.word	0x0800d894

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <MX_ADC1_Init+0xfc>)
 800103c:	4a36      	ldr	r2, [pc, #216]	; (8001118 <MX_ADC1_Init+0x100>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_ADC1_Init+0xfc>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <MX_ADC1_Init+0xfc>)
 800105a:	2204      	movs	r2, #4
 800105c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001060:	2200      	movs	r2, #0
 8001062:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001066:	2200      	movs	r2, #0
 8001068:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_ADC1_Init+0xfc>)
 800106c:	2201      	movs	r2, #1
 800106e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_ADC1_Init+0xfc>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_ADC1_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_ADC1_Init+0xfc>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_ADC1_Init+0xfc>)
 800109c:	221c      	movs	r2, #28
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010b6:	f001 f9af 	bl	8002418 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010c0:	f000 fb4a 	bl	8001758 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010d0:	f002 fa20 	bl	8003514 <HAL_ADCEx_MultiModeConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010da:	f000 fb3d 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_ADC1_Init+0x104>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010e6:	2307      	movs	r3, #7
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	237f      	movs	r3, #127	; 0x7f
 80010ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_ADC1_Init+0xfc>)
 80010fc:	f001 fc82 	bl	8002a04 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8001106:	f000 fb27 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001fc 	.word	0x200001fc
 8001118:	50040000 	.word	0x50040000
 800111c:	04300002 	.word	0x04300002

08001120 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ac      	sub	sp, #176	; 0xb0
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2288      	movs	r2, #136	; 0x88
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f007 fa75 	bl	8008630 <memset>
  if(adcHandle->Instance==ADC1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_ADC_MspInit+0xc8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d146      	bne.n	80011de <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001154:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800115a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001166:	2310      	movs	r3, #16
 8001168:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fceb 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800118c:	f000 fae4 	bl	8001758 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 8001196:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800119a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_ADC_MspInit+0xcc>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c6:	230b      	movs	r3, #11
 80011c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_ADC_MspInit+0xd0>)
 80011da:	f002 fbdb 	bl	8003994 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011de:	bf00      	nop
 80011e0:	37b0      	adds	r7, #176	; 0xb0
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	50040000 	.word	0x50040000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000800 	.word	0x48000800

080011f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_GPIO_Init+0x78>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <MX_GPIO_Init+0x78>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_GPIO_Init+0x78>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_GPIO_Init+0x78>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <MX_GPIO_Init+0x78>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_GPIO_Init+0x78>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPS_POWER_Pin|DS_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2141      	movs	r1, #65	; 0x41
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f002 fd69 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GPS_POWER_Pin|DS_Pin;
 8001246:	2341      	movs	r3, #65	; 0x41
 8001248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f002 fb98 	bl	8003994 <HAL_GPIO_Init>

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000

08001270 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &rxData, 1, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2201      	movs	r2, #1
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001280:	4837      	ldr	r0, [pc, #220]	; (8001360 <HAL_UART_RxCpltCallback+0xf0>)
 8001282:	f004 fecf 	bl	8006024 <HAL_UART_Transmit>

	if(huart == &huart1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a36      	ldr	r2, [pc, #216]	; (8001364 <HAL_UART_RxCpltCallback+0xf4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d156      	bne.n	800133c <HAL_UART_RxCpltCallback+0xcc>
	{
		if (rxData == '\r' || rxData == '\n') {
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b0d      	cmp	r3, #13
 8001294:	d003      	beq.n	800129e <HAL_UART_RxCpltCallback+0x2e>
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b0a      	cmp	r3, #10
 800129c:	d13e      	bne.n	800131c <HAL_UART_RxCpltCallback+0xac>
			if(line_length > 0) {
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d04a      	beq.n	800133c <HAL_UART_RxCpltCallback+0xcc>
				line_buffer[line_length] = '\0';
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	54d1      	strb	r1, [r2, r3]
				if(strcmp(line_buffer, JOIN_ALREADY) == 0) {
 80012b0:	492f      	ldr	r1, [pc, #188]	; (8001370 <HAL_UART_RxCpltCallback+0x100>)
 80012b2:	482e      	ldr	r0, [pc, #184]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012b4:	f7fe ff8c 	bl	80001d0 <strcmp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_UART_RxCpltCallback+0x5c>
					connectedToNetwork = true;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_UART_RxCpltCallback+0x104>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
					networkStatusReceived = true;
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_UART_RxCpltCallback+0x108>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e023      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else if(strcmp(line_buffer, NETWORK_JOINED) == 0) {
 80012cc:	492b      	ldr	r1, [pc, #172]	; (800137c <HAL_UART_RxCpltCallback+0x10c>)
 80012ce:	4827      	ldr	r0, [pc, #156]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012d0:	f7fe ff7e 	bl	80001d0 <strcmp>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <HAL_UART_RxCpltCallback+0x72>
					connectedToNetwork = true;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_UART_RxCpltCallback+0x104>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e018      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else if (strcmp(line_buffer, JOIN_DONE) == 0) {
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <HAL_UART_RxCpltCallback+0x110>)
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012e6:	f7fe ff73 	bl	80001d0 <strcmp>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <HAL_UART_RxCpltCallback+0x88>
					networkStatusReceived = true;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_UART_RxCpltCallback+0x108>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e00d      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else if (strcmp(line_buffer, MSG_DONE) == 0) {
 80012f8:	4922      	ldr	r1, [pc, #136]	; (8001384 <HAL_UART_RxCpltCallback+0x114>)
 80012fa:	481c      	ldr	r0, [pc, #112]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 80012fc:	f7fe ff68 	bl	80001d0 <strcmp>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d103      	bne.n	800130e <HAL_UART_RxCpltCallback+0x9e>
					messageDoneStatusReceived = true;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_UART_RxCpltCallback+0x118>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e002      	b.n	8001314 <HAL_UART_RxCpltCallback+0xa4>
				} else {
					configStatusReceived = true;
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_UART_RxCpltCallback+0x11c>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
				}
				line_length = 0;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
			if(line_length > 0) {
 800131a:	e00f      	b.n	800133c <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else {
			if(line_length >= LINE_MAX_LENGTH) {
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b3b      	cmp	r3, #59	; 0x3b
 8001322:	d902      	bls.n	800132a <HAL_UART_RxCpltCallback+0xba>
				line_length = 0;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
			}
			line_buffer[line_length++] = rxData;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	490d      	ldr	r1, [pc, #52]	; (8001368 <HAL_UART_RxCpltCallback+0xf8>)
 8001332:	600a      	str	r2, [r1, #0]
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001336:	7811      	ldrb	r1, [r2, #0]
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_UART_RxCpltCallback+0xfc>)
 800133a:	54d1      	strb	r1, [r2, r3]
		}
	}

	if (huart == &huart3)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_UART_RxCpltCallback+0x120>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <HAL_UART_RxCpltCallback+0xda>
	{
		GPS_UART_Callback(&rxData);
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 8001346:	f006 ff4d 	bl	80081e4 <GPS_UART_Callback>
	}

	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	4903      	ldr	r1, [pc, #12]	; (800135c <HAL_UART_RxCpltCallback+0xec>)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_UART_RxCpltCallback+0xf4>)
 8001350:	f004 fefc 	bl	800614c <HAL_UART_Receive_IT>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000264 	.word	0x20000264
 8001360:	200003a8 	.word	0x200003a8
 8001364:	20000324 	.word	0x20000324
 8001368:	200002a8 	.word	0x200002a8
 800136c:	20000268 	.word	0x20000268
 8001370:	0800d8b0 	.word	0x0800d8b0
 8001374:	20000260 	.word	0x20000260
 8001378:	20000261 	.word	0x20000261
 800137c:	0800d8c8 	.word	0x0800d8c8
 8001380:	0800d8e0 	.word	0x0800d8e0
 8001384:	0800d8ec 	.word	0x0800d8ec
 8001388:	20000263 	.word	0x20000263
 800138c:	20000262 	.word	0x20000262
 8001390:	2000042c 	.word	0x2000042c

08001394 <HAL_Delay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 800139c:	f000 fe26 	bl	8001fec <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

	if(wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d00b      	beq.n	80013c6 <HAL_Delay+0x32>
	{
		wait += (uint32_t)uwTickFreq;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_Delay+0x4c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
	}

	while((HAL_GetTick() - tickstart) < wait)
 80013ba:	e004      	b.n	80013c6 <HAL_Delay+0x32>
	{
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013bc:	2101      	movs	r1, #1
 80013be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013c2:	f002 fcd1 	bl	8003d68 <HAL_PWR_EnterSLEEPMode>
	while((HAL_GetTick() - tickstart) < wait)
 80013c6:	f000 fe11 	bl	8001fec <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d8f2      	bhi.n	80013bc <HAL_Delay+0x28>
	}
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000008 	.word	0x20000008

080013e4 <__io_putchar>:

int __io_putchar(int ch)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if (ch == '\n'){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b0a      	cmp	r3, #10
 80013f0:	d109      	bne.n	8001406 <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 80013f2:	230d      	movs	r3, #13
 80013f4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);	// 1 - lora / 2 - pc
 80013f6:	f107 010f 	add.w	r1, r7, #15
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2201      	movs	r2, #1
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <__io_putchar+0x3c>)
 8001402:	f004 fe0f 	bl	8006024 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // 1 - lora / 2 - pc
 8001406:	1d39      	adds	r1, r7, #4
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	2201      	movs	r2, #1
 800140e:	4804      	ldr	r0, [pc, #16]	; (8001420 <__io_putchar+0x3c>)
 8001410:	f004 fe08 	bl	8006024 <HAL_UART_Transmit>
	return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000324 	.word	0x20000324

08001424 <sendConfigMessageToLora>:

void sendConfigMessageToLora(const char* msg)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	configStatusReceived = false;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <sendConfigMessageToLora+0x34>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
	printf(msg);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f007 ff7e 	bl	8009334 <iprintf>
	while(!configStatusReceived){
 8001438:	bf00      	nop
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <sendConfigMessageToLora+0x34>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f8      	bne.n	800143a <sendConfigMessageToLora+0x16>
	}
	configStatusReceived = false;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <sendConfigMessageToLora+0x34>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000262 	.word	0x20000262

0800145c <sendJoinRequestToLora>:

void sendJoinRequestToLora()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	printf("AT+JOIN\r\n");
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <sendJoinRequestToLora+0x24>)
 8001462:	f007 ffed 	bl	8009440 <puts>
	while(!networkStatusReceived){
 8001466:	bf00      	nop
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <sendJoinRequestToLora+0x28>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f083 0301 	eor.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f8      	bne.n	8001468 <sendJoinRequestToLora+0xc>
	}
	networkStatusReceived = false;
 8001476:	4b03      	ldr	r3, [pc, #12]	; (8001484 <sendJoinRequestToLora+0x28>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	0800d8f8 	.word	0x0800d8f8
 8001484:	20000261 	.word	0x20000261

08001488 <sendToPC>:

void sendToPC(char* str){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7fe fea7 	bl	80001e4 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4803      	ldr	r0, [pc, #12]	; (80014b0 <sendToPC+0x28>)
 80014a2:	f004 fdbf 	bl	8006024 <HAL_UART_Transmit>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003a8 	.word	0x200003a8

080014b4 <goToDeepSleep>:

void goToDeepSleep() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	  sendConfigMessageToLora("AT+LOWPOWER=AUTOON\r\n");
 80014b8:	4808      	ldr	r0, [pc, #32]	; (80014dc <goToDeepSleep+0x28>)
 80014ba:	f7ff ffb3 	bl	8001424 <sendConfigMessageToLora>
	  HAL_Delay(10);
 80014be:	200a      	movs	r0, #10
 80014c0:	f7ff ff68 	bl	8001394 <HAL_Delay>
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, TIME_SLEEP, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 80014c4:	2204      	movs	r2, #4
 80014c6:	210f      	movs	r1, #15
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <goToDeepSleep+0x2c>)
 80014ca:	f004 f925 	bl	8005718 <HAL_RTCEx_SetWakeUpTimer_IT>
	  sendToPC("STANDBY MODE is ON\n");
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <goToDeepSleep+0x30>)
 80014d0:	f7ff ffda 	bl	8001488 <sendToPC>
	  HAL_PWR_EnterSTANDBYMode();
 80014d4:	f002 fc7c 	bl	8003dd0 <HAL_PWR_EnterSTANDBYMode>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	0800d904 	.word	0x0800d904
 80014e0:	200002b0 	.word	0x200002b0
 80014e4:	0800d91c 	.word	0x0800d91c

080014e8 <connectToLora>:

void connectToLora()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	connectionRequestCounter++;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <connectToLora+0x60>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <connectToLora+0x60>)
 80014f4:	6013      	str	r3, [r2, #0]
	sendJoinRequestToLora();
 80014f6:	f7ff ffb1 	bl	800145c <sendJoinRequestToLora>

	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 80014fa:	e012      	b.n	8001522 <connectToLora+0x3a>
//		sendConfigMessageToLora("AT+ID=DevAddr\r\n");
//		sendConfigMessageToLora("AT+ID=DevEui\r\n");
//		sendConfigMessageToLora("AT+ID=AppEui\r\n");
//		sendConfigMessageToLora("AT+LW=VER\r\n");

		sendConfigMessageToLora("AT+DR=EU868\r\n");
 80014fc:	4813      	ldr	r0, [pc, #76]	; (800154c <connectToLora+0x64>)
 80014fe:	f7ff ff91 	bl	8001424 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+CH=NUM,0-2\r\n");
 8001502:	4813      	ldr	r0, [pc, #76]	; (8001550 <connectToLora+0x68>)
 8001504:	f7ff ff8e 	bl	8001424 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+MODE=LWOTAA\r\n");
 8001508:	4812      	ldr	r0, [pc, #72]	; (8001554 <connectToLora+0x6c>)
 800150a:	f7ff ff8b 	bl	8001424 <sendConfigMessageToLora>
		sendConfigMessageToLora("AT+KEY=APPKEY,\"D5A115FED9A381224497F0D3C9688F88\"\r\n");
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <connectToLora+0x70>)
 8001510:	f7ff ff88 	bl	8001424 <sendConfigMessageToLora>
		sendJoinRequestToLora();
 8001514:	f7ff ffa2 	bl	800145c <sendJoinRequestToLora>

		connectionRequestCounter++;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <connectToLora+0x60>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <connectToLora+0x60>)
 8001520:	6013      	str	r3, [r2, #0]
	while(connectedToNetwork == 0 && connectionRequestCounter < MAX_ATTEMPTS_CONNECTION){
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <connectToLora+0x74>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f083 0301 	eor.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <connectToLora+0x50>
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <connectToLora+0x60>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b04      	cmp	r3, #4
 8001536:	dde1      	ble.n	80014fc <connectToLora+0x14>
	}

	if(connectionRequestCounter == MAX_ATTEMPTS_CONNECTION) {
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <connectToLora+0x60>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d101      	bne.n	8001544 <connectToLora+0x5c>
		goToDeepSleep();
 8001540:	f7ff ffb8 	bl	80014b4 <goToDeepSleep>
	}
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002ac 	.word	0x200002ac
 800154c:	0800d930 	.word	0x0800d930
 8001550:	0800d940 	.word	0x0800d940
 8001554:	0800d950 	.word	0x0800d950
 8001558:	0800d964 	.word	0x0800d964
 800155c:	20000260 	.word	0x20000260

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001564:	b08a      	sub	sp, #40	; 0x28
 8001566:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001568:	f000 fcd7 	bl	8001f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156c:	f000 f89e 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001570:	f7ff fe40 	bl	80011f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001574:	f000 fb4a 	bl	8001c0c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001578:	f000 fb18 	bl	8001bac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800157c:	f7ff fd4c 	bl	8001018 <MX_ADC1_Init>
  MX_RTC_Init();
 8001580:	f000 f8f0 	bl	8001764 <MX_RTC_Init>
  MX_TIM1_Init();
 8001584:	f000 fa9e 	bl	8001ac4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001588:	f000 fb70 	bl	8001c6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if (ds18b20_init() != HAL_OK)
 800158c:	f006 feaa 	bl	80082e4 <ds18b20_init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <main+0x3a>
  {
	   Error_Handler();
 8001596:	f000 f8df 	bl	8001758 <Error_Handler>
  }
  uint8_t ds1[DS18B20_ROM_CODE_SIZE];
  while (ds18b20_read_address(ds1) != HAL_OK)
 800159a:	bf00      	nop
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f006 fea6 	bl	80082f2 <ds18b20_read_address>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f7      	bne.n	800159c <main+0x3c>
  {
	 // Error_Handler();
  }

  sendToPC("Wakeup from the STANDBY MODE\n");
 80015ac:	4834      	ldr	r0, [pc, #208]	; (8001680 <main+0x120>)
 80015ae:	f7ff ff6b 	bl	8001488 <sendToPC>

  /* Wyłączenie trybu LOW-POWER (lora) i połączenie się z siecią */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) == 0) {
 80015b2:	2102      	movs	r1, #2
 80015b4:	4833      	ldr	r0, [pc, #204]	; (8001684 <main+0x124>)
 80015b6:	f004 f98c 	bl	80058d2 <HAL_RTCEx_BKUPRead>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d108      	bne.n	80015d2 <main+0x72>
	  HAL_Delay(1200);	// Przy pierwszym włączeniu należy poczekać, aż uruchomi się moduł LoRa
 80015c0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80015c4:	f7ff fee6 	bl	8001394 <HAL_Delay>
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2102      	movs	r1, #2
 80015cc:	482d      	ldr	r0, [pc, #180]	; (8001684 <main+0x124>)
 80015ce:	f004 f967 	bl	80058a0 <HAL_RTCEx_BKUPWrite>
  }
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80015d2:	2201      	movs	r2, #1
 80015d4:	492c      	ldr	r1, [pc, #176]	; (8001688 <main+0x128>)
 80015d6:	482d      	ldr	r0, [pc, #180]	; (800168c <main+0x12c>)
 80015d8:	f004 fdb8 	bl	800614c <HAL_UART_Receive_IT>
  sendConfigMessageToLora("ÿÿÿÿAT+LOWPOWER=AUTOOFF\r\n");
 80015dc:	482c      	ldr	r0, [pc, #176]	; (8001690 <main+0x130>)
 80015de:	f7ff ff21 	bl	8001424 <sendConfigMessageToLora>
  connectToLora();
 80015e2:	f7ff ff81 	bl	80014e8 <connectToLora>

  sendToPC("\nStart GPS\n");
 80015e6:	482b      	ldr	r0, [pc, #172]	; (8001694 <main+0x134>)
 80015e8:	f7ff ff4e 	bl	8001488 <sendToPC>
  /* Właczenie modułu GPS */
  HAL_GPIO_WritePin(GPS_POWER_GPIO_Port, GPS_POWER_Pin, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2101      	movs	r1, #1
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f002 fb90 	bl	8003d18 <HAL_GPIO_WritePin>

  GPS_Init(&rxData);
 80015f8:	4823      	ldr	r0, [pc, #140]	; (8001688 <main+0x128>)
 80015fa:	f006 fddd 	bl	80081b8 <GPS_Init>
  GPS_Init(&rxData);
 80015fe:	4822      	ldr	r0, [pc, #136]	; (8001688 <main+0x128>)
 8001600:	f006 fdda 	bl	80081b8 <GPS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /** Czekanie na lokalizacje */
	  if(gpsDataReady)
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <main+0x138>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0fb      	beq.n	8001604 <main+0xa4>
	  {
		  Position currentPosition;
		  GPS_getCurrentPosition(&currentPosition);
 800160c:	463b      	mov	r3, r7
 800160e:	4618      	mov	r0, r3
 8001610:	f006 fe54 	bl	80082bc <GPS_getCurrentPosition>

		  /** Wyłączenie modułu GPS */
		  HAL_GPIO_WritePin(GPS_POWER_GPIO_Port, GPS_POWER_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2101      	movs	r1, #1
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f002 fb7c 	bl	8003d18 <HAL_GPIO_WritePin>
		  sendToPC("\nKoniec GPS\n");
 8001620:	481e      	ldr	r0, [pc, #120]	; (800169c <main+0x13c>)
 8001622:	f7ff ff31 	bl	8001488 <sendToPC>
//		  ds18b20_start_measure(NULL);
//		  float temperature = ds18b20_get_temp(NULL) - 1.5f;
//		  if (temp >= 80.0f) sendToPC("Sensor error... \r\n");
//		  else sendToPC("T1 = %.1f*C\r\n", temp);

		  battery_init(&hadc1, HAL_MAX_DELAY);
 8001626:	f04f 31ff 	mov.w	r1, #4294967295
 800162a:	481d      	ldr	r0, [pc, #116]	; (80016a0 <main+0x140>)
 800162c:	f006 fcc6 	bl	8007fbc <battery_init>
	//	  float voltage = battery_getBatteryVolts();
		  int batteryLevel = battery_getBatteryChargeLevel();
 8001630:	f006 fcde 	bl	8007ff0 <battery_getBatteryChargeLevel>
 8001634:	6178      	str	r0, [r7, #20]
		  float temperature = 0.1f;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <main+0x144>)
 8001638:	613b      	str	r3, [r7, #16]

		  printf("AT+MSG=%d_%f_%f_%f\r\n", batteryLevel, temperature, currentPosition.longitude, currentPosition.latitude);
 800163a:	6938      	ldr	r0, [r7, #16]
 800163c:	f7fe ff94 	bl	8000568 <__aeabi_f2d>
 8001640:	4680      	mov	r8, r0
 8001642:	4689      	mov	r9, r1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff8e 	bl	8000568 <__aeabi_f2d>
 800164c:	4604      	mov	r4, r0
 800164e:	460d      	mov	r5, r1
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff88 	bl	8000568 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001660:	e9cd 4500 	strd	r4, r5, [sp]
 8001664:	4642      	mov	r2, r8
 8001666:	464b      	mov	r3, r9
 8001668:	6979      	ldr	r1, [r7, #20]
 800166a:	480f      	ldr	r0, [pc, #60]	; (80016a8 <main+0x148>)
 800166c:	f007 fe62 	bl	8009334 <iprintf>
		  HAL_Delay(1000); 	// czas na wysłanie danych
 8001670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001674:	f7ff fe8e 	bl	8001394 <HAL_Delay>


		  /* Uśpienie urządzenia wraz z podłączonymi czujnikami */
		  goToDeepSleep();
 8001678:	f7ff ff1c 	bl	80014b4 <goToDeepSleep>
	  if(gpsDataReady)
 800167c:	e7c2      	b.n	8001604 <main+0xa4>
 800167e:	bf00      	nop
 8001680:	0800d998 	.word	0x0800d998
 8001684:	200002b0 	.word	0x200002b0
 8001688:	20000264 	.word	0x20000264
 800168c:	20000324 	.word	0x20000324
 8001690:	0800d9b8 	.word	0x0800d9b8
 8001694:	0800d9d8 	.word	0x0800d9d8
 8001698:	200007e8 	.word	0x200007e8
 800169c:	0800d9e4 	.word	0x0800d9e4
 80016a0:	200001fc 	.word	0x200001fc
 80016a4:	3dcccccd 	.word	0x3dcccccd
 80016a8:	0800d9f4 	.word	0x0800d9f4

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b096      	sub	sp, #88	; 0x58
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	2244      	movs	r2, #68	; 0x44
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f006 ffb8 	bl	8008630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016d2:	f002 fba5 	bl	8003e20 <HAL_PWREx_ControlVoltageScaling>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016dc:	f000 f83c 	bl	8001758 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016e0:	f002 fb32 	bl	8003d48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <SystemClock_Config+0xa8>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <SystemClock_Config+0xa8>)
 80016ec:	f023 0318 	bic.w	r3, r3, #24
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016f4:	2314      	movs	r3, #20
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001704:	2370      	movs	r3, #112	; 0x70
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fc23 	bl	8003f5c <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800171c:	f000 f81c 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f002 ffeb 	bl	8004714 <HAL_RCC_ClockConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001744:	f000 f808 	bl	8001758 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001748:	f003 fcf2 	bl	8005130 <HAL_RCCEx_EnableMSIPLLMode>
}
 800174c:	bf00      	nop
 800174e:	3758      	adds	r7, #88	; 0x58
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_RTC_Init+0x48>)
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <MX_RTC_Init+0x4c>)
 800176c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_RTC_Init+0x48>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <MX_RTC_Init+0x48>)
 8001776:	227f      	movs	r2, #127	; 0x7f
 8001778:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_RTC_Init+0x48>)
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_RTC_Init+0x48>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_RTC_Init+0x48>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <MX_RTC_Init+0x48>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_RTC_Init+0x48>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_RTC_Init+0x48>)
 800179a:	f003 feab 	bl	80054f4 <HAL_RTC_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80017a4:	f7ff ffd8 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200002b0 	.word	0x200002b0
 80017b0:	40002800 	.word	0x40002800

080017b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0a4      	sub	sp, #144	; 0x90
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	2288      	movs	r2, #136	; 0x88
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 ff33 	bl	8008630 <memset>
  if(rtcHandle->Instance==RTC)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_RTC_MspInit+0x6c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d120      	bne.n	8001816 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 f9b8 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80017f2:	f7ff ffb1 	bl	8001758 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RTC_MspInit+0x70>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RTC_MspInit+0x70>)
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2003      	movs	r0, #3
 800180c:	f002 f80d 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001810:	2003      	movs	r0, #3
 8001812:	f002 f826 	bl	8003862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	3790      	adds	r7, #144	; 0x90
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40002800 	.word	0x40002800
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_MspInit+0x44>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_MspInit+0x44>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6613      	str	r3, [r2, #96]	; 0x60
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_MspInit+0x44>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_MspInit+0x44>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_MspInit+0x44>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6593      	str	r3, [r2, #88]	; 0x58
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_MspInit+0x44>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 fb82 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <RTC_WKUP_IRQHandler+0x10>)
 80018ca:	f003 ffb9 	bl	8005840 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200002b0 	.word	0x200002b0

080018d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART1_IRQHandler+0x10>)
 80018de:	f004 fc8b 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000324 	.word	0x20000324

080018ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <USART2_IRQHandler+0x10>)
 80018f2:	f004 fc81 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200003a8 	.word	0x200003a8

08001900 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <USART3_IRQHandler+0x10>)
 8001906:	f004 fc77 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000042c 	.word	0x2000042c

08001914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_kill>:

int _kill(int pid, int sig)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800192e:	f006 fe47 	bl	80085c0 <__errno>
 8001932:	4603      	mov	r3, r0
 8001934:	2216      	movs	r2, #22
 8001936:	601a      	str	r2, [r3, #0]
	return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_exit>:

void _exit (int status)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800194c:	f04f 31ff 	mov.w	r1, #4294967295
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ffe7 	bl	8001924 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001956:	e7fe      	b.n	8001956 <_exit+0x12>

08001958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e00a      	b.n	8001980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800196a:	f3af 8000 	nop.w
 800196e:	4601      	mov	r1, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	b2ca      	uxtb	r2, r1
 8001978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf0      	blt.n	800196a <_read+0x12>
	}

return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e009      	b.n	80019b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fd19 	bl	80013e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf1      	blt.n	80019a4 <_write+0x12>
	}
	return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_close>:

int _close(int file)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	return -1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f2:	605a      	str	r2, [r3, #4]
	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_isatty>:

int _isatty(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	return 1;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	return 0;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f006 fdac 	bl	80085c0 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20018000 	.word	0x20018000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	200002d4 	.word	0x200002d4
 8001a9c:	20000858 	.word	0x20000858

08001aa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001ae4:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <MX_TIM1_Init+0xa4>)
 8001ae6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001aea:	2207      	movs	r2, #7
 8001aec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b0e:	4815      	ldr	r0, [pc, #84]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b10:	f003 fef5 	bl	80058fe <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b1a:	f7ff fe1d 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480e      	ldr	r0, [pc, #56]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b2c:	f003 ffa6 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b36:	f7ff fe0f 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b4c:	f004 f994 	bl	8005e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b56:	f7ff fdff 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200002d8 	.word	0x200002d8
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_TIM_Base_MspInit+0x38>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10b      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b88:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40021000 	.word	0x40021000

08001bac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bb2:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <MX_USART1_UART_Init+0x5c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_USART1_UART_Init+0x58>)
 8001bf0:	f004 f9ca 	bl	8005f88 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bfa:	f7ff fdad 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000324 	.word	0x20000324
 8001c08:	40013800 	.word	0x40013800

08001c0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <MX_USART2_UART_Init+0x5c>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_USART2_UART_Init+0x58>)
 8001c50:	f004 f99a 	bl	8005f88 <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c5a:	f7ff fd7d 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200003a8 	.word	0x200003a8
 8001c68:	40004400 	.word	0x40004400

08001c6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c72:	4a15      	ldr	r2, [pc, #84]	; (8001cc8 <MX_USART3_UART_Init+0x5c>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_USART3_UART_Init+0x58>)
 8001cb0:	f004 f96a 	bl	8005f88 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cba:	f7ff fd4d 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000042c 	.word	0x2000042c
 8001cc8:	40004800 	.word	0x40004800

08001ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0b0      	sub	sp, #192	; 0xc0
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	2288      	movs	r2, #136	; 0x88
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f006 fc9f 	bl	8008630 <memset>
  if(uartHandle->Instance==USART1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6f      	ldr	r2, [pc, #444]	; (8001eb4 <HAL_UART_MspInit+0x1e8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d145      	bne.n	8001d88 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d00:	2300      	movs	r3, #0
 8001d02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 ff27 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d14:	f7ff fd20 	bl	8001758 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d18:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1c:	4a66      	ldr	r2, [pc, #408]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d22:	6613      	str	r3, [r2, #96]	; 0x60
 8001d24:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2c:	623b      	str	r3, [r7, #32]
 8001d2e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	4a60      	ldr	r2, [pc, #384]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d62:	2307      	movs	r3, #7
 8001d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f001 fe0f 	bl	8003994 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2025      	movs	r0, #37	; 0x25
 8001d7c:	f001 fd55 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d80:	2025      	movs	r0, #37	; 0x25
 8001d82:	f001 fd6e 	bl	8003862 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d86:	e091      	b.n	8001eac <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <HAL_UART_MspInit+0x1f0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d144      	bne.n	8001e1c <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d92:	2302      	movs	r3, #2
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fedc 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001daa:	f7ff fcd5 	bl	8001758 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dae:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a41      	ldr	r2, [pc, #260]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dba:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dde:	230c      	movs	r3, #12
 8001de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df6:	2307      	movs	r3, #7
 8001df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f001 fdc5 	bl	8003994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2026      	movs	r0, #38	; 0x26
 8001e10:	f001 fd0b 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e14:	2026      	movs	r0, #38	; 0x26
 8001e16:	f001 fd24 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 8001e1a:	e047      	b.n	8001eac <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <HAL_UART_MspInit+0x1f4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d142      	bne.n	8001eac <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e26:	2304      	movs	r3, #4
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fe92 	bl	8004b5c <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8001e3e:	f7ff fc8b 	bl	8001758 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_UART_MspInit+0x1ec>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e72:	2330      	movs	r3, #48	; 0x30
 8001e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e94:	4619      	mov	r1, r3
 8001e96:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <HAL_UART_MspInit+0x1f8>)
 8001e98:	f001 fd7c 	bl	8003994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2027      	movs	r0, #39	; 0x27
 8001ea2:	f001 fcc2 	bl	800382a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ea6:	2027      	movs	r0, #39	; 0x27
 8001ea8:	f001 fcdb 	bl	8003862 <HAL_NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	37c0      	adds	r7, #192	; 0xc0
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40004400 	.word	0x40004400
 8001ec0:	40004800 	.word	0x40004800
 8001ec4:	48000800 	.word	0x48000800

08001ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ecc:	f7ff fde8 	bl	8001aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ed2:	490d      	ldr	r1, [pc, #52]	; (8001f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <LoopForever+0xe>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	; (8001f14 <LoopForever+0x16>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f006 fb69 	bl	80085cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efa:	f7ff fb31 	bl	8001560 <main>

08001efe <LoopForever>:

LoopForever:
    b LoopForever
 8001efe:	e7fe      	b.n	8001efe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f0c:	0800df44 	.word	0x0800df44
  ldr r2, =_sbss
 8001f10:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f14:	20000858 	.word	0x20000858

08001f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_2_IRQHandler>

08001f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f001 fc75 	bl	8003814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f000 f80e 	bl	8001f4c <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e001      	b.n	8001f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f3c:	f7ff fc74 	bl	8001828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f40:	79fb      	ldrb	r3, [r7, #7]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_InitTick+0x6c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d023      	beq.n	8001fa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_InitTick+0x70>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_InitTick+0x6c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f001 fc81 	bl	800387e <HAL_SYSTICK_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10f      	bne.n	8001fa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0f      	cmp	r3, #15
 8001f86:	d809      	bhi.n	8001f9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f001 fc4b 	bl	800382a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_InitTick+0x74>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e007      	b.n	8001fac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e004      	b.n	8001fac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	e001      	b.n	8001fac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	200004b0 	.word	0x200004b0

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200004b0 	.word	0x200004b0

08002004 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3360      	adds	r3, #96	; 0x60
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <LL_ADC_SetOffset+0x44>)
 800208e:	4013      	ands	r3, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	4313      	orrs	r3, r2
 800209c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	03fff000 	.word	0x03fff000

080020b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3360      	adds	r3, #96	; 0x60
 80020c2:	461a      	mov	r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3360      	adds	r3, #96	; 0x60
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3330      	adds	r3, #48	; 0x30
 800214c:	461a      	mov	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	211f      	movs	r1, #31
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	401a      	ands	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	f003 011f 	and.w	r1, r3, #31
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	431a      	orrs	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3314      	adds	r3, #20
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0e5b      	lsrs	r3, r3, #25
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	4413      	add	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	0d1b      	lsrs	r3, r3, #20
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2107      	movs	r1, #7
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	0d1b      	lsrs	r3, r3, #20
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	431a      	orrs	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0318 	and.w	r3, r3, #24
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002210:	40d9      	lsrs	r1, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	400b      	ands	r3, r1
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	431a      	orrs	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	0007ffff 	.word	0x0007ffff

08002234 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 031f 	and.w	r3, r3, #31
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800227c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6093      	str	r3, [r2, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a4:	d101      	bne.n	80022aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f4:	d101      	bne.n	80022fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800231c:	f043 0201 	orr.w	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <LL_ADC_IsEnabled+0x18>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_IsEnabled+0x1a>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d101      	bne.n	8002396 <LL_ADC_IsDisableOngoing+0x18>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <LL_ADC_IsDisableOngoing+0x1a>
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b8:	f043 0204 	orr.w	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d101      	bne.n	80023e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b08      	cmp	r3, #8
 8002404:	d101      	bne.n	800240a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e136      	b.n	80026a0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe fe6d 	bl	8001120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff19 	bl	8002290 <LL_ADC_IsDeepPowerDownEnabled>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff feff 	bl	800226c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff34 	bl	80022e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d115      	bne.n	80024aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff18 	bl	80022b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002488:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <HAL_ADC_Init+0x290>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	4a87      	ldr	r2, [pc, #540]	; (80026ac <HAL_ADC_Init+0x294>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	3301      	adds	r3, #1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff16 	bl	80022e0 <LL_ADC_IsInternalRegulatorEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff76 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80024e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80cf 	bne.w	800268e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 80cb 	bne.w	800268e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002500:	f043 0202 	orr.w	r2, r3, #2
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff23 	bl	8002358 <LL_ADC_IsEnabled>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d115      	bne.n	8002544 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002518:	4865      	ldr	r0, [pc, #404]	; (80026b0 <HAL_ADC_Init+0x298>)
 800251a:	f7ff ff1d 	bl	8002358 <LL_ADC_IsEnabled>
 800251e:	4604      	mov	r4, r0
 8002520:	4864      	ldr	r0, [pc, #400]	; (80026b4 <HAL_ADC_Init+0x29c>)
 8002522:	f7ff ff19 	bl	8002358 <LL_ADC_IsEnabled>
 8002526:	4603      	mov	r3, r0
 8002528:	431c      	orrs	r4, r3
 800252a:	4863      	ldr	r0, [pc, #396]	; (80026b8 <HAL_ADC_Init+0x2a0>)
 800252c:	f7ff ff14 	bl	8002358 <LL_ADC_IsEnabled>
 8002530:	4603      	mov	r3, r0
 8002532:	4323      	orrs	r3, r4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d105      	bne.n	8002544 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4619      	mov	r1, r3
 800253e:	485f      	ldr	r0, [pc, #380]	; (80026bc <HAL_ADC_Init+0x2a4>)
 8002540:	f7ff fd60 	bl	8002004 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7e5b      	ldrb	r3, [r3, #25]
 8002548:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800254e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002554:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800255a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002562:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d106      	bne.n	8002580 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	3b01      	subs	r3, #1
 8002578:	045b      	lsls	r3, r3, #17
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_ADC_Init+0x2a8>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	69b9      	ldr	r1, [r7, #24]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff09 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80025ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff16 	bl	80023f2 <LL_ADC_INJ_IsConversionOngoing>
 80025c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d13d      	bne.n	800264a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d13a      	bne.n	800264a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025f0:	f023 0302 	bic.w	r3, r3, #2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	430b      	orrs	r3, r1
 80025fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002604:	2b01      	cmp	r3, #1
 8002606:	d118      	bne.n	800263a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800261e:	4311      	orrs	r1, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002624:	4311      	orrs	r1, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800262a:	430a      	orrs	r2, r1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	e007      	b.n	800264a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10c      	bne.n	800266c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f023 010f 	bic.w	r1, r3, #15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	1e5a      	subs	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
 800266a:	e007      	b.n	800267c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020f 	bic.w	r2, r2, #15
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f023 0303 	bic.w	r3, r3, #3
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
 800268c:	e007      	b.n	800269e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800269e:	7ffb      	ldrb	r3, [r7, #31]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3724      	adds	r7, #36	; 0x24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	053e2d63 	.word	0x053e2d63
 80026b0:	50040000 	.word	0x50040000
 80026b4:	50040100 	.word	0x50040100
 80026b8:	50040200 	.word	0x50040200
 80026bc:	50040300 	.word	0x50040300
 80026c0:	fff0c007 	.word	0xfff0c007

080026c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026cc:	4857      	ldr	r0, [pc, #348]	; (800282c <HAL_ADC_Start+0x168>)
 80026ce:	f7ff fdb1 	bl	8002234 <LL_ADC_GetMultimode>
 80026d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fe77 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 809c 	bne.w	800281e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_Start+0x30>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e097      	b.n	8002824 <HAL_ADC_Start+0x160>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fd71 	bl	80031e4 <ADC_Enable>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 8083 	bne.w	8002814 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a42      	ldr	r2, [pc, #264]	; (8002830 <HAL_ADC_Start+0x16c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d002      	beq.n	8002732 <HAL_ADC_Start+0x6e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	e000      	b.n	8002734 <HAL_ADC_Start+0x70>
 8002732:	4b40      	ldr	r3, [pc, #256]	; (8002834 <HAL_ADC_Start+0x170>)
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	4293      	cmp	r3, r2
 800273a:	d002      	beq.n	8002742 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275a:	d106      	bne.n	800276a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	f023 0206 	bic.w	r2, r3, #6
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	659a      	str	r2, [r3, #88]	; 0x58
 8002768:	e002      	b.n	8002770 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	221c      	movs	r2, #28
 8002776:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_ADC_Start+0x16c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d002      	beq.n	8002790 <HAL_ADC_Start+0xcc>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e000      	b.n	8002792 <HAL_ADC_Start+0xce>
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <HAL_ADC_Start+0x170>)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4293      	cmp	r3, r2
 8002798:	d008      	beq.n	80027ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d002      	beq.n	80027ac <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	d114      	bne.n	80027d6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fde8 	bl	80023a4 <LL_ADC_REG_StartConversion>
 80027d4:	e025      	b.n	8002822 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_ADC_Start+0x16c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d002      	beq.n	80027f2 <HAL_ADC_Start+0x12e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e000      	b.n	80027f4 <HAL_ADC_Start+0x130>
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_ADC_Start+0x170>)
 80027f4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00f      	beq.n	8002822 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800280a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
 8002812:	e006      	b.n	8002822 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800281c:	e001      	b.n	8002822 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800281e:	2302      	movs	r3, #2
 8002820:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	50040300 	.word	0x50040300
 8002830:	50040100 	.word	0x50040100
 8002834:	50040000 	.word	0x50040000

08002838 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002842:	4866      	ldr	r0, [pc, #408]	; (80029dc <HAL_ADC_PollForConversion+0x1a4>)
 8002844:	f7ff fcf6 	bl	8002234 <LL_ADC_GetMultimode>
 8002848:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b08      	cmp	r3, #8
 8002850:	d102      	bne.n	8002858 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002852:	2308      	movs	r3, #8
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	e02a      	b.n	80028ae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b05      	cmp	r3, #5
 8002862:	d002      	beq.n	800286a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2b09      	cmp	r3, #9
 8002868:	d111      	bne.n	800288e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0a4      	b.n	80029d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002888:	2304      	movs	r3, #4
 800288a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800288c:	e00f      	b.n	80028ae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800288e:	4853      	ldr	r0, [pc, #332]	; (80029dc <HAL_ADC_PollForConversion+0x1a4>)
 8002890:	f7ff fcde 	bl	8002250 <LL_ADC_GetMultiDMATransfer>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e093      	b.n	80029d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028aa:	2304      	movs	r3, #4
 80028ac:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ae:	f7ff fb9d 	bl	8001fec <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028b4:	e021      	b.n	80028fa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d01d      	beq.n	80028fa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028be:	f7ff fb95 	bl	8001fec <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <HAL_ADC_PollForConversion+0x9c>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d112      	bne.n	80028fa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10b      	bne.n	80028fa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0204 	orr.w	r2, r3, #4
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e06b      	b.n	80029d2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0d6      	beq.n	80028b6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fbfc 	bl	8002116 <LL_ADC_REG_IsTriggerSourceSWStart>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01c      	beq.n	800295e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e5b      	ldrb	r3, [r3, #25]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d118      	bne.n	800295e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b08      	cmp	r3, #8
 8002938:	d111      	bne.n	800295e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_ADC_PollForConversion+0x1a8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d002      	beq.n	800296e <HAL_ADC_PollForConversion+0x136>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	e000      	b.n	8002970 <HAL_ADC_PollForConversion+0x138>
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_ADC_PollForConversion+0x1ac>)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	4293      	cmp	r3, r2
 8002976:	d008      	beq.n	800298a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d002      	beq.n	800298a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b09      	cmp	r3, #9
 8002988:	d104      	bne.n	8002994 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e00c      	b.n	80029ae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <HAL_ADC_PollForConversion+0x1a8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d002      	beq.n	80029a4 <HAL_ADC_PollForConversion+0x16c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e000      	b.n	80029a6 <HAL_ADC_PollForConversion+0x16e>
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_ADC_PollForConversion+0x1ac>)
 80029a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d104      	bne.n	80029be <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e008      	b.n	80029d0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	220c      	movs	r2, #12
 80029ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	50040300 	.word	0x50040300
 80029e0:	50040100 	.word	0x50040100
 80029e4:	50040000 	.word	0x50040000

080029e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b0b6      	sub	sp, #216	; 0xd8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x22>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e3c7      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x7b2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fcca 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 83a8 	bne.w	8003190 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d824      	bhi.n	8002a92 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	3b02      	subs	r3, #2
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d81b      	bhi.n	8002a8a <HAL_ADC_ConfigChannel+0x86>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <HAL_ADC_ConfigChannel+0x54>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a71 	.word	0x08002a71
 8002a60:	08002a79 	.word	0x08002a79
 8002a64:	08002a81 	.word	0x08002a81
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	605a      	str	r2, [r3, #4]
          break;
 8002a6e:	e011      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2212      	movs	r2, #18
 8002a74:	605a      	str	r2, [r3, #4]
          break;
 8002a76:	e00d      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2218      	movs	r2, #24
 8002a7c:	605a      	str	r2, [r3, #4]
          break;
 8002a7e:	e009      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a86:	605a      	str	r2, [r3, #4]
          break;
 8002a88:	e004      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2206      	movs	r2, #6
 8002a8e:	605a      	str	r2, [r3, #4]
          break;
 8002a90:	e000      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a92:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f7ff fb4b 	bl	800213c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fc8e 	bl	80023cc <LL_ADC_REG_IsConversionOngoing>
 8002ab0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fc9a 	bl	80023f2 <LL_ADC_INJ_IsConversionOngoing>
 8002abe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ac2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 81a6 	bne.w	8002e18 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 81a1 	bne.w	8002e18 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f7ff fb56 	bl	8002194 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d00a      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b1a:	f7ff faa7 	bl	800206c <LL_ADC_SetOffset>
 8002b1e:	e17b      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fac4 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x148>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fab9 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	f003 021f 	and.w	r2, r3, #31
 8002b4a:	e01e      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x186>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff faae 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	e004      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x19e>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	e018      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d0>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e004      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d106      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fa7d 	bl	80020e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2101      	movs	r1, #1
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fa61 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x20e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fa56 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	e01e      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x24c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fa4b 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e004      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x264>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	e018      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x296>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e004      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fa1a 	bl	80020e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f9fe 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x2d4>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f9f3 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	f003 021f 	and.w	r2, r3, #31
 8002cd6:	e01e      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x312>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f9e8 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e004      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x32a>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	e016      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x358>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e004      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d106      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f9b9 	bl	80020e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2103      	movs	r1, #3
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f99d 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x396>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2103      	movs	r1, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f992 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	e017      	b.n	8002dca <HAL_ADC_ConfigChannel+0x3c6>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2103      	movs	r1, #3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f987 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x3de>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	e011      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x402>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002df2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d106      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2103      	movs	r1, #3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff f964 	bl	80020e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fa9b 	bl	8002358 <LL_ADC_IsEnabled>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 813f 	bne.w	80030a8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f7ff f9d8 	bl	80021ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a8e      	ldr	r2, [pc, #568]	; (800307c <HAL_ADC_ConfigChannel+0x678>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f040 8130 	bne.w	80030a8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x46c>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e019      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x4a0>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e80:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	e003      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	bf94      	ite	ls
 8002e9e:	2301      	movls	r3, #1
 8002ea0:	2300      	movhi	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d079      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x4c0>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	3301      	adds	r3, #1
 8002ebc:	069b      	lsls	r3, r3, #26
 8002ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec2:	e015      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x4ec>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	069b      	lsls	r3, r3, #26
 8002eec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x50c>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	3301      	adds	r3, #1
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	e017      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x53c>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	ea42 0103 	orr.w	r1, r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x562>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	3301      	adds	r3, #1
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	051b      	lsls	r3, r3, #20
 8002f64:	e018      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x594>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002f7e:	2320      	movs	r3, #32
 8002f80:	e003      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	e080      	b.n	800309e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x5b4>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	3301      	adds	r3, #1
 8002fb0:	069b      	lsls	r3, r3, #26
 8002fb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb6:	e015      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x5e0>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e003      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x600>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	e017      	b.n	8003034 <HAL_ADC_ConfigChannel+0x630>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	61fb      	str	r3, [r7, #28]
  return result;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e003      	b.n	8003028 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	ea42 0103 	orr.w	r1, r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x65c>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	3301      	adds	r3, #1
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	3b1e      	subs	r3, #30
 8003058:	051b      	lsls	r3, r3, #20
 800305a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800305e:	e01d      	b.n	800309c <HAL_ADC_ConfigChannel+0x698>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	613b      	str	r3, [r7, #16]
  return result;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e005      	b.n	8003088 <HAL_ADC_ConfigChannel+0x684>
 800307c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f003 021f 	and.w	r2, r3, #31
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	3b1e      	subs	r3, #30
 8003096:	051b      	lsls	r3, r3, #20
 8003098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800309c:	430b      	orrs	r3, r1
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7ff f876 	bl	8002194 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b44      	ldr	r3, [pc, #272]	; (80031c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d07a      	beq.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b4:	4843      	ldr	r0, [pc, #268]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80030b6:	f7fe ffcb 	bl	8002050 <LL_ADC_GetCommonPathInternalCh>
 80030ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a41      	ldr	r2, [pc, #260]	; (80031c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d12c      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d126      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a3c      	ldr	r2, [pc, #240]	; (80031cc <HAL_ADC_ConfigChannel+0x7c8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x6e4>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3b      	ldr	r2, [pc, #236]	; (80031d0 <HAL_ADC_ConfigChannel+0x7cc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d15d      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f0:	4619      	mov	r1, r3
 80030f2:	4834      	ldr	r0, [pc, #208]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80030f4:	f7fe ff99 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <HAL_ADC_ConfigChannel+0x7d0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	4a36      	ldr	r2, [pc, #216]	; (80031d8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003112:	e002      	b.n	800311a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3b01      	subs	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003120:	e040      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <HAL_ADC_ConfigChannel+0x7d8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d118      	bne.n	800315e <HAL_ADC_ConfigChannel+0x75a>
 800312c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d112      	bne.n	800315e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a23      	ldr	r2, [pc, #140]	; (80031cc <HAL_ADC_ConfigChannel+0x7c8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_ADC_ConfigChannel+0x748>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d12d      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800314c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003154:	4619      	mov	r1, r3
 8003156:	481b      	ldr	r0, [pc, #108]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003158:	f7fe ff67 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315c:	e024      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d120      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800316c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11a      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_ADC_ConfigChannel+0x7c8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d115      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003182:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003186:	4619      	mov	r1, r3
 8003188:	480e      	ldr	r0, [pc, #56]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c0>)
 800318a:	f7fe ff4e 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
 800318e:	e00c      	b.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031a2:	e002      	b.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	37d8      	adds	r7, #216	; 0xd8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	80080000 	.word	0x80080000
 80031c4:	50040300 	.word	0x50040300
 80031c8:	c7520000 	.word	0xc7520000
 80031cc:	50040000 	.word	0x50040000
 80031d0:	50040200 	.word	0x50040200
 80031d4:	20000000 	.word	0x20000000
 80031d8:	053e2d63 	.word	0x053e2d63
 80031dc:	cb840000 	.word	0xcb840000
 80031e0:	80000001 	.word	0x80000001

080031e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f8af 	bl	8002358 <LL_ADC_IsEnabled>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d169      	bne.n	80032d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <ADC_Enable+0xfc>)
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e055      	b.n	80032d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff f86a 	bl	8002308 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003234:	482b      	ldr	r0, [pc, #172]	; (80032e4 <ADC_Enable+0x100>)
 8003236:	f7fe ff0b 	bl	8002050 <LL_ADC_GetCommonPathInternalCh>
 800323a:	4603      	mov	r3, r0
 800323c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003244:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <ADC_Enable+0x104>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	4a28      	ldr	r2, [pc, #160]	; (80032ec <ADC_Enable+0x108>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	099b      	lsrs	r3, r3, #6
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800325e:	e002      	b.n	8003266 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3b01      	subs	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f9      	bne.n	8003260 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800326c:	f7fe febe 	bl	8001fec <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003272:	e028      	b.n	80032c6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff f86d 	bl	8002358 <LL_ADC_IsEnabled>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f83d 	bl	8002308 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800328e:	f7fe fead 	bl	8001fec <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d914      	bls.n	80032c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d00d      	beq.n	80032c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0210 	orr.w	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e007      	b.n	80032d6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d1cf      	bne.n	8003274 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	8000003f 	.word	0x8000003f
 80032e4:	50040300 	.word	0x50040300
 80032e8:	20000000 	.word	0x20000000
 80032ec:	053e2d63 	.word	0x053e2d63

080032f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f83e 	bl	800237e <LL_ADC_IsDisableOngoing>
 8003302:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff f825 	bl	8002358 <LL_ADC_IsEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d047      	beq.n	80033a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d144      	bne.n	80033a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030d 	and.w	r3, r3, #13
 8003324:	2b01      	cmp	r3, #1
 8003326:	d10c      	bne.n	8003342 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe ffff 	bl	8002330 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2203      	movs	r2, #3
 8003338:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800333a:	f7fe fe57 	bl	8001fec <HAL_GetTick>
 800333e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003340:	e029      	b.n	8003396 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f043 0210 	orr.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e023      	b.n	80033a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800335e:	f7fe fe45 	bl	8001fec <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d914      	bls.n	8003396 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e007      	b.n	80033a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1dc      	bne.n	800335e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <LL_ADC_IsEnabled>:
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <LL_ADC_IsEnabled+0x18>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <LL_ADC_IsEnabled+0x1a>
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_StartCalibration>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	609a      	str	r2, [r3, #8]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_ADC_IsCalibrationOnGoing>:
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800341a:	d101      	bne.n	8003420 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_ADC_REG_IsConversionOngoing>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b04      	cmp	r3, #4
 8003440:	d101      	bne.n	8003446 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_ADCEx_Calibration_Start+0x1c>
 800346c:	2302      	movs	r3, #2
 800346e:	e04d      	b.n	800350c <HAL_ADCEx_Calibration_Start+0xb8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff39 	bl	80032f0 <ADC_Disable>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d136      	bne.n	80034f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003490:	f023 0302 	bic.w	r3, r3, #2
 8003494:	f043 0202 	orr.w	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6839      	ldr	r1, [r7, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff ff96 	bl	80033d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034a8:	e014      	b.n	80034d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3301      	adds	r3, #1
 80034ae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80034b6:	d30d      	bcc.n	80034d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f023 0312 	bic.w	r3, r3, #18
 80034c0:	f043 0210 	orr.w	r2, r3, #16
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01b      	b.n	800350c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff94 	bl	8003406 <LL_ADC_IsCalibrationOnGoing>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e2      	bne.n	80034aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f023 0303 	bic.w	r3, r3, #3
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
 80034f4:	e005      	b.n	8003502 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f043 0210 	orr.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b09f      	sub	sp, #124	; 0x7c
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800352e:	2302      	movs	r3, #2
 8003530:	e093      	b.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800353a:	2300      	movs	r3, #0
 800353c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800353e:	2300      	movs	r3, #0
 8003540:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a47      	ldr	r2, [pc, #284]	; (8003664 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800354c:	4b46      	ldr	r3, [pc, #280]	; (8003668 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	e001      	b.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e072      	b.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff59 	bl	800342e <LL_ADC_REG_IsConversionOngoing>
 800357c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff53 	bl	800342e <LL_ADC_REG_IsConversionOngoing>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d154      	bne.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800358e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003590:	2b00      	cmp	r3, #0
 8003592:	d151      	bne.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003596:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02c      	beq.n	80035fa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035b2:	035b      	lsls	r3, r3, #13
 80035b4:	430b      	orrs	r3, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035bc:	4829      	ldr	r0, [pc, #164]	; (8003664 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035be:	f7ff fef6 	bl	80033ae <LL_ADC_IsEnabled>
 80035c2:	4604      	mov	r4, r0
 80035c4:	4828      	ldr	r0, [pc, #160]	; (8003668 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035c6:	f7ff fef2 	bl	80033ae <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	431c      	orrs	r4, r3
 80035ce:	4828      	ldr	r0, [pc, #160]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035d0:	f7ff feed 	bl	80033ae <LL_ADC_IsEnabled>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4323      	orrs	r3, r4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d137      	bne.n	800364c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035e4:	f023 030f 	bic.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	6811      	ldr	r1, [r2, #0]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	6892      	ldr	r2, [r2, #8]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	431a      	orrs	r2, r3
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035f8:	e028      	b.n	800364c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003604:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003606:	4817      	ldr	r0, [pc, #92]	; (8003664 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003608:	f7ff fed1 	bl	80033ae <LL_ADC_IsEnabled>
 800360c:	4604      	mov	r4, r0
 800360e:	4816      	ldr	r0, [pc, #88]	; (8003668 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003610:	f7ff fecd 	bl	80033ae <LL_ADC_IsEnabled>
 8003614:	4603      	mov	r3, r0
 8003616:	431c      	orrs	r4, r3
 8003618:	4815      	ldr	r0, [pc, #84]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800361a:	f7ff fec8 	bl	80033ae <LL_ADC_IsEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	4323      	orrs	r3, r4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d112      	bne.n	800364c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800362e:	f023 030f 	bic.w	r3, r3, #15
 8003632:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003634:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003636:	e009      	b.n	800364c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800364a:	e000      	b.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800364c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003656:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800365a:	4618      	mov	r0, r3
 800365c:	377c      	adds	r7, #124	; 0x7c
 800365e:	46bd      	mov	sp, r7
 8003660:	bd90      	pop	{r4, r7, pc}
 8003662:	bf00      	nop
 8003664:	50040000 	.word	0x50040000
 8003668:	50040100 	.word	0x50040100
 800366c:	50040300 	.word	0x50040300
 8003670:	50040200 	.word	0x50040200

08003674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800369c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a6:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60d3      	str	r3, [r2, #12]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_GetPriorityGrouping+0x18>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	f003 0307 	and.w	r3, r3, #7
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db0b      	blt.n	8003702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4907      	ldr	r1, [pc, #28]	; (8003710 <__NVIC_EnableIRQ+0x38>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2001      	movs	r0, #1
 80036fa:	fa00 f202 	lsl.w	r2, r0, r2
 80036fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000e100 	.word	0xe000e100

08003714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0a      	blt.n	800373e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	490c      	ldr	r1, [pc, #48]	; (8003760 <__NVIC_SetPriority+0x4c>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	440b      	add	r3, r1
 8003738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800373c:	e00a      	b.n	8003754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <__NVIC_SetPriority+0x50>)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	3b04      	subs	r3, #4
 800374c:	0112      	lsls	r2, r2, #4
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	440b      	add	r3, r1
 8003752:	761a      	strb	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000e100 	.word	0xe000e100
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f1c3 0307 	rsb	r3, r3, #7
 8003782:	2b04      	cmp	r3, #4
 8003784:	bf28      	it	cs
 8003786:	2304      	movcs	r3, #4
 8003788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3304      	adds	r3, #4
 800378e:	2b06      	cmp	r3, #6
 8003790:	d902      	bls.n	8003798 <NVIC_EncodePriority+0x30>
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3b03      	subs	r3, #3
 8003796:	e000      	b.n	800379a <NVIC_EncodePriority+0x32>
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	401a      	ands	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b0:	f04f 31ff 	mov.w	r1, #4294967295
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	43d9      	mvns	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	4313      	orrs	r3, r2
         );
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e0:	d301      	bcc.n	80037e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00f      	b.n	8003806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <SysTick_Config+0x40>)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ee:	210f      	movs	r1, #15
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f7ff ff8e 	bl	8003714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <SysTick_Config+0x40>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <SysTick_Config+0x40>)
 8003800:	2207      	movs	r2, #7
 8003802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	e000e010 	.word	0xe000e010

08003814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff29 	bl	8003674 <__NVIC_SetPriorityGrouping>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800383c:	f7ff ff3e 	bl	80036bc <__NVIC_GetPriorityGrouping>
 8003840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	6978      	ldr	r0, [r7, #20]
 8003848:	f7ff ff8e 	bl	8003768 <NVIC_EncodePriority>
 800384c:	4602      	mov	r2, r0
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff5d 	bl	8003714 <__NVIC_SetPriority>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff31 	bl	80036d8 <__NVIC_EnableIRQ>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa2 	bl	80037d0 <SysTick_Config>
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d008      	beq.n	80038c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e022      	b.n	8003906 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 020e 	bic.w	r2, r2, #14
 80038ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f003 021c 	and.w	r2, r3, #28
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	2101      	movs	r1, #1
 80038ee:	fa01 f202 	lsl.w	r2, r1, r2
 80038f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d005      	beq.n	8003936 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2204      	movs	r2, #4
 800392e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
 8003934:	e029      	b.n	800398a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 020e 	bic.w	r2, r2, #14
 8003944:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f003 021c 	and.w	r2, r3, #28
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	2101      	movs	r1, #1
 8003964:	fa01 f202 	lsl.w	r2, r1, r2
 8003968:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
    }
  }
  return status;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a2:	e17f      	b.n	8003ca4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2101      	movs	r1, #1
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	4013      	ands	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 8171 	beq.w	8003c9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d005      	beq.n	80039d4 <HAL_GPIO_Init+0x40>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d130      	bne.n	8003a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 0201 	and.w	r2, r3, #1
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d118      	bne.n	8003a74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f003 0201 	and.w	r2, r3, #1
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d017      	beq.n	8003ab0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d123      	bne.n	8003b04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	08da      	lsrs	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3208      	adds	r2, #8
 8003ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	08da      	lsrs	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3208      	adds	r2, #8
 8003afe:	6939      	ldr	r1, [r7, #16]
 8003b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80ac 	beq.w	8003c9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b46:	4b5f      	ldr	r3, [pc, #380]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	4a5e      	ldr	r2, [pc, #376]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6613      	str	r3, [r2, #96]	; 0x60
 8003b52:	4b5c      	ldr	r3, [pc, #368]	; (8003cc4 <HAL_GPIO_Init+0x330>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b5e:	4a5a      	ldr	r2, [pc, #360]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	3302      	adds	r3, #2
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	220f      	movs	r2, #15
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b88:	d025      	beq.n	8003bd6 <HAL_GPIO_Init+0x242>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ccc <HAL_GPIO_Init+0x338>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01f      	beq.n	8003bd2 <HAL_GPIO_Init+0x23e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <HAL_GPIO_Init+0x33c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d019      	beq.n	8003bce <HAL_GPIO_Init+0x23a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4d      	ldr	r2, [pc, #308]	; (8003cd4 <HAL_GPIO_Init+0x340>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_GPIO_Init+0x236>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4c      	ldr	r2, [pc, #304]	; (8003cd8 <HAL_GPIO_Init+0x344>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_GPIO_Init+0x232>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	; (8003cdc <HAL_GPIO_Init+0x348>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <HAL_GPIO_Init+0x22e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <HAL_GPIO_Init+0x34c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_GPIO_Init+0x22a>
 8003bba:	2306      	movs	r3, #6
 8003bbc:	e00c      	b.n	8003bd8 <HAL_GPIO_Init+0x244>
 8003bbe:	2307      	movs	r3, #7
 8003bc0:	e00a      	b.n	8003bd8 <HAL_GPIO_Init+0x244>
 8003bc2:	2305      	movs	r3, #5
 8003bc4:	e008      	b.n	8003bd8 <HAL_GPIO_Init+0x244>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	e006      	b.n	8003bd8 <HAL_GPIO_Init+0x244>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e004      	b.n	8003bd8 <HAL_GPIO_Init+0x244>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e002      	b.n	8003bd8 <HAL_GPIO_Init+0x244>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_GPIO_Init+0x244>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	f002 0203 	and.w	r2, r2, #3
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	4093      	lsls	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003be8:	4937      	ldr	r1, [pc, #220]	; (8003cc8 <HAL_GPIO_Init+0x334>)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	3302      	adds	r3, #2
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c1a:	4a32      	ldr	r2, [pc, #200]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c98:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <HAL_GPIO_Init+0x350>)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f47f ae78 	bne.w	80039a4 <HAL_GPIO_Init+0x10>
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	48000400 	.word	0x48000400
 8003cd0:	48000800 	.word	0x48000800
 8003cd4:	48000c00 	.word	0x48000c00
 8003cd8:	48001000 	.word	0x48001000
 8003cdc:	48001400 	.word	0x48001400
 8003ce0:	48001800 	.word	0x48001800
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e001      	b.n	8003d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d56:	6013      	str	r3, [r2, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40007000 	.word	0x40007000

08003d68 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d86:	d10e      	bne.n	8003da6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003d88:	f000 f8b0 	bl	8003eec <HAL_PWREx_DisableLowPowerRunMode>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003d92:	e016      	b.n	8003dc2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da0:	d001      	beq.n	8003da6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003da2:	f000 f893 	bl	8003ecc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_PWR_EnterSLEEPMode+0x64>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <HAL_PWR_EnterSLEEPMode+0x64>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003db8:	bf30      	wfi
 8003dba:	e002      	b.n	8003dc2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003dbc:	bf40      	sev
    __WFE();
 8003dbe:	bf20      	wfe
    __WFE();
 8003dc0:	bf20      	wfe
  }

}
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 0307 	bic.w	r3, r3, #7
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003dde:	f043 0303 	orr.w	r3, r3, #3
 8003de2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003df0:	bf30      	wfi
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40007000 	.word	0x40007000

08003e20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d130      	bne.n	8003e92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d038      	beq.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e46:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2232      	movs	r2, #50	; 0x32
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	0c9b      	lsrs	r3, r3, #18
 8003e60:	3301      	adds	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e64:	e002      	b.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d102      	bne.n	8003e80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f2      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8c:	d110      	bne.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e00f      	b.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9e:	d007      	beq.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ea8:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	431bde83 	.word	0x431bde83

08003ecc <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eda:	6013      	str	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40007000 	.word	0x40007000

08003eec <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003efc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2232      	movs	r2, #50	; 0x32
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0c9b      	lsrs	r3, r3, #18
 8003f10:	3301      	adds	r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003f14:	e002      	b.n	8003f1c <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d102      	bne.n	8003f30 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f2      	bne.n	8003f16 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3c:	d101      	bne.n	8003f42 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e000      	b.n	8003f44 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40007000 	.word	0x40007000
 8003f54:	20000000 	.word	0x20000000
 8003f58:	431bde83 	.word	0x431bde83

08003f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e3ca      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6e:	4b97      	ldr	r3, [pc, #604]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f78:	4b94      	ldr	r3, [pc, #592]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80e4 	beq.w	8004158 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x4a>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	f040 808b 	bne.w	80040b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	f040 8087 	bne.w	80040b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fa6:	4b89      	ldr	r3, [pc, #548]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCC_OscConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e3a2      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	4b82      	ldr	r3, [pc, #520]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x7c>
 8003fce:	4b7f      	ldr	r3, [pc, #508]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd6:	e005      	b.n	8003fe4 <HAL_RCC_OscConfig+0x88>
 8003fd8:	4b7c      	ldr	r3, [pc, #496]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8003fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d223      	bcs.n	8004030 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fd55 	bl	8004a9c <RCC_SetFlashLatencyFromMSIRange>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e383      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffc:	4b73      	ldr	r3, [pc, #460]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a72      	ldr	r2, [pc, #456]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b70      	ldr	r3, [pc, #448]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	496d      	ldr	r1, [pc, #436]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800401a:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	4968      	ldr	r1, [pc, #416]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	e025      	b.n	800407c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004030:	4b66      	ldr	r3, [pc, #408]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a65      	ldr	r2, [pc, #404]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004036:	f043 0308 	orr.w	r3, r3, #8
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	4960      	ldr	r1, [pc, #384]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404e:	4b5f      	ldr	r3, [pc, #380]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	495b      	ldr	r1, [pc, #364]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800405e:	4313      	orrs	r3, r2
 8004060:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fd15 	bl	8004a9c <RCC_SetFlashLatencyFromMSIRange>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e343      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800407c:	f000 fc4a 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b52      	ldr	r3, [pc, #328]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	4950      	ldr	r1, [pc, #320]	; (80041d0 <HAL_RCC_OscConfig+0x274>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
 8004098:	4a4e      	ldr	r2, [pc, #312]	; (80041d4 <HAL_RCC_OscConfig+0x278>)
 800409a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800409c:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd ff53 	bl	8001f4c <HAL_InitTick>
 80040a6:	4603      	mov	r3, r0
 80040a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d052      	beq.n	8004156 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	e327      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d032      	beq.n	8004122 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040bc:	4b43      	ldr	r3, [pc, #268]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a42      	ldr	r2, [pc, #264]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040c8:	f7fd ff90 	bl	8001fec <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d0:	f7fd ff8c 	bl	8001fec <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e310      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e2:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a36      	ldr	r2, [pc, #216]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b34      	ldr	r3, [pc, #208]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4931      	ldr	r1, [pc, #196]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800410c:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	492c      	ldr	r1, [pc, #176]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
 8004120:	e01a      	b.n	8004158 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a29      	ldr	r2, [pc, #164]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800412e:	f7fd ff5d 	bl	8001fec <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004136:	f7fd ff59 	bl	8001fec <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e2dd      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x1da>
 8004154:	e000      	b.n	8004158 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004156:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d074      	beq.n	800424e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d005      	beq.n	8004176 <HAL_RCC_OscConfig+0x21a>
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d10e      	bne.n	800418e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d10b      	bne.n	800418e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d064      	beq.n	800424c <HAL_RCC_OscConfig+0x2f0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d160      	bne.n	800424c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e2ba      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x24a>
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 800419e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	e026      	b.n	80041f4 <HAL_RCC_OscConfig+0x298>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ae:	d115      	bne.n	80041dc <HAL_RCC_OscConfig+0x280>
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a05      	ldr	r2, [pc, #20]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80041b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b03      	ldr	r3, [pc, #12]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a02      	ldr	r2, [pc, #8]	; (80041cc <HAL_RCC_OscConfig+0x270>)
 80041c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e014      	b.n	80041f4 <HAL_RCC_OscConfig+0x298>
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	0800da2c 	.word	0x0800da2c
 80041d4:	20000000 	.word	0x20000000
 80041d8:	20000004 	.word	0x20000004
 80041dc:	4ba0      	ldr	r3, [pc, #640]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a9f      	ldr	r2, [pc, #636]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b9d      	ldr	r3, [pc, #628]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a9c      	ldr	r2, [pc, #624]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fef6 	bl	8001fec <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fd fef2 	bl	8001fec <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e276      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	4b92      	ldr	r3, [pc, #584]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x2a8>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fd fee2 	bl	8001fec <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fd fede 	bl	8001fec <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e262      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423e:	4b88      	ldr	r3, [pc, #544]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x2d0>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d060      	beq.n	800431c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d005      	beq.n	800426c <HAL_RCC_OscConfig+0x310>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d119      	bne.n	800429a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d116      	bne.n	800429a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426c:	4b7c      	ldr	r3, [pc, #496]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_OscConfig+0x328>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e23f      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b76      	ldr	r3, [pc, #472]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	4973      	ldr	r1, [pc, #460]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004298:	e040      	b.n	800431c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d023      	beq.n	80042ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a2:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6e      	ldr	r2, [pc, #440]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fd fe9d 	bl	8001fec <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b6:	f7fd fe99 	bl	8001fec <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e21d      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c8:	4b65      	ldr	r3, [pc, #404]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d4:	4b62      	ldr	r3, [pc, #392]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	495f      	ldr	r1, [pc, #380]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	e018      	b.n	800431c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ea:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80042f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd fe79 	bl	8001fec <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fe:	f7fd fe75 	bl	8001fec <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e1f9      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004310:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d03c      	beq.n	80043a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01c      	beq.n	800436a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004330:	4b4b      	ldr	r3, [pc, #300]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004336:	4a4a      	ldr	r2, [pc, #296]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd fe54 	bl	8001fec <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004348:	f7fd fe50 	bl	8001fec <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1d4      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435a:	4b41      	ldr	r3, [pc, #260]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ef      	beq.n	8004348 <HAL_RCC_OscConfig+0x3ec>
 8004368:	e01b      	b.n	80043a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436a:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 800436c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004370:	4a3b      	ldr	r2, [pc, #236]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fd fe37 	bl	8001fec <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004382:	f7fd fe33 	bl	8001fec <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e1b7      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ef      	bne.n	8004382 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80a6 	beq.w	80044fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c0:	4b27      	ldr	r3, [pc, #156]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	4a26      	ldr	r2, [pc, #152]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80043c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6593      	str	r3, [r2, #88]	; 0x58
 80043cc:	4b24      	ldr	r3, [pc, #144]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d8:	2301      	movs	r3, #1
 80043da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043dc:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_RCC_OscConfig+0x508>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d118      	bne.n	800441a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e8:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <HAL_RCC_OscConfig+0x508>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_RCC_OscConfig+0x508>)
 80043ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f4:	f7fd fdfa 	bl	8001fec <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fc:	f7fd fdf6 	bl	8001fec <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e17a      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_RCC_OscConfig+0x508>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d108      	bne.n	8004434 <HAL_RCC_OscConfig+0x4d8>
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004432:	e029      	b.n	8004488 <HAL_RCC_OscConfig+0x52c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b05      	cmp	r3, #5
 800443a:	d115      	bne.n	8004468 <HAL_RCC_OscConfig+0x50c>
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	4a07      	ldr	r2, [pc, #28]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	4a03      	ldr	r2, [pc, #12]	; (8004460 <HAL_RCC_OscConfig+0x504>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800445c:	e014      	b.n	8004488 <HAL_RCC_OscConfig+0x52c>
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000
 8004468:	4b9c      	ldr	r3, [pc, #624]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	4a9b      	ldr	r2, [pc, #620]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004478:	4b98      	ldr	r3, [pc, #608]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	4a97      	ldr	r2, [pc, #604]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d016      	beq.n	80044be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fdac 	bl	8001fec <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fd fda8 	bl	8001fec <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e12a      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ae:	4b8b      	ldr	r3, [pc, #556]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ed      	beq.n	8004498 <HAL_RCC_OscConfig+0x53c>
 80044bc:	e015      	b.n	80044ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fd fd95 	bl	8001fec <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fd fd91 	bl	8001fec <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e113      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044dc:	4b7f      	ldr	r3, [pc, #508]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ed      	bne.n	80044c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ea:	7ffb      	ldrb	r3, [r7, #31]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f0:	4b7a      	ldr	r3, [pc, #488]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	4a79      	ldr	r2, [pc, #484]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80fe 	beq.w	8004702 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	2b02      	cmp	r3, #2
 800450c:	f040 80d0 	bne.w	80046b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004510:	4b72      	ldr	r3, [pc, #456]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0203 	and.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	429a      	cmp	r2, r3
 8004522:	d130      	bne.n	8004586 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	3b01      	subs	r3, #1
 8004530:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d127      	bne.n	8004586 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d11f      	bne.n	8004586 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004550:	2a07      	cmp	r2, #7
 8004552:	bf14      	ite	ne
 8004554:	2201      	movne	r2, #1
 8004556:	2200      	moveq	r2, #0
 8004558:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800455a:	4293      	cmp	r3, r2
 800455c:	d113      	bne.n	8004586 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d109      	bne.n	8004586 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	3b01      	subs	r3, #1
 8004580:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d06e      	beq.n	8004664 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d069      	beq.n	8004660 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800458c:	4b53      	ldr	r3, [pc, #332]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004598:	4b50      	ldr	r3, [pc, #320]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0ad      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045a8:	4b4c      	ldr	r3, [pc, #304]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80045ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045b4:	f7fd fd1a 	bl	8001fec <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fd fd16 	bl	8001fec <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e09a      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ce:	4b43      	ldr	r3, [pc, #268]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045da:	4b40      	ldr	r3, [pc, #256]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <HAL_RCC_OscConfig+0x784>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ea:	3a01      	subs	r2, #1
 80045ec:	0112      	lsls	r2, r2, #4
 80045ee:	4311      	orrs	r1, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f4:	0212      	lsls	r2, r2, #8
 80045f6:	4311      	orrs	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	3a01      	subs	r2, #1
 8004600:	0552      	lsls	r2, r2, #21
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004608:	0852      	lsrs	r2, r2, #1
 800460a:	3a01      	subs	r2, #1
 800460c:	0652      	lsls	r2, r2, #25
 800460e:	4311      	orrs	r1, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004614:	0912      	lsrs	r2, r2, #4
 8004616:	0452      	lsls	r2, r2, #17
 8004618:	430a      	orrs	r2, r1
 800461a:	4930      	ldr	r1, [pc, #192]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004620:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2d      	ldr	r2, [pc, #180]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800462c:	4b2b      	ldr	r3, [pc, #172]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004638:	f7fd fcd8 	bl	8001fec <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd fcd4 	bl	8001fec <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e058      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800465e:	e050      	b.n	8004702 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e04f      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d148      	bne.n	8004702 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800467c:	4b17      	ldr	r3, [pc, #92]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a16      	ldr	r2, [pc, #88]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 8004682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004686:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004688:	f7fd fcb0 	bl	8001fec <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004690:	f7fd fcac 	bl	8001fec <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e030      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x734>
 80046ae:	e028      	b.n	8004702 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b0c      	cmp	r3, #12
 80046b4:	d023      	beq.n	80046fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <HAL_RCC_OscConfig+0x780>)
 80046bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fd fc93 	bl	8001fec <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c8:	e00c      	b.n	80046e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fd fc8f 	bl	8001fec <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d905      	bls.n	80046e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e013      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
 80046dc:	40021000 	.word	0x40021000
 80046e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCC_OscConfig+0x7b0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ec      	bne.n	80046ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_OscConfig+0x7b0>)
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	4905      	ldr	r1, [pc, #20]	; (800470c <HAL_RCC_OscConfig+0x7b0>)
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCC_OscConfig+0x7b4>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	60cb      	str	r3, [r1, #12]
 80046fc:	e001      	b.n	8004702 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	feeefffc 	.word	0xfeeefffc

08004714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0e7      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004728:	4b75      	ldr	r3, [pc, #468]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d910      	bls.n	8004758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b72      	ldr	r3, [pc, #456]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 0207 	bic.w	r2, r3, #7
 800473e:	4970      	ldr	r1, [pc, #448]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b6e      	ldr	r3, [pc, #440]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0cf      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d010      	beq.n	8004786 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	4b66      	ldr	r3, [pc, #408]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004770:	429a      	cmp	r2, r3
 8004772:	d908      	bls.n	8004786 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b63      	ldr	r3, [pc, #396]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4960      	ldr	r1, [pc, #384]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04c      	beq.n	800482c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	4b5a      	ldr	r3, [pc, #360]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d121      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0a6      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b2:	4b54      	ldr	r3, [pc, #336]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d115      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e09a      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047ca:	4b4e      	ldr	r3, [pc, #312]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e08e      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047da:	4b4a      	ldr	r3, [pc, #296]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e086      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047ea:	4b46      	ldr	r3, [pc, #280]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 0203 	bic.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4943      	ldr	r1, [pc, #268]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fd fbf6 	bl	8001fec <HAL_GetTick>
 8004800:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	e00a      	b.n	800481a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004804:	f7fd fbf2 	bl	8001fec <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e06e      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481a:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 020c 	and.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	429a      	cmp	r2, r3
 800482a:	d1eb      	bne.n	8004804 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d010      	beq.n	800485a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	4b31      	ldr	r3, [pc, #196]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004844:	429a      	cmp	r2, r3
 8004846:	d208      	bcs.n	800485a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b2e      	ldr	r3, [pc, #184]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	492b      	ldr	r1, [pc, #172]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800485a:	4b29      	ldr	r3, [pc, #164]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d210      	bcs.n	800488a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 0207 	bic.w	r2, r3, #7
 8004870:	4923      	ldr	r1, [pc, #140]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_ClockConfig+0x1ec>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d001      	beq.n	800488a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e036      	b.n	80048f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4918      	ldr	r1, [pc, #96]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b4:	4b13      	ldr	r3, [pc, #76]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4910      	ldr	r1, [pc, #64]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c8:	f000 f824 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <HAL_RCC_ClockConfig+0x1f0>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	490b      	ldr	r1, [pc, #44]	; (8004908 <HAL_RCC_ClockConfig+0x1f4>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
 80048e4:	4a09      	ldr	r2, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1f8>)
 80048e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1fc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fd fb2d 	bl	8001f4c <HAL_InitTick>
 80048f2:	4603      	mov	r3, r0
 80048f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80048f6:	7afb      	ldrb	r3, [r7, #11]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40022000 	.word	0x40022000
 8004904:	40021000 	.word	0x40021000
 8004908:	0800da2c 	.word	0x0800da2c
 800490c:	20000000 	.word	0x20000000
 8004910:	20000004 	.word	0x20000004

08004914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004922:	4b3e      	ldr	r3, [pc, #248]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800492c:	4b3b      	ldr	r3, [pc, #236]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0x34>
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d121      	bne.n	8004986 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d11e      	bne.n	8004986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004948:	4b34      	ldr	r3, [pc, #208]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	e005      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004964:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004970:	4a2b      	ldr	r2, [pc, #172]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004978:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004984:	e00a      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b04      	cmp	r3, #4
 800498a:	d102      	bne.n	8004992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800498c:	4b25      	ldr	r3, [pc, #148]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x110>)
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e004      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d101      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004998:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x114>)
 800499a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d134      	bne.n	8004a0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049a2:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0xa6>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d003      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0xac>
 80049b8:	e005      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x110>)
 80049bc:	617b      	str	r3, [r7, #20]
      break;
 80049be:	e005      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x114>)
 80049c2:	617b      	str	r3, [r7, #20]
      break;
 80049c4:	e002      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	617b      	str	r3, [r7, #20]
      break;
 80049ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	3301      	adds	r3, #1
 80049d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	fb03 f202 	mul.w	r2, r3, r2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	0e5b      	lsrs	r3, r3, #25
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	3301      	adds	r3, #1
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a0c:	69bb      	ldr	r3, [r7, #24]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3724      	adds	r7, #36	; 0x24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	0800da44 	.word	0x0800da44
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	007a1200 	.word	0x007a1200

08004a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000000 	.word	0x20000000

08004a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a48:	f7ff fff0 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4904      	ldr	r1, [pc, #16]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	0800da3c 	.word	0x0800da3c

08004a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a74:	f7ff ffda 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	0adb      	lsrs	r3, r3, #11
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4904      	ldr	r1, [pc, #16]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000
 8004a98:	0800da3c 	.word	0x0800da3c

08004a9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004aa8:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ab4:	f7ff f9a6 	bl	8003e04 <HAL_PWREx_GetVoltageRange>
 8004ab8:	6178      	str	r0, [r7, #20]
 8004aba:	e014      	b.n	8004ae6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	4a24      	ldr	r2, [pc, #144]	; (8004b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ad4:	f7ff f996 	bl	8003e04 <HAL_PWREx_GetVoltageRange>
 8004ad8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ada:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	4a1d      	ldr	r2, [pc, #116]	; (8004b54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aec:	d10b      	bne.n	8004b06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d919      	bls.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2ba0      	cmp	r3, #160	; 0xa0
 8004af8:	d902      	bls.n	8004b00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004afa:	2302      	movs	r3, #2
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e013      	b.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b00:	2301      	movs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e010      	b.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d902      	bls.n	8004b12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e00a      	b.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d102      	bne.n	8004b1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b18:	2302      	movs	r3, #2
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	e004      	b.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b70      	cmp	r3, #112	; 0x70
 8004b22:	d101      	bne.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b24:	2301      	movs	r3, #1
 8004b26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f023 0207 	bic.w	r2, r3, #7
 8004b30:	4909      	ldr	r1, [pc, #36]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d001      	beq.n	8004b4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	40022000 	.word	0x40022000

08004b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b64:	2300      	movs	r3, #0
 8004b66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b68:	2300      	movs	r3, #0
 8004b6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d041      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b80:	d02a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b86:	d824      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b92:	d81e      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9c:	d010      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b9e:	e018      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ba0:	4b86      	ldr	r3, [pc, #536]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a85      	ldr	r2, [pc, #532]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004baa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bac:	e015      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 facb 	bl	8005150 <RCCEx_PLLSAI1_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bbe:	e00c      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3320      	adds	r3, #32
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fbb6 	bl	8005338 <RCCEx_PLLSAI2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bd0:	e003      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8004bd6:	e000      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be0:	4b76      	ldr	r3, [pc, #472]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bee:	4973      	ldr	r1, [pc, #460]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bf6:	e001      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
 8004bfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d041      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c10:	d02a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c16:	d824      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c1c:	d008      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c22:	d81e      	bhi.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c2c:	d010      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c2e:	e018      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c30:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a61      	ldr	r2, [pc, #388]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c3c:	e015      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fa83 	bl	8005150 <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c4e:	e00c      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3320      	adds	r3, #32
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fb6e 	bl	8005338 <RCCEx_PLLSAI2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	74fb      	strb	r3, [r7, #19]
      break;
 8004c66:	e000      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6a:	7cfb      	ldrb	r3, [r7, #19]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c70:	4b52      	ldr	r3, [pc, #328]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c7e:	494f      	ldr	r1, [pc, #316]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c86:	e001      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a0 	beq.w	8004dda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c9e:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	4a40      	ldr	r2, [pc, #256]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc0:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cdc:	f7fd f986 	bl	8001fec <HAL_GetTick>
 8004ce0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ce2:	e009      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce4:	f7fd f982 	bl	8001fec <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d902      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	74fb      	strb	r3, [r7, #19]
        break;
 8004cf6:	e005      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ef      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d15c      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d0a:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01f      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d019      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d44:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fd f941 	bl	8001fec <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6c:	e00b      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fd f93d 	bl	8001fec <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d902      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	74fb      	strb	r3, [r7, #19]
            break;
 8004d84:	e006      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0ec      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004daa:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004db2:	e009      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	74bb      	strb	r3, [r7, #18]
 8004db8:	e006      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc8:	7c7b      	ldrb	r3, [r7, #17]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b9e      	ldr	r3, [pc, #632]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	4a9d      	ldr	r2, [pc, #628]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004de6:	4b98      	ldr	r3, [pc, #608]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f023 0203 	bic.w	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	4994      	ldr	r1, [pc, #592]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e08:	4b8f      	ldr	r3, [pc, #572]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f023 020c 	bic.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	498c      	ldr	r1, [pc, #560]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e2a:	4b87      	ldr	r3, [pc, #540]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	4983      	ldr	r1, [pc, #524]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e4c:	4b7e      	ldr	r3, [pc, #504]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	497b      	ldr	r1, [pc, #492]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e6e:	4b76      	ldr	r3, [pc, #472]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	4972      	ldr	r1, [pc, #456]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e90:	4b6d      	ldr	r3, [pc, #436]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9e:	496a      	ldr	r1, [pc, #424]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eb2:	4b65      	ldr	r3, [pc, #404]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	4961      	ldr	r1, [pc, #388]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ed4:	4b5c      	ldr	r3, [pc, #368]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee2:	4959      	ldr	r1, [pc, #356]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ef6:	4b54      	ldr	r3, [pc, #336]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	4950      	ldr	r1, [pc, #320]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f18:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	4948      	ldr	r1, [pc, #288]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f3a:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f48:	493f      	ldr	r1, [pc, #252]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d028      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f5c:	4b3a      	ldr	r3, [pc, #232]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6a:	4937      	ldr	r1, [pc, #220]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f7c:	4b32      	ldr	r3, [pc, #200]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a31      	ldr	r2, [pc, #196]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f86:	60d3      	str	r3, [r2, #12]
 8004f88:	e011      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f92:	d10c      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f8d8 	bl	8005150 <RCCEx_PLLSAI1_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d028      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	491f      	ldr	r1, [pc, #124]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd8:	d106      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4a1a      	ldr	r2, [pc, #104]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe4:	60d3      	str	r3, [r2, #12]
 8004fe6:	e011      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff0:	d10c      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 f8a9 	bl	8005150 <RCCEx_PLLSAI1_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d02b      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005026:	4908      	ldr	r1, [pc, #32]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005036:	d109      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a02      	ldr	r2, [pc, #8]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005042:	60d3      	str	r3, [r2, #12]
 8005044:	e014      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005046:	bf00      	nop
 8005048:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005054:	d10c      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	2101      	movs	r1, #1
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f877 	bl	8005150 <RCCEx_PLLSAI1_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005066:	7cfb      	ldrb	r3, [r7, #19]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d02f      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800507c:	4b2b      	ldr	r3, [pc, #172]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508a:	4928      	ldr	r1, [pc, #160]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509a:	d10d      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f854 	bl	8005150 <RCCEx_PLLSAI1_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d014      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	74bb      	strb	r3, [r7, #18]
 80050b6:	e011      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c0:	d10c      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3320      	adds	r3, #32
 80050c6:	2102      	movs	r1, #2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f935 	bl	8005338 <RCCEx_PLLSAI2_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050d2:	7cfb      	ldrb	r3, [r7, #19]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050d8:	7cfb      	ldrb	r3, [r7, #19]
 80050da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050e8:	4b10      	ldr	r3, [pc, #64]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f6:	490d      	ldr	r1, [pc, #52]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511a:	4904      	ldr	r1, [pc, #16]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005122:	7cbb      	ldrb	r3, [r7, #18]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021000 	.word	0x40021000

08005130 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a04      	ldr	r2, [pc, #16]	; (800514c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800513a:	f043 0304 	orr.w	r3, r3, #4
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000

08005150 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800515e:	4b75      	ldr	r3, [pc, #468]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d018      	beq.n	800519c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800516a:	4b72      	ldr	r3, [pc, #456]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0203 	and.w	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d10d      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
       ||
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005182:	4b6c      	ldr	r3, [pc, #432]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
       ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d047      	beq.n	8005226 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
 800519a:	e044      	b.n	8005226 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d018      	beq.n	80051d6 <RCCEx_PLLSAI1_Config+0x86>
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d825      	bhi.n	80051f4 <RCCEx_PLLSAI1_Config+0xa4>
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d002      	beq.n	80051b2 <RCCEx_PLLSAI1_Config+0x62>
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d009      	beq.n	80051c4 <RCCEx_PLLSAI1_Config+0x74>
 80051b0:	e020      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051b2:	4b60      	ldr	r3, [pc, #384]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d11d      	bne.n	80051fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c2:	e01a      	b.n	80051fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051c4:	4b5b      	ldr	r3, [pc, #364]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d116      	bne.n	80051fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d4:	e013      	b.n	80051fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051d6:	4b57      	ldr	r3, [pc, #348]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051e2:	4b54      	ldr	r3, [pc, #336]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051f2:	e006      	b.n	8005202 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      break;
 80051f8:	e004      	b.n	8005204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051fa:	bf00      	nop
 80051fc:	e002      	b.n	8005204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005202:	bf00      	nop
    }

    if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10d      	bne.n	8005226 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800520a:	4b4a      	ldr	r3, [pc, #296]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	3b01      	subs	r3, #1
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	430b      	orrs	r3, r1
 8005220:	4944      	ldr	r1, [pc, #272]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d17d      	bne.n	8005328 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800522c:	4b41      	ldr	r3, [pc, #260]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a40      	ldr	r2, [pc, #256]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005238:	f7fc fed8 	bl	8001fec <HAL_GetTick>
 800523c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800523e:	e009      	b.n	8005254 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005240:	f7fc fed4 	bl	8001fec <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d902      	bls.n	8005254 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	73fb      	strb	r3, [r7, #15]
        break;
 8005252:	e005      	b.n	8005260 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005254:	4b37      	ldr	r3, [pc, #220]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ef      	bne.n	8005240 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d160      	bne.n	8005328 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d111      	bne.n	8005290 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800526c:	4b31      	ldr	r3, [pc, #196]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6892      	ldr	r2, [r2, #8]
 800527c:	0211      	lsls	r1, r2, #8
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68d2      	ldr	r2, [r2, #12]
 8005282:	0912      	lsrs	r2, r2, #4
 8005284:	0452      	lsls	r2, r2, #17
 8005286:	430a      	orrs	r2, r1
 8005288:	492a      	ldr	r1, [pc, #168]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	610b      	str	r3, [r1, #16]
 800528e:	e027      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d112      	bne.n	80052bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005296:	4b27      	ldr	r3, [pc, #156]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800529e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6892      	ldr	r2, [r2, #8]
 80052a6:	0211      	lsls	r1, r2, #8
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6912      	ldr	r2, [r2, #16]
 80052ac:	0852      	lsrs	r2, r2, #1
 80052ae:	3a01      	subs	r2, #1
 80052b0:	0552      	lsls	r2, r2, #21
 80052b2:	430a      	orrs	r2, r1
 80052b4:	491f      	ldr	r1, [pc, #124]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	610b      	str	r3, [r1, #16]
 80052ba:	e011      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
 80052cc:	0211      	lsls	r1, r2, #8
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6952      	ldr	r2, [r2, #20]
 80052d2:	0852      	lsrs	r2, r2, #1
 80052d4:	3a01      	subs	r2, #1
 80052d6:	0652      	lsls	r2, r2, #25
 80052d8:	430a      	orrs	r2, r1
 80052da:	4916      	ldr	r1, [pc, #88]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a13      	ldr	r2, [pc, #76]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ec:	f7fc fe7e 	bl	8001fec <HAL_GetTick>
 80052f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052f2:	e009      	b.n	8005308 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f4:	f7fc fe7a 	bl	8001fec <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d902      	bls.n	8005308 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	73fb      	strb	r3, [r7, #15]
          break;
 8005306:	e005      	b.n	8005314 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0ef      	beq.n	80052f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	4904      	ldr	r1, [pc, #16]	; (8005334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005324:	4313      	orrs	r3, r2
 8005326:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000

08005338 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005346:	4b6a      	ldr	r3, [pc, #424]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005352:	4b67      	ldr	r3, [pc, #412]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0203 	and.w	r2, r3, #3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d10d      	bne.n	800537e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
       ||
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800536a:	4b61      	ldr	r3, [pc, #388]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	091b      	lsrs	r3, r3, #4
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
       ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d047      	beq.n	800540e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
 8005382:	e044      	b.n	800540e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d018      	beq.n	80053be <RCCEx_PLLSAI2_Config+0x86>
 800538c:	2b03      	cmp	r3, #3
 800538e:	d825      	bhi.n	80053dc <RCCEx_PLLSAI2_Config+0xa4>
 8005390:	2b01      	cmp	r3, #1
 8005392:	d002      	beq.n	800539a <RCCEx_PLLSAI2_Config+0x62>
 8005394:	2b02      	cmp	r3, #2
 8005396:	d009      	beq.n	80053ac <RCCEx_PLLSAI2_Config+0x74>
 8005398:	e020      	b.n	80053dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800539a:	4b55      	ldr	r3, [pc, #340]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d11d      	bne.n	80053e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053aa:	e01a      	b.n	80053e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053ac:	4b50      	ldr	r3, [pc, #320]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d116      	bne.n	80053e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053bc:	e013      	b.n	80053e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053be:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10f      	bne.n	80053ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053ca:	4b49      	ldr	r3, [pc, #292]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053da:	e006      	b.n	80053ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
      break;
 80053e0:	e004      	b.n	80053ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053e2:	bf00      	nop
 80053e4:	e002      	b.n	80053ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053e6:	bf00      	nop
 80053e8:	e000      	b.n	80053ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10d      	bne.n	800540e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053f2:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	3b01      	subs	r3, #1
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	430b      	orrs	r3, r1
 8005408:	4939      	ldr	r1, [pc, #228]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d167      	bne.n	80054e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005414:	4b36      	ldr	r3, [pc, #216]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a35      	ldr	r2, [pc, #212]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fc fde4 	bl	8001fec <HAL_GetTick>
 8005424:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005426:	e009      	b.n	800543c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005428:	f7fc fde0 	bl	8001fec <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d902      	bls.n	800543c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	73fb      	strb	r3, [r7, #15]
        break;
 800543a:	e005      	b.n	8005448 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800543c:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ef      	bne.n	8005428 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d14a      	bne.n	80054e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d111      	bne.n	8005478 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005454:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800545c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6892      	ldr	r2, [r2, #8]
 8005464:	0211      	lsls	r1, r2, #8
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	68d2      	ldr	r2, [r2, #12]
 800546a:	0912      	lsrs	r2, r2, #4
 800546c:	0452      	lsls	r2, r2, #17
 800546e:	430a      	orrs	r2, r1
 8005470:	491f      	ldr	r1, [pc, #124]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	614b      	str	r3, [r1, #20]
 8005476:	e011      	b.n	800549c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005480:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6892      	ldr	r2, [r2, #8]
 8005488:	0211      	lsls	r1, r2, #8
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6912      	ldr	r2, [r2, #16]
 800548e:	0852      	lsrs	r2, r2, #1
 8005490:	3a01      	subs	r2, #1
 8005492:	0652      	lsls	r2, r2, #25
 8005494:	430a      	orrs	r2, r1
 8005496:	4916      	ldr	r1, [pc, #88]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005498:	4313      	orrs	r3, r2
 800549a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800549c:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fc fda0 	bl	8001fec <HAL_GetTick>
 80054ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054ae:	e009      	b.n	80054c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054b0:	f7fc fd9c 	bl	8001fec <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d902      	bls.n	80054c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	73fb      	strb	r3, [r7, #15]
          break;
 80054c2:	e005      	b.n	80054d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ef      	beq.n	80054b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	4904      	ldr	r1, [pc, #16]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000

080054f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d06c      	beq.n	80055e0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc f94a 	bl	80017b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	22ca      	movs	r2, #202	; 0xca
 800552e:	625a      	str	r2, [r3, #36]	; 0x24
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2253      	movs	r2, #83	; 0x53
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f87c 	bl	8005636 <RTC_EnterInitMode>
 800553e:	4603      	mov	r3, r0
 8005540:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d14b      	bne.n	80055e0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6899      	ldr	r1, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68d2      	ldr	r2, [r2, #12]
 8005582:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6919      	ldr	r1, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	041a      	lsls	r2, r3, #16
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f87f 	bl	800569c <RTC_ExitInitMode>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d11b      	bne.n	80055e0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0203 	bic.w	r2, r2, #3
 80055b6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	22ff      	movs	r2, #255	; 0xff
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005600:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005602:	f7fc fcf3 	bl	8001fec <HAL_GetTick>
 8005606:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005608:	e009      	b.n	800561e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800560a:	f7fc fcef 	bl	8001fec <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005618:	d901      	bls.n	800561e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e007      	b.n	800562e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ee      	beq.n	800560a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d120      	bne.n	8005692 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f04f 32ff 	mov.w	r2, #4294967295
 8005658:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800565a:	f7fc fcc7 	bl	8001fec <HAL_GetTick>
 800565e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005660:	e00d      	b.n	800567e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005662:	f7fc fcc3 	bl	8001fec <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005670:	d905      	bls.n	800567e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2203      	movs	r2, #3
 800567a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <RTC_EnterInitMode+0x5c>
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d1e7      	bne.n	8005662 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80056a8:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <RTC_ExitInitMode+0x78>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <RTC_ExitInitMode+0x78>)
 80056ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80056b4:	4b17      	ldr	r3, [pc, #92]	; (8005714 <RTC_ExitInitMode+0x78>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10c      	bne.n	80056da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff92 	bl	80055ea <HAL_RTC_WaitForSynchro>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01e      	beq.n	800570a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2203      	movs	r2, #3
 80056d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	e017      	b.n	800570a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <RTC_ExitInitMode+0x78>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <RTC_ExitInitMode+0x78>)
 80056e0:	f023 0320 	bic.w	r3, r3, #32
 80056e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff7f 	bl	80055ea <HAL_RTC_WaitForSynchro>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2203      	movs	r2, #3
 80056f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <RTC_ExitInitMode+0x78>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	4a04      	ldr	r2, [pc, #16]	; (8005714 <RTC_ExitInitMode+0x78>)
 8005704:	f043 0320 	orr.w	r3, r3, #32
 8005708:	6093      	str	r3, [r2, #8]
  }

  return status;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40002800 	.word	0x40002800

08005718 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800572e:	2302      	movs	r3, #2
 8005730:	e07f      	b.n	8005832 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	22ca      	movs	r2, #202	; 0xca
 8005748:	625a      	str	r2, [r3, #36]	; 0x24
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2253      	movs	r2, #83	; 0x53
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005760:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005772:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d120      	bne.n	80057c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005782:	f7fc fc33 	bl	8001fec <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005788:	e015      	b.n	80057b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800578a:	f7fc fc2f 	bl	8001fec <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005798:	d90d      	bls.n	80057b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	22ff      	movs	r2, #255	; 0xff
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2203      	movs	r2, #3
 80057a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e03d      	b.n	8005832 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0e2      	beq.n	800578a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f023 0107 	bic.w	r1, r3, #7
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	430a      	orrs	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a15      	ldr	r2, [pc, #84]	; (800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ea:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80057ec:	4b13      	ldr	r3, [pc, #76]	; (800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4a12      	ldr	r2, [pc, #72]	; (800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80057f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057f6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005806:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005816:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	22ff      	movs	r2, #255	; 0xff
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40010400 	.word	0x40010400

08005840 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800584a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800584e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800586e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f80b 	bl	800588c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40010400 	.word	0x40010400

0800588c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3350      	adds	r3, #80	; 0x50
 80058b2:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	009a      	lsls	r2, r3, #2
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6013      	str	r3, [r2, #0]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3350      	adds	r3, #80	; 0x50
 80058e2:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e049      	b.n	80059a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fc f921 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 f967 	bl	8005c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e047      	b.n	8005a54 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <HAL_TIM_Base_Start+0xb4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01d      	beq.n	8005a12 <HAL_TIM_Base_Start+0x66>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d018      	beq.n	8005a12 <HAL_TIM_Base_Start+0x66>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_TIM_Base_Start+0xb8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_TIM_Base_Start+0x66>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <HAL_TIM_Base_Start+0xbc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_TIM_Base_Start+0x66>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <HAL_TIM_Base_Start+0xc0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_TIM_Base_Start+0x66>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <HAL_TIM_Base_Start+0xc4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_TIM_Base_Start+0x66>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <HAL_TIM_Base_Start+0xc8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d115      	bne.n	8005a3e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <HAL_TIM_Base_Start+0xcc>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b06      	cmp	r3, #6
 8005a22:	d015      	beq.n	8005a50 <HAL_TIM_Base_Start+0xa4>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2a:	d011      	beq.n	8005a50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3c:	e008      	b.n	8005a50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e000      	b.n	8005a52 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40013400 	.word	0x40013400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	00010007 	.word	0x00010007

08005a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0b6      	b.n	8005c06 <HAL_TIM_ConfigClockSource+0x18a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad4:	d03e      	beq.n	8005b54 <HAL_TIM_ConfigClockSource+0xd8>
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ada:	f200 8087 	bhi.w	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	f000 8086 	beq.w	8005bf2 <HAL_TIM_ConfigClockSource+0x176>
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aea:	d87f      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005aec:	2b70      	cmp	r3, #112	; 0x70
 8005aee:	d01a      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0xaa>
 8005af0:	2b70      	cmp	r3, #112	; 0x70
 8005af2:	d87b      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005af4:	2b60      	cmp	r3, #96	; 0x60
 8005af6:	d050      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x11e>
 8005af8:	2b60      	cmp	r3, #96	; 0x60
 8005afa:	d877      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005afc:	2b50      	cmp	r3, #80	; 0x50
 8005afe:	d03c      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0xfe>
 8005b00:	2b50      	cmp	r3, #80	; 0x50
 8005b02:	d873      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d058      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x13e>
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d86f      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b0c:	2b30      	cmp	r3, #48	; 0x30
 8005b0e:	d064      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b10:	2b30      	cmp	r3, #48	; 0x30
 8005b12:	d86b      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d060      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d867      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d05c      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d05a      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b24:	e062      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6899      	ldr	r1, [r3, #8]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f000 f97f 	bl	8005e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	609a      	str	r2, [r3, #8]
      break;
 8005b52:	e04f      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	6899      	ldr	r1, [r3, #8]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f000 f968 	bl	8005e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b76:	609a      	str	r2, [r3, #8]
      break;
 8005b78:	e03c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 f8dc 	bl	8005d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2150      	movs	r1, #80	; 0x50
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f935 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 8005b98:	e02c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 f8fb 	bl	8005da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2160      	movs	r1, #96	; 0x60
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f925 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e01c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 f8bc 	bl	8005d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f915 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e00c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f000 f90c 	bl	8005e02 <TIM_ITRx_SetConfig>
      break;
 8005bea:	e003      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e000      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a40      	ldr	r2, [pc, #256]	; (8005d24 <TIM_Base_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d00f      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3d      	ldr	r2, [pc, #244]	; (8005d28 <TIM_Base_SetConfig+0x118>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3c      	ldr	r2, [pc, #240]	; (8005d2c <TIM_Base_SetConfig+0x11c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d007      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3b      	ldr	r2, [pc, #236]	; (8005d30 <TIM_Base_SetConfig+0x120>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a3a      	ldr	r2, [pc, #232]	; (8005d34 <TIM_Base_SetConfig+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d108      	bne.n	8005c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2f      	ldr	r2, [pc, #188]	; (8005d24 <TIM_Base_SetConfig+0x114>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01f      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c70:	d01b      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2c      	ldr	r2, [pc, #176]	; (8005d28 <TIM_Base_SetConfig+0x118>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d017      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2b      	ldr	r2, [pc, #172]	; (8005d2c <TIM_Base_SetConfig+0x11c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <TIM_Base_SetConfig+0x120>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <TIM_Base_SetConfig+0x124>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a28      	ldr	r2, [pc, #160]	; (8005d38 <TIM_Base_SetConfig+0x128>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a27      	ldr	r2, [pc, #156]	; (8005d3c <TIM_Base_SetConfig+0x12c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_Base_SetConfig+0x9a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a26      	ldr	r2, [pc, #152]	; (8005d40 <TIM_Base_SetConfig+0x130>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d108      	bne.n	8005cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <TIM_Base_SetConfig+0x114>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00f      	beq.n	8005d08 <TIM_Base_SetConfig+0xf8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <TIM_Base_SetConfig+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00b      	beq.n	8005d08 <TIM_Base_SetConfig+0xf8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <TIM_Base_SetConfig+0x128>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d007      	beq.n	8005d08 <TIM_Base_SetConfig+0xf8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a10      	ldr	r2, [pc, #64]	; (8005d3c <TIM_Base_SetConfig+0x12c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_Base_SetConfig+0xf8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <TIM_Base_SetConfig+0x130>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d103      	bne.n	8005d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	615a      	str	r2, [r3, #20]
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800

08005d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f023 0201 	bic.w	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 030a 	bic.w	r3, r3, #10
 8005d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0210 	bic.w	r2, r3, #16
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f043 0307 	orr.w	r3, r3, #7
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	021a      	lsls	r2, r3, #8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	609a      	str	r2, [r3, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e068      	b.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d108      	bne.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01d      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d018      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1a      	ldr	r2, [pc, #104]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a13      	ldr	r2, [pc, #76]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10c      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40014000 	.word	0x40014000

08005f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e040      	b.n	800601c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb fe8e 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	; 0x24
 8005fb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fc18 	bl	80067fc <UART_SetConfig>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e022      	b.n	800601c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fec4 	bl	8006d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 ff4b 	bl	8006eb0 <UART_CheckIdleState>
 800601a:	4603      	mov	r3, r0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006038:	2b20      	cmp	r3, #32
 800603a:	f040 8082 	bne.w	8006142 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_UART_Transmit+0x26>
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e07a      	b.n	8006144 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_UART_Transmit+0x38>
 8006058:	2302      	movs	r3, #2
 800605a:	e073      	b.n	8006144 <HAL_UART_Transmit+0x120>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2221      	movs	r2, #33	; 0x21
 8006070:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006072:	f7fb ffbb 	bl	8001fec <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006090:	d108      	bne.n	80060a4 <HAL_UART_Transmit+0x80>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d104      	bne.n	80060a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	e003      	b.n	80060ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060b4:	e02d      	b.n	8006112 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2200      	movs	r2, #0
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 ff3e 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e039      	b.n	8006144 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	881a      	ldrh	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e2:	b292      	uxth	r2, r2
 80060e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	3302      	adds	r3, #2
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	e008      	b.n	8006100 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	b292      	uxth	r2, r2
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3301      	adds	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1cb      	bne.n	80060b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2200      	movs	r2, #0
 8006126:	2140      	movs	r1, #64	; 0x40
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 ff0a 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e005      	b.n	8006144 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800615e:	2b20      	cmp	r3, #32
 8006160:	d142      	bne.n	80061e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_Receive_IT+0x22>
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e03b      	b.n	80061ea <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_UART_Receive_IT+0x34>
 800617c:	2302      	movs	r3, #2
 800617e:	e034      	b.n	80061ea <HAL_UART_Receive_IT+0x9e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a18      	ldr	r2, [pc, #96]	; (80061f4 <HAL_UART_Receive_IT+0xa8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d01f      	beq.n	80061d8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d018      	beq.n	80061d8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	613b      	str	r3, [r7, #16]
   return(result);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	69f9      	ldr	r1, [r7, #28]
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	461a      	mov	r2, r3
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 ff74 	bl	80070cc <UART_Start_Receive_IT>
 80061e4:	4603      	mov	r3, r0
 80061e6:	e000      	b.n	80061ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3728      	adds	r7, #40	; 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40008000 	.word	0x40008000

080061f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b0ba      	sub	sp, #232	; 0xe8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800621e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006222:	f640 030f 	movw	r3, #2063	; 0x80f
 8006226:	4013      	ands	r3, r2
 8006228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800622c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d115      	bne.n	8006260 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00f      	beq.n	8006260 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d009      	beq.n	8006260 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 82a6 	beq.w	80067a2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
      }
      return;
 800625e:	e2a0      	b.n	80067a2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8117 	beq.w	8006498 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800626a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006276:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800627a:	4b85      	ldr	r3, [pc, #532]	; (8006490 <HAL_UART_IRQHandler+0x298>)
 800627c:	4013      	ands	r3, r2
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 810a 	beq.w	8006498 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d011      	beq.n	80062b4 <HAL_UART_IRQHandler+0xbc>
 8006290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2201      	movs	r2, #1
 80062a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062aa:	f043 0201 	orr.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d011      	beq.n	80062e4 <HAL_UART_IRQHandler+0xec>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2202      	movs	r2, #2
 80062d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062da:	f043 0204 	orr.w	r2, r3, #4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d011      	beq.n	8006314 <HAL_UART_IRQHandler+0x11c>
 80062f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2204      	movs	r2, #4
 8006302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800630a:	f043 0202 	orr.w	r2, r3, #2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d017      	beq.n	8006350 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800632c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006330:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2208      	movs	r2, #8
 800633e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006346:	f043 0208 	orr.w	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006358:	2b00      	cmp	r3, #0
 800635a:	d012      	beq.n	8006382 <HAL_UART_IRQHandler+0x18a>
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 820c 	beq.w	80067a6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00d      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800639a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d005      	beq.n	80063da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d04f      	beq.n	800647a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 ff40 	bl	8007260 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d141      	bne.n	8006472 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800641a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800641e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006426:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1d9      	bne.n	80063ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643e:	2b00      	cmp	r3, #0
 8006440:	d013      	beq.n	800646a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	4a13      	ldr	r2, [pc, #76]	; (8006494 <HAL_UART_IRQHandler+0x29c>)
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd fa5f 	bl	8003912 <HAL_DMA_Abort_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d017      	beq.n	800648a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e00f      	b.n	800648a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9b0 	bl	80067d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	e00b      	b.n	800648a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9ac 	bl	80067d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	e007      	b.n	800648a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9a8 	bl	80067d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006488:	e18d      	b.n	80067a6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648a:	bf00      	nop
    return;
 800648c:	e18b      	b.n	80067a6 <HAL_UART_IRQHandler+0x5ae>
 800648e:	bf00      	nop
 8006490:	04000120 	.word	0x04000120
 8006494:	08007327 	.word	0x08007327

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649c:	2b01      	cmp	r3, #1
 800649e:	f040 8146 	bne.w	800672e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 813f 	beq.w	800672e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8138 	beq.w	800672e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2210      	movs	r2, #16
 80064c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	f040 80b4 	bne.w	800663e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 815f 	beq.w	80067aa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f6:	429a      	cmp	r2, r3
 80064f8:	f080 8157 	bcs.w	80067aa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 8085 	bne.w	8006622 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800652c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006546:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800654e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800655a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1da      	bne.n	8006518 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3308      	adds	r3, #8
 8006582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006586:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800658a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800658e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e1      	bne.n	8006562 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e3      	bne.n	800659e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f2:	f023 0310 	bic.w	r3, r3, #16
 80065f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006604:	65bb      	str	r3, [r7, #88]	; 0x58
 8006606:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800660a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e4      	bne.n	80065e2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661c:	4618      	mov	r0, r3
 800661e:	f7fd f93a 	bl	8003896 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800662e:	b29b      	uxth	r3, r3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	b29b      	uxth	r3, r3
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8d4 	bl	80067e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800663c:	e0b5      	b.n	80067aa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800664a:	b29b      	uxth	r3, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80a7 	beq.w	80067ae <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006660:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80a2 	beq.w	80067ae <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800667e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800668c:	647b      	str	r3, [r7, #68]	; 0x44
 800668e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e4      	bne.n	800666a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	623b      	str	r3, [r7, #32]
   return(result);
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066c4:	633a      	str	r2, [r7, #48]	; 0x30
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e3      	bne.n	80066a0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0310 	bic.w	r3, r3, #16
 80066fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	69b9      	ldr	r1, [r7, #24]
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	617b      	str	r3, [r7, #20]
   return(result);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e4      	bne.n	80066ea <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f85c 	bl	80067e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800672c:	e03f      	b.n	80067ae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <HAL_UART_IRQHandler+0x560>
 800673a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800674e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 ff88 	bl	8007666 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006756:	e02d      	b.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00e      	beq.n	8006782 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01c      	beq.n	80067b2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
    }
    return;
 8006780:	e017      	b.n	80067b2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d012      	beq.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00c      	beq.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fdd9 	bl	8007352 <UART_EndTransmit_IT>
    return;
 80067a0:	e008      	b.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067a2:	bf00      	nop
 80067a4:	e006      	b.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80067a6:	bf00      	nop
 80067a8:	e004      	b.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80067b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067b4:	37e8      	adds	r7, #232	; 0xe8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop

080067bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006800:	b08a      	sub	sp, #40	; 0x28
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	431a      	orrs	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	431a      	orrs	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	4313      	orrs	r3, r2
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4ba4      	ldr	r3, [pc, #656]	; (8006abc <UART_SetConfig+0x2c0>)
 800682c:	4013      	ands	r3, r2
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006834:	430b      	orrs	r3, r1
 8006836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a99      	ldr	r2, [pc, #612]	; (8006ac0 <UART_SetConfig+0x2c4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d004      	beq.n	8006868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006864:	4313      	orrs	r3, r2
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006878:	430a      	orrs	r2, r1
 800687a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a90      	ldr	r2, [pc, #576]	; (8006ac4 <UART_SetConfig+0x2c8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d126      	bne.n	80068d4 <UART_SetConfig+0xd8>
 8006886:	4b90      	ldr	r3, [pc, #576]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	2b03      	cmp	r3, #3
 8006892:	d81b      	bhi.n	80068cc <UART_SetConfig+0xd0>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0xa0>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068ad 	.word	0x080068ad
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b2:	e116      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068b4:	2302      	movs	r3, #2
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ba:	e112      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068bc:	2304      	movs	r3, #4
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c2:	e10e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068c4:	2308      	movs	r3, #8
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ca:	e10a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d2:	e106      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <UART_SetConfig+0x2d0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d138      	bne.n	8006950 <UART_SetConfig+0x154>
 80068de:	4b7a      	ldr	r3, [pc, #488]	; (8006ac8 <UART_SetConfig+0x2cc>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f003 030c 	and.w	r3, r3, #12
 80068e8:	2b0c      	cmp	r3, #12
 80068ea:	d82d      	bhi.n	8006948 <UART_SetConfig+0x14c>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0xf8>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006929 	.word	0x08006929
 80068f8:	08006949 	.word	0x08006949
 80068fc:	08006949 	.word	0x08006949
 8006900:	08006949 	.word	0x08006949
 8006904:	08006939 	.word	0x08006939
 8006908:	08006949 	.word	0x08006949
 800690c:	08006949 	.word	0x08006949
 8006910:	08006949 	.word	0x08006949
 8006914:	08006931 	.word	0x08006931
 8006918:	08006949 	.word	0x08006949
 800691c:	08006949 	.word	0x08006949
 8006920:	08006949 	.word	0x08006949
 8006924:	08006941 	.word	0x08006941
 8006928:	2300      	movs	r3, #0
 800692a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692e:	e0d8      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006930:	2302      	movs	r3, #2
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e0d4      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006938:	2304      	movs	r3, #4
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e0d0      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006940:	2308      	movs	r3, #8
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e0cc      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006948:	2310      	movs	r3, #16
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e0c8      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a5e      	ldr	r2, [pc, #376]	; (8006ad0 <UART_SetConfig+0x2d4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d125      	bne.n	80069a6 <UART_SetConfig+0x1aa>
 800695a:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <UART_SetConfig+0x2cc>)
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006960:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d016      	beq.n	8006996 <UART_SetConfig+0x19a>
 8006968:	2b30      	cmp	r3, #48	; 0x30
 800696a:	d818      	bhi.n	800699e <UART_SetConfig+0x1a2>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d00a      	beq.n	8006986 <UART_SetConfig+0x18a>
 8006970:	2b20      	cmp	r3, #32
 8006972:	d814      	bhi.n	800699e <UART_SetConfig+0x1a2>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <UART_SetConfig+0x182>
 8006978:	2b10      	cmp	r3, #16
 800697a:	d008      	beq.n	800698e <UART_SetConfig+0x192>
 800697c:	e00f      	b.n	800699e <UART_SetConfig+0x1a2>
 800697e:	2300      	movs	r3, #0
 8006980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006984:	e0ad      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006986:	2302      	movs	r3, #2
 8006988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698c:	e0a9      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 800698e:	2304      	movs	r3, #4
 8006990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006994:	e0a5      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006996:	2308      	movs	r3, #8
 8006998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699c:	e0a1      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 800699e:	2310      	movs	r3, #16
 80069a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a4:	e09d      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a4a      	ldr	r2, [pc, #296]	; (8006ad4 <UART_SetConfig+0x2d8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d125      	bne.n	80069fc <UART_SetConfig+0x200>
 80069b0:	4b45      	ldr	r3, [pc, #276]	; (8006ac8 <UART_SetConfig+0x2cc>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ba:	2bc0      	cmp	r3, #192	; 0xc0
 80069bc:	d016      	beq.n	80069ec <UART_SetConfig+0x1f0>
 80069be:	2bc0      	cmp	r3, #192	; 0xc0
 80069c0:	d818      	bhi.n	80069f4 <UART_SetConfig+0x1f8>
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d00a      	beq.n	80069dc <UART_SetConfig+0x1e0>
 80069c6:	2b80      	cmp	r3, #128	; 0x80
 80069c8:	d814      	bhi.n	80069f4 <UART_SetConfig+0x1f8>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <UART_SetConfig+0x1d8>
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d008      	beq.n	80069e4 <UART_SetConfig+0x1e8>
 80069d2:	e00f      	b.n	80069f4 <UART_SetConfig+0x1f8>
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e082      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069dc:	2302      	movs	r3, #2
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e07e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e07a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069ec:	2308      	movs	r3, #8
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e076      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069f4:	2310      	movs	r3, #16
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e072      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a35      	ldr	r2, [pc, #212]	; (8006ad8 <UART_SetConfig+0x2dc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d12a      	bne.n	8006a5c <UART_SetConfig+0x260>
 8006a06:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a14:	d01a      	beq.n	8006a4c <UART_SetConfig+0x250>
 8006a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a1a:	d81b      	bhi.n	8006a54 <UART_SetConfig+0x258>
 8006a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a20:	d00c      	beq.n	8006a3c <UART_SetConfig+0x240>
 8006a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a26:	d815      	bhi.n	8006a54 <UART_SetConfig+0x258>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <UART_SetConfig+0x238>
 8006a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a30:	d008      	beq.n	8006a44 <UART_SetConfig+0x248>
 8006a32:	e00f      	b.n	8006a54 <UART_SetConfig+0x258>
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e052      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e04e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e04a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e046      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e042      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <UART_SetConfig+0x2c4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d13a      	bne.n	8006adc <UART_SetConfig+0x2e0>
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <UART_SetConfig+0x2cc>)
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a74:	d01a      	beq.n	8006aac <UART_SetConfig+0x2b0>
 8006a76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a7a:	d81b      	bhi.n	8006ab4 <UART_SetConfig+0x2b8>
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a80:	d00c      	beq.n	8006a9c <UART_SetConfig+0x2a0>
 8006a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a86:	d815      	bhi.n	8006ab4 <UART_SetConfig+0x2b8>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <UART_SetConfig+0x298>
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a90:	d008      	beq.n	8006aa4 <UART_SetConfig+0x2a8>
 8006a92:	e00f      	b.n	8006ab4 <UART_SetConfig+0x2b8>
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e022      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e01e      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e01a      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab2:	e016      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aba:	e012      	b.n	8006ae2 <UART_SetConfig+0x2e6>
 8006abc:	efff69f3 	.word	0xefff69f3
 8006ac0:	40008000 	.word	0x40008000
 8006ac4:	40013800 	.word	0x40013800
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40004400 	.word	0x40004400
 8006ad0:	40004800 	.word	0x40004800
 8006ad4:	40004c00 	.word	0x40004c00
 8006ad8:	40005000 	.word	0x40005000
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a9f      	ldr	r2, [pc, #636]	; (8006d64 <UART_SetConfig+0x568>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d17a      	bne.n	8006be2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d824      	bhi.n	8006b3e <UART_SetConfig+0x342>
 8006af4:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0x300>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b3f 	.word	0x08006b3f
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b3f 	.word	0x08006b3f
 8006b0c:	08006b2f 	.word	0x08006b2f
 8006b10:	08006b3f 	.word	0x08006b3f
 8006b14:	08006b3f 	.word	0x08006b3f
 8006b18:	08006b3f 	.word	0x08006b3f
 8006b1c:	08006b37 	.word	0x08006b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b20:	f7fd ff90 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8006b24:	61f8      	str	r0, [r7, #28]
        break;
 8006b26:	e010      	b.n	8006b4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b28:	4b8f      	ldr	r3, [pc, #572]	; (8006d68 <UART_SetConfig+0x56c>)
 8006b2a:	61fb      	str	r3, [r7, #28]
        break;
 8006b2c:	e00d      	b.n	8006b4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2e:	f7fd fef1 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 8006b32:	61f8      	str	r0, [r7, #28]
        break;
 8006b34:	e009      	b.n	8006b4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3a:	61fb      	str	r3, [r7, #28]
        break;
 8006b3c:	e005      	b.n	8006b4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80fb 	beq.w	8006d48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d305      	bcc.n	8006b6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d903      	bls.n	8006b76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b74:	e0e8      	b.n	8006d48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	461c      	mov	r4, r3
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	022b      	lsls	r3, r5, #8
 8006b88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b8c:	0222      	lsls	r2, r4, #8
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	6849      	ldr	r1, [r1, #4]
 8006b92:	0849      	lsrs	r1, r1, #1
 8006b94:	2000      	movs	r0, #0
 8006b96:	4688      	mov	r8, r1
 8006b98:	4681      	mov	r9, r0
 8006b9a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b9e:	eb43 0b09 	adc.w	fp, r3, r9
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	f7fa f878 	bl	8000ca8 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc6:	d308      	bcc.n	8006bda <UART_SetConfig+0x3de>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bce:	d204      	bcs.n	8006bda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	60da      	str	r2, [r3, #12]
 8006bd8:	e0b6      	b.n	8006d48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006be0:	e0b2      	b.n	8006d48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bea:	d15e      	bne.n	8006caa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	d828      	bhi.n	8006c46 <UART_SetConfig+0x44a>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x400>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c31 	.word	0x08006c31
 8006c08:	08006c47 	.word	0x08006c47
 8006c0c:	08006c37 	.word	0x08006c37
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c47 	.word	0x08006c47
 8006c18:	08006c47 	.word	0x08006c47
 8006c1c:	08006c3f 	.word	0x08006c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c20:	f7fd ff10 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8006c24:	61f8      	str	r0, [r7, #28]
        break;
 8006c26:	e014      	b.n	8006c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c28:	f7fd ff22 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 8006c2c:	61f8      	str	r0, [r7, #28]
        break;
 8006c2e:	e010      	b.n	8006c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b4d      	ldr	r3, [pc, #308]	; (8006d68 <UART_SetConfig+0x56c>)
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e00d      	b.n	8006c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fd fe6d 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 8006c3a:	61f8      	str	r0, [r7, #28]
        break;
 8006c3c:	e009      	b.n	8006c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c42:	61fb      	str	r3, [r7, #28]
        break;
 8006c44:	e005      	b.n	8006c52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d077      	beq.n	8006d48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	005a      	lsls	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b0f      	cmp	r3, #15
 8006c72:	d916      	bls.n	8006ca2 <UART_SetConfig+0x4a6>
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7a:	d212      	bcs.n	8006ca2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f023 030f 	bic.w	r3, r3, #15
 8006c84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	8afb      	ldrh	r3, [r7, #22]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	8afa      	ldrh	r2, [r7, #22]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	e052      	b.n	8006d48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca8:	e04e      	b.n	8006d48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d827      	bhi.n	8006d02 <UART_SetConfig+0x506>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0x4bc>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d03 	.word	0x08006d03
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fd feb2 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	61f8      	str	r0, [r7, #28]
        break;
 8006ce2:	e014      	b.n	8006d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fd fec4 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	61f8      	str	r0, [r7, #28]
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <UART_SetConfig+0x56c>)
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fd fe0f 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 8006cf6:	61f8      	str	r0, [r7, #28]
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	61fb      	str	r3, [r7, #28]
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d019      	beq.n	8006d48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	085a      	lsrs	r2, r3, #1
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	441a      	add	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	d909      	bls.n	8006d42 <UART_SetConfig+0x546>
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d34:	d205      	bcs.n	8006d42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60da      	str	r2, [r3, #12]
 8006d40:	e002      	b.n	8006d48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	; 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d62:	bf00      	nop
 8006d64:	40008000 	.word	0x40008000
 8006d68:	00f42400 	.word	0x00f42400

08006d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6a:	d10a      	bne.n	8006e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ec0:	f7fb f894 	bl	8001fec <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d10e      	bne.n	8006ef2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f82d 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e023      	b.n	8006f3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d10e      	bne.n	8006f1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f817 	bl	8006f42 <UART_WaitOnFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e00d      	b.n	8006f3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b09c      	sub	sp, #112	; 0x70
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f52:	e0a5      	b.n	80070a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5a:	f000 80a1 	beq.w	80070a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5e:	f7fb f845 	bl	8001fec <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d13e      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f88:	667b      	str	r3, [r7, #100]	; 0x64
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1e6      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f023 0301 	bic.w	r3, r3, #1
 8006fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e5      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e067      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d04f      	beq.n	80070a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800700a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800700e:	d147      	bne.n	80070a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007018:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800702e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800703e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e6      	bne.n	800701a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3308      	adds	r3, #8
 8007052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	613b      	str	r3, [r7, #16]
   return(result);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	66bb      	str	r3, [r7, #104]	; 0x68
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3308      	adds	r3, #8
 800706a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800706c:	623a      	str	r2, [r7, #32]
 800706e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	69f9      	ldr	r1, [r7, #28]
 8007072:	6a3a      	ldr	r2, [r7, #32]
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	61bb      	str	r3, [r7, #24]
   return(result);
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e5      	bne.n	800704c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e010      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69da      	ldr	r2, [r3, #28]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4013      	ands	r3, r2
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f43f af4a 	beq.w	8006f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3770      	adds	r7, #112	; 0x70
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b097      	sub	sp, #92	; 0x5c
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fe:	d10e      	bne.n	800711e <UART_Start_Receive_IT+0x52>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d105      	bne.n	8007114 <UART_Start_Receive_IT+0x48>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800710e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007112:	e02d      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	22ff      	movs	r2, #255	; 0xff
 8007118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800711c:	e028      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <UART_Start_Receive_IT+0x76>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d104      	bne.n	8007138 <UART_Start_Receive_IT+0x6c>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007136:	e01b      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	227f      	movs	r2, #127	; 0x7f
 800713c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007140:	e016      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800714a:	d10d      	bne.n	8007168 <UART_Start_Receive_IT+0x9c>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <UART_Start_Receive_IT+0x92>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	227f      	movs	r2, #127	; 0x7f
 8007158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800715c:	e008      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	223f      	movs	r2, #63	; 0x3f
 8007162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007166:	e003      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2222      	movs	r2, #34	; 0x22
 800717c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	657b      	str	r3, [r7, #84]	; 0x54
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800719e:	64ba      	str	r2, [r7, #72]	; 0x48
 80071a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e5      	bne.n	800717e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ba:	d107      	bne.n	80071cc <UART_Start_Receive_IT+0x100>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d103      	bne.n	80071cc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a24      	ldr	r2, [pc, #144]	; (8007258 <UART_Start_Receive_IT+0x18c>)
 80071c8:	665a      	str	r2, [r3, #100]	; 0x64
 80071ca:	e002      	b.n	80071d2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4a23      	ldr	r2, [pc, #140]	; (800725c <UART_Start_Receive_IT+0x190>)
 80071d0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d019      	beq.n	8007216 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
 8007202:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e6      	bne.n	80071e2 <UART_Start_Receive_IT+0x116>
 8007214:	e018      	b.n	8007248 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	613b      	str	r3, [r7, #16]
   return(result);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f043 0320 	orr.w	r3, r3, #32
 800722a:	653b      	str	r3, [r7, #80]	; 0x50
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	69f9      	ldr	r1, [r7, #28]
 800723a:	6a3a      	ldr	r2, [r7, #32]
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	61bb      	str	r3, [r7, #24]
   return(result);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e6      	bne.n	8007216 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	375c      	adds	r7, #92	; 0x5c
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	08007507 	.word	0x08007507
 800725c:	080073a7 	.word	0x080073a7

08007260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b095      	sub	sp, #84	; 0x54
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007286:	643b      	str	r3, [r7, #64]	; 0x40
 8007288:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800728c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e5      	bne.n	800729a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d118      	bne.n	8007308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f023 0310 	bic.w	r3, r3, #16
 80072ea:	647b      	str	r3, [r7, #68]	; 0x44
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6979      	ldr	r1, [r7, #20]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	613b      	str	r3, [r7, #16]
   return(result);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e6      	bne.n	80072d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	665a      	str	r2, [r3, #100]	; 0x64
}
 800731a:	bf00      	nop
 800731c:	3754      	adds	r7, #84	; 0x54
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fa43 	bl	80067d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b088      	sub	sp, #32
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	60bb      	str	r3, [r7, #8]
   return(result);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800736e:	61fb      	str	r3, [r7, #28]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6979      	ldr	r1, [r7, #20]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	613b      	str	r3, [r7, #16]
   return(result);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e6      	bne.n	800735a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fa0f 	bl	80067bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800739e:	bf00      	nop
 80073a0:	3720      	adds	r7, #32
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b096      	sub	sp, #88	; 0x58
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073bc:	2b22      	cmp	r3, #34	; 0x22
 80073be:	f040 8094 	bne.w	80074ea <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073cc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80073d0:	b2d9      	uxtb	r1, r3
 80073d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073dc:	400a      	ands	r2, r1
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d179      	bne.n	80074fe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800741e:	653b      	str	r3, [r7, #80]	; 0x50
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007428:	647b      	str	r3, [r7, #68]	; 0x44
 800742a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800742e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	623b      	str	r3, [r7, #32]
   return(result);
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	f023 0301 	bic.w	r3, r3, #1
 8007452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3308      	adds	r3, #8
 800745a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800745c:	633a      	str	r2, [r7, #48]	; 0x30
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e5      	bne.n	800743c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007480:	2b01      	cmp	r3, #1
 8007482:	d12e      	bne.n	80074e2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	60fb      	str	r3, [r7, #12]
   return(result);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0310 	bic.w	r3, r3, #16
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	69b9      	ldr	r1, [r7, #24]
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	617b      	str	r3, [r7, #20]
   return(result);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d103      	bne.n	80074d2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2210      	movs	r2, #16
 80074d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff f982 	bl	80067e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e0:	e00d      	b.n	80074fe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7f9 fec4 	bl	8001270 <HAL_UART_RxCpltCallback>
}
 80074e8:	e009      	b.n	80074fe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	8b1b      	ldrh	r3, [r3, #24]
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0208 	orr.w	r2, r2, #8
 80074fa:	b292      	uxth	r2, r2
 80074fc:	831a      	strh	r2, [r3, #24]
}
 80074fe:	bf00      	nop
 8007500:	3758      	adds	r7, #88	; 0x58
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b096      	sub	sp, #88	; 0x58
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007514:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751c:	2b22      	cmp	r3, #34	; 0x22
 800751e:	f040 8094 	bne.w	800764a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007528:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007532:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007536:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800753a:	4013      	ands	r3, r2
 800753c:	b29a      	uxth	r2, r3
 800753e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007540:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	1c9a      	adds	r2, r3, #2
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d179      	bne.n	800765e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800757e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007588:	643b      	str	r3, [r7, #64]	; 0x40
 800758a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800758e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e6      	bne.n	800756a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e5      	bne.n	800759c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d12e      	bne.n	8007642 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f023 0310 	bic.w	r3, r3, #16
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6979      	ldr	r1, [r7, #20]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	613b      	str	r3, [r7, #16]
   return(result);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b10      	cmp	r3, #16
 8007628:	d103      	bne.n	8007632 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2210      	movs	r2, #16
 8007630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff f8d2 	bl	80067e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007640:	e00d      	b.n	800765e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7f9 fe14 	bl	8001270 <HAL_UART_RxCpltCallback>
}
 8007648:	e009      	b.n	800765e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	8b1b      	ldrh	r3, [r3, #24]
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0208 	orr.w	r2, r2, #8
 800765a:	b292      	uxth	r2, r2
 800765c:	831a      	strh	r2, [r3, #24]
}
 800765e:	bf00      	nop
 8007660:	3758      	adds	r7, #88	; 0x58
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	0000      	movs	r0, r0
 800767c:	0000      	movs	r0, r0
	...

08007680 <_initVoltsArray>:

/*
 * Private functions
 */

static void _initVoltsArray(void){
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
    _vs[0] = 3.200; 
 8007684:	49b4      	ldr	r1, [pc, #720]	; (8007958 <_initVoltsArray+0x2d8>)
 8007686:	a36e      	add	r3, pc, #440	; (adr r3, 8007840 <_initVoltsArray+0x1c0>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	e9c1 2300 	strd	r2, r3, [r1]
    _vs[1] = 3.250; _vs[2] = 3.300; _vs[3] = 3.350; _vs[4] = 3.400; _vs[5] = 3.450;
 8007690:	49b1      	ldr	r1, [pc, #708]	; (8007958 <_initVoltsArray+0x2d8>)
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	4bb1      	ldr	r3, [pc, #708]	; (800795c <_initVoltsArray+0x2dc>)
 8007698:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800769c:	49ae      	ldr	r1, [pc, #696]	; (8007958 <_initVoltsArray+0x2d8>)
 800769e:	a36a      	add	r3, pc, #424	; (adr r3, 8007848 <_initVoltsArray+0x1c8>)
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80076a8:	49ab      	ldr	r1, [pc, #684]	; (8007958 <_initVoltsArray+0x2d8>)
 80076aa:	a369      	add	r3, pc, #420	; (adr r3, 8007850 <_initVoltsArray+0x1d0>)
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80076b4:	49a8      	ldr	r1, [pc, #672]	; (8007958 <_initVoltsArray+0x2d8>)
 80076b6:	a368      	add	r3, pc, #416	; (adr r3, 8007858 <_initVoltsArray+0x1d8>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80076c0:	49a5      	ldr	r1, [pc, #660]	; (8007958 <_initVoltsArray+0x2d8>)
 80076c2:	a367      	add	r3, pc, #412	; (adr r3, 8007860 <_initVoltsArray+0x1e0>)
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    _vs[6] = 3.500; _vs[7] = 3.550; _vs[8] = 3.600; _vs[9] = 3.650; _vs[10] = 3.700;
 80076cc:	49a2      	ldr	r1, [pc, #648]	; (8007958 <_initVoltsArray+0x2d8>)
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	4ba3      	ldr	r3, [pc, #652]	; (8007960 <_initVoltsArray+0x2e0>)
 80076d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80076d8:	499f      	ldr	r1, [pc, #636]	; (8007958 <_initVoltsArray+0x2d8>)
 80076da:	a363      	add	r3, pc, #396	; (adr r3, 8007868 <_initVoltsArray+0x1e8>)
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80076e4:	499c      	ldr	r1, [pc, #624]	; (8007958 <_initVoltsArray+0x2d8>)
 80076e6:	a362      	add	r3, pc, #392	; (adr r3, 8007870 <_initVoltsArray+0x1f0>)
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80076f0:	4999      	ldr	r1, [pc, #612]	; (8007958 <_initVoltsArray+0x2d8>)
 80076f2:	a361      	add	r3, pc, #388	; (adr r3, 8007878 <_initVoltsArray+0x1f8>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80076fc:	4996      	ldr	r1, [pc, #600]	; (8007958 <_initVoltsArray+0x2d8>)
 80076fe:	a360      	add	r3, pc, #384	; (adr r3, 8007880 <_initVoltsArray+0x200>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    _vs[11] = 3.703; _vs[12] = 3.706; _vs[13] = 3.710; _vs[14] = 3.713; _vs[15] = 3.716;
 8007708:	4993      	ldr	r1, [pc, #588]	; (8007958 <_initVoltsArray+0x2d8>)
 800770a:	a35f      	add	r3, pc, #380	; (adr r3, 8007888 <_initVoltsArray+0x208>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8007714:	4990      	ldr	r1, [pc, #576]	; (8007958 <_initVoltsArray+0x2d8>)
 8007716:	a35e      	add	r3, pc, #376	; (adr r3, 8007890 <_initVoltsArray+0x210>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8007720:	498d      	ldr	r1, [pc, #564]	; (8007958 <_initVoltsArray+0x2d8>)
 8007722:	a35d      	add	r3, pc, #372	; (adr r3, 8007898 <_initVoltsArray+0x218>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800772c:	498a      	ldr	r1, [pc, #552]	; (8007958 <_initVoltsArray+0x2d8>)
 800772e:	a35c      	add	r3, pc, #368	; (adr r3, 80078a0 <_initVoltsArray+0x220>)
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8007738:	4987      	ldr	r1, [pc, #540]	; (8007958 <_initVoltsArray+0x2d8>)
 800773a:	a35b      	add	r3, pc, #364	; (adr r3, 80078a8 <_initVoltsArray+0x228>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    _vs[16] = 3.719; _vs[17] = 3.723; _vs[18] = 3.726; _vs[19] = 3.729; _vs[20] = 3.732;
 8007744:	4984      	ldr	r1, [pc, #528]	; (8007958 <_initVoltsArray+0x2d8>)
 8007746:	a35a      	add	r3, pc, #360	; (adr r3, 80078b0 <_initVoltsArray+0x230>)
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8007750:	4981      	ldr	r1, [pc, #516]	; (8007958 <_initVoltsArray+0x2d8>)
 8007752:	a359      	add	r3, pc, #356	; (adr r3, 80078b8 <_initVoltsArray+0x238>)
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 800775c:	497e      	ldr	r1, [pc, #504]	; (8007958 <_initVoltsArray+0x2d8>)
 800775e:	a358      	add	r3, pc, #352	; (adr r3, 80078c0 <_initVoltsArray+0x240>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8007768:	497b      	ldr	r1, [pc, #492]	; (8007958 <_initVoltsArray+0x2d8>)
 800776a:	a357      	add	r3, pc, #348	; (adr r3, 80078c8 <_initVoltsArray+0x248>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8007774:	4978      	ldr	r1, [pc, #480]	; (8007958 <_initVoltsArray+0x2d8>)
 8007776:	a356      	add	r3, pc, #344	; (adr r3, 80078d0 <_initVoltsArray+0x250>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    _vs[21] = 3.735; _vs[22] = 3.739; _vs[23] = 3.742; _vs[24] = 3.745; _vs[25] = 3.748;
 8007780:	4975      	ldr	r1, [pc, #468]	; (8007958 <_initVoltsArray+0x2d8>)
 8007782:	a355      	add	r3, pc, #340	; (adr r3, 80078d8 <_initVoltsArray+0x258>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 800778c:	4972      	ldr	r1, [pc, #456]	; (8007958 <_initVoltsArray+0x2d8>)
 800778e:	a354      	add	r3, pc, #336	; (adr r3, 80078e0 <_initVoltsArray+0x260>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
 8007798:	496f      	ldr	r1, [pc, #444]	; (8007958 <_initVoltsArray+0x2d8>)
 800779a:	a353      	add	r3, pc, #332	; (adr r3, 80078e8 <_initVoltsArray+0x268>)
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 80077a4:	496c      	ldr	r1, [pc, #432]	; (8007958 <_initVoltsArray+0x2d8>)
 80077a6:	a352      	add	r3, pc, #328	; (adr r3, 80078f0 <_initVoltsArray+0x270>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 80077b0:	4969      	ldr	r1, [pc, #420]	; (8007958 <_initVoltsArray+0x2d8>)
 80077b2:	a351      	add	r3, pc, #324	; (adr r3, 80078f8 <_initVoltsArray+0x278>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
    _vs[26] = 3.752; _vs[27] = 3.755; _vs[28] = 3.758; _vs[29] = 3.761; _vs[30] = 3.765;
 80077bc:	4966      	ldr	r1, [pc, #408]	; (8007958 <_initVoltsArray+0x2d8>)
 80077be:	a350      	add	r3, pc, #320	; (adr r3, 8007900 <_initVoltsArray+0x280>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
 80077c8:	4963      	ldr	r1, [pc, #396]	; (8007958 <_initVoltsArray+0x2d8>)
 80077ca:	a34f      	add	r3, pc, #316	; (adr r3, 8007908 <_initVoltsArray+0x288>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
 80077d4:	4960      	ldr	r1, [pc, #384]	; (8007958 <_initVoltsArray+0x2d8>)
 80077d6:	a34e      	add	r3, pc, #312	; (adr r3, 8007910 <_initVoltsArray+0x290>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
 80077e0:	495d      	ldr	r1, [pc, #372]	; (8007958 <_initVoltsArray+0x2d8>)
 80077e2:	a34d      	add	r3, pc, #308	; (adr r3, 8007918 <_initVoltsArray+0x298>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 80077ec:	495a      	ldr	r1, [pc, #360]	; (8007958 <_initVoltsArray+0x2d8>)
 80077ee:	a34c      	add	r3, pc, #304	; (adr r3, 8007920 <_initVoltsArray+0x2a0>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    _vs[31] = 3.768; _vs[32] = 3.771; _vs[33] = 3.774; _vs[34] = 3.777; _vs[35] = 3.781;
 80077f8:	4957      	ldr	r1, [pc, #348]	; (8007958 <_initVoltsArray+0x2d8>)
 80077fa:	a34b      	add	r3, pc, #300	; (adr r3, 8007928 <_initVoltsArray+0x2a8>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 8007804:	4954      	ldr	r1, [pc, #336]	; (8007958 <_initVoltsArray+0x2d8>)
 8007806:	a34a      	add	r3, pc, #296	; (adr r3, 8007930 <_initVoltsArray+0x2b0>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
 8007810:	4951      	ldr	r1, [pc, #324]	; (8007958 <_initVoltsArray+0x2d8>)
 8007812:	a349      	add	r3, pc, #292	; (adr r3, 8007938 <_initVoltsArray+0x2b8>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
 800781c:	494e      	ldr	r1, [pc, #312]	; (8007958 <_initVoltsArray+0x2d8>)
 800781e:	a348      	add	r3, pc, #288	; (adr r3, 8007940 <_initVoltsArray+0x2c0>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 8007828:	494b      	ldr	r1, [pc, #300]	; (8007958 <_initVoltsArray+0x2d8>)
 800782a:	a347      	add	r3, pc, #284	; (adr r3, 8007948 <_initVoltsArray+0x2c8>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    _vs[36] = 3.784; _vs[37] = 3.787; _vs[38] = 3.790; _vs[39] = 3.794; _vs[40] = 3.797;
 8007834:	4948      	ldr	r1, [pc, #288]	; (8007958 <_initVoltsArray+0x2d8>)
 8007836:	a346      	add	r3, pc, #280	; (adr r3, 8007950 <_initVoltsArray+0x2d0>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	e092      	b.n	8007964 <_initVoltsArray+0x2e4>
 800783e:	bf00      	nop
 8007840:	9999999a 	.word	0x9999999a
 8007844:	40099999 	.word	0x40099999
 8007848:	66666666 	.word	0x66666666
 800784c:	400a6666 	.word	0x400a6666
 8007850:	cccccccd 	.word	0xcccccccd
 8007854:	400acccc 	.word	0x400acccc
 8007858:	33333333 	.word	0x33333333
 800785c:	400b3333 	.word	0x400b3333
 8007860:	9999999a 	.word	0x9999999a
 8007864:	400b9999 	.word	0x400b9999
 8007868:	66666666 	.word	0x66666666
 800786c:	400c6666 	.word	0x400c6666
 8007870:	cccccccd 	.word	0xcccccccd
 8007874:	400ccccc 	.word	0x400ccccc
 8007878:	33333333 	.word	0x33333333
 800787c:	400d3333 	.word	0x400d3333
 8007880:	9999999a 	.word	0x9999999a
 8007884:	400d9999 	.word	0x400d9999
 8007888:	76c8b439 	.word	0x76c8b439
 800788c:	400d9fbe 	.word	0x400d9fbe
 8007890:	53f7ced9 	.word	0x53f7ced9
 8007894:	400da5e3 	.word	0x400da5e3
 8007898:	7ae147ae 	.word	0x7ae147ae
 800789c:	400dae14 	.word	0x400dae14
 80078a0:	5810624e 	.word	0x5810624e
 80078a4:	400db439 	.word	0x400db439
 80078a8:	353f7cee 	.word	0x353f7cee
 80078ac:	400dba5e 	.word	0x400dba5e
 80078b0:	126e978d 	.word	0x126e978d
 80078b4:	400dc083 	.word	0x400dc083
 80078b8:	39581062 	.word	0x39581062
 80078bc:	400dc8b4 	.word	0x400dc8b4
 80078c0:	16872b02 	.word	0x16872b02
 80078c4:	400dced9 	.word	0x400dced9
 80078c8:	f3b645a2 	.word	0xf3b645a2
 80078cc:	400dd4fd 	.word	0x400dd4fd
 80078d0:	d0e56042 	.word	0xd0e56042
 80078d4:	400ddb22 	.word	0x400ddb22
 80078d8:	ae147ae1 	.word	0xae147ae1
 80078dc:	400de147 	.word	0x400de147
 80078e0:	d4fdf3b6 	.word	0xd4fdf3b6
 80078e4:	400de978 	.word	0x400de978
 80078e8:	b22d0e56 	.word	0xb22d0e56
 80078ec:	400def9d 	.word	0x400def9d
 80078f0:	8f5c28f6 	.word	0x8f5c28f6
 80078f4:	400df5c2 	.word	0x400df5c2
 80078f8:	6c8b4396 	.word	0x6c8b4396
 80078fc:	400dfbe7 	.word	0x400dfbe7
 8007900:	9374bc6a 	.word	0x9374bc6a
 8007904:	400e0418 	.word	0x400e0418
 8007908:	70a3d70a 	.word	0x70a3d70a
 800790c:	400e0a3d 	.word	0x400e0a3d
 8007910:	4dd2f1aa 	.word	0x4dd2f1aa
 8007914:	400e1062 	.word	0x400e1062
 8007918:	2b020c4a 	.word	0x2b020c4a
 800791c:	400e1687 	.word	0x400e1687
 8007920:	51eb851f 	.word	0x51eb851f
 8007924:	400e1eb8 	.word	0x400e1eb8
 8007928:	2f1a9fbe 	.word	0x2f1a9fbe
 800792c:	400e24dd 	.word	0x400e24dd
 8007930:	0c49ba5e 	.word	0x0c49ba5e
 8007934:	400e2b02 	.word	0x400e2b02
 8007938:	e978d4fe 	.word	0xe978d4fe
 800793c:	400e3126 	.word	0x400e3126
 8007940:	c6a7ef9e 	.word	0xc6a7ef9e
 8007944:	400e374b 	.word	0x400e374b
 8007948:	ed916873 	.word	0xed916873
 800794c:	400e3f7c 	.word	0x400e3f7c
 8007950:	cac08312 	.word	0xcac08312
 8007954:	400e45a1 	.word	0x400e45a1
 8007958:	200004b8 	.word	0x200004b8
 800795c:	400a0000 	.word	0x400a0000
 8007960:	400c0000 	.word	0x400c0000
 8007964:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
 8007968:	49b5      	ldr	r1, [pc, #724]	; (8007c40 <_initVoltsArray+0x5c0>)
 800796a:	a36d      	add	r3, pc, #436	; (adr r3, 8007b20 <_initVoltsArray+0x4a0>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
 8007974:	49b2      	ldr	r1, [pc, #712]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007976:	a36c      	add	r3, pc, #432	; (adr r3, 8007b28 <_initVoltsArray+0x4a8>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 8007980:	49af      	ldr	r1, [pc, #700]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007982:	a36b      	add	r3, pc, #428	; (adr r3, 8007b30 <_initVoltsArray+0x4b0>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 800798c:	49ac      	ldr	r1, [pc, #688]	; (8007c40 <_initVoltsArray+0x5c0>)
 800798e:	a36a      	add	r3, pc, #424	; (adr r3, 8007b38 <_initVoltsArray+0x4b8>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
    _vs[41] = 3.800; _vs[42] = 3.805; _vs[43] = 3.811; _vs[44] = 3.816; _vs[45] = 3.821;
 8007998:	49a9      	ldr	r1, [pc, #676]	; (8007c40 <_initVoltsArray+0x5c0>)
 800799a:	a369      	add	r3, pc, #420	; (adr r3, 8007b40 <_initVoltsArray+0x4c0>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
 80079a4:	49a6      	ldr	r1, [pc, #664]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079a6:	a368      	add	r3, pc, #416	; (adr r3, 8007b48 <_initVoltsArray+0x4c8>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
 80079b0:	49a3      	ldr	r1, [pc, #652]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079b2:	a367      	add	r3, pc, #412	; (adr r3, 8007b50 <_initVoltsArray+0x4d0>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
 80079bc:	49a0      	ldr	r1, [pc, #640]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079be:	a366      	add	r3, pc, #408	; (adr r3, 8007b58 <_initVoltsArray+0x4d8>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
 80079c8:	499d      	ldr	r1, [pc, #628]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079ca:	a365      	add	r3, pc, #404	; (adr r3, 8007b60 <_initVoltsArray+0x4e0>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
    _vs[46] = 3.826; _vs[47] = 3.832; _vs[48] = 3.837; _vs[49] = 3.842; _vs[50] = 3.847;
 80079d4:	499a      	ldr	r1, [pc, #616]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079d6:	a364      	add	r3, pc, #400	; (adr r3, 8007b68 <_initVoltsArray+0x4e8>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
 80079e0:	4997      	ldr	r1, [pc, #604]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079e2:	a363      	add	r3, pc, #396	; (adr r3, 8007b70 <_initVoltsArray+0x4f0>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
 80079ec:	4994      	ldr	r1, [pc, #592]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079ee:	a362      	add	r3, pc, #392	; (adr r3, 8007b78 <_initVoltsArray+0x4f8>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
 80079f8:	4991      	ldr	r1, [pc, #580]	; (8007c40 <_initVoltsArray+0x5c0>)
 80079fa:	a361      	add	r3, pc, #388	; (adr r3, 8007b80 <_initVoltsArray+0x500>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 8007a04:	498e      	ldr	r1, [pc, #568]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a06:	a360      	add	r3, pc, #384	; (adr r3, 8007b88 <_initVoltsArray+0x508>)
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
    _vs[51] = 3.853; _vs[52] = 3.858; _vs[53] = 3.863; _vs[54] = 3.868; _vs[55] = 3.874;
 8007a10:	498b      	ldr	r1, [pc, #556]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a12:	a35f      	add	r3, pc, #380	; (adr r3, 8007b90 <_initVoltsArray+0x510>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
 8007a1c:	4988      	ldr	r1, [pc, #544]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a1e:	a35e      	add	r3, pc, #376	; (adr r3, 8007b98 <_initVoltsArray+0x518>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
 8007a28:	4985      	ldr	r1, [pc, #532]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a2a:	a35d      	add	r3, pc, #372	; (adr r3, 8007ba0 <_initVoltsArray+0x520>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
 8007a34:	4982      	ldr	r1, [pc, #520]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a36:	a35c      	add	r3, pc, #368	; (adr r3, 8007ba8 <_initVoltsArray+0x528>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
 8007a40:	497f      	ldr	r1, [pc, #508]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a42:	a35b      	add	r3, pc, #364	; (adr r3, 8007bb0 <_initVoltsArray+0x530>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
    _vs[56] = 3.879; _vs[57] = 3.884; _vs[58] = 3.889; _vs[59] = 3.895; _vs[60] = 3.900;
 8007a4c:	497c      	ldr	r1, [pc, #496]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a4e:	a35a      	add	r3, pc, #360	; (adr r3, 8007bb8 <_initVoltsArray+0x538>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8007a58:	4979      	ldr	r1, [pc, #484]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a5a:	a359      	add	r3, pc, #356	; (adr r3, 8007bc0 <_initVoltsArray+0x540>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	e9c1 2372 	strd	r2, r3, [r1, #456]	; 0x1c8
 8007a64:	4976      	ldr	r1, [pc, #472]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a66:	a358      	add	r3, pc, #352	; (adr r3, 8007bc8 <_initVoltsArray+0x548>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
 8007a70:	4973      	ldr	r1, [pc, #460]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a72:	a357      	add	r3, pc, #348	; (adr r3, 8007bd0 <_initVoltsArray+0x550>)
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 8007a7c:	4970      	ldr	r1, [pc, #448]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a7e:	a356      	add	r3, pc, #344	; (adr r3, 8007bd8 <_initVoltsArray+0x558>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
    _vs[61] = 3.906; _vs[62] = 3.911; _vs[63] = 3.917; _vs[64] = 3.922; _vs[65] = 3.928;
 8007a88:	496d      	ldr	r1, [pc, #436]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a8a:	a355      	add	r3, pc, #340	; (adr r3, 8007be0 <_initVoltsArray+0x560>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	e9c1 237a 	strd	r2, r3, [r1, #488]	; 0x1e8
 8007a94:	496a      	ldr	r1, [pc, #424]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007a96:	a354      	add	r3, pc, #336	; (adr r3, 8007be8 <_initVoltsArray+0x568>)
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	e9c1 237c 	strd	r2, r3, [r1, #496]	; 0x1f0
 8007aa0:	4967      	ldr	r1, [pc, #412]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007aa2:	a353      	add	r3, pc, #332	; (adr r3, 8007bf0 <_initVoltsArray+0x570>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	e9c1 237e 	strd	r2, r3, [r1, #504]	; 0x1f8
 8007aac:	4964      	ldr	r1, [pc, #400]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007aae:	a352      	add	r3, pc, #328	; (adr r3, 8007bf8 <_initVoltsArray+0x578>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	e9c1 2380 	strd	r2, r3, [r1, #512]	; 0x200
 8007ab8:	4961      	ldr	r1, [pc, #388]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007aba:	a351      	add	r3, pc, #324	; (adr r3, 8007c00 <_initVoltsArray+0x580>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
    _vs[66] = 3.933; _vs[67] = 3.939; _vs[68] = 3.944; _vs[69] = 3.950; _vs[70] = 3.956;
 8007ac4:	495e      	ldr	r1, [pc, #376]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007ac6:	a350      	add	r3, pc, #320	; (adr r3, 8007c08 <_initVoltsArray+0x588>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	e9c1 2384 	strd	r2, r3, [r1, #528]	; 0x210
 8007ad0:	495b      	ldr	r1, [pc, #364]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007ad2:	a34f      	add	r3, pc, #316	; (adr r3, 8007c10 <_initVoltsArray+0x590>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 8007adc:	4958      	ldr	r1, [pc, #352]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007ade:	a34e      	add	r3, pc, #312	; (adr r3, 8007c18 <_initVoltsArray+0x598>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	e9c1 2388 	strd	r2, r3, [r1, #544]	; 0x220
 8007ae8:	4955      	ldr	r1, [pc, #340]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007aea:	a34d      	add	r3, pc, #308	; (adr r3, 8007c20 <_initVoltsArray+0x5a0>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
 8007af4:	4952      	ldr	r1, [pc, #328]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007af6:	a34c      	add	r3, pc, #304	; (adr r3, 8007c28 <_initVoltsArray+0x5a8>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	e9c1 238c 	strd	r2, r3, [r1, #560]	; 0x230
    _vs[71] = 3.961; _vs[72] = 3.967; _vs[73] = 3.972; _vs[74] = 3.978; _vs[75] = 3.983;
 8007b00:	494f      	ldr	r1, [pc, #316]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007b02:	a34b      	add	r3, pc, #300	; (adr r3, 8007c30 <_initVoltsArray+0x5b0>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	e9c1 238e 	strd	r2, r3, [r1, #568]	; 0x238
 8007b0c:	494c      	ldr	r1, [pc, #304]	; (8007c40 <_initVoltsArray+0x5c0>)
 8007b0e:	a34a      	add	r3, pc, #296	; (adr r3, 8007c38 <_initVoltsArray+0x5b8>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	e9c1 2390 	strd	r2, r3, [r1, #576]	; 0x240
 8007b18:	e094      	b.n	8007c44 <_initVoltsArray+0x5c4>
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w
 8007b20:	a7ef9db2 	.word	0xa7ef9db2
 8007b24:	400e4bc6 	.word	0x400e4bc6
 8007b28:	851eb852 	.word	0x851eb852
 8007b2c:	400e51eb 	.word	0x400e51eb
 8007b30:	ac083127 	.word	0xac083127
 8007b34:	400e5a1c 	.word	0x400e5a1c
 8007b38:	89374bc7 	.word	0x89374bc7
 8007b3c:	400e6041 	.word	0x400e6041
 8007b40:	66666666 	.word	0x66666666
 8007b44:	400e6666 	.word	0x400e6666
 8007b48:	d70a3d71 	.word	0xd70a3d71
 8007b4c:	400e70a3 	.word	0x400e70a3
 8007b50:	916872b0 	.word	0x916872b0
 8007b54:	400e7ced 	.word	0x400e7ced
 8007b58:	020c49ba 	.word	0x020c49ba
 8007b5c:	400e872b 	.word	0x400e872b
 8007b60:	72b020c5 	.word	0x72b020c5
 8007b64:	400e9168 	.word	0x400e9168
 8007b68:	e353f7cf 	.word	0xe353f7cf
 8007b6c:	400e9ba5 	.word	0x400e9ba5
 8007b70:	9db22d0e 	.word	0x9db22d0e
 8007b74:	400ea7ef 	.word	0x400ea7ef
 8007b78:	0e560419 	.word	0x0e560419
 8007b7c:	400eb22d 	.word	0x400eb22d
 8007b80:	7ef9db23 	.word	0x7ef9db23
 8007b84:	400ebc6a 	.word	0x400ebc6a
 8007b88:	ef9db22d 	.word	0xef9db22d
 8007b8c:	400ec6a7 	.word	0x400ec6a7
 8007b90:	a9fbe76d 	.word	0xa9fbe76d
 8007b94:	400ed2f1 	.word	0x400ed2f1
 8007b98:	1a9fbe77 	.word	0x1a9fbe77
 8007b9c:	400edd2f 	.word	0x400edd2f
 8007ba0:	8b439581 	.word	0x8b439581
 8007ba4:	400ee76c 	.word	0x400ee76c
 8007ba8:	fbe76c8b 	.word	0xfbe76c8b
 8007bac:	400ef1a9 	.word	0x400ef1a9
 8007bb0:	b645a1cb 	.word	0xb645a1cb
 8007bb4:	400efdf3 	.word	0x400efdf3
 8007bb8:	26e978d5 	.word	0x26e978d5
 8007bbc:	400f0831 	.word	0x400f0831
 8007bc0:	978d4fdf 	.word	0x978d4fdf
 8007bc4:	400f126e 	.word	0x400f126e
 8007bc8:	083126e9 	.word	0x083126e9
 8007bcc:	400f1cac 	.word	0x400f1cac
 8007bd0:	c28f5c29 	.word	0xc28f5c29
 8007bd4:	400f28f5 	.word	0x400f28f5
 8007bd8:	33333333 	.word	0x33333333
 8007bdc:	400f3333 	.word	0x400f3333
 8007be0:	ed916873 	.word	0xed916873
 8007be4:	400f3f7c 	.word	0x400f3f7c
 8007be8:	5e353f7d 	.word	0x5e353f7d
 8007bec:	400f49ba 	.word	0x400f49ba
 8007bf0:	189374bc 	.word	0x189374bc
 8007bf4:	400f5604 	.word	0x400f5604
 8007bf8:	89374bc7 	.word	0x89374bc7
 8007bfc:	400f6041 	.word	0x400f6041
 8007c00:	43958106 	.word	0x43958106
 8007c04:	400f6c8b 	.word	0x400f6c8b
 8007c08:	b4395810 	.word	0xb4395810
 8007c0c:	400f76c8 	.word	0x400f76c8
 8007c10:	6e978d50 	.word	0x6e978d50
 8007c14:	400f8312 	.word	0x400f8312
 8007c18:	df3b645a 	.word	0xdf3b645a
 8007c1c:	400f8d4f 	.word	0x400f8d4f
 8007c20:	9999999a 	.word	0x9999999a
 8007c24:	400f9999 	.word	0x400f9999
 8007c28:	53f7ced9 	.word	0x53f7ced9
 8007c2c:	400fa5e3 	.word	0x400fa5e3
 8007c30:	c49ba5e3 	.word	0xc49ba5e3
 8007c34:	400fb020 	.word	0x400fb020
 8007c38:	7ef9db23 	.word	0x7ef9db23
 8007c3c:	400fbc6a 	.word	0x400fbc6a
 8007c40:	200004b8 	.word	0x200004b8
 8007c44:	498c      	ldr	r1, [pc, #560]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c46:	a356      	add	r3, pc, #344	; (adr r3, 8007da0 <_initVoltsArray+0x720>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	e9c1 2392 	strd	r2, r3, [r1, #584]	; 0x248
 8007c50:	4989      	ldr	r1, [pc, #548]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c52:	a355      	add	r3, pc, #340	; (adr r3, 8007da8 <_initVoltsArray+0x728>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
 8007c5c:	4986      	ldr	r1, [pc, #536]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c5e:	a354      	add	r3, pc, #336	; (adr r3, 8007db0 <_initVoltsArray+0x730>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	e9c1 2396 	strd	r2, r3, [r1, #600]	; 0x258
    _vs[76] = 3.989; _vs[77] = 3.994; _vs[78] = 4.000; _vs[79] = 4.008; _vs[80] = 4.015;
 8007c68:	4983      	ldr	r1, [pc, #524]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c6a:	a353      	add	r3, pc, #332	; (adr r3, 8007db8 <_initVoltsArray+0x738>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 8007c74:	4980      	ldr	r1, [pc, #512]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c76:	a352      	add	r3, pc, #328	; (adr r3, 8007dc0 <_initVoltsArray+0x740>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	e9c1 239a 	strd	r2, r3, [r1, #616]	; 0x268
 8007c80:	497d      	ldr	r1, [pc, #500]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	4b7d      	ldr	r3, [pc, #500]	; (8007e7c <_initVoltsArray+0x7fc>)
 8007c88:	e9c1 239c 	strd	r2, r3, [r1, #624]	; 0x270
 8007c8c:	497a      	ldr	r1, [pc, #488]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c8e:	a34e      	add	r3, pc, #312	; (adr r3, 8007dc8 <_initVoltsArray+0x748>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	e9c1 239e 	strd	r2, r3, [r1, #632]	; 0x278
 8007c98:	4977      	ldr	r1, [pc, #476]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007c9a:	a34d      	add	r3, pc, #308	; (adr r3, 8007dd0 <_initVoltsArray+0x750>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	e9c1 23a0 	strd	r2, r3, [r1, #640]	; 0x280
    _vs[81] = 4.023; _vs[82] = 4.031; _vs[83] = 4.038; _vs[84] = 4.046; _vs[85] = 4.054;
 8007ca4:	4974      	ldr	r1, [pc, #464]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007ca6:	a34c      	add	r3, pc, #304	; (adr r3, 8007dd8 <_initVoltsArray+0x758>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
 8007cb0:	4971      	ldr	r1, [pc, #452]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007cb2:	a34b      	add	r3, pc, #300	; (adr r3, 8007de0 <_initVoltsArray+0x760>)
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	e9c1 23a4 	strd	r2, r3, [r1, #656]	; 0x290
 8007cbc:	496e      	ldr	r1, [pc, #440]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007cbe:	a34a      	add	r3, pc, #296	; (adr r3, 8007de8 <_initVoltsArray+0x768>)
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	e9c1 23a6 	strd	r2, r3, [r1, #664]	; 0x298
 8007cc8:	496b      	ldr	r1, [pc, #428]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007cca:	a349      	add	r3, pc, #292	; (adr r3, 8007df0 <_initVoltsArray+0x770>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	e9c1 23a8 	strd	r2, r3, [r1, #672]	; 0x2a0
 8007cd4:	4968      	ldr	r1, [pc, #416]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007cd6:	a348      	add	r3, pc, #288	; (adr r3, 8007df8 <_initVoltsArray+0x778>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
    _vs[86] = 4.062; _vs[87] = 4.069; _vs[88] = 4.077; _vs[89] = 4.085; _vs[90] = 4.092;
 8007ce0:	4965      	ldr	r1, [pc, #404]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007ce2:	a347      	add	r3, pc, #284	; (adr r3, 8007e00 <_initVoltsArray+0x780>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	e9c1 23ac 	strd	r2, r3, [r1, #688]	; 0x2b0
 8007cec:	4962      	ldr	r1, [pc, #392]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007cee:	a346      	add	r3, pc, #280	; (adr r3, 8007e08 <_initVoltsArray+0x788>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	e9c1 23ae 	strd	r2, r3, [r1, #696]	; 0x2b8
 8007cf8:	495f      	ldr	r1, [pc, #380]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007cfa:	a345      	add	r3, pc, #276	; (adr r3, 8007e10 <_initVoltsArray+0x790>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0
 8007d04:	495c      	ldr	r1, [pc, #368]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d06:	a344      	add	r3, pc, #272	; (adr r3, 8007e18 <_initVoltsArray+0x798>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	e9c1 23b2 	strd	r2, r3, [r1, #712]	; 0x2c8
 8007d10:	4959      	ldr	r1, [pc, #356]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d12:	a343      	add	r3, pc, #268	; (adr r3, 8007e20 <_initVoltsArray+0x7a0>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	e9c1 23b4 	strd	r2, r3, [r1, #720]	; 0x2d0
    _vs[91] = 4.100; _vs[92] = 4.111; _vs[93] = 4.122; _vs[94] = 4.133; _vs[95] = 4.144;
 8007d1c:	4956      	ldr	r1, [pc, #344]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d1e:	a342      	add	r3, pc, #264	; (adr r3, 8007e28 <_initVoltsArray+0x7a8>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	e9c1 23b6 	strd	r2, r3, [r1, #728]	; 0x2d8
 8007d28:	4953      	ldr	r1, [pc, #332]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d2a:	a341      	add	r3, pc, #260	; (adr r3, 8007e30 <_initVoltsArray+0x7b0>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	e9c1 23b8 	strd	r2, r3, [r1, #736]	; 0x2e0
 8007d34:	4950      	ldr	r1, [pc, #320]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d36:	a340      	add	r3, pc, #256	; (adr r3, 8007e38 <_initVoltsArray+0x7b8>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	e9c1 23ba 	strd	r2, r3, [r1, #744]	; 0x2e8
 8007d40:	494d      	ldr	r1, [pc, #308]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d42:	a33f      	add	r3, pc, #252	; (adr r3, 8007e40 <_initVoltsArray+0x7c0>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	e9c1 23bc 	strd	r2, r3, [r1, #752]	; 0x2f0
 8007d4c:	494a      	ldr	r1, [pc, #296]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d4e:	a33e      	add	r3, pc, #248	; (adr r3, 8007e48 <_initVoltsArray+0x7c8>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	e9c1 23be 	strd	r2, r3, [r1, #760]	; 0x2f8
    _vs[96] = 4.156; _vs[97] = 4.167; _vs[98] = 4.178; _vs[99] = 4.189; _vs[100] = 4.200;
 8007d58:	4947      	ldr	r1, [pc, #284]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d5a:	a33d      	add	r3, pc, #244	; (adr r3, 8007e50 <_initVoltsArray+0x7d0>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	e9c1 23c0 	strd	r2, r3, [r1, #768]	; 0x300
 8007d64:	4944      	ldr	r1, [pc, #272]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d66:	a33c      	add	r3, pc, #240	; (adr r3, 8007e58 <_initVoltsArray+0x7d8>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	e9c1 23c2 	strd	r2, r3, [r1, #776]	; 0x308
 8007d70:	4941      	ldr	r1, [pc, #260]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d72:	a33b      	add	r3, pc, #236	; (adr r3, 8007e60 <_initVoltsArray+0x7e0>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	e9c1 23c4 	strd	r2, r3, [r1, #784]	; 0x310
 8007d7c:	493e      	ldr	r1, [pc, #248]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d7e:	a33a      	add	r3, pc, #232	; (adr r3, 8007e68 <_initVoltsArray+0x7e8>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	e9c1 23c6 	strd	r2, r3, [r1, #792]	; 0x318
 8007d88:	493b      	ldr	r1, [pc, #236]	; (8007e78 <_initVoltsArray+0x7f8>)
 8007d8a:	a339      	add	r3, pc, #228	; (adr r3, 8007e70 <_initVoltsArray+0x7f0>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	e9c1 23c8 	strd	r2, r3, [r1, #800]	; 0x320
}
 8007d94:	bf00      	nop
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	ef9db22d 	.word	0xef9db22d
 8007da4:	400fc6a7 	.word	0x400fc6a7
 8007da8:	a9fbe76d 	.word	0xa9fbe76d
 8007dac:	400fd2f1 	.word	0x400fd2f1
 8007db0:	1a9fbe77 	.word	0x1a9fbe77
 8007db4:	400fdd2f 	.word	0x400fdd2f
 8007db8:	d4fdf3b6 	.word	0xd4fdf3b6
 8007dbc:	400fe978 	.word	0x400fe978
 8007dc0:	45a1cac1 	.word	0x45a1cac1
 8007dc4:	400ff3b6 	.word	0x400ff3b6
 8007dc8:	26e978d5 	.word	0x26e978d5
 8007dcc:	40100831 	.word	0x40100831
 8007dd0:	28f5c28f 	.word	0x28f5c28f
 8007dd4:	40100f5c 	.word	0x40100f5c
 8007dd8:	4fdf3b64 	.word	0x4fdf3b64
 8007ddc:	4010178d 	.word	0x4010178d
 8007de0:	76c8b439 	.word	0x76c8b439
 8007de4:	40101fbe 	.word	0x40101fbe
 8007de8:	78d4fdf4 	.word	0x78d4fdf4
 8007dec:	401026e9 	.word	0x401026e9
 8007df0:	9fbe76c9 	.word	0x9fbe76c9
 8007df4:	40102f1a 	.word	0x40102f1a
 8007df8:	c6a7ef9e 	.word	0xc6a7ef9e
 8007dfc:	4010374b 	.word	0x4010374b
 8007e00:	ed916873 	.word	0xed916873
 8007e04:	40103f7c 	.word	0x40103f7c
 8007e08:	ef9db22d 	.word	0xef9db22d
 8007e0c:	401046a7 	.word	0x401046a7
 8007e10:	16872b02 	.word	0x16872b02
 8007e14:	40104ed9 	.word	0x40104ed9
 8007e18:	3d70a3d7 	.word	0x3d70a3d7
 8007e1c:	4010570a 	.word	0x4010570a
 8007e20:	3f7ced91 	.word	0x3f7ced91
 8007e24:	40105e35 	.word	0x40105e35
 8007e28:	66666666 	.word	0x66666666
 8007e2c:	40106666 	.word	0x40106666
 8007e30:	fbe76c8b 	.word	0xfbe76c8b
 8007e34:	401071a9 	.word	0x401071a9
 8007e38:	916872b0 	.word	0x916872b0
 8007e3c:	40107ced 	.word	0x40107ced
 8007e40:	26e978d5 	.word	0x26e978d5
 8007e44:	40108831 	.word	0x40108831
 8007e48:	bc6a7efa 	.word	0xbc6a7efa
 8007e4c:	40109374 	.word	0x40109374
 8007e50:	76c8b439 	.word	0x76c8b439
 8007e54:	40109fbe 	.word	0x40109fbe
 8007e58:	0c49ba5e 	.word	0x0c49ba5e
 8007e5c:	4010ab02 	.word	0x4010ab02
 8007e60:	a1cac083 	.word	0xa1cac083
 8007e64:	4010b645 	.word	0x4010b645
 8007e68:	374bc6a8 	.word	0x374bc6a8
 8007e6c:	4010c189 	.word	0x4010c189
 8007e70:	cccccccd 	.word	0xcccccccd
 8007e74:	4010cccc 	.word	0x4010cccc
 8007e78:	200004b8 	.word	0x200004b8
 8007e7c:	40100000 	.word	0x40100000

08007e80 <_analogRead>:

static uint32_t _analogRead(void) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
    HAL_ADC_Start(_hadc);
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <_analogRead+0x30>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fa fc1b 	bl	80026c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(_hadc, _timeout);
 8007e8e:	4b08      	ldr	r3, [pc, #32]	; (8007eb0 <_analogRead+0x30>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <_analogRead+0x34>)
 8007e94:	6812      	ldr	r2, [r2, #0]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fa fccd 	bl	8002838 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(_hadc);
 8007e9e:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <_analogRead+0x30>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fa fda0 	bl	80029e8 <HAL_ADC_GetValue>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	200007e4 	.word	0x200007e4
 8007eb4:	200007e0 	.word	0x200007e0

08007eb8 <_analogReadToVolts>:

static float _analogReadToVolts(uint32_t readValue) {
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  float volts = 2.0f * readValue * 3.3f / 4096.0f;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007ece:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007ef8 <_analogReadToVolts+0x40>
 8007ed2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ed6:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007efc <_analogReadToVolts+0x44>
 8007eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ede:	edc7 7a03 	vstr	s15, [r7, #12]
  return volts;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	ee07 3a90 	vmov	s15, r3
}
 8007ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40533333 	.word	0x40533333
 8007efc:	45800000 	.word	0x45800000

08007f00 <_getChargeLevel>:

static int _getChargeLevel(float volts) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	ed87 0a01 	vstr	s0, [r7, #4]
  int idx = 50;
 8007f0a:	2332      	movs	r3, #50	; 0x32
 8007f0c:	617b      	str	r3, [r7, #20]
  int prev = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	613b      	str	r3, [r7, #16]
  int half = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
  if (volts >= 4.2){
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7f8 fb26 	bl	8000568 <__aeabi_f2d>
 8007f1c:	a323      	add	r3, pc, #140	; (adr r3, 8007fac <_getChargeLevel+0xac>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f7f8 fdff 	bl	8000b24 <__aeabi_dcmpge>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <_getChargeLevel+0x30>
    return 100;
 8007f2c:	2364      	movs	r3, #100	; 0x64
 8007f2e:	e037      	b.n	8007fa0 <_getChargeLevel+0xa0>
  }
  if (volts <= 3.2){
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7f8 fb19 	bl	8000568 <__aeabi_f2d>
 8007f36:	a31f      	add	r3, pc, #124	; (adr r3, 8007fb4 <_getChargeLevel+0xb4>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f7f8 fde8 	bl	8000b10 <__aeabi_dcmple>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d100      	bne.n	8007f48 <_getChargeLevel+0x48>
 8007f46:	e001      	b.n	8007f4c <_getChargeLevel+0x4c>
    return 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e029      	b.n	8007fa0 <_getChargeLevel+0xa0>
  }
  while(1){
    half = abs(idx - prev) / 2;
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfb8      	it	lt
 8007f56:	425b      	neglt	r3, r3
 8007f58:	0fda      	lsrs	r2, r3, #31
 8007f5a:	4413      	add	r3, r2
 8007f5c:	105b      	asrs	r3, r3, #1
 8007f5e:	60fb      	str	r3, [r7, #12]
    prev = idx;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	613b      	str	r3, [r7, #16]
    if(volts >= _vs[idx]){
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7f8 faff 	bl	8000568 <__aeabi_f2d>
 8007f6a:	4a0f      	ldr	r2, [pc, #60]	; (8007fa8 <_getChargeLevel+0xa8>)
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4413      	add	r3, r2
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 fdd5 	bl	8000b24 <__aeabi_dcmpge>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <_getChargeLevel+0x8a>
      idx = idx + half;
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4413      	add	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	e003      	b.n	8007f92 <_getChargeLevel+0x92>
    }else{
      idx = idx - half;
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	617b      	str	r3, [r7, #20]
    }
    if (prev == idx){
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d000      	beq.n	8007f9c <_getChargeLevel+0x9c>
    half = abs(idx - prev) / 2;
 8007f9a:	e7d7      	b.n	8007f4c <_getChargeLevel+0x4c>
      break;
 8007f9c:	bf00      	nop
    }
  }
  return idx;
 8007f9e:	697b      	ldr	r3, [r7, #20]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	200004b8 	.word	0x200004b8
 8007fac:	cccccccd 	.word	0xcccccccd
 8007fb0:	4010cccc 	.word	0x4010cccc
 8007fb4:	9999999a 	.word	0x9999999a
 8007fb8:	40099999 	.word	0x40099999

08007fbc <battery_init>:

/*
 * Public functions
 */

void battery_init(ADC_HandleTypeDef* hadc, uint32_t timeout) {
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	_hadc = hadc;
 8007fc6:	4a08      	ldr	r2, [pc, #32]	; (8007fe8 <battery_init+0x2c>)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6013      	str	r3, [r2, #0]
	_timeout = timeout;
 8007fcc:	4a07      	ldr	r2, [pc, #28]	; (8007fec <battery_init+0x30>)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	6013      	str	r3, [r2, #0]
	_initVoltsArray();
 8007fd2:	f7ff fb55 	bl	8007680 <_initVoltsArray>
    HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 8007fd6:	217f      	movs	r1, #127	; 0x7f
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fb fa3b 	bl	8003454 <HAL_ADCEx_Calibration_Start>
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200007e4 	.word	0x200007e4
 8007fec:	200007e0 	.word	0x200007e0

08007ff0 <battery_getBatteryChargeLevel>:


int battery_getBatteryChargeLevel(void) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
    uint32_t readValue = _analogRead();
 8007ff6:	f7ff ff43 	bl	8007e80 <_analogRead>
 8007ffa:	6178      	str	r0, [r7, #20]
    double volts = _analogReadToVolts(readValue);
 8007ffc:	6978      	ldr	r0, [r7, #20]
 8007ffe:	f7ff ff5b 	bl	8007eb8 <_analogReadToVolts>
 8008002:	ee10 3a10 	vmov	r3, s0
 8008006:	4618      	mov	r0, r3
 8008008:	f7f8 faae 	bl	8000568 <__aeabi_f2d>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int chargeLevel = _getChargeLevel(volts);
 8008014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008018:	f7f8 fdf6 	bl	8000c08 <__aeabi_d2f>
 800801c:	4603      	mov	r3, r0
 800801e:	ee00 3a10 	vmov	s0, r3
 8008022:	f7ff ff6d 	bl	8007f00 <_getChargeLevel>
 8008026:	6078      	str	r0, [r7, #4]
    return chargeLevel;
 8008028:	687b      	ldr	r3, [r7, #4]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <validateMessage>:
static uint8_t validateMessage();
static int parseGPGLLSentence();
static float changeCordsToDec(float deg_coord, char nsew);

static uint8_t validateMessage()
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0

	return (messageBuffer[0] == '$' &&
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <validateMessage+0x48>)
 800803a:	781b      	ldrb	r3, [r3, #0]
		messageBuffer[1] == 'G' &&
		messageBuffer[2] == 'P' &&
		messageBuffer[3] == 'G' &&
		messageBuffer[4] == 'L' &&
 800803c:	2b24      	cmp	r3, #36	; 0x24
 800803e:	d115      	bne.n	800806c <validateMessage+0x38>
		messageBuffer[1] == 'G' &&
 8008040:	4b0e      	ldr	r3, [pc, #56]	; (800807c <validateMessage+0x48>)
 8008042:	785b      	ldrb	r3, [r3, #1]
	return (messageBuffer[0] == '$' &&
 8008044:	2b47      	cmp	r3, #71	; 0x47
 8008046:	d111      	bne.n	800806c <validateMessage+0x38>
		messageBuffer[2] == 'P' &&
 8008048:	4b0c      	ldr	r3, [pc, #48]	; (800807c <validateMessage+0x48>)
 800804a:	789b      	ldrb	r3, [r3, #2]
		messageBuffer[1] == 'G' &&
 800804c:	2b50      	cmp	r3, #80	; 0x50
 800804e:	d10d      	bne.n	800806c <validateMessage+0x38>
		messageBuffer[3] == 'G' &&
 8008050:	4b0a      	ldr	r3, [pc, #40]	; (800807c <validateMessage+0x48>)
 8008052:	78db      	ldrb	r3, [r3, #3]
		messageBuffer[2] == 'P' &&
 8008054:	2b47      	cmp	r3, #71	; 0x47
 8008056:	d109      	bne.n	800806c <validateMessage+0x38>
		messageBuffer[4] == 'L' &&
 8008058:	4b08      	ldr	r3, [pc, #32]	; (800807c <validateMessage+0x48>)
 800805a:	791b      	ldrb	r3, [r3, #4]
		messageBuffer[3] == 'G' &&
 800805c:	2b4c      	cmp	r3, #76	; 0x4c
 800805e:	d105      	bne.n	800806c <validateMessage+0x38>
		messageBuffer[5] == 'L');
 8008060:	4b06      	ldr	r3, [pc, #24]	; (800807c <validateMessage+0x48>)
 8008062:	795b      	ldrb	r3, [r3, #5]
		messageBuffer[4] == 'L' &&
 8008064:	2b4c      	cmp	r3, #76	; 0x4c
 8008066:	d101      	bne.n	800806c <validateMessage+0x38>
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <validateMessage+0x3a>
 800806c:	2300      	movs	r3, #0
 800806e:	b2db      	uxtb	r3, r3

}
 8008070:	4618      	mov	r0, r3
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	200007ec 	.word	0x200007ec

08008080 <parseGPGLLSentence>:

static int parseGPGLLSentence()
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af02      	add	r7, sp, #8
	float lat = 0;
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
	float lon = 0;
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	60bb      	str	r3, [r7, #8]
    char sn, we;
	sscanf(messageBuffer, "$GPGLL,%f,%c,%f,%c", &lat, &sn, &lon, &we);
 8008092:	1df9      	adds	r1, r7, #7
 8008094:	f107 020c 	add.w	r2, r7, #12
 8008098:	1dbb      	adds	r3, r7, #6
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	f107 0308 	add.w	r3, r7, #8
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	460b      	mov	r3, r1
 80080a4:	491a      	ldr	r1, [pc, #104]	; (8008110 <parseGPGLLSentence+0x90>)
 80080a6:	481b      	ldr	r0, [pc, #108]	; (8008114 <parseGPGLLSentence+0x94>)
 80080a8:	f001 f9f8 	bl	800949c <siscanf>
	currentPosition.latitude = (float) changeCordsToDec(lat, sn);
 80080ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	4618      	mov	r0, r3
 80080b4:	eeb0 0a67 	vmov.f32	s0, s15
 80080b8:	f000 f830 	bl	800811c <changeCordsToDec>
 80080bc:	eef0 7a40 	vmov.f32	s15, s0
 80080c0:	4b15      	ldr	r3, [pc, #84]	; (8008118 <parseGPGLLSentence+0x98>)
 80080c2:	edc3 7a00 	vstr	s15, [r3]
	currentPosition.longitude = (float) changeCordsToDec(lon, we);
 80080c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80080ca:	79bb      	ldrb	r3, [r7, #6]
 80080cc:	4618      	mov	r0, r3
 80080ce:	eeb0 0a67 	vmov.f32	s0, s15
 80080d2:	f000 f823 	bl	800811c <changeCordsToDec>
 80080d6:	eef0 7a40 	vmov.f32	s15, s0
 80080da:	4b0f      	ldr	r3, [pc, #60]	; (8008118 <parseGPGLLSentence+0x98>)
 80080dc:	edc3 7a01 	vstr	s15, [r3, #4]
	return (currentPosition.latitude != 0 && currentPosition.longitude != 0);
 80080e0:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <parseGPGLLSentence+0x98>)
 80080e2:	edd3 7a00 	vldr	s15, [r3]
 80080e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ee:	d009      	beq.n	8008104 <parseGPGLLSentence+0x84>
 80080f0:	4b09      	ldr	r3, [pc, #36]	; (8008118 <parseGPGLLSentence+0x98>)
 80080f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80080f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fe:	d001      	beq.n	8008104 <parseGPGLLSentence+0x84>
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <parseGPGLLSentence+0x86>
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	0800da0c 	.word	0x0800da0c
 8008114:	200007ec 	.word	0x200007ec
 8008118:	20000840 	.word	0x20000840

0800811c <changeCordsToDec>:

static float changeCordsToDec(float deg_coord, char nsew) {
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	ed87 0a01 	vstr	s0, [r7, #4]
 8008126:	4603      	mov	r3, r0
 8008128:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800812a:	ed97 7a01 	vldr	s14, [r7, #4]
 800812e:	eddf 6a20 	vldr	s13, [pc, #128]	; 80081b0 <changeCordsToDec+0x94>
 8008132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800813a:	ee17 3a90 	vmov	r3, s15
 800813e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2264      	movs	r2, #100	; 0x64
 8008144:	fb02 f303 	mul.w	r3, r2, r3
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008150:	ed97 7a01 	vldr	s14, [r7, #4]
 8008154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008158:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 800815c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008160:	eddf 6a14 	vldr	s13, [pc, #80]	; 80081b4 <changeCordsToDec+0x98>
 8008164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008168:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008176:	ed97 7a02 	vldr	s14, [r7, #8]
 800817a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800817e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W')
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	2b53      	cmp	r3, #83	; 0x53
 8008186:	d002      	beq.n	800818e <changeCordsToDec+0x72>
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	2b57      	cmp	r3, #87	; 0x57
 800818c:	d105      	bne.n	800819a <changeCordsToDec+0x7e>
    {
        decimal *= -1;
 800818e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008192:	eef1 7a67 	vneg.f32	s15, s15
 8008196:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	ee07 3a90 	vmov	s15, r3
}
 80081a0:	eeb0 0a67 	vmov.f32	s0, s15
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	42c80000 	.word	0x42c80000
 80081b4:	42700000 	.word	0x42700000

080081b8 <GPS_Init>:
/*
 * public functions
 */

void GPS_Init(uint8_t *rxData)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	gpsDataReady = 0;
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <GPS_Init+0x24>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(GPS_USART, (uint8_t *) &rxData, 1);
 80081c6:	1d3b      	adds	r3, r7, #4
 80081c8:	2201      	movs	r2, #1
 80081ca:	4619      	mov	r1, r3
 80081cc:	4804      	ldr	r0, [pc, #16]	; (80081e0 <GPS_Init+0x28>)
 80081ce:	f7fd ffbd 	bl	800614c <HAL_UART_Receive_IT>
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200007e8 	.word	0x200007e8
 80081e0:	2000042c 	.word	0x2000042c

080081e4 <GPS_UART_Callback>:


void GPS_UART_Callback(uint8_t *rxData)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

	if(mess_index == 0 && *rxData == '$')
 80081ec:	4b2f      	ldr	r3, [pc, #188]	; (80082ac <GPS_UART_Callback+0xc8>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d111      	bne.n	8008218 <GPS_UART_Callback+0x34>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b24      	cmp	r3, #36	; 0x24
 80081fa:	d10d      	bne.n	8008218 <GPS_UART_Callback+0x34>
	{
		messageBuffer[mess_index] = *rxData;
 80081fc:	4b2b      	ldr	r3, [pc, #172]	; (80082ac <GPS_UART_Callback+0xc8>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	7819      	ldrb	r1, [r3, #0]
 8008206:	4b2a      	ldr	r3, [pc, #168]	; (80082b0 <GPS_UART_Callback+0xcc>)
 8008208:	5499      	strb	r1, [r3, r2]
		++mess_index;
 800820a:	4b28      	ldr	r3, [pc, #160]	; (80082ac <GPS_UART_Callback+0xc8>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b26      	ldr	r3, [pc, #152]	; (80082ac <GPS_UART_Callback+0xc8>)
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e03c      	b.n	8008292 <GPS_UART_Callback+0xae>
	}
	else if (mess_index >= 1 && mess_index < sizeof(messageBuffer))
 8008218:	4b24      	ldr	r3, [pc, #144]	; (80082ac <GPS_UART_Callback+0xc8>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d035      	beq.n	800828c <GPS_UART_Callback+0xa8>
 8008220:	4b22      	ldr	r3, [pc, #136]	; (80082ac <GPS_UART_Callback+0xc8>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b4f      	cmp	r3, #79	; 0x4f
 8008226:	d831      	bhi.n	800828c <GPS_UART_Callback+0xa8>
	{
		if(*rxData == '\n' || *rxData == '\r')
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2b0a      	cmp	r3, #10
 800822e:	d003      	beq.n	8008238 <GPS_UART_Callback+0x54>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b0d      	cmp	r3, #13
 8008236:	d11b      	bne.n	8008270 <GPS_UART_Callback+0x8c>
		{
			messageBuffer[mess_index] = '\0';
 8008238:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <GPS_UART_Callback+0xc8>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <GPS_UART_Callback+0xcc>)
 8008240:	2100      	movs	r1, #0
 8008242:	5499      	strb	r1, [r3, r2]
			if(validateMessage())
 8008244:	f7ff fef6 	bl	8008034 <validateMessage>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d007      	beq.n	800825e <GPS_UART_Callback+0x7a>
			{
				if (parseGPGLLSentence())
 800824e:	f7ff ff17 	bl	8008080 <parseGPGLLSentence>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <GPS_UART_Callback+0x7a>
					gpsDataReady = 1;
 8008258:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <GPS_UART_Callback+0xd0>)
 800825a:	2201      	movs	r2, #1
 800825c:	701a      	strb	r2, [r3, #0]
			}
			mess_index = 0;
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <GPS_UART_Callback+0xc8>)
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]
			memset(messageBuffer, 0 , sizeof(messageBuffer));
 8008264:	2250      	movs	r2, #80	; 0x50
 8008266:	2100      	movs	r1, #0
 8008268:	4811      	ldr	r0, [pc, #68]	; (80082b0 <GPS_UART_Callback+0xcc>)
 800826a:	f000 f9e1 	bl	8008630 <memset>
		if(*rxData == '\n' || *rxData == '\r')
 800826e:	e010      	b.n	8008292 <GPS_UART_Callback+0xae>
		}
		else
		{
			messageBuffer[mess_index] = *rxData;
 8008270:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <GPS_UART_Callback+0xc8>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7819      	ldrb	r1, [r3, #0]
 800827a:	4b0d      	ldr	r3, [pc, #52]	; (80082b0 <GPS_UART_Callback+0xcc>)
 800827c:	5499      	strb	r1, [r3, r2]
			++mess_index;
 800827e:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <GPS_UART_Callback+0xc8>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	b2da      	uxtb	r2, r3
 8008286:	4b09      	ldr	r3, [pc, #36]	; (80082ac <GPS_UART_Callback+0xc8>)
 8008288:	701a      	strb	r2, [r3, #0]
		if(*rxData == '\n' || *rxData == '\r')
 800828a:	e002      	b.n	8008292 <GPS_UART_Callback+0xae>
		}
	}
	else
	{
		mess_index = 0;
 800828c:	4b07      	ldr	r3, [pc, #28]	; (80082ac <GPS_UART_Callback+0xc8>)
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
	}

	if(gpsDataReady == 0)
 8008292:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <GPS_UART_Callback+0xd0>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <GPS_UART_Callback+0xc0>
	{
		HAL_UART_Receive_IT(GPS_USART, (uint8_t *) rxData, 1);
 800829a:	2201      	movs	r2, #1
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4806      	ldr	r0, [pc, #24]	; (80082b8 <GPS_UART_Callback+0xd4>)
 80082a0:	f7fd ff54 	bl	800614c <HAL_UART_Receive_IT>
	}
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	2000083c 	.word	0x2000083c
 80082b0:	200007ec 	.word	0x200007ec
 80082b4:	200007e8 	.word	0x200007e8
 80082b8:	2000042c 	.word	0x2000042c

080082bc <GPS_getCurrentPosition>:


void GPS_getCurrentPosition(Position *const position)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	memcpy(position, &currentPosition, sizeof(Position));
 80082c4:	2208      	movs	r2, #8
 80082c6:	4905      	ldr	r1, [pc, #20]	; (80082dc <GPS_getCurrentPosition+0x20>)
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9a3 	bl	8008614 <memcpy>
	gpsDataReady = 0;
 80082ce:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <GPS_getCurrentPosition+0x24>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000840 	.word	0x20000840
 80082e0:	200007e8 	.word	0x200007e8

080082e4 <ds18b20_init>:
 * public functions
 */


HAL_StatusTypeDef ds18b20_init(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  return wire_init();
 80082e8:	f000 f8d4 	bl	8008494 <wire_init>
 80082ec:	4603      	mov	r3, r0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <ds18b20_read_address>:
{
  return send_cmd(rom_code, DS18B20_CONVERT_T);
}

HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 80082f2:	b590      	push	{r4, r7, lr}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 80082fa:	f000 f8d5 	bl	80084a8 <wire_reset>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e021      	b.n	800834c <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 8008308:	2033      	movs	r0, #51	; 0x33
 800830a:	f000 f91b 	bl	8008544 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e009      	b.n	8008328 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	18d4      	adds	r4, r2, r3
 800831a:	f000 f8f4 	bl	8008506 <wire_read>
 800831e:	4603      	mov	r3, r0
 8008320:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3301      	adds	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b07      	cmp	r3, #7
 800832c:	ddf2      	ble.n	8008314 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 800832e:	2107      	movs	r1, #7
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f923 	bl	800857c <wire_crc>
 8008336:	4603      	mov	r3, r0
 8008338:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3307      	adds	r3, #7
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	7afa      	ldrb	r2, [r7, #11]
 8008342:	429a      	cmp	r2, r3
 8008344:	d101      	bne.n	800834a <ds18b20_read_address+0x58>
    return HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	e000      	b.n	800834c <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	bd90      	pop	{r4, r7, pc}

08008354 <delay_us>:
/*
 * private functions
 */

static void delay_us(uint32_t us)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800835c:	4b08      	ldr	r3, [pc, #32]	; (8008380 <delay_us+0x2c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim1) < us) {
 8008364:	bf00      	nop
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <delay_us+0x2c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	429a      	cmp	r2, r3
 8008370:	d8f9      	bhi.n	8008366 <delay_us+0x12>
  }
}
 8008372:	bf00      	nop
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	200002d8 	.word	0x200002d8

08008384 <read_bit>:

static int read_bit(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800838a:	b672      	cpsid	i
}
 800838c:	bf00      	nop
  int rc;
  //__set_BASEPRI(1 << 4);
  __disable_irq();
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800838e:	2200      	movs	r2, #0
 8008390:	2140      	movs	r1, #64	; 0x40
 8008392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008396:	f7fb fcbf 	bl	8003d18 <HAL_GPIO_WritePin>
  delay_us(6);
 800839a:	2006      	movs	r0, #6
 800839c:	f7ff ffda 	bl	8008354 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80083a0:	2201      	movs	r2, #1
 80083a2:	2140      	movs	r1, #64	; 0x40
 80083a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083a8:	f7fb fcb6 	bl	8003d18 <HAL_GPIO_WritePin>
  delay_us(9);
 80083ac:	2009      	movs	r0, #9
 80083ae:	f7ff ffd1 	bl	8008354 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80083b2:	2140      	movs	r1, #64	; 0x40
 80083b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083b8:	f7fb fc96 	bl	8003ce8 <HAL_GPIO_ReadPin>
 80083bc:	4603      	mov	r3, r0
 80083be:	607b      	str	r3, [r7, #4]
  delay_us(55);
 80083c0:	2037      	movs	r0, #55	; 0x37
 80083c2:	f7ff ffc7 	bl	8008354 <delay_us>
  __ASM volatile ("cpsie i" : : : "memory");
 80083c6:	b662      	cpsie	i
}
 80083c8:	bf00      	nop
  //__set_BASEPRI(0);
  __enable_irq();
  return rc;
 80083ca:	687b      	ldr	r3, [r7, #4]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <write_bit>:

static void write_bit(int value)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80083dc:	b672      	cpsid	i
}
 80083de:	bf00      	nop
   __disable_irq();
	//__set_BASEPRI(1 << 4);
  if (value) {
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d012      	beq.n	800840c <write_bit+0x38>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80083e6:	2200      	movs	r2, #0
 80083e8:	2140      	movs	r1, #64	; 0x40
 80083ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80083ee:	f7fb fc93 	bl	8003d18 <HAL_GPIO_WritePin>
    delay_us(6);
 80083f2:	2006      	movs	r0, #6
 80083f4:	f7ff ffae 	bl	8008354 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80083f8:	2201      	movs	r2, #1
 80083fa:	2140      	movs	r1, #64	; 0x40
 80083fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008400:	f7fb fc8a 	bl	8003d18 <HAL_GPIO_WritePin>
    delay_us(64);
 8008404:	2040      	movs	r0, #64	; 0x40
 8008406:	f7ff ffa5 	bl	8008354 <delay_us>
 800840a:	e011      	b.n	8008430 <write_bit+0x5c>
  } else {
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800840c:	2200      	movs	r2, #0
 800840e:	2140      	movs	r1, #64	; 0x40
 8008410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008414:	f7fb fc80 	bl	8003d18 <HAL_GPIO_WritePin>
    delay_us(60);
 8008418:	203c      	movs	r0, #60	; 0x3c
 800841a:	f7ff ff9b 	bl	8008354 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800841e:	2201      	movs	r2, #1
 8008420:	2140      	movs	r1, #64	; 0x40
 8008422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008426:	f7fb fc77 	bl	8003d18 <HAL_GPIO_WritePin>
    delay_us(10);
 800842a:	200a      	movs	r0, #10
 800842c:	f7ff ff92 	bl	8008354 <delay_us>
  __ASM volatile ("cpsie i" : : : "memory");
 8008430:	b662      	cpsie	i
}
 8008432:	bf00      	nop
  }
  //__set_BASEPRI(0);
  __enable_irq();
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	460a      	mov	r2, r1
 8008446:	71fb      	strb	r3, [r7, #7]
 8008448:	4613      	mov	r3, r2
 800844a:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e016      	b.n	8008480 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8008452:	79fa      	ldrb	r2, [r7, #7]
 8008454:	79bb      	ldrb	r3, [r7, #6]
 8008456:	4053      	eors	r3, r2
 8008458:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8008460:	7afb      	ldrb	r3, [r7, #11]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d004      	beq.n	8008474 <byte_crc+0x38>
      crc ^= 0x8c;
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8008470:	43db      	mvns	r3, r3
 8008472:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8008474:	79bb      	ldrb	r3, [r7, #6]
 8008476:	085b      	lsrs	r3, r3, #1
 8008478:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3301      	adds	r3, #1
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b07      	cmp	r3, #7
 8008484:	dde5      	ble.n	8008452 <byte_crc+0x16>
  }
  return crc;
 8008486:	79fb      	ldrb	r3, [r7, #7]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <wire_init>:
/*
 * public functions
 */

HAL_StatusTypeDef wire_init(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim1);
 8008498:	4802      	ldr	r0, [pc, #8]	; (80084a4 <wire_init+0x10>)
 800849a:	f7fd fa87 	bl	80059ac <HAL_TIM_Base_Start>
 800849e:	4603      	mov	r3, r0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	200002d8 	.word	0x200002d8

080084a8 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80084ae:	b672      	cpsid	i
}
 80084b0:	bf00      	nop
  int rc;
  //__set_BASEPRI(1 << 4);
  __disable_irq();
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80084b2:	2200      	movs	r2, #0
 80084b4:	2140      	movs	r1, #64	; 0x40
 80084b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084ba:	f7fb fc2d 	bl	8003d18 <HAL_GPIO_WritePin>
  delay_us(480);
 80084be:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80084c2:	f7ff ff47 	bl	8008354 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80084c6:	2201      	movs	r2, #1
 80084c8:	2140      	movs	r1, #64	; 0x40
 80084ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084ce:	f7fb fc23 	bl	8003d18 <HAL_GPIO_WritePin>
  delay_us(80);
 80084d2:	2050      	movs	r0, #80	; 0x50
 80084d4:	f7ff ff3e 	bl	8008354 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 80084d8:	2140      	movs	r1, #64	; 0x40
 80084da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084de:	f7fb fc03 	bl	8003ce8 <HAL_GPIO_ReadPin>
 80084e2:	4603      	mov	r3, r0
 80084e4:	607b      	str	r3, [r7, #4]
  delay_us(400);
 80084e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80084ea:	f7ff ff33 	bl	8008354 <delay_us>
  __ASM volatile ("cpsie i" : : : "memory");
 80084ee:	b662      	cpsie	i
}
 80084f0:	bf00      	nop
  //__set_BASEPRI(0);
  __enable_irq();

  if (rc == 0)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <wire_reset+0x54>
    return HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e000      	b.n	80084fe <wire_reset+0x56>
  else
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <wire_read>:

uint8_t wire_read(void)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8008510:	2300      	movs	r3, #0
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	e00e      	b.n	8008534 <wire_read+0x2e>
    value >>= 1;
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800851c:	f7ff ff32 	bl	8008384 <read_bit>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <wire_read+0x28>
      value |= 0x80;
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800852c:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	3301      	adds	r3, #1
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b07      	cmp	r3, #7
 8008538:	dded      	ble.n	8008516 <wire_read+0x10>
  }
  return value;
 800853a:	79fb      	ldrb	r3, [r7, #7]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <wire_write>:


void wire_write(uint8_t byte)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e00b      	b.n	800856c <wire_write+0x28>
    write_bit(byte & 0x01);
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff ff3a 	bl	80083d4 <write_bit>
    byte >>= 1;
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b07      	cmp	r3, #7
 8008570:	ddf0      	ble.n	8008554 <wire_write+0x10>
  }
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <wire_crc>:


uint8_t wire_crc(const uint8_t* data, int len)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 800858a:	2300      	movs	r3, #0
 800858c:	60fb      	str	r3, [r7, #12]
 800858e:	e00d      	b.n	80085ac <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	781a      	ldrb	r2, [r3, #0]
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	4611      	mov	r1, r2
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff ff4d 	bl	800843c <byte_crc>
 80085a2:	4603      	mov	r3, r0
 80085a4:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3301      	adds	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	dbed      	blt.n	8008590 <wire_crc+0x14>

    return crc;
 80085b4:	7afb      	ldrb	r3, [r7, #11]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
	...

080085c0 <__errno>:
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <__errno+0x8>)
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	2000000c 	.word	0x2000000c

080085cc <__libc_init_array>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	4d0d      	ldr	r5, [pc, #52]	; (8008604 <__libc_init_array+0x38>)
 80085d0:	4c0d      	ldr	r4, [pc, #52]	; (8008608 <__libc_init_array+0x3c>)
 80085d2:	1b64      	subs	r4, r4, r5
 80085d4:	10a4      	asrs	r4, r4, #2
 80085d6:	2600      	movs	r6, #0
 80085d8:	42a6      	cmp	r6, r4
 80085da:	d109      	bne.n	80085f0 <__libc_init_array+0x24>
 80085dc:	4d0b      	ldr	r5, [pc, #44]	; (800860c <__libc_init_array+0x40>)
 80085de:	4c0c      	ldr	r4, [pc, #48]	; (8008610 <__libc_init_array+0x44>)
 80085e0:	f005 f958 	bl	800d894 <_init>
 80085e4:	1b64      	subs	r4, r4, r5
 80085e6:	10a4      	asrs	r4, r4, #2
 80085e8:	2600      	movs	r6, #0
 80085ea:	42a6      	cmp	r6, r4
 80085ec:	d105      	bne.n	80085fa <__libc_init_array+0x2e>
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f4:	4798      	blx	r3
 80085f6:	3601      	adds	r6, #1
 80085f8:	e7ee      	b.n	80085d8 <__libc_init_array+0xc>
 80085fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fe:	4798      	blx	r3
 8008600:	3601      	adds	r6, #1
 8008602:	e7f2      	b.n	80085ea <__libc_init_array+0x1e>
 8008604:	0800df3c 	.word	0x0800df3c
 8008608:	0800df3c 	.word	0x0800df3c
 800860c:	0800df3c 	.word	0x0800df3c
 8008610:	0800df40 	.word	0x0800df40

08008614 <memcpy>:
 8008614:	440a      	add	r2, r1
 8008616:	4291      	cmp	r1, r2
 8008618:	f100 33ff 	add.w	r3, r0, #4294967295
 800861c:	d100      	bne.n	8008620 <memcpy+0xc>
 800861e:	4770      	bx	lr
 8008620:	b510      	push	{r4, lr}
 8008622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800862a:	4291      	cmp	r1, r2
 800862c:	d1f9      	bne.n	8008622 <memcpy+0xe>
 800862e:	bd10      	pop	{r4, pc}

08008630 <memset>:
 8008630:	4402      	add	r2, r0
 8008632:	4603      	mov	r3, r0
 8008634:	4293      	cmp	r3, r2
 8008636:	d100      	bne.n	800863a <memset+0xa>
 8008638:	4770      	bx	lr
 800863a:	f803 1b01 	strb.w	r1, [r3], #1
 800863e:	e7f9      	b.n	8008634 <memset+0x4>

08008640 <__cvt>:
 8008640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	ec55 4b10 	vmov	r4, r5, d0
 8008648:	2d00      	cmp	r5, #0
 800864a:	460e      	mov	r6, r1
 800864c:	4619      	mov	r1, r3
 800864e:	462b      	mov	r3, r5
 8008650:	bfbb      	ittet	lt
 8008652:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008656:	461d      	movlt	r5, r3
 8008658:	2300      	movge	r3, #0
 800865a:	232d      	movlt	r3, #45	; 0x2d
 800865c:	700b      	strb	r3, [r1, #0]
 800865e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008660:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008664:	4691      	mov	r9, r2
 8008666:	f023 0820 	bic.w	r8, r3, #32
 800866a:	bfbc      	itt	lt
 800866c:	4622      	movlt	r2, r4
 800866e:	4614      	movlt	r4, r2
 8008670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008674:	d005      	beq.n	8008682 <__cvt+0x42>
 8008676:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800867a:	d100      	bne.n	800867e <__cvt+0x3e>
 800867c:	3601      	adds	r6, #1
 800867e:	2102      	movs	r1, #2
 8008680:	e000      	b.n	8008684 <__cvt+0x44>
 8008682:	2103      	movs	r1, #3
 8008684:	ab03      	add	r3, sp, #12
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	ab02      	add	r3, sp, #8
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	ec45 4b10 	vmov	d0, r4, r5
 8008690:	4653      	mov	r3, sl
 8008692:	4632      	mov	r2, r6
 8008694:	f001 ff90 	bl	800a5b8 <_dtoa_r>
 8008698:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800869c:	4607      	mov	r7, r0
 800869e:	d102      	bne.n	80086a6 <__cvt+0x66>
 80086a0:	f019 0f01 	tst.w	r9, #1
 80086a4:	d022      	beq.n	80086ec <__cvt+0xac>
 80086a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086aa:	eb07 0906 	add.w	r9, r7, r6
 80086ae:	d110      	bne.n	80086d2 <__cvt+0x92>
 80086b0:	783b      	ldrb	r3, [r7, #0]
 80086b2:	2b30      	cmp	r3, #48	; 0x30
 80086b4:	d10a      	bne.n	80086cc <__cvt+0x8c>
 80086b6:	2200      	movs	r2, #0
 80086b8:	2300      	movs	r3, #0
 80086ba:	4620      	mov	r0, r4
 80086bc:	4629      	mov	r1, r5
 80086be:	f7f8 fa13 	bl	8000ae8 <__aeabi_dcmpeq>
 80086c2:	b918      	cbnz	r0, 80086cc <__cvt+0x8c>
 80086c4:	f1c6 0601 	rsb	r6, r6, #1
 80086c8:	f8ca 6000 	str.w	r6, [sl]
 80086cc:	f8da 3000 	ldr.w	r3, [sl]
 80086d0:	4499      	add	r9, r3
 80086d2:	2200      	movs	r2, #0
 80086d4:	2300      	movs	r3, #0
 80086d6:	4620      	mov	r0, r4
 80086d8:	4629      	mov	r1, r5
 80086da:	f7f8 fa05 	bl	8000ae8 <__aeabi_dcmpeq>
 80086de:	b108      	cbz	r0, 80086e4 <__cvt+0xa4>
 80086e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80086e4:	2230      	movs	r2, #48	; 0x30
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	454b      	cmp	r3, r9
 80086ea:	d307      	bcc.n	80086fc <__cvt+0xbc>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f0:	1bdb      	subs	r3, r3, r7
 80086f2:	4638      	mov	r0, r7
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	b004      	add	sp, #16
 80086f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fc:	1c59      	adds	r1, r3, #1
 80086fe:	9103      	str	r1, [sp, #12]
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	e7f0      	b.n	80086e6 <__cvt+0xa6>

08008704 <__exponent>:
 8008704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008706:	4603      	mov	r3, r0
 8008708:	2900      	cmp	r1, #0
 800870a:	bfb8      	it	lt
 800870c:	4249      	neglt	r1, r1
 800870e:	f803 2b02 	strb.w	r2, [r3], #2
 8008712:	bfb4      	ite	lt
 8008714:	222d      	movlt	r2, #45	; 0x2d
 8008716:	222b      	movge	r2, #43	; 0x2b
 8008718:	2909      	cmp	r1, #9
 800871a:	7042      	strb	r2, [r0, #1]
 800871c:	dd2a      	ble.n	8008774 <__exponent+0x70>
 800871e:	f10d 0407 	add.w	r4, sp, #7
 8008722:	46a4      	mov	ip, r4
 8008724:	270a      	movs	r7, #10
 8008726:	46a6      	mov	lr, r4
 8008728:	460a      	mov	r2, r1
 800872a:	fb91 f6f7 	sdiv	r6, r1, r7
 800872e:	fb07 1516 	mls	r5, r7, r6, r1
 8008732:	3530      	adds	r5, #48	; 0x30
 8008734:	2a63      	cmp	r2, #99	; 0x63
 8008736:	f104 34ff 	add.w	r4, r4, #4294967295
 800873a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800873e:	4631      	mov	r1, r6
 8008740:	dcf1      	bgt.n	8008726 <__exponent+0x22>
 8008742:	3130      	adds	r1, #48	; 0x30
 8008744:	f1ae 0502 	sub.w	r5, lr, #2
 8008748:	f804 1c01 	strb.w	r1, [r4, #-1]
 800874c:	1c44      	adds	r4, r0, #1
 800874e:	4629      	mov	r1, r5
 8008750:	4561      	cmp	r1, ip
 8008752:	d30a      	bcc.n	800876a <__exponent+0x66>
 8008754:	f10d 0209 	add.w	r2, sp, #9
 8008758:	eba2 020e 	sub.w	r2, r2, lr
 800875c:	4565      	cmp	r5, ip
 800875e:	bf88      	it	hi
 8008760:	2200      	movhi	r2, #0
 8008762:	4413      	add	r3, r2
 8008764:	1a18      	subs	r0, r3, r0
 8008766:	b003      	add	sp, #12
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008772:	e7ed      	b.n	8008750 <__exponent+0x4c>
 8008774:	2330      	movs	r3, #48	; 0x30
 8008776:	3130      	adds	r1, #48	; 0x30
 8008778:	7083      	strb	r3, [r0, #2]
 800877a:	70c1      	strb	r1, [r0, #3]
 800877c:	1d03      	adds	r3, r0, #4
 800877e:	e7f1      	b.n	8008764 <__exponent+0x60>

08008780 <_printf_float>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	ed2d 8b02 	vpush	{d8}
 8008788:	b08d      	sub	sp, #52	; 0x34
 800878a:	460c      	mov	r4, r1
 800878c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008790:	4616      	mov	r6, r2
 8008792:	461f      	mov	r7, r3
 8008794:	4605      	mov	r5, r0
 8008796:	f003 fa23 	bl	800bbe0 <_localeconv_r>
 800879a:	f8d0 a000 	ldr.w	sl, [r0]
 800879e:	4650      	mov	r0, sl
 80087a0:	f7f7 fd20 	bl	80001e4 <strlen>
 80087a4:	2300      	movs	r3, #0
 80087a6:	930a      	str	r3, [sp, #40]	; 0x28
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	f8d8 3000 	ldr.w	r3, [r8]
 80087b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087b4:	3307      	adds	r3, #7
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	f103 0208 	add.w	r2, r3, #8
 80087be:	f8c8 2000 	str.w	r2, [r8]
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087d2:	9307      	str	r3, [sp, #28]
 80087d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80087d8:	ee08 0a10 	vmov	s16, r0
 80087dc:	4b9f      	ldr	r3, [pc, #636]	; (8008a5c <_printf_float+0x2dc>)
 80087de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	f7f8 f9b1 	bl	8000b4c <__aeabi_dcmpun>
 80087ea:	bb88      	cbnz	r0, 8008850 <_printf_float+0xd0>
 80087ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087f0:	4b9a      	ldr	r3, [pc, #616]	; (8008a5c <_printf_float+0x2dc>)
 80087f2:	f04f 32ff 	mov.w	r2, #4294967295
 80087f6:	f7f8 f98b 	bl	8000b10 <__aeabi_dcmple>
 80087fa:	bb48      	cbnz	r0, 8008850 <_printf_float+0xd0>
 80087fc:	2200      	movs	r2, #0
 80087fe:	2300      	movs	r3, #0
 8008800:	4640      	mov	r0, r8
 8008802:	4649      	mov	r1, r9
 8008804:	f7f8 f97a 	bl	8000afc <__aeabi_dcmplt>
 8008808:	b110      	cbz	r0, 8008810 <_printf_float+0x90>
 800880a:	232d      	movs	r3, #45	; 0x2d
 800880c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008810:	4b93      	ldr	r3, [pc, #588]	; (8008a60 <_printf_float+0x2e0>)
 8008812:	4894      	ldr	r0, [pc, #592]	; (8008a64 <_printf_float+0x2e4>)
 8008814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008818:	bf94      	ite	ls
 800881a:	4698      	movls	r8, r3
 800881c:	4680      	movhi	r8, r0
 800881e:	2303      	movs	r3, #3
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	9b05      	ldr	r3, [sp, #20]
 8008824:	f023 0204 	bic.w	r2, r3, #4
 8008828:	6022      	str	r2, [r4, #0]
 800882a:	f04f 0900 	mov.w	r9, #0
 800882e:	9700      	str	r7, [sp, #0]
 8008830:	4633      	mov	r3, r6
 8008832:	aa0b      	add	r2, sp, #44	; 0x2c
 8008834:	4621      	mov	r1, r4
 8008836:	4628      	mov	r0, r5
 8008838:	f000 f9d8 	bl	8008bec <_printf_common>
 800883c:	3001      	adds	r0, #1
 800883e:	f040 8090 	bne.w	8008962 <_printf_float+0x1e2>
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	b00d      	add	sp, #52	; 0x34
 8008848:	ecbd 8b02 	vpop	{d8}
 800884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008850:	4642      	mov	r2, r8
 8008852:	464b      	mov	r3, r9
 8008854:	4640      	mov	r0, r8
 8008856:	4649      	mov	r1, r9
 8008858:	f7f8 f978 	bl	8000b4c <__aeabi_dcmpun>
 800885c:	b140      	cbz	r0, 8008870 <_printf_float+0xf0>
 800885e:	464b      	mov	r3, r9
 8008860:	2b00      	cmp	r3, #0
 8008862:	bfbc      	itt	lt
 8008864:	232d      	movlt	r3, #45	; 0x2d
 8008866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800886a:	487f      	ldr	r0, [pc, #508]	; (8008a68 <_printf_float+0x2e8>)
 800886c:	4b7f      	ldr	r3, [pc, #508]	; (8008a6c <_printf_float+0x2ec>)
 800886e:	e7d1      	b.n	8008814 <_printf_float+0x94>
 8008870:	6863      	ldr	r3, [r4, #4]
 8008872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008876:	9206      	str	r2, [sp, #24]
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	d13f      	bne.n	80088fc <_printf_float+0x17c>
 800887c:	2306      	movs	r3, #6
 800887e:	6063      	str	r3, [r4, #4]
 8008880:	9b05      	ldr	r3, [sp, #20]
 8008882:	6861      	ldr	r1, [r4, #4]
 8008884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008888:	2300      	movs	r3, #0
 800888a:	9303      	str	r3, [sp, #12]
 800888c:	ab0a      	add	r3, sp, #40	; 0x28
 800888e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008892:	ab09      	add	r3, sp, #36	; 0x24
 8008894:	ec49 8b10 	vmov	d0, r8, r9
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	6022      	str	r2, [r4, #0]
 800889c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088a0:	4628      	mov	r0, r5
 80088a2:	f7ff fecd 	bl	8008640 <__cvt>
 80088a6:	9b06      	ldr	r3, [sp, #24]
 80088a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088aa:	2b47      	cmp	r3, #71	; 0x47
 80088ac:	4680      	mov	r8, r0
 80088ae:	d108      	bne.n	80088c2 <_printf_float+0x142>
 80088b0:	1cc8      	adds	r0, r1, #3
 80088b2:	db02      	blt.n	80088ba <_printf_float+0x13a>
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	4299      	cmp	r1, r3
 80088b8:	dd41      	ble.n	800893e <_printf_float+0x1be>
 80088ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80088be:	fa5f fb8b 	uxtb.w	fp, fp
 80088c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088c6:	d820      	bhi.n	800890a <_printf_float+0x18a>
 80088c8:	3901      	subs	r1, #1
 80088ca:	465a      	mov	r2, fp
 80088cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088d0:	9109      	str	r1, [sp, #36]	; 0x24
 80088d2:	f7ff ff17 	bl	8008704 <__exponent>
 80088d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d8:	1813      	adds	r3, r2, r0
 80088da:	2a01      	cmp	r2, #1
 80088dc:	4681      	mov	r9, r0
 80088de:	6123      	str	r3, [r4, #16]
 80088e0:	dc02      	bgt.n	80088e8 <_printf_float+0x168>
 80088e2:	6822      	ldr	r2, [r4, #0]
 80088e4:	07d2      	lsls	r2, r2, #31
 80088e6:	d501      	bpl.n	80088ec <_printf_float+0x16c>
 80088e8:	3301      	adds	r3, #1
 80088ea:	6123      	str	r3, [r4, #16]
 80088ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d09c      	beq.n	800882e <_printf_float+0xae>
 80088f4:	232d      	movs	r3, #45	; 0x2d
 80088f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088fa:	e798      	b.n	800882e <_printf_float+0xae>
 80088fc:	9a06      	ldr	r2, [sp, #24]
 80088fe:	2a47      	cmp	r2, #71	; 0x47
 8008900:	d1be      	bne.n	8008880 <_printf_float+0x100>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1bc      	bne.n	8008880 <_printf_float+0x100>
 8008906:	2301      	movs	r3, #1
 8008908:	e7b9      	b.n	800887e <_printf_float+0xfe>
 800890a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800890e:	d118      	bne.n	8008942 <_printf_float+0x1c2>
 8008910:	2900      	cmp	r1, #0
 8008912:	6863      	ldr	r3, [r4, #4]
 8008914:	dd0b      	ble.n	800892e <_printf_float+0x1ae>
 8008916:	6121      	str	r1, [r4, #16]
 8008918:	b913      	cbnz	r3, 8008920 <_printf_float+0x1a0>
 800891a:	6822      	ldr	r2, [r4, #0]
 800891c:	07d0      	lsls	r0, r2, #31
 800891e:	d502      	bpl.n	8008926 <_printf_float+0x1a6>
 8008920:	3301      	adds	r3, #1
 8008922:	440b      	add	r3, r1
 8008924:	6123      	str	r3, [r4, #16]
 8008926:	65a1      	str	r1, [r4, #88]	; 0x58
 8008928:	f04f 0900 	mov.w	r9, #0
 800892c:	e7de      	b.n	80088ec <_printf_float+0x16c>
 800892e:	b913      	cbnz	r3, 8008936 <_printf_float+0x1b6>
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	07d2      	lsls	r2, r2, #31
 8008934:	d501      	bpl.n	800893a <_printf_float+0x1ba>
 8008936:	3302      	adds	r3, #2
 8008938:	e7f4      	b.n	8008924 <_printf_float+0x1a4>
 800893a:	2301      	movs	r3, #1
 800893c:	e7f2      	b.n	8008924 <_printf_float+0x1a4>
 800893e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008944:	4299      	cmp	r1, r3
 8008946:	db05      	blt.n	8008954 <_printf_float+0x1d4>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	6121      	str	r1, [r4, #16]
 800894c:	07d8      	lsls	r0, r3, #31
 800894e:	d5ea      	bpl.n	8008926 <_printf_float+0x1a6>
 8008950:	1c4b      	adds	r3, r1, #1
 8008952:	e7e7      	b.n	8008924 <_printf_float+0x1a4>
 8008954:	2900      	cmp	r1, #0
 8008956:	bfd4      	ite	le
 8008958:	f1c1 0202 	rsble	r2, r1, #2
 800895c:	2201      	movgt	r2, #1
 800895e:	4413      	add	r3, r2
 8008960:	e7e0      	b.n	8008924 <_printf_float+0x1a4>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	055a      	lsls	r2, r3, #21
 8008966:	d407      	bmi.n	8008978 <_printf_float+0x1f8>
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	4642      	mov	r2, r8
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	d12c      	bne.n	80089d0 <_printf_float+0x250>
 8008976:	e764      	b.n	8008842 <_printf_float+0xc2>
 8008978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800897c:	f240 80e0 	bls.w	8008b40 <_printf_float+0x3c0>
 8008980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	f7f8 f8ae 	bl	8000ae8 <__aeabi_dcmpeq>
 800898c:	2800      	cmp	r0, #0
 800898e:	d034      	beq.n	80089fa <_printf_float+0x27a>
 8008990:	4a37      	ldr	r2, [pc, #220]	; (8008a70 <_printf_float+0x2f0>)
 8008992:	2301      	movs	r3, #1
 8008994:	4631      	mov	r1, r6
 8008996:	4628      	mov	r0, r5
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	f43f af51 	beq.w	8008842 <_printf_float+0xc2>
 80089a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089a4:	429a      	cmp	r2, r3
 80089a6:	db02      	blt.n	80089ae <_printf_float+0x22e>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	07d8      	lsls	r0, r3, #31
 80089ac:	d510      	bpl.n	80089d0 <_printf_float+0x250>
 80089ae:	ee18 3a10 	vmov	r3, s16
 80089b2:	4652      	mov	r2, sl
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	f43f af41 	beq.w	8008842 <_printf_float+0xc2>
 80089c0:	f04f 0800 	mov.w	r8, #0
 80089c4:	f104 091a 	add.w	r9, r4, #26
 80089c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ca:	3b01      	subs	r3, #1
 80089cc:	4543      	cmp	r3, r8
 80089ce:	dc09      	bgt.n	80089e4 <_printf_float+0x264>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	079b      	lsls	r3, r3, #30
 80089d4:	f100 8105 	bmi.w	8008be2 <_printf_float+0x462>
 80089d8:	68e0      	ldr	r0, [r4, #12]
 80089da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089dc:	4298      	cmp	r0, r3
 80089de:	bfb8      	it	lt
 80089e0:	4618      	movlt	r0, r3
 80089e2:	e730      	b.n	8008846 <_printf_float+0xc6>
 80089e4:	2301      	movs	r3, #1
 80089e6:	464a      	mov	r2, r9
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f af27 	beq.w	8008842 <_printf_float+0xc2>
 80089f4:	f108 0801 	add.w	r8, r8, #1
 80089f8:	e7e6      	b.n	80089c8 <_printf_float+0x248>
 80089fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dc39      	bgt.n	8008a74 <_printf_float+0x2f4>
 8008a00:	4a1b      	ldr	r2, [pc, #108]	; (8008a70 <_printf_float+0x2f0>)
 8008a02:	2301      	movs	r3, #1
 8008a04:	4631      	mov	r1, r6
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b8      	blx	r7
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	f43f af19 	beq.w	8008842 <_printf_float+0xc2>
 8008a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a14:	4313      	orrs	r3, r2
 8008a16:	d102      	bne.n	8008a1e <_printf_float+0x29e>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	07d9      	lsls	r1, r3, #31
 8008a1c:	d5d8      	bpl.n	80089d0 <_printf_float+0x250>
 8008a1e:	ee18 3a10 	vmov	r3, s16
 8008a22:	4652      	mov	r2, sl
 8008a24:	4631      	mov	r1, r6
 8008a26:	4628      	mov	r0, r5
 8008a28:	47b8      	blx	r7
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	f43f af09 	beq.w	8008842 <_printf_float+0xc2>
 8008a30:	f04f 0900 	mov.w	r9, #0
 8008a34:	f104 0a1a 	add.w	sl, r4, #26
 8008a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3a:	425b      	negs	r3, r3
 8008a3c:	454b      	cmp	r3, r9
 8008a3e:	dc01      	bgt.n	8008a44 <_printf_float+0x2c4>
 8008a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a42:	e792      	b.n	800896a <_printf_float+0x1ea>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4652      	mov	r2, sl
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f aef7 	beq.w	8008842 <_printf_float+0xc2>
 8008a54:	f109 0901 	add.w	r9, r9, #1
 8008a58:	e7ee      	b.n	8008a38 <_printf_float+0x2b8>
 8008a5a:	bf00      	nop
 8008a5c:	7fefffff 	.word	0x7fefffff
 8008a60:	0800da78 	.word	0x0800da78
 8008a64:	0800da7c 	.word	0x0800da7c
 8008a68:	0800da84 	.word	0x0800da84
 8008a6c:	0800da80 	.word	0x0800da80
 8008a70:	0800dee1 	.word	0x0800dee1
 8008a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	bfa8      	it	ge
 8008a7c:	461a      	movge	r2, r3
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	4691      	mov	r9, r2
 8008a82:	dc37      	bgt.n	8008af4 <_printf_float+0x374>
 8008a84:	f04f 0b00 	mov.w	fp, #0
 8008a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a8c:	f104 021a 	add.w	r2, r4, #26
 8008a90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a92:	9305      	str	r3, [sp, #20]
 8008a94:	eba3 0309 	sub.w	r3, r3, r9
 8008a98:	455b      	cmp	r3, fp
 8008a9a:	dc33      	bgt.n	8008b04 <_printf_float+0x384>
 8008a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	db3b      	blt.n	8008b1c <_printf_float+0x39c>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	07da      	lsls	r2, r3, #31
 8008aa8:	d438      	bmi.n	8008b1c <_printf_float+0x39c>
 8008aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aac:	9a05      	ldr	r2, [sp, #20]
 8008aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ab0:	1a9a      	subs	r2, r3, r2
 8008ab2:	eba3 0901 	sub.w	r9, r3, r1
 8008ab6:	4591      	cmp	r9, r2
 8008ab8:	bfa8      	it	ge
 8008aba:	4691      	movge	r9, r2
 8008abc:	f1b9 0f00 	cmp.w	r9, #0
 8008ac0:	dc35      	bgt.n	8008b2e <_printf_float+0x3ae>
 8008ac2:	f04f 0800 	mov.w	r8, #0
 8008ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aca:	f104 0a1a 	add.w	sl, r4, #26
 8008ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	eba3 0309 	sub.w	r3, r3, r9
 8008ad8:	4543      	cmp	r3, r8
 8008ada:	f77f af79 	ble.w	80089d0 <_printf_float+0x250>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f aeaa 	beq.w	8008842 <_printf_float+0xc2>
 8008aee:	f108 0801 	add.w	r8, r8, #1
 8008af2:	e7ec      	b.n	8008ace <_printf_float+0x34e>
 8008af4:	4613      	mov	r3, r2
 8008af6:	4631      	mov	r1, r6
 8008af8:	4642      	mov	r2, r8
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	d1c0      	bne.n	8008a84 <_printf_float+0x304>
 8008b02:	e69e      	b.n	8008842 <_printf_float+0xc2>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	9205      	str	r2, [sp, #20]
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f ae97 	beq.w	8008842 <_printf_float+0xc2>
 8008b14:	9a05      	ldr	r2, [sp, #20]
 8008b16:	f10b 0b01 	add.w	fp, fp, #1
 8008b1a:	e7b9      	b.n	8008a90 <_printf_float+0x310>
 8008b1c:	ee18 3a10 	vmov	r3, s16
 8008b20:	4652      	mov	r2, sl
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d1be      	bne.n	8008aaa <_printf_float+0x32a>
 8008b2c:	e689      	b.n	8008842 <_printf_float+0xc2>
 8008b2e:	9a05      	ldr	r2, [sp, #20]
 8008b30:	464b      	mov	r3, r9
 8008b32:	4442      	add	r2, r8
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d1c1      	bne.n	8008ac2 <_printf_float+0x342>
 8008b3e:	e680      	b.n	8008842 <_printf_float+0xc2>
 8008b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b42:	2a01      	cmp	r2, #1
 8008b44:	dc01      	bgt.n	8008b4a <_printf_float+0x3ca>
 8008b46:	07db      	lsls	r3, r3, #31
 8008b48:	d538      	bpl.n	8008bbc <_printf_float+0x43c>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	47b8      	blx	r7
 8008b54:	3001      	adds	r0, #1
 8008b56:	f43f ae74 	beq.w	8008842 <_printf_float+0xc2>
 8008b5a:	ee18 3a10 	vmov	r3, s16
 8008b5e:	4652      	mov	r2, sl
 8008b60:	4631      	mov	r1, r6
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	f43f ae6b 	beq.w	8008842 <_printf_float+0xc2>
 8008b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b70:	2200      	movs	r2, #0
 8008b72:	2300      	movs	r3, #0
 8008b74:	f7f7 ffb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b78:	b9d8      	cbnz	r0, 8008bb2 <_printf_float+0x432>
 8008b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7c:	f108 0201 	add.w	r2, r8, #1
 8008b80:	3b01      	subs	r3, #1
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d10e      	bne.n	8008baa <_printf_float+0x42a>
 8008b8c:	e659      	b.n	8008842 <_printf_float+0xc2>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4652      	mov	r2, sl
 8008b92:	4631      	mov	r1, r6
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b8      	blx	r7
 8008b98:	3001      	adds	r0, #1
 8008b9a:	f43f ae52 	beq.w	8008842 <_printf_float+0xc2>
 8008b9e:	f108 0801 	add.w	r8, r8, #1
 8008ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	4543      	cmp	r3, r8
 8008ba8:	dcf1      	bgt.n	8008b8e <_printf_float+0x40e>
 8008baa:	464b      	mov	r3, r9
 8008bac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bb0:	e6dc      	b.n	800896c <_printf_float+0x1ec>
 8008bb2:	f04f 0800 	mov.w	r8, #0
 8008bb6:	f104 0a1a 	add.w	sl, r4, #26
 8008bba:	e7f2      	b.n	8008ba2 <_printf_float+0x422>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4642      	mov	r2, r8
 8008bc0:	e7df      	b.n	8008b82 <_printf_float+0x402>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	464a      	mov	r2, r9
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f43f ae38 	beq.w	8008842 <_printf_float+0xc2>
 8008bd2:	f108 0801 	add.w	r8, r8, #1
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bda:	1a5b      	subs	r3, r3, r1
 8008bdc:	4543      	cmp	r3, r8
 8008bde:	dcf0      	bgt.n	8008bc2 <_printf_float+0x442>
 8008be0:	e6fa      	b.n	80089d8 <_printf_float+0x258>
 8008be2:	f04f 0800 	mov.w	r8, #0
 8008be6:	f104 0919 	add.w	r9, r4, #25
 8008bea:	e7f4      	b.n	8008bd6 <_printf_float+0x456>

08008bec <_printf_common>:
 8008bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf0:	4616      	mov	r6, r2
 8008bf2:	4699      	mov	r9, r3
 8008bf4:	688a      	ldr	r2, [r1, #8]
 8008bf6:	690b      	ldr	r3, [r1, #16]
 8008bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	bfb8      	it	lt
 8008c00:	4613      	movlt	r3, r2
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c08:	4607      	mov	r7, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	b10a      	cbz	r2, 8008c12 <_printf_common+0x26>
 8008c0e:	3301      	adds	r3, #1
 8008c10:	6033      	str	r3, [r6, #0]
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	0699      	lsls	r1, r3, #26
 8008c16:	bf42      	ittt	mi
 8008c18:	6833      	ldrmi	r3, [r6, #0]
 8008c1a:	3302      	addmi	r3, #2
 8008c1c:	6033      	strmi	r3, [r6, #0]
 8008c1e:	6825      	ldr	r5, [r4, #0]
 8008c20:	f015 0506 	ands.w	r5, r5, #6
 8008c24:	d106      	bne.n	8008c34 <_printf_common+0x48>
 8008c26:	f104 0a19 	add.w	sl, r4, #25
 8008c2a:	68e3      	ldr	r3, [r4, #12]
 8008c2c:	6832      	ldr	r2, [r6, #0]
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	42ab      	cmp	r3, r5
 8008c32:	dc26      	bgt.n	8008c82 <_printf_common+0x96>
 8008c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c38:	1e13      	subs	r3, r2, #0
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	bf18      	it	ne
 8008c3e:	2301      	movne	r3, #1
 8008c40:	0692      	lsls	r2, r2, #26
 8008c42:	d42b      	bmi.n	8008c9c <_printf_common+0xb0>
 8008c44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c48:	4649      	mov	r1, r9
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	47c0      	blx	r8
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d01e      	beq.n	8008c90 <_printf_common+0xa4>
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	68e5      	ldr	r5, [r4, #12]
 8008c56:	6832      	ldr	r2, [r6, #0]
 8008c58:	f003 0306 	and.w	r3, r3, #6
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	bf08      	it	eq
 8008c60:	1aad      	subeq	r5, r5, r2
 8008c62:	68a3      	ldr	r3, [r4, #8]
 8008c64:	6922      	ldr	r2, [r4, #16]
 8008c66:	bf0c      	ite	eq
 8008c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c6c:	2500      	movne	r5, #0
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	bfc4      	itt	gt
 8008c72:	1a9b      	subgt	r3, r3, r2
 8008c74:	18ed      	addgt	r5, r5, r3
 8008c76:	2600      	movs	r6, #0
 8008c78:	341a      	adds	r4, #26
 8008c7a:	42b5      	cmp	r5, r6
 8008c7c:	d11a      	bne.n	8008cb4 <_printf_common+0xc8>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e008      	b.n	8008c94 <_printf_common+0xa8>
 8008c82:	2301      	movs	r3, #1
 8008c84:	4652      	mov	r2, sl
 8008c86:	4649      	mov	r1, r9
 8008c88:	4638      	mov	r0, r7
 8008c8a:	47c0      	blx	r8
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d103      	bne.n	8008c98 <_printf_common+0xac>
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c98:	3501      	adds	r5, #1
 8008c9a:	e7c6      	b.n	8008c2a <_printf_common+0x3e>
 8008c9c:	18e1      	adds	r1, r4, r3
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	2030      	movs	r0, #48	; 0x30
 8008ca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ca6:	4422      	add	r2, r4
 8008ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	e7c7      	b.n	8008c44 <_printf_common+0x58>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4622      	mov	r2, r4
 8008cb8:	4649      	mov	r1, r9
 8008cba:	4638      	mov	r0, r7
 8008cbc:	47c0      	blx	r8
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d0e6      	beq.n	8008c90 <_printf_common+0xa4>
 8008cc2:	3601      	adds	r6, #1
 8008cc4:	e7d9      	b.n	8008c7a <_printf_common+0x8e>
	...

08008cc8 <_printf_i>:
 8008cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ccc:	7e0f      	ldrb	r7, [r1, #24]
 8008cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cd0:	2f78      	cmp	r7, #120	; 0x78
 8008cd2:	4691      	mov	r9, r2
 8008cd4:	4680      	mov	r8, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	469a      	mov	sl, r3
 8008cda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cde:	d807      	bhi.n	8008cf0 <_printf_i+0x28>
 8008ce0:	2f62      	cmp	r7, #98	; 0x62
 8008ce2:	d80a      	bhi.n	8008cfa <_printf_i+0x32>
 8008ce4:	2f00      	cmp	r7, #0
 8008ce6:	f000 80d8 	beq.w	8008e9a <_printf_i+0x1d2>
 8008cea:	2f58      	cmp	r7, #88	; 0x58
 8008cec:	f000 80a3 	beq.w	8008e36 <_printf_i+0x16e>
 8008cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cf8:	e03a      	b.n	8008d70 <_printf_i+0xa8>
 8008cfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cfe:	2b15      	cmp	r3, #21
 8008d00:	d8f6      	bhi.n	8008cf0 <_printf_i+0x28>
 8008d02:	a101      	add	r1, pc, #4	; (adr r1, 8008d08 <_printf_i+0x40>)
 8008d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d08:	08008d61 	.word	0x08008d61
 8008d0c:	08008d75 	.word	0x08008d75
 8008d10:	08008cf1 	.word	0x08008cf1
 8008d14:	08008cf1 	.word	0x08008cf1
 8008d18:	08008cf1 	.word	0x08008cf1
 8008d1c:	08008cf1 	.word	0x08008cf1
 8008d20:	08008d75 	.word	0x08008d75
 8008d24:	08008cf1 	.word	0x08008cf1
 8008d28:	08008cf1 	.word	0x08008cf1
 8008d2c:	08008cf1 	.word	0x08008cf1
 8008d30:	08008cf1 	.word	0x08008cf1
 8008d34:	08008e81 	.word	0x08008e81
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008e63 	.word	0x08008e63
 8008d40:	08008cf1 	.word	0x08008cf1
 8008d44:	08008cf1 	.word	0x08008cf1
 8008d48:	08008ea3 	.word	0x08008ea3
 8008d4c:	08008cf1 	.word	0x08008cf1
 8008d50:	08008da5 	.word	0x08008da5
 8008d54:	08008cf1 	.word	0x08008cf1
 8008d58:	08008cf1 	.word	0x08008cf1
 8008d5c:	08008e6b 	.word	0x08008e6b
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	1d1a      	adds	r2, r3, #4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	602a      	str	r2, [r5, #0]
 8008d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0a3      	b.n	8008ebc <_printf_i+0x1f4>
 8008d74:	6820      	ldr	r0, [r4, #0]
 8008d76:	6829      	ldr	r1, [r5, #0]
 8008d78:	0606      	lsls	r6, r0, #24
 8008d7a:	f101 0304 	add.w	r3, r1, #4
 8008d7e:	d50a      	bpl.n	8008d96 <_printf_i+0xce>
 8008d80:	680e      	ldr	r6, [r1, #0]
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	2e00      	cmp	r6, #0
 8008d86:	da03      	bge.n	8008d90 <_printf_i+0xc8>
 8008d88:	232d      	movs	r3, #45	; 0x2d
 8008d8a:	4276      	negs	r6, r6
 8008d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d90:	485e      	ldr	r0, [pc, #376]	; (8008f0c <_printf_i+0x244>)
 8008d92:	230a      	movs	r3, #10
 8008d94:	e019      	b.n	8008dca <_printf_i+0x102>
 8008d96:	680e      	ldr	r6, [r1, #0]
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d9e:	bf18      	it	ne
 8008da0:	b236      	sxthne	r6, r6
 8008da2:	e7ef      	b.n	8008d84 <_printf_i+0xbc>
 8008da4:	682b      	ldr	r3, [r5, #0]
 8008da6:	6820      	ldr	r0, [r4, #0]
 8008da8:	1d19      	adds	r1, r3, #4
 8008daa:	6029      	str	r1, [r5, #0]
 8008dac:	0601      	lsls	r1, r0, #24
 8008dae:	d501      	bpl.n	8008db4 <_printf_i+0xec>
 8008db0:	681e      	ldr	r6, [r3, #0]
 8008db2:	e002      	b.n	8008dba <_printf_i+0xf2>
 8008db4:	0646      	lsls	r6, r0, #25
 8008db6:	d5fb      	bpl.n	8008db0 <_printf_i+0xe8>
 8008db8:	881e      	ldrh	r6, [r3, #0]
 8008dba:	4854      	ldr	r0, [pc, #336]	; (8008f0c <_printf_i+0x244>)
 8008dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8008dbe:	bf0c      	ite	eq
 8008dc0:	2308      	moveq	r3, #8
 8008dc2:	230a      	movne	r3, #10
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dca:	6865      	ldr	r5, [r4, #4]
 8008dcc:	60a5      	str	r5, [r4, #8]
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	bfa2      	ittt	ge
 8008dd2:	6821      	ldrge	r1, [r4, #0]
 8008dd4:	f021 0104 	bicge.w	r1, r1, #4
 8008dd8:	6021      	strge	r1, [r4, #0]
 8008dda:	b90e      	cbnz	r6, 8008de0 <_printf_i+0x118>
 8008ddc:	2d00      	cmp	r5, #0
 8008dde:	d04d      	beq.n	8008e7c <_printf_i+0x1b4>
 8008de0:	4615      	mov	r5, r2
 8008de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008de6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dea:	5dc7      	ldrb	r7, [r0, r7]
 8008dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008df0:	4637      	mov	r7, r6
 8008df2:	42bb      	cmp	r3, r7
 8008df4:	460e      	mov	r6, r1
 8008df6:	d9f4      	bls.n	8008de2 <_printf_i+0x11a>
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d10b      	bne.n	8008e14 <_printf_i+0x14c>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	07de      	lsls	r6, r3, #31
 8008e00:	d508      	bpl.n	8008e14 <_printf_i+0x14c>
 8008e02:	6923      	ldr	r3, [r4, #16]
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	4299      	cmp	r1, r3
 8008e08:	bfde      	ittt	le
 8008e0a:	2330      	movle	r3, #48	; 0x30
 8008e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e14:	1b52      	subs	r2, r2, r5
 8008e16:	6122      	str	r2, [r4, #16]
 8008e18:	f8cd a000 	str.w	sl, [sp]
 8008e1c:	464b      	mov	r3, r9
 8008e1e:	aa03      	add	r2, sp, #12
 8008e20:	4621      	mov	r1, r4
 8008e22:	4640      	mov	r0, r8
 8008e24:	f7ff fee2 	bl	8008bec <_printf_common>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d14c      	bne.n	8008ec6 <_printf_i+0x1fe>
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	b004      	add	sp, #16
 8008e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e36:	4835      	ldr	r0, [pc, #212]	; (8008f0c <_printf_i+0x244>)
 8008e38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e3c:	6829      	ldr	r1, [r5, #0]
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e44:	6029      	str	r1, [r5, #0]
 8008e46:	061d      	lsls	r5, r3, #24
 8008e48:	d514      	bpl.n	8008e74 <_printf_i+0x1ac>
 8008e4a:	07df      	lsls	r7, r3, #31
 8008e4c:	bf44      	itt	mi
 8008e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e52:	6023      	strmi	r3, [r4, #0]
 8008e54:	b91e      	cbnz	r6, 8008e5e <_printf_i+0x196>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	f023 0320 	bic.w	r3, r3, #32
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	2310      	movs	r3, #16
 8008e60:	e7b0      	b.n	8008dc4 <_printf_i+0xfc>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	f043 0320 	orr.w	r3, r3, #32
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	2378      	movs	r3, #120	; 0x78
 8008e6c:	4828      	ldr	r0, [pc, #160]	; (8008f10 <_printf_i+0x248>)
 8008e6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e72:	e7e3      	b.n	8008e3c <_printf_i+0x174>
 8008e74:	0659      	lsls	r1, r3, #25
 8008e76:	bf48      	it	mi
 8008e78:	b2b6      	uxthmi	r6, r6
 8008e7a:	e7e6      	b.n	8008e4a <_printf_i+0x182>
 8008e7c:	4615      	mov	r5, r2
 8008e7e:	e7bb      	b.n	8008df8 <_printf_i+0x130>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	6826      	ldr	r6, [r4, #0]
 8008e84:	6961      	ldr	r1, [r4, #20]
 8008e86:	1d18      	adds	r0, r3, #4
 8008e88:	6028      	str	r0, [r5, #0]
 8008e8a:	0635      	lsls	r5, r6, #24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	d501      	bpl.n	8008e94 <_printf_i+0x1cc>
 8008e90:	6019      	str	r1, [r3, #0]
 8008e92:	e002      	b.n	8008e9a <_printf_i+0x1d2>
 8008e94:	0670      	lsls	r0, r6, #25
 8008e96:	d5fb      	bpl.n	8008e90 <_printf_i+0x1c8>
 8008e98:	8019      	strh	r1, [r3, #0]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	4615      	mov	r5, r2
 8008ea0:	e7ba      	b.n	8008e18 <_printf_i+0x150>
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	1d1a      	adds	r2, r3, #4
 8008ea6:	602a      	str	r2, [r5, #0]
 8008ea8:	681d      	ldr	r5, [r3, #0]
 8008eaa:	6862      	ldr	r2, [r4, #4]
 8008eac:	2100      	movs	r1, #0
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f7f7 f9a6 	bl	8000200 <memchr>
 8008eb4:	b108      	cbz	r0, 8008eba <_printf_i+0x1f2>
 8008eb6:	1b40      	subs	r0, r0, r5
 8008eb8:	6060      	str	r0, [r4, #4]
 8008eba:	6863      	ldr	r3, [r4, #4]
 8008ebc:	6123      	str	r3, [r4, #16]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec4:	e7a8      	b.n	8008e18 <_printf_i+0x150>
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	462a      	mov	r2, r5
 8008eca:	4649      	mov	r1, r9
 8008ecc:	4640      	mov	r0, r8
 8008ece:	47d0      	blx	sl
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d0ab      	beq.n	8008e2c <_printf_i+0x164>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	079b      	lsls	r3, r3, #30
 8008ed8:	d413      	bmi.n	8008f02 <_printf_i+0x23a>
 8008eda:	68e0      	ldr	r0, [r4, #12]
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	4298      	cmp	r0, r3
 8008ee0:	bfb8      	it	lt
 8008ee2:	4618      	movlt	r0, r3
 8008ee4:	e7a4      	b.n	8008e30 <_printf_i+0x168>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4649      	mov	r1, r9
 8008eec:	4640      	mov	r0, r8
 8008eee:	47d0      	blx	sl
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d09b      	beq.n	8008e2c <_printf_i+0x164>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	9903      	ldr	r1, [sp, #12]
 8008efa:	1a5b      	subs	r3, r3, r1
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dcf2      	bgt.n	8008ee6 <_printf_i+0x21e>
 8008f00:	e7eb      	b.n	8008eda <_printf_i+0x212>
 8008f02:	2500      	movs	r5, #0
 8008f04:	f104 0619 	add.w	r6, r4, #25
 8008f08:	e7f5      	b.n	8008ef6 <_printf_i+0x22e>
 8008f0a:	bf00      	nop
 8008f0c:	0800da88 	.word	0x0800da88
 8008f10:	0800da99 	.word	0x0800da99

08008f14 <_scanf_float>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	b087      	sub	sp, #28
 8008f1a:	4617      	mov	r7, r2
 8008f1c:	9303      	str	r3, [sp, #12]
 8008f1e:	688b      	ldr	r3, [r1, #8]
 8008f20:	1e5a      	subs	r2, r3, #1
 8008f22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f26:	bf83      	ittte	hi
 8008f28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f2c:	195b      	addhi	r3, r3, r5
 8008f2e:	9302      	strhi	r3, [sp, #8]
 8008f30:	2300      	movls	r3, #0
 8008f32:	bf86      	itte	hi
 8008f34:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f38:	608b      	strhi	r3, [r1, #8]
 8008f3a:	9302      	strls	r3, [sp, #8]
 8008f3c:	680b      	ldr	r3, [r1, #0]
 8008f3e:	468b      	mov	fp, r1
 8008f40:	2500      	movs	r5, #0
 8008f42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f46:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f4e:	4680      	mov	r8, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	465e      	mov	r6, fp
 8008f54:	46aa      	mov	sl, r5
 8008f56:	46a9      	mov	r9, r5
 8008f58:	9501      	str	r5, [sp, #4]
 8008f5a:	68a2      	ldr	r2, [r4, #8]
 8008f5c:	b152      	cbz	r2, 8008f74 <_scanf_float+0x60>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b4e      	cmp	r3, #78	; 0x4e
 8008f64:	d864      	bhi.n	8009030 <_scanf_float+0x11c>
 8008f66:	2b40      	cmp	r3, #64	; 0x40
 8008f68:	d83c      	bhi.n	8008fe4 <_scanf_float+0xd0>
 8008f6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008f6e:	b2c8      	uxtb	r0, r1
 8008f70:	280e      	cmp	r0, #14
 8008f72:	d93a      	bls.n	8008fea <_scanf_float+0xd6>
 8008f74:	f1b9 0f00 	cmp.w	r9, #0
 8008f78:	d003      	beq.n	8008f82 <_scanf_float+0x6e>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f86:	f1ba 0f01 	cmp.w	sl, #1
 8008f8a:	f200 8113 	bhi.w	80091b4 <_scanf_float+0x2a0>
 8008f8e:	455e      	cmp	r6, fp
 8008f90:	f200 8105 	bhi.w	800919e <_scanf_float+0x28a>
 8008f94:	2501      	movs	r5, #1
 8008f96:	4628      	mov	r0, r5
 8008f98:	b007      	add	sp, #28
 8008f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fa2:	2a0d      	cmp	r2, #13
 8008fa4:	d8e6      	bhi.n	8008f74 <_scanf_float+0x60>
 8008fa6:	a101      	add	r1, pc, #4	; (adr r1, 8008fac <_scanf_float+0x98>)
 8008fa8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008fac:	080090eb 	.word	0x080090eb
 8008fb0:	08008f75 	.word	0x08008f75
 8008fb4:	08008f75 	.word	0x08008f75
 8008fb8:	08008f75 	.word	0x08008f75
 8008fbc:	0800914b 	.word	0x0800914b
 8008fc0:	08009123 	.word	0x08009123
 8008fc4:	08008f75 	.word	0x08008f75
 8008fc8:	08008f75 	.word	0x08008f75
 8008fcc:	080090f9 	.word	0x080090f9
 8008fd0:	08008f75 	.word	0x08008f75
 8008fd4:	08008f75 	.word	0x08008f75
 8008fd8:	08008f75 	.word	0x08008f75
 8008fdc:	08008f75 	.word	0x08008f75
 8008fe0:	080090b1 	.word	0x080090b1
 8008fe4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008fe8:	e7db      	b.n	8008fa2 <_scanf_float+0x8e>
 8008fea:	290e      	cmp	r1, #14
 8008fec:	d8c2      	bhi.n	8008f74 <_scanf_float+0x60>
 8008fee:	a001      	add	r0, pc, #4	; (adr r0, 8008ff4 <_scanf_float+0xe0>)
 8008ff0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ff4:	080090a3 	.word	0x080090a3
 8008ff8:	08008f75 	.word	0x08008f75
 8008ffc:	080090a3 	.word	0x080090a3
 8009000:	08009137 	.word	0x08009137
 8009004:	08008f75 	.word	0x08008f75
 8009008:	08009051 	.word	0x08009051
 800900c:	0800908d 	.word	0x0800908d
 8009010:	0800908d 	.word	0x0800908d
 8009014:	0800908d 	.word	0x0800908d
 8009018:	0800908d 	.word	0x0800908d
 800901c:	0800908d 	.word	0x0800908d
 8009020:	0800908d 	.word	0x0800908d
 8009024:	0800908d 	.word	0x0800908d
 8009028:	0800908d 	.word	0x0800908d
 800902c:	0800908d 	.word	0x0800908d
 8009030:	2b6e      	cmp	r3, #110	; 0x6e
 8009032:	d809      	bhi.n	8009048 <_scanf_float+0x134>
 8009034:	2b60      	cmp	r3, #96	; 0x60
 8009036:	d8b2      	bhi.n	8008f9e <_scanf_float+0x8a>
 8009038:	2b54      	cmp	r3, #84	; 0x54
 800903a:	d077      	beq.n	800912c <_scanf_float+0x218>
 800903c:	2b59      	cmp	r3, #89	; 0x59
 800903e:	d199      	bne.n	8008f74 <_scanf_float+0x60>
 8009040:	2d07      	cmp	r5, #7
 8009042:	d197      	bne.n	8008f74 <_scanf_float+0x60>
 8009044:	2508      	movs	r5, #8
 8009046:	e029      	b.n	800909c <_scanf_float+0x188>
 8009048:	2b74      	cmp	r3, #116	; 0x74
 800904a:	d06f      	beq.n	800912c <_scanf_float+0x218>
 800904c:	2b79      	cmp	r3, #121	; 0x79
 800904e:	e7f6      	b.n	800903e <_scanf_float+0x12a>
 8009050:	6821      	ldr	r1, [r4, #0]
 8009052:	05c8      	lsls	r0, r1, #23
 8009054:	d51a      	bpl.n	800908c <_scanf_float+0x178>
 8009056:	9b02      	ldr	r3, [sp, #8]
 8009058:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800905c:	6021      	str	r1, [r4, #0]
 800905e:	f109 0901 	add.w	r9, r9, #1
 8009062:	b11b      	cbz	r3, 800906c <_scanf_float+0x158>
 8009064:	3b01      	subs	r3, #1
 8009066:	3201      	adds	r2, #1
 8009068:	9302      	str	r3, [sp, #8]
 800906a:	60a2      	str	r2, [r4, #8]
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	3b01      	subs	r3, #1
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	3301      	adds	r3, #1
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3b01      	subs	r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	607b      	str	r3, [r7, #4]
 8009080:	f340 8084 	ble.w	800918c <_scanf_float+0x278>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	e766      	b.n	8008f5a <_scanf_float+0x46>
 800908c:	eb1a 0f05 	cmn.w	sl, r5
 8009090:	f47f af70 	bne.w	8008f74 <_scanf_float+0x60>
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	f806 3b01 	strb.w	r3, [r6], #1
 80090a0:	e7e4      	b.n	800906c <_scanf_float+0x158>
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	0610      	lsls	r0, r2, #24
 80090a6:	f57f af65 	bpl.w	8008f74 <_scanf_float+0x60>
 80090aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090ae:	e7f4      	b.n	800909a <_scanf_float+0x186>
 80090b0:	f1ba 0f00 	cmp.w	sl, #0
 80090b4:	d10e      	bne.n	80090d4 <_scanf_float+0x1c0>
 80090b6:	f1b9 0f00 	cmp.w	r9, #0
 80090ba:	d10e      	bne.n	80090da <_scanf_float+0x1c6>
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80090c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80090c6:	d108      	bne.n	80090da <_scanf_float+0x1c6>
 80090c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090cc:	6022      	str	r2, [r4, #0]
 80090ce:	f04f 0a01 	mov.w	sl, #1
 80090d2:	e7e3      	b.n	800909c <_scanf_float+0x188>
 80090d4:	f1ba 0f02 	cmp.w	sl, #2
 80090d8:	d055      	beq.n	8009186 <_scanf_float+0x272>
 80090da:	2d01      	cmp	r5, #1
 80090dc:	d002      	beq.n	80090e4 <_scanf_float+0x1d0>
 80090de:	2d04      	cmp	r5, #4
 80090e0:	f47f af48 	bne.w	8008f74 <_scanf_float+0x60>
 80090e4:	3501      	adds	r5, #1
 80090e6:	b2ed      	uxtb	r5, r5
 80090e8:	e7d8      	b.n	800909c <_scanf_float+0x188>
 80090ea:	f1ba 0f01 	cmp.w	sl, #1
 80090ee:	f47f af41 	bne.w	8008f74 <_scanf_float+0x60>
 80090f2:	f04f 0a02 	mov.w	sl, #2
 80090f6:	e7d1      	b.n	800909c <_scanf_float+0x188>
 80090f8:	b97d      	cbnz	r5, 800911a <_scanf_float+0x206>
 80090fa:	f1b9 0f00 	cmp.w	r9, #0
 80090fe:	f47f af3c 	bne.w	8008f7a <_scanf_float+0x66>
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009108:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800910c:	f47f af39 	bne.w	8008f82 <_scanf_float+0x6e>
 8009110:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	2501      	movs	r5, #1
 8009118:	e7c0      	b.n	800909c <_scanf_float+0x188>
 800911a:	2d03      	cmp	r5, #3
 800911c:	d0e2      	beq.n	80090e4 <_scanf_float+0x1d0>
 800911e:	2d05      	cmp	r5, #5
 8009120:	e7de      	b.n	80090e0 <_scanf_float+0x1cc>
 8009122:	2d02      	cmp	r5, #2
 8009124:	f47f af26 	bne.w	8008f74 <_scanf_float+0x60>
 8009128:	2503      	movs	r5, #3
 800912a:	e7b7      	b.n	800909c <_scanf_float+0x188>
 800912c:	2d06      	cmp	r5, #6
 800912e:	f47f af21 	bne.w	8008f74 <_scanf_float+0x60>
 8009132:	2507      	movs	r5, #7
 8009134:	e7b2      	b.n	800909c <_scanf_float+0x188>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	0591      	lsls	r1, r2, #22
 800913a:	f57f af1b 	bpl.w	8008f74 <_scanf_float+0x60>
 800913e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	f8cd 9004 	str.w	r9, [sp, #4]
 8009148:	e7a8      	b.n	800909c <_scanf_float+0x188>
 800914a:	6822      	ldr	r2, [r4, #0]
 800914c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009150:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009154:	d006      	beq.n	8009164 <_scanf_float+0x250>
 8009156:	0550      	lsls	r0, r2, #21
 8009158:	f57f af0c 	bpl.w	8008f74 <_scanf_float+0x60>
 800915c:	f1b9 0f00 	cmp.w	r9, #0
 8009160:	f43f af0f 	beq.w	8008f82 <_scanf_float+0x6e>
 8009164:	0591      	lsls	r1, r2, #22
 8009166:	bf58      	it	pl
 8009168:	9901      	ldrpl	r1, [sp, #4]
 800916a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800916e:	bf58      	it	pl
 8009170:	eba9 0101 	subpl.w	r1, r9, r1
 8009174:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009178:	bf58      	it	pl
 800917a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800917e:	6022      	str	r2, [r4, #0]
 8009180:	f04f 0900 	mov.w	r9, #0
 8009184:	e78a      	b.n	800909c <_scanf_float+0x188>
 8009186:	f04f 0a03 	mov.w	sl, #3
 800918a:	e787      	b.n	800909c <_scanf_float+0x188>
 800918c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009190:	4639      	mov	r1, r7
 8009192:	4640      	mov	r0, r8
 8009194:	4798      	blx	r3
 8009196:	2800      	cmp	r0, #0
 8009198:	f43f aedf 	beq.w	8008f5a <_scanf_float+0x46>
 800919c:	e6ea      	b.n	8008f74 <_scanf_float+0x60>
 800919e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091a6:	463a      	mov	r2, r7
 80091a8:	4640      	mov	r0, r8
 80091aa:	4798      	blx	r3
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	3b01      	subs	r3, #1
 80091b0:	6123      	str	r3, [r4, #16]
 80091b2:	e6ec      	b.n	8008f8e <_scanf_float+0x7a>
 80091b4:	1e6b      	subs	r3, r5, #1
 80091b6:	2b06      	cmp	r3, #6
 80091b8:	d825      	bhi.n	8009206 <_scanf_float+0x2f2>
 80091ba:	2d02      	cmp	r5, #2
 80091bc:	d836      	bhi.n	800922c <_scanf_float+0x318>
 80091be:	455e      	cmp	r6, fp
 80091c0:	f67f aee8 	bls.w	8008f94 <_scanf_float+0x80>
 80091c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091cc:	463a      	mov	r2, r7
 80091ce:	4640      	mov	r0, r8
 80091d0:	4798      	blx	r3
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	e7f1      	b.n	80091be <_scanf_float+0x2aa>
 80091da:	9802      	ldr	r0, [sp, #8]
 80091dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80091e4:	9002      	str	r0, [sp, #8]
 80091e6:	463a      	mov	r2, r7
 80091e8:	4640      	mov	r0, r8
 80091ea:	4798      	blx	r3
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	6123      	str	r3, [r4, #16]
 80091f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091f6:	fa5f fa8a 	uxtb.w	sl, sl
 80091fa:	f1ba 0f02 	cmp.w	sl, #2
 80091fe:	d1ec      	bne.n	80091da <_scanf_float+0x2c6>
 8009200:	3d03      	subs	r5, #3
 8009202:	b2ed      	uxtb	r5, r5
 8009204:	1b76      	subs	r6, r6, r5
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	05da      	lsls	r2, r3, #23
 800920a:	d52f      	bpl.n	800926c <_scanf_float+0x358>
 800920c:	055b      	lsls	r3, r3, #21
 800920e:	d510      	bpl.n	8009232 <_scanf_float+0x31e>
 8009210:	455e      	cmp	r6, fp
 8009212:	f67f aebf 	bls.w	8008f94 <_scanf_float+0x80>
 8009216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800921a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800921e:	463a      	mov	r2, r7
 8009220:	4640      	mov	r0, r8
 8009222:	4798      	blx	r3
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	3b01      	subs	r3, #1
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	e7f1      	b.n	8009210 <_scanf_float+0x2fc>
 800922c:	46aa      	mov	sl, r5
 800922e:	9602      	str	r6, [sp, #8]
 8009230:	e7df      	b.n	80091f2 <_scanf_float+0x2de>
 8009232:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	2965      	cmp	r1, #101	; 0x65
 800923a:	f103 33ff 	add.w	r3, r3, #4294967295
 800923e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009242:	6123      	str	r3, [r4, #16]
 8009244:	d00c      	beq.n	8009260 <_scanf_float+0x34c>
 8009246:	2945      	cmp	r1, #69	; 0x45
 8009248:	d00a      	beq.n	8009260 <_scanf_float+0x34c>
 800924a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800924e:	463a      	mov	r2, r7
 8009250:	4640      	mov	r0, r8
 8009252:	4798      	blx	r3
 8009254:	6923      	ldr	r3, [r4, #16]
 8009256:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800925a:	3b01      	subs	r3, #1
 800925c:	1eb5      	subs	r5, r6, #2
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009264:	463a      	mov	r2, r7
 8009266:	4640      	mov	r0, r8
 8009268:	4798      	blx	r3
 800926a:	462e      	mov	r6, r5
 800926c:	6825      	ldr	r5, [r4, #0]
 800926e:	f015 0510 	ands.w	r5, r5, #16
 8009272:	d159      	bne.n	8009328 <_scanf_float+0x414>
 8009274:	7035      	strb	r5, [r6, #0]
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800927c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009280:	d11b      	bne.n	80092ba <_scanf_float+0x3a6>
 8009282:	9b01      	ldr	r3, [sp, #4]
 8009284:	454b      	cmp	r3, r9
 8009286:	eba3 0209 	sub.w	r2, r3, r9
 800928a:	d123      	bne.n	80092d4 <_scanf_float+0x3c0>
 800928c:	2200      	movs	r2, #0
 800928e:	4659      	mov	r1, fp
 8009290:	4640      	mov	r0, r8
 8009292:	f000 ff97 	bl	800a1c4 <_strtod_r>
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	f012 0f02 	tst.w	r2, #2
 800929e:	ec57 6b10 	vmov	r6, r7, d0
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	d021      	beq.n	80092ea <_scanf_float+0x3d6>
 80092a6:	9903      	ldr	r1, [sp, #12]
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	600a      	str	r2, [r1, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	e9c3 6700 	strd	r6, r7, [r3]
 80092b2:	68e3      	ldr	r3, [r4, #12]
 80092b4:	3301      	adds	r3, #1
 80092b6:	60e3      	str	r3, [r4, #12]
 80092b8:	e66d      	b.n	8008f96 <_scanf_float+0x82>
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0e5      	beq.n	800928c <_scanf_float+0x378>
 80092c0:	9905      	ldr	r1, [sp, #20]
 80092c2:	230a      	movs	r3, #10
 80092c4:	462a      	mov	r2, r5
 80092c6:	3101      	adds	r1, #1
 80092c8:	4640      	mov	r0, r8
 80092ca:	f001 f803 	bl	800a2d4 <_strtol_r>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	9e05      	ldr	r6, [sp, #20]
 80092d2:	1ac2      	subs	r2, r0, r3
 80092d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80092d8:	429e      	cmp	r6, r3
 80092da:	bf28      	it	cs
 80092dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80092e0:	4912      	ldr	r1, [pc, #72]	; (800932c <_scanf_float+0x418>)
 80092e2:	4630      	mov	r0, r6
 80092e4:	f000 f8ba 	bl	800945c <siprintf>
 80092e8:	e7d0      	b.n	800928c <_scanf_float+0x378>
 80092ea:	9903      	ldr	r1, [sp, #12]
 80092ec:	f012 0f04 	tst.w	r2, #4
 80092f0:	f103 0204 	add.w	r2, r3, #4
 80092f4:	600a      	str	r2, [r1, #0]
 80092f6:	d1d9      	bne.n	80092ac <_scanf_float+0x398>
 80092f8:	f8d3 8000 	ldr.w	r8, [r3]
 80092fc:	ee10 2a10 	vmov	r2, s0
 8009300:	ee10 0a10 	vmov	r0, s0
 8009304:	463b      	mov	r3, r7
 8009306:	4639      	mov	r1, r7
 8009308:	f7f7 fc20 	bl	8000b4c <__aeabi_dcmpun>
 800930c:	b128      	cbz	r0, 800931a <_scanf_float+0x406>
 800930e:	4808      	ldr	r0, [pc, #32]	; (8009330 <_scanf_float+0x41c>)
 8009310:	f000 f89e 	bl	8009450 <nanf>
 8009314:	ed88 0a00 	vstr	s0, [r8]
 8009318:	e7cb      	b.n	80092b2 <_scanf_float+0x39e>
 800931a:	4630      	mov	r0, r6
 800931c:	4639      	mov	r1, r7
 800931e:	f7f7 fc73 	bl	8000c08 <__aeabi_d2f>
 8009322:	f8c8 0000 	str.w	r0, [r8]
 8009326:	e7c4      	b.n	80092b2 <_scanf_float+0x39e>
 8009328:	2500      	movs	r5, #0
 800932a:	e634      	b.n	8008f96 <_scanf_float+0x82>
 800932c:	0800daaa 	.word	0x0800daaa
 8009330:	0800df33 	.word	0x0800df33

08009334 <iprintf>:
 8009334:	b40f      	push	{r0, r1, r2, r3}
 8009336:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <iprintf+0x2c>)
 8009338:	b513      	push	{r0, r1, r4, lr}
 800933a:	681c      	ldr	r4, [r3, #0]
 800933c:	b124      	cbz	r4, 8009348 <iprintf+0x14>
 800933e:	69a3      	ldr	r3, [r4, #24]
 8009340:	b913      	cbnz	r3, 8009348 <iprintf+0x14>
 8009342:	4620      	mov	r0, r4
 8009344:	f002 f840 	bl	800b3c8 <__sinit>
 8009348:	ab05      	add	r3, sp, #20
 800934a:	9a04      	ldr	r2, [sp, #16]
 800934c:	68a1      	ldr	r1, [r4, #8]
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	4620      	mov	r0, r4
 8009352:	f003 fdef 	bl	800cf34 <_vfiprintf_r>
 8009356:	b002      	add	sp, #8
 8009358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800935c:	b004      	add	sp, #16
 800935e:	4770      	bx	lr
 8009360:	2000000c 	.word	0x2000000c

08009364 <_puts_r>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	460e      	mov	r6, r1
 8009368:	4605      	mov	r5, r0
 800936a:	b118      	cbz	r0, 8009374 <_puts_r+0x10>
 800936c:	6983      	ldr	r3, [r0, #24]
 800936e:	b90b      	cbnz	r3, 8009374 <_puts_r+0x10>
 8009370:	f002 f82a 	bl	800b3c8 <__sinit>
 8009374:	69ab      	ldr	r3, [r5, #24]
 8009376:	68ac      	ldr	r4, [r5, #8]
 8009378:	b913      	cbnz	r3, 8009380 <_puts_r+0x1c>
 800937a:	4628      	mov	r0, r5
 800937c:	f002 f824 	bl	800b3c8 <__sinit>
 8009380:	4b2c      	ldr	r3, [pc, #176]	; (8009434 <_puts_r+0xd0>)
 8009382:	429c      	cmp	r4, r3
 8009384:	d120      	bne.n	80093c8 <_puts_r+0x64>
 8009386:	686c      	ldr	r4, [r5, #4]
 8009388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800938a:	07db      	lsls	r3, r3, #31
 800938c:	d405      	bmi.n	800939a <_puts_r+0x36>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	0598      	lsls	r0, r3, #22
 8009392:	d402      	bmi.n	800939a <_puts_r+0x36>
 8009394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009396:	f002 fc28 	bl	800bbea <__retarget_lock_acquire_recursive>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	0719      	lsls	r1, r3, #28
 800939e:	d51d      	bpl.n	80093dc <_puts_r+0x78>
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	b1db      	cbz	r3, 80093dc <_puts_r+0x78>
 80093a4:	3e01      	subs	r6, #1
 80093a6:	68a3      	ldr	r3, [r4, #8]
 80093a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093ac:	3b01      	subs	r3, #1
 80093ae:	60a3      	str	r3, [r4, #8]
 80093b0:	bb39      	cbnz	r1, 8009402 <_puts_r+0x9e>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da38      	bge.n	8009428 <_puts_r+0xc4>
 80093b6:	4622      	mov	r2, r4
 80093b8:	210a      	movs	r1, #10
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 ff8c 	bl	800a2d8 <__swbuf_r>
 80093c0:	3001      	adds	r0, #1
 80093c2:	d011      	beq.n	80093e8 <_puts_r+0x84>
 80093c4:	250a      	movs	r5, #10
 80093c6:	e011      	b.n	80093ec <_puts_r+0x88>
 80093c8:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <_puts_r+0xd4>)
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d101      	bne.n	80093d2 <_puts_r+0x6e>
 80093ce:	68ac      	ldr	r4, [r5, #8]
 80093d0:	e7da      	b.n	8009388 <_puts_r+0x24>
 80093d2:	4b1a      	ldr	r3, [pc, #104]	; (800943c <_puts_r+0xd8>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	bf08      	it	eq
 80093d8:	68ec      	ldreq	r4, [r5, #12]
 80093da:	e7d5      	b.n	8009388 <_puts_r+0x24>
 80093dc:	4621      	mov	r1, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 ffde 	bl	800a3a0 <__swsetup_r>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0dd      	beq.n	80093a4 <_puts_r+0x40>
 80093e8:	f04f 35ff 	mov.w	r5, #4294967295
 80093ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093ee:	07da      	lsls	r2, r3, #31
 80093f0:	d405      	bmi.n	80093fe <_puts_r+0x9a>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	d402      	bmi.n	80093fe <_puts_r+0x9a>
 80093f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093fa:	f002 fbf7 	bl	800bbec <__retarget_lock_release_recursive>
 80093fe:	4628      	mov	r0, r5
 8009400:	bd70      	pop	{r4, r5, r6, pc}
 8009402:	2b00      	cmp	r3, #0
 8009404:	da04      	bge.n	8009410 <_puts_r+0xac>
 8009406:	69a2      	ldr	r2, [r4, #24]
 8009408:	429a      	cmp	r2, r3
 800940a:	dc06      	bgt.n	800941a <_puts_r+0xb6>
 800940c:	290a      	cmp	r1, #10
 800940e:	d004      	beq.n	800941a <_puts_r+0xb6>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	6022      	str	r2, [r4, #0]
 8009416:	7019      	strb	r1, [r3, #0]
 8009418:	e7c5      	b.n	80093a6 <_puts_r+0x42>
 800941a:	4622      	mov	r2, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f000 ff5b 	bl	800a2d8 <__swbuf_r>
 8009422:	3001      	adds	r0, #1
 8009424:	d1bf      	bne.n	80093a6 <_puts_r+0x42>
 8009426:	e7df      	b.n	80093e8 <_puts_r+0x84>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	250a      	movs	r5, #10
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	701d      	strb	r5, [r3, #0]
 8009432:	e7db      	b.n	80093ec <_puts_r+0x88>
 8009434:	0800dcb4 	.word	0x0800dcb4
 8009438:	0800dcd4 	.word	0x0800dcd4
 800943c:	0800dc94 	.word	0x0800dc94

08009440 <puts>:
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <puts+0xc>)
 8009442:	4601      	mov	r1, r0
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f7ff bf8d 	b.w	8009364 <_puts_r>
 800944a:	bf00      	nop
 800944c:	2000000c 	.word	0x2000000c

08009450 <nanf>:
 8009450:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009458 <nanf+0x8>
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	7fc00000 	.word	0x7fc00000

0800945c <siprintf>:
 800945c:	b40e      	push	{r1, r2, r3}
 800945e:	b500      	push	{lr}
 8009460:	b09c      	sub	sp, #112	; 0x70
 8009462:	ab1d      	add	r3, sp, #116	; 0x74
 8009464:	9002      	str	r0, [sp, #8]
 8009466:	9006      	str	r0, [sp, #24]
 8009468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800946c:	4809      	ldr	r0, [pc, #36]	; (8009494 <siprintf+0x38>)
 800946e:	9107      	str	r1, [sp, #28]
 8009470:	9104      	str	r1, [sp, #16]
 8009472:	4909      	ldr	r1, [pc, #36]	; (8009498 <siprintf+0x3c>)
 8009474:	f853 2b04 	ldr.w	r2, [r3], #4
 8009478:	9105      	str	r1, [sp, #20]
 800947a:	6800      	ldr	r0, [r0, #0]
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	a902      	add	r1, sp, #8
 8009480:	f003 fa5c 	bl	800c93c <_svfiprintf_r>
 8009484:	9b02      	ldr	r3, [sp, #8]
 8009486:	2200      	movs	r2, #0
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	b01c      	add	sp, #112	; 0x70
 800948c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009490:	b003      	add	sp, #12
 8009492:	4770      	bx	lr
 8009494:	2000000c 	.word	0x2000000c
 8009498:	ffff0208 	.word	0xffff0208

0800949c <siscanf>:
 800949c:	b40e      	push	{r1, r2, r3}
 800949e:	b510      	push	{r4, lr}
 80094a0:	b09f      	sub	sp, #124	; 0x7c
 80094a2:	ac21      	add	r4, sp, #132	; 0x84
 80094a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80094a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80094ac:	9201      	str	r2, [sp, #4]
 80094ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80094b2:	9004      	str	r0, [sp, #16]
 80094b4:	9008      	str	r0, [sp, #32]
 80094b6:	f7f6 fe95 	bl	80001e4 <strlen>
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <siscanf+0x50>)
 80094bc:	9005      	str	r0, [sp, #20]
 80094be:	9009      	str	r0, [sp, #36]	; 0x24
 80094c0:	930d      	str	r3, [sp, #52]	; 0x34
 80094c2:	480b      	ldr	r0, [pc, #44]	; (80094f0 <siscanf+0x54>)
 80094c4:	9a01      	ldr	r2, [sp, #4]
 80094c6:	6800      	ldr	r0, [r0, #0]
 80094c8:	9403      	str	r4, [sp, #12]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9311      	str	r3, [sp, #68]	; 0x44
 80094ce:	9316      	str	r3, [sp, #88]	; 0x58
 80094d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80094d8:	a904      	add	r1, sp, #16
 80094da:	4623      	mov	r3, r4
 80094dc:	f003 fb88 	bl	800cbf0 <__ssvfiscanf_r>
 80094e0:	b01f      	add	sp, #124	; 0x7c
 80094e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e6:	b003      	add	sp, #12
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	08009517 	.word	0x08009517
 80094f0:	2000000c 	.word	0x2000000c

080094f4 <__sread>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f003 ff9c 	bl	800d438 <_read_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	bfab      	itete	ge
 8009504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009506:	89a3      	ldrhlt	r3, [r4, #12]
 8009508:	181b      	addge	r3, r3, r0
 800950a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950e:	bfac      	ite	ge
 8009510:	6563      	strge	r3, [r4, #84]	; 0x54
 8009512:	81a3      	strhlt	r3, [r4, #12]
 8009514:	bd10      	pop	{r4, pc}

08009516 <__seofread>:
 8009516:	2000      	movs	r0, #0
 8009518:	4770      	bx	lr

0800951a <__swrite>:
 800951a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951e:	461f      	mov	r7, r3
 8009520:	898b      	ldrh	r3, [r1, #12]
 8009522:	05db      	lsls	r3, r3, #23
 8009524:	4605      	mov	r5, r0
 8009526:	460c      	mov	r4, r1
 8009528:	4616      	mov	r6, r2
 800952a:	d505      	bpl.n	8009538 <__swrite+0x1e>
 800952c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009530:	2302      	movs	r3, #2
 8009532:	2200      	movs	r2, #0
 8009534:	f002 fb5c 	bl	800bbf0 <_lseek_r>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009542:	81a3      	strh	r3, [r4, #12]
 8009544:	4632      	mov	r2, r6
 8009546:	463b      	mov	r3, r7
 8009548:	4628      	mov	r0, r5
 800954a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954e:	f000 bf15 	b.w	800a37c <_write_r>

08009552 <__sseek>:
 8009552:	b510      	push	{r4, lr}
 8009554:	460c      	mov	r4, r1
 8009556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955a:	f002 fb49 	bl	800bbf0 <_lseek_r>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	bf15      	itete	ne
 8009564:	6560      	strne	r0, [r4, #84]	; 0x54
 8009566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800956a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800956e:	81a3      	strheq	r3, [r4, #12]
 8009570:	bf18      	it	ne
 8009572:	81a3      	strhne	r3, [r4, #12]
 8009574:	bd10      	pop	{r4, pc}

08009576 <__sclose>:
 8009576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800957a:	f000 bf7f 	b.w	800a47c <_close_r>

0800957e <sulp>:
 800957e:	b570      	push	{r4, r5, r6, lr}
 8009580:	4604      	mov	r4, r0
 8009582:	460d      	mov	r5, r1
 8009584:	ec45 4b10 	vmov	d0, r4, r5
 8009588:	4616      	mov	r6, r2
 800958a:	f002 ff35 	bl	800c3f8 <__ulp>
 800958e:	ec51 0b10 	vmov	r0, r1, d0
 8009592:	b17e      	cbz	r6, 80095b4 <sulp+0x36>
 8009594:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009598:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd09      	ble.n	80095b4 <sulp+0x36>
 80095a0:	051b      	lsls	r3, r3, #20
 80095a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095a6:	2400      	movs	r4, #0
 80095a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095ac:	4622      	mov	r2, r4
 80095ae:	462b      	mov	r3, r5
 80095b0:	f7f7 f832 	bl	8000618 <__aeabi_dmul>
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095b8 <_strtod_l>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	ed2d 8b02 	vpush	{d8}
 80095c0:	b09d      	sub	sp, #116	; 0x74
 80095c2:	461f      	mov	r7, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	9318      	str	r3, [sp, #96]	; 0x60
 80095c8:	4ba2      	ldr	r3, [pc, #648]	; (8009854 <_strtod_l+0x29c>)
 80095ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	9305      	str	r3, [sp, #20]
 80095d0:	4604      	mov	r4, r0
 80095d2:	4618      	mov	r0, r3
 80095d4:	4688      	mov	r8, r1
 80095d6:	f7f6 fe05 	bl	80001e4 <strlen>
 80095da:	f04f 0a00 	mov.w	sl, #0
 80095de:	4605      	mov	r5, r0
 80095e0:	f04f 0b00 	mov.w	fp, #0
 80095e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80095e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	2a2b      	cmp	r2, #43	; 0x2b
 80095ee:	d04e      	beq.n	800968e <_strtod_l+0xd6>
 80095f0:	d83b      	bhi.n	800966a <_strtod_l+0xb2>
 80095f2:	2a0d      	cmp	r2, #13
 80095f4:	d834      	bhi.n	8009660 <_strtod_l+0xa8>
 80095f6:	2a08      	cmp	r2, #8
 80095f8:	d834      	bhi.n	8009664 <_strtod_l+0xac>
 80095fa:	2a00      	cmp	r2, #0
 80095fc:	d03e      	beq.n	800967c <_strtod_l+0xc4>
 80095fe:	2300      	movs	r3, #0
 8009600:	930a      	str	r3, [sp, #40]	; 0x28
 8009602:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009604:	7833      	ldrb	r3, [r6, #0]
 8009606:	2b30      	cmp	r3, #48	; 0x30
 8009608:	f040 80b0 	bne.w	800976c <_strtod_l+0x1b4>
 800960c:	7873      	ldrb	r3, [r6, #1]
 800960e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009612:	2b58      	cmp	r3, #88	; 0x58
 8009614:	d168      	bne.n	80096e8 <_strtod_l+0x130>
 8009616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	ab18      	add	r3, sp, #96	; 0x60
 800961c:	9702      	str	r7, [sp, #8]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4a8d      	ldr	r2, [pc, #564]	; (8009858 <_strtod_l+0x2a0>)
 8009622:	ab19      	add	r3, sp, #100	; 0x64
 8009624:	a917      	add	r1, sp, #92	; 0x5c
 8009626:	4620      	mov	r0, r4
 8009628:	f001 ffd2 	bl	800b5d0 <__gethex>
 800962c:	f010 0707 	ands.w	r7, r0, #7
 8009630:	4605      	mov	r5, r0
 8009632:	d005      	beq.n	8009640 <_strtod_l+0x88>
 8009634:	2f06      	cmp	r7, #6
 8009636:	d12c      	bne.n	8009692 <_strtod_l+0xda>
 8009638:	3601      	adds	r6, #1
 800963a:	2300      	movs	r3, #0
 800963c:	9617      	str	r6, [sp, #92]	; 0x5c
 800963e:	930a      	str	r3, [sp, #40]	; 0x28
 8009640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 8590 	bne.w	800a168 <_strtod_l+0xbb0>
 8009648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964a:	b1eb      	cbz	r3, 8009688 <_strtod_l+0xd0>
 800964c:	4652      	mov	r2, sl
 800964e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009652:	ec43 2b10 	vmov	d0, r2, r3
 8009656:	b01d      	add	sp, #116	; 0x74
 8009658:	ecbd 8b02 	vpop	{d8}
 800965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009660:	2a20      	cmp	r2, #32
 8009662:	d1cc      	bne.n	80095fe <_strtod_l+0x46>
 8009664:	3301      	adds	r3, #1
 8009666:	9317      	str	r3, [sp, #92]	; 0x5c
 8009668:	e7be      	b.n	80095e8 <_strtod_l+0x30>
 800966a:	2a2d      	cmp	r2, #45	; 0x2d
 800966c:	d1c7      	bne.n	80095fe <_strtod_l+0x46>
 800966e:	2201      	movs	r2, #1
 8009670:	920a      	str	r2, [sp, #40]	; 0x28
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	9217      	str	r2, [sp, #92]	; 0x5c
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1c2      	bne.n	8009602 <_strtod_l+0x4a>
 800967c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800967e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009682:	2b00      	cmp	r3, #0
 8009684:	f040 856e 	bne.w	800a164 <_strtod_l+0xbac>
 8009688:	4652      	mov	r2, sl
 800968a:	465b      	mov	r3, fp
 800968c:	e7e1      	b.n	8009652 <_strtod_l+0x9a>
 800968e:	2200      	movs	r2, #0
 8009690:	e7ee      	b.n	8009670 <_strtod_l+0xb8>
 8009692:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009694:	b13a      	cbz	r2, 80096a6 <_strtod_l+0xee>
 8009696:	2135      	movs	r1, #53	; 0x35
 8009698:	a81a      	add	r0, sp, #104	; 0x68
 800969a:	f002 ffb8 	bl	800c60e <__copybits>
 800969e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096a0:	4620      	mov	r0, r4
 80096a2:	f002 fb77 	bl	800bd94 <_Bfree>
 80096a6:	3f01      	subs	r7, #1
 80096a8:	2f04      	cmp	r7, #4
 80096aa:	d806      	bhi.n	80096ba <_strtod_l+0x102>
 80096ac:	e8df f007 	tbb	[pc, r7]
 80096b0:	1714030a 	.word	0x1714030a
 80096b4:	0a          	.byte	0x0a
 80096b5:	00          	.byte	0x00
 80096b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80096ba:	0728      	lsls	r0, r5, #28
 80096bc:	d5c0      	bpl.n	8009640 <_strtod_l+0x88>
 80096be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80096c2:	e7bd      	b.n	8009640 <_strtod_l+0x88>
 80096c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80096c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80096ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096d6:	e7f0      	b.n	80096ba <_strtod_l+0x102>
 80096d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800985c <_strtod_l+0x2a4>
 80096dc:	e7ed      	b.n	80096ba <_strtod_l+0x102>
 80096de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80096e2:	f04f 3aff 	mov.w	sl, #4294967295
 80096e6:	e7e8      	b.n	80096ba <_strtod_l+0x102>
 80096e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	2b30      	cmp	r3, #48	; 0x30
 80096f2:	d0f9      	beq.n	80096e8 <_strtod_l+0x130>
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0a3      	beq.n	8009640 <_strtod_l+0x88>
 80096f8:	2301      	movs	r3, #1
 80096fa:	f04f 0900 	mov.w	r9, #0
 80096fe:	9304      	str	r3, [sp, #16]
 8009700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009702:	9308      	str	r3, [sp, #32]
 8009704:	f8cd 901c 	str.w	r9, [sp, #28]
 8009708:	464f      	mov	r7, r9
 800970a:	220a      	movs	r2, #10
 800970c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800970e:	7806      	ldrb	r6, [r0, #0]
 8009710:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009714:	b2d9      	uxtb	r1, r3
 8009716:	2909      	cmp	r1, #9
 8009718:	d92a      	bls.n	8009770 <_strtod_l+0x1b8>
 800971a:	9905      	ldr	r1, [sp, #20]
 800971c:	462a      	mov	r2, r5
 800971e:	f003 feef 	bl	800d500 <strncmp>
 8009722:	b398      	cbz	r0, 800978c <_strtod_l+0x1d4>
 8009724:	2000      	movs	r0, #0
 8009726:	4632      	mov	r2, r6
 8009728:	463d      	mov	r5, r7
 800972a:	9005      	str	r0, [sp, #20]
 800972c:	4603      	mov	r3, r0
 800972e:	2a65      	cmp	r2, #101	; 0x65
 8009730:	d001      	beq.n	8009736 <_strtod_l+0x17e>
 8009732:	2a45      	cmp	r2, #69	; 0x45
 8009734:	d118      	bne.n	8009768 <_strtod_l+0x1b0>
 8009736:	b91d      	cbnz	r5, 8009740 <_strtod_l+0x188>
 8009738:	9a04      	ldr	r2, [sp, #16]
 800973a:	4302      	orrs	r2, r0
 800973c:	d09e      	beq.n	800967c <_strtod_l+0xc4>
 800973e:	2500      	movs	r5, #0
 8009740:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009744:	f108 0201 	add.w	r2, r8, #1
 8009748:	9217      	str	r2, [sp, #92]	; 0x5c
 800974a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800974e:	2a2b      	cmp	r2, #43	; 0x2b
 8009750:	d075      	beq.n	800983e <_strtod_l+0x286>
 8009752:	2a2d      	cmp	r2, #45	; 0x2d
 8009754:	d07b      	beq.n	800984e <_strtod_l+0x296>
 8009756:	f04f 0c00 	mov.w	ip, #0
 800975a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800975e:	2909      	cmp	r1, #9
 8009760:	f240 8082 	bls.w	8009868 <_strtod_l+0x2b0>
 8009764:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009768:	2600      	movs	r6, #0
 800976a:	e09d      	b.n	80098a8 <_strtod_l+0x2f0>
 800976c:	2300      	movs	r3, #0
 800976e:	e7c4      	b.n	80096fa <_strtod_l+0x142>
 8009770:	2f08      	cmp	r7, #8
 8009772:	bfd8      	it	le
 8009774:	9907      	ldrle	r1, [sp, #28]
 8009776:	f100 0001 	add.w	r0, r0, #1
 800977a:	bfda      	itte	le
 800977c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009780:	9307      	strle	r3, [sp, #28]
 8009782:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009786:	3701      	adds	r7, #1
 8009788:	9017      	str	r0, [sp, #92]	; 0x5c
 800978a:	e7bf      	b.n	800970c <_strtod_l+0x154>
 800978c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800978e:	195a      	adds	r2, r3, r5
 8009790:	9217      	str	r2, [sp, #92]	; 0x5c
 8009792:	5d5a      	ldrb	r2, [r3, r5]
 8009794:	2f00      	cmp	r7, #0
 8009796:	d037      	beq.n	8009808 <_strtod_l+0x250>
 8009798:	9005      	str	r0, [sp, #20]
 800979a:	463d      	mov	r5, r7
 800979c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80097a0:	2b09      	cmp	r3, #9
 80097a2:	d912      	bls.n	80097ca <_strtod_l+0x212>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e7c2      	b.n	800972e <_strtod_l+0x176>
 80097a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80097ae:	785a      	ldrb	r2, [r3, #1]
 80097b0:	3001      	adds	r0, #1
 80097b2:	2a30      	cmp	r2, #48	; 0x30
 80097b4:	d0f8      	beq.n	80097a8 <_strtod_l+0x1f0>
 80097b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097ba:	2b08      	cmp	r3, #8
 80097bc:	f200 84d9 	bhi.w	800a172 <_strtod_l+0xbba>
 80097c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097c2:	9005      	str	r0, [sp, #20]
 80097c4:	2000      	movs	r0, #0
 80097c6:	9308      	str	r3, [sp, #32]
 80097c8:	4605      	mov	r5, r0
 80097ca:	3a30      	subs	r2, #48	; 0x30
 80097cc:	f100 0301 	add.w	r3, r0, #1
 80097d0:	d014      	beq.n	80097fc <_strtod_l+0x244>
 80097d2:	9905      	ldr	r1, [sp, #20]
 80097d4:	4419      	add	r1, r3
 80097d6:	9105      	str	r1, [sp, #20]
 80097d8:	462b      	mov	r3, r5
 80097da:	eb00 0e05 	add.w	lr, r0, r5
 80097de:	210a      	movs	r1, #10
 80097e0:	4573      	cmp	r3, lr
 80097e2:	d113      	bne.n	800980c <_strtod_l+0x254>
 80097e4:	182b      	adds	r3, r5, r0
 80097e6:	2b08      	cmp	r3, #8
 80097e8:	f105 0501 	add.w	r5, r5, #1
 80097ec:	4405      	add	r5, r0
 80097ee:	dc1c      	bgt.n	800982a <_strtod_l+0x272>
 80097f0:	9907      	ldr	r1, [sp, #28]
 80097f2:	230a      	movs	r3, #10
 80097f4:	fb03 2301 	mla	r3, r3, r1, r2
 80097f8:	9307      	str	r3, [sp, #28]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097fe:	1c51      	adds	r1, r2, #1
 8009800:	9117      	str	r1, [sp, #92]	; 0x5c
 8009802:	7852      	ldrb	r2, [r2, #1]
 8009804:	4618      	mov	r0, r3
 8009806:	e7c9      	b.n	800979c <_strtod_l+0x1e4>
 8009808:	4638      	mov	r0, r7
 800980a:	e7d2      	b.n	80097b2 <_strtod_l+0x1fa>
 800980c:	2b08      	cmp	r3, #8
 800980e:	dc04      	bgt.n	800981a <_strtod_l+0x262>
 8009810:	9e07      	ldr	r6, [sp, #28]
 8009812:	434e      	muls	r6, r1
 8009814:	9607      	str	r6, [sp, #28]
 8009816:	3301      	adds	r3, #1
 8009818:	e7e2      	b.n	80097e0 <_strtod_l+0x228>
 800981a:	f103 0c01 	add.w	ip, r3, #1
 800981e:	f1bc 0f10 	cmp.w	ip, #16
 8009822:	bfd8      	it	le
 8009824:	fb01 f909 	mulle.w	r9, r1, r9
 8009828:	e7f5      	b.n	8009816 <_strtod_l+0x25e>
 800982a:	2d10      	cmp	r5, #16
 800982c:	bfdc      	itt	le
 800982e:	230a      	movle	r3, #10
 8009830:	fb03 2909 	mlale	r9, r3, r9, r2
 8009834:	e7e1      	b.n	80097fa <_strtod_l+0x242>
 8009836:	2300      	movs	r3, #0
 8009838:	9305      	str	r3, [sp, #20]
 800983a:	2301      	movs	r3, #1
 800983c:	e77c      	b.n	8009738 <_strtod_l+0x180>
 800983e:	f04f 0c00 	mov.w	ip, #0
 8009842:	f108 0202 	add.w	r2, r8, #2
 8009846:	9217      	str	r2, [sp, #92]	; 0x5c
 8009848:	f898 2002 	ldrb.w	r2, [r8, #2]
 800984c:	e785      	b.n	800975a <_strtod_l+0x1a2>
 800984e:	f04f 0c01 	mov.w	ip, #1
 8009852:	e7f6      	b.n	8009842 <_strtod_l+0x28a>
 8009854:	0800dd5c 	.word	0x0800dd5c
 8009858:	0800dab0 	.word	0x0800dab0
 800985c:	7ff00000 	.word	0x7ff00000
 8009860:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009862:	1c51      	adds	r1, r2, #1
 8009864:	9117      	str	r1, [sp, #92]	; 0x5c
 8009866:	7852      	ldrb	r2, [r2, #1]
 8009868:	2a30      	cmp	r2, #48	; 0x30
 800986a:	d0f9      	beq.n	8009860 <_strtod_l+0x2a8>
 800986c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009870:	2908      	cmp	r1, #8
 8009872:	f63f af79 	bhi.w	8009768 <_strtod_l+0x1b0>
 8009876:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800987a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800987c:	9206      	str	r2, [sp, #24]
 800987e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009880:	1c51      	adds	r1, r2, #1
 8009882:	9117      	str	r1, [sp, #92]	; 0x5c
 8009884:	7852      	ldrb	r2, [r2, #1]
 8009886:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800988a:	2e09      	cmp	r6, #9
 800988c:	d937      	bls.n	80098fe <_strtod_l+0x346>
 800988e:	9e06      	ldr	r6, [sp, #24]
 8009890:	1b89      	subs	r1, r1, r6
 8009892:	2908      	cmp	r1, #8
 8009894:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009898:	dc02      	bgt.n	80098a0 <_strtod_l+0x2e8>
 800989a:	4576      	cmp	r6, lr
 800989c:	bfa8      	it	ge
 800989e:	4676      	movge	r6, lr
 80098a0:	f1bc 0f00 	cmp.w	ip, #0
 80098a4:	d000      	beq.n	80098a8 <_strtod_l+0x2f0>
 80098a6:	4276      	negs	r6, r6
 80098a8:	2d00      	cmp	r5, #0
 80098aa:	d14d      	bne.n	8009948 <_strtod_l+0x390>
 80098ac:	9904      	ldr	r1, [sp, #16]
 80098ae:	4301      	orrs	r1, r0
 80098b0:	f47f aec6 	bne.w	8009640 <_strtod_l+0x88>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f47f aee1 	bne.w	800967c <_strtod_l+0xc4>
 80098ba:	2a69      	cmp	r2, #105	; 0x69
 80098bc:	d027      	beq.n	800990e <_strtod_l+0x356>
 80098be:	dc24      	bgt.n	800990a <_strtod_l+0x352>
 80098c0:	2a49      	cmp	r2, #73	; 0x49
 80098c2:	d024      	beq.n	800990e <_strtod_l+0x356>
 80098c4:	2a4e      	cmp	r2, #78	; 0x4e
 80098c6:	f47f aed9 	bne.w	800967c <_strtod_l+0xc4>
 80098ca:	499f      	ldr	r1, [pc, #636]	; (8009b48 <_strtod_l+0x590>)
 80098cc:	a817      	add	r0, sp, #92	; 0x5c
 80098ce:	f002 f8d7 	bl	800ba80 <__match>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	f43f aed2 	beq.w	800967c <_strtod_l+0xc4>
 80098d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b28      	cmp	r3, #40	; 0x28
 80098de:	d12d      	bne.n	800993c <_strtod_l+0x384>
 80098e0:	499a      	ldr	r1, [pc, #616]	; (8009b4c <_strtod_l+0x594>)
 80098e2:	aa1a      	add	r2, sp, #104	; 0x68
 80098e4:	a817      	add	r0, sp, #92	; 0x5c
 80098e6:	f002 f8df 	bl	800baa8 <__hexnan>
 80098ea:	2805      	cmp	r0, #5
 80098ec:	d126      	bne.n	800993c <_strtod_l+0x384>
 80098ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80098f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80098f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80098fc:	e6a0      	b.n	8009640 <_strtod_l+0x88>
 80098fe:	210a      	movs	r1, #10
 8009900:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009904:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009908:	e7b9      	b.n	800987e <_strtod_l+0x2c6>
 800990a:	2a6e      	cmp	r2, #110	; 0x6e
 800990c:	e7db      	b.n	80098c6 <_strtod_l+0x30e>
 800990e:	4990      	ldr	r1, [pc, #576]	; (8009b50 <_strtod_l+0x598>)
 8009910:	a817      	add	r0, sp, #92	; 0x5c
 8009912:	f002 f8b5 	bl	800ba80 <__match>
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f aeb0 	beq.w	800967c <_strtod_l+0xc4>
 800991c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800991e:	498d      	ldr	r1, [pc, #564]	; (8009b54 <_strtod_l+0x59c>)
 8009920:	3b01      	subs	r3, #1
 8009922:	a817      	add	r0, sp, #92	; 0x5c
 8009924:	9317      	str	r3, [sp, #92]	; 0x5c
 8009926:	f002 f8ab 	bl	800ba80 <__match>
 800992a:	b910      	cbnz	r0, 8009932 <_strtod_l+0x37a>
 800992c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800992e:	3301      	adds	r3, #1
 8009930:	9317      	str	r3, [sp, #92]	; 0x5c
 8009932:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009b64 <_strtod_l+0x5ac>
 8009936:	f04f 0a00 	mov.w	sl, #0
 800993a:	e681      	b.n	8009640 <_strtod_l+0x88>
 800993c:	4886      	ldr	r0, [pc, #536]	; (8009b58 <_strtod_l+0x5a0>)
 800993e:	f003 fd8f 	bl	800d460 <nan>
 8009942:	ec5b ab10 	vmov	sl, fp, d0
 8009946:	e67b      	b.n	8009640 <_strtod_l+0x88>
 8009948:	9b05      	ldr	r3, [sp, #20]
 800994a:	9807      	ldr	r0, [sp, #28]
 800994c:	1af3      	subs	r3, r6, r3
 800994e:	2f00      	cmp	r7, #0
 8009950:	bf08      	it	eq
 8009952:	462f      	moveq	r7, r5
 8009954:	2d10      	cmp	r5, #16
 8009956:	9306      	str	r3, [sp, #24]
 8009958:	46a8      	mov	r8, r5
 800995a:	bfa8      	it	ge
 800995c:	f04f 0810 	movge.w	r8, #16
 8009960:	f7f6 fde0 	bl	8000524 <__aeabi_ui2d>
 8009964:	2d09      	cmp	r5, #9
 8009966:	4682      	mov	sl, r0
 8009968:	468b      	mov	fp, r1
 800996a:	dd13      	ble.n	8009994 <_strtod_l+0x3dc>
 800996c:	4b7b      	ldr	r3, [pc, #492]	; (8009b5c <_strtod_l+0x5a4>)
 800996e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009972:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009976:	f7f6 fe4f 	bl	8000618 <__aeabi_dmul>
 800997a:	4682      	mov	sl, r0
 800997c:	4648      	mov	r0, r9
 800997e:	468b      	mov	fp, r1
 8009980:	f7f6 fdd0 	bl	8000524 <__aeabi_ui2d>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4650      	mov	r0, sl
 800998a:	4659      	mov	r1, fp
 800998c:	f7f6 fc8e 	bl	80002ac <__adddf3>
 8009990:	4682      	mov	sl, r0
 8009992:	468b      	mov	fp, r1
 8009994:	2d0f      	cmp	r5, #15
 8009996:	dc38      	bgt.n	8009a0a <_strtod_l+0x452>
 8009998:	9b06      	ldr	r3, [sp, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f43f ae50 	beq.w	8009640 <_strtod_l+0x88>
 80099a0:	dd24      	ble.n	80099ec <_strtod_l+0x434>
 80099a2:	2b16      	cmp	r3, #22
 80099a4:	dc0b      	bgt.n	80099be <_strtod_l+0x406>
 80099a6:	496d      	ldr	r1, [pc, #436]	; (8009b5c <_strtod_l+0x5a4>)
 80099a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b0:	4652      	mov	r2, sl
 80099b2:	465b      	mov	r3, fp
 80099b4:	f7f6 fe30 	bl	8000618 <__aeabi_dmul>
 80099b8:	4682      	mov	sl, r0
 80099ba:	468b      	mov	fp, r1
 80099bc:	e640      	b.n	8009640 <_strtod_l+0x88>
 80099be:	9a06      	ldr	r2, [sp, #24]
 80099c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80099c4:	4293      	cmp	r3, r2
 80099c6:	db20      	blt.n	8009a0a <_strtod_l+0x452>
 80099c8:	4c64      	ldr	r4, [pc, #400]	; (8009b5c <_strtod_l+0x5a4>)
 80099ca:	f1c5 050f 	rsb	r5, r5, #15
 80099ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099d2:	4652      	mov	r2, sl
 80099d4:	465b      	mov	r3, fp
 80099d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099da:	f7f6 fe1d 	bl	8000618 <__aeabi_dmul>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	1b5d      	subs	r5, r3, r5
 80099e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099ea:	e7e3      	b.n	80099b4 <_strtod_l+0x3fc>
 80099ec:	9b06      	ldr	r3, [sp, #24]
 80099ee:	3316      	adds	r3, #22
 80099f0:	db0b      	blt.n	8009a0a <_strtod_l+0x452>
 80099f2:	9b05      	ldr	r3, [sp, #20]
 80099f4:	1b9e      	subs	r6, r3, r6
 80099f6:	4b59      	ldr	r3, [pc, #356]	; (8009b5c <_strtod_l+0x5a4>)
 80099f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80099fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a00:	4650      	mov	r0, sl
 8009a02:	4659      	mov	r1, fp
 8009a04:	f7f6 ff32 	bl	800086c <__aeabi_ddiv>
 8009a08:	e7d6      	b.n	80099b8 <_strtod_l+0x400>
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	eba5 0808 	sub.w	r8, r5, r8
 8009a10:	4498      	add	r8, r3
 8009a12:	f1b8 0f00 	cmp.w	r8, #0
 8009a16:	dd74      	ble.n	8009b02 <_strtod_l+0x54a>
 8009a18:	f018 030f 	ands.w	r3, r8, #15
 8009a1c:	d00a      	beq.n	8009a34 <_strtod_l+0x47c>
 8009a1e:	494f      	ldr	r1, [pc, #316]	; (8009b5c <_strtod_l+0x5a4>)
 8009a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a24:	4652      	mov	r2, sl
 8009a26:	465b      	mov	r3, fp
 8009a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2c:	f7f6 fdf4 	bl	8000618 <__aeabi_dmul>
 8009a30:	4682      	mov	sl, r0
 8009a32:	468b      	mov	fp, r1
 8009a34:	f038 080f 	bics.w	r8, r8, #15
 8009a38:	d04f      	beq.n	8009ada <_strtod_l+0x522>
 8009a3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009a3e:	dd22      	ble.n	8009a86 <_strtod_l+0x4ce>
 8009a40:	2500      	movs	r5, #0
 8009a42:	462e      	mov	r6, r5
 8009a44:	9507      	str	r5, [sp, #28]
 8009a46:	9505      	str	r5, [sp, #20]
 8009a48:	2322      	movs	r3, #34	; 0x22
 8009a4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009b64 <_strtod_l+0x5ac>
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	f04f 0a00 	mov.w	sl, #0
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f43f adf2 	beq.w	8009640 <_strtod_l+0x88>
 8009a5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f002 f998 	bl	800bd94 <_Bfree>
 8009a64:	9905      	ldr	r1, [sp, #20]
 8009a66:	4620      	mov	r0, r4
 8009a68:	f002 f994 	bl	800bd94 <_Bfree>
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f002 f990 	bl	800bd94 <_Bfree>
 8009a74:	9907      	ldr	r1, [sp, #28]
 8009a76:	4620      	mov	r0, r4
 8009a78:	f002 f98c 	bl	800bd94 <_Bfree>
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f002 f988 	bl	800bd94 <_Bfree>
 8009a84:	e5dc      	b.n	8009640 <_strtod_l+0x88>
 8009a86:	4b36      	ldr	r3, [pc, #216]	; (8009b60 <_strtod_l+0x5a8>)
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a90:	4650      	mov	r0, sl
 8009a92:	4659      	mov	r1, fp
 8009a94:	4699      	mov	r9, r3
 8009a96:	f1b8 0f01 	cmp.w	r8, #1
 8009a9a:	dc21      	bgt.n	8009ae0 <_strtod_l+0x528>
 8009a9c:	b10b      	cbz	r3, 8009aa2 <_strtod_l+0x4ea>
 8009a9e:	4682      	mov	sl, r0
 8009aa0:	468b      	mov	fp, r1
 8009aa2:	4b2f      	ldr	r3, [pc, #188]	; (8009b60 <_strtod_l+0x5a8>)
 8009aa4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009aa8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009aac:	4652      	mov	r2, sl
 8009aae:	465b      	mov	r3, fp
 8009ab0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009ab4:	f7f6 fdb0 	bl	8000618 <__aeabi_dmul>
 8009ab8:	4b2a      	ldr	r3, [pc, #168]	; (8009b64 <_strtod_l+0x5ac>)
 8009aba:	460a      	mov	r2, r1
 8009abc:	400b      	ands	r3, r1
 8009abe:	492a      	ldr	r1, [pc, #168]	; (8009b68 <_strtod_l+0x5b0>)
 8009ac0:	428b      	cmp	r3, r1
 8009ac2:	4682      	mov	sl, r0
 8009ac4:	d8bc      	bhi.n	8009a40 <_strtod_l+0x488>
 8009ac6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009aca:	428b      	cmp	r3, r1
 8009acc:	bf86      	itte	hi
 8009ace:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009b6c <_strtod_l+0x5b4>
 8009ad2:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ad6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009ada:	2300      	movs	r3, #0
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	e084      	b.n	8009bea <_strtod_l+0x632>
 8009ae0:	f018 0f01 	tst.w	r8, #1
 8009ae4:	d005      	beq.n	8009af2 <_strtod_l+0x53a>
 8009ae6:	9b04      	ldr	r3, [sp, #16]
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fd94 	bl	8000618 <__aeabi_dmul>
 8009af0:	2301      	movs	r3, #1
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	3208      	adds	r2, #8
 8009af6:	f109 0901 	add.w	r9, r9, #1
 8009afa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009afe:	9204      	str	r2, [sp, #16]
 8009b00:	e7c9      	b.n	8009a96 <_strtod_l+0x4de>
 8009b02:	d0ea      	beq.n	8009ada <_strtod_l+0x522>
 8009b04:	f1c8 0800 	rsb	r8, r8, #0
 8009b08:	f018 020f 	ands.w	r2, r8, #15
 8009b0c:	d00a      	beq.n	8009b24 <_strtod_l+0x56c>
 8009b0e:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <_strtod_l+0x5a4>)
 8009b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b14:	4650      	mov	r0, sl
 8009b16:	4659      	mov	r1, fp
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f7f6 fea6 	bl	800086c <__aeabi_ddiv>
 8009b20:	4682      	mov	sl, r0
 8009b22:	468b      	mov	fp, r1
 8009b24:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009b28:	d0d7      	beq.n	8009ada <_strtod_l+0x522>
 8009b2a:	f1b8 0f1f 	cmp.w	r8, #31
 8009b2e:	dd1f      	ble.n	8009b70 <_strtod_l+0x5b8>
 8009b30:	2500      	movs	r5, #0
 8009b32:	462e      	mov	r6, r5
 8009b34:	9507      	str	r5, [sp, #28]
 8009b36:	9505      	str	r5, [sp, #20]
 8009b38:	2322      	movs	r3, #34	; 0x22
 8009b3a:	f04f 0a00 	mov.w	sl, #0
 8009b3e:	f04f 0b00 	mov.w	fp, #0
 8009b42:	6023      	str	r3, [r4, #0]
 8009b44:	e786      	b.n	8009a54 <_strtod_l+0x49c>
 8009b46:	bf00      	nop
 8009b48:	0800da85 	.word	0x0800da85
 8009b4c:	0800dac4 	.word	0x0800dac4
 8009b50:	0800da7d 	.word	0x0800da7d
 8009b54:	0800dc04 	.word	0x0800dc04
 8009b58:	0800df33 	.word	0x0800df33
 8009b5c:	0800ddf8 	.word	0x0800ddf8
 8009b60:	0800ddd0 	.word	0x0800ddd0
 8009b64:	7ff00000 	.word	0x7ff00000
 8009b68:	7ca00000 	.word	0x7ca00000
 8009b6c:	7fefffff 	.word	0x7fefffff
 8009b70:	f018 0310 	ands.w	r3, r8, #16
 8009b74:	bf18      	it	ne
 8009b76:	236a      	movne	r3, #106	; 0x6a
 8009b78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009f28 <_strtod_l+0x970>
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	4650      	mov	r0, sl
 8009b80:	4659      	mov	r1, fp
 8009b82:	2300      	movs	r3, #0
 8009b84:	f018 0f01 	tst.w	r8, #1
 8009b88:	d004      	beq.n	8009b94 <_strtod_l+0x5dc>
 8009b8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b8e:	f7f6 fd43 	bl	8000618 <__aeabi_dmul>
 8009b92:	2301      	movs	r3, #1
 8009b94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b98:	f109 0908 	add.w	r9, r9, #8
 8009b9c:	d1f2      	bne.n	8009b84 <_strtod_l+0x5cc>
 8009b9e:	b10b      	cbz	r3, 8009ba4 <_strtod_l+0x5ec>
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	468b      	mov	fp, r1
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	b1c3      	cbz	r3, 8009bda <_strtod_l+0x622>
 8009ba8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009bac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	4659      	mov	r1, fp
 8009bb4:	dd11      	ble.n	8009bda <_strtod_l+0x622>
 8009bb6:	2b1f      	cmp	r3, #31
 8009bb8:	f340 8124 	ble.w	8009e04 <_strtod_l+0x84c>
 8009bbc:	2b34      	cmp	r3, #52	; 0x34
 8009bbe:	bfde      	ittt	le
 8009bc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009bc4:	f04f 33ff 	movle.w	r3, #4294967295
 8009bc8:	fa03 f202 	lslle.w	r2, r3, r2
 8009bcc:	f04f 0a00 	mov.w	sl, #0
 8009bd0:	bfcc      	ite	gt
 8009bd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009bd6:	ea02 0b01 	andle.w	fp, r2, r1
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4650      	mov	r0, sl
 8009be0:	4659      	mov	r1, fp
 8009be2:	f7f6 ff81 	bl	8000ae8 <__aeabi_dcmpeq>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d1a2      	bne.n	8009b30 <_strtod_l+0x578>
 8009bea:	9b07      	ldr	r3, [sp, #28]
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	9908      	ldr	r1, [sp, #32]
 8009bf0:	462b      	mov	r3, r5
 8009bf2:	463a      	mov	r2, r7
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f002 f935 	bl	800be64 <__s2b>
 8009bfa:	9007      	str	r0, [sp, #28]
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	f43f af1f 	beq.w	8009a40 <_strtod_l+0x488>
 8009c02:	9b05      	ldr	r3, [sp, #20]
 8009c04:	1b9e      	subs	r6, r3, r6
 8009c06:	9b06      	ldr	r3, [sp, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfb4      	ite	lt
 8009c0c:	4633      	movlt	r3, r6
 8009c0e:	2300      	movge	r3, #0
 8009c10:	930c      	str	r3, [sp, #48]	; 0x30
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	2500      	movs	r5, #0
 8009c16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c1c:	462e      	mov	r6, r5
 8009c1e:	9b07      	ldr	r3, [sp, #28]
 8009c20:	4620      	mov	r0, r4
 8009c22:	6859      	ldr	r1, [r3, #4]
 8009c24:	f002 f876 	bl	800bd14 <_Balloc>
 8009c28:	9005      	str	r0, [sp, #20]
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f43f af0c 	beq.w	8009a48 <_strtod_l+0x490>
 8009c30:	9b07      	ldr	r3, [sp, #28]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	3202      	adds	r2, #2
 8009c36:	f103 010c 	add.w	r1, r3, #12
 8009c3a:	0092      	lsls	r2, r2, #2
 8009c3c:	300c      	adds	r0, #12
 8009c3e:	f7fe fce9 	bl	8008614 <memcpy>
 8009c42:	ec4b ab10 	vmov	d0, sl, fp
 8009c46:	aa1a      	add	r2, sp, #104	; 0x68
 8009c48:	a919      	add	r1, sp, #100	; 0x64
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f002 fc50 	bl	800c4f0 <__d2b>
 8009c50:	ec4b ab18 	vmov	d8, sl, fp
 8009c54:	9018      	str	r0, [sp, #96]	; 0x60
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f43f aef6 	beq.w	8009a48 <_strtod_l+0x490>
 8009c5c:	2101      	movs	r1, #1
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f002 f99a 	bl	800bf98 <__i2b>
 8009c64:	4606      	mov	r6, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	f43f aeee 	beq.w	8009a48 <_strtod_l+0x490>
 8009c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c6e:	9904      	ldr	r1, [sp, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bfab      	itete	ge
 8009c74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009c7e:	bfac      	ite	ge
 8009c80:	eb03 0902 	addge.w	r9, r3, r2
 8009c84:	1ad7      	sublt	r7, r2, r3
 8009c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c88:	eba3 0801 	sub.w	r8, r3, r1
 8009c8c:	4490      	add	r8, r2
 8009c8e:	4ba1      	ldr	r3, [pc, #644]	; (8009f14 <_strtod_l+0x95c>)
 8009c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c94:	4598      	cmp	r8, r3
 8009c96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c9a:	f280 80c7 	bge.w	8009e2c <_strtod_l+0x874>
 8009c9e:	eba3 0308 	sub.w	r3, r3, r8
 8009ca2:	2b1f      	cmp	r3, #31
 8009ca4:	eba2 0203 	sub.w	r2, r2, r3
 8009ca8:	f04f 0101 	mov.w	r1, #1
 8009cac:	f300 80b1 	bgt.w	8009e12 <_strtod_l+0x85a>
 8009cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb4:	930d      	str	r3, [sp, #52]	; 0x34
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9308      	str	r3, [sp, #32]
 8009cba:	eb09 0802 	add.w	r8, r9, r2
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	45c1      	cmp	r9, r8
 8009cc2:	4417      	add	r7, r2
 8009cc4:	441f      	add	r7, r3
 8009cc6:	464b      	mov	r3, r9
 8009cc8:	bfa8      	it	ge
 8009cca:	4643      	movge	r3, r8
 8009ccc:	42bb      	cmp	r3, r7
 8009cce:	bfa8      	it	ge
 8009cd0:	463b      	movge	r3, r7
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	bfc2      	ittt	gt
 8009cd6:	eba8 0803 	subgt.w	r8, r8, r3
 8009cda:	1aff      	subgt	r7, r7, r3
 8009cdc:	eba9 0903 	subgt.w	r9, r9, r3
 8009ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	dd17      	ble.n	8009d16 <_strtod_l+0x75e>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4620      	mov	r0, r4
 8009cec:	f002 fa14 	bl	800c118 <__pow5mult>
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	f43f aea8 	beq.w	8009a48 <_strtod_l+0x490>
 8009cf8:	4601      	mov	r1, r0
 8009cfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f002 f961 	bl	800bfc4 <__multiply>
 8009d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f43f ae9f 	beq.w	8009a48 <_strtod_l+0x490>
 8009d0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f002 f841 	bl	800bd94 <_Bfree>
 8009d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d14:	9318      	str	r3, [sp, #96]	; 0x60
 8009d16:	f1b8 0f00 	cmp.w	r8, #0
 8009d1a:	f300 808c 	bgt.w	8009e36 <_strtod_l+0x87e>
 8009d1e:	9b06      	ldr	r3, [sp, #24]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	dd08      	ble.n	8009d36 <_strtod_l+0x77e>
 8009d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d26:	9905      	ldr	r1, [sp, #20]
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f002 f9f5 	bl	800c118 <__pow5mult>
 8009d2e:	9005      	str	r0, [sp, #20]
 8009d30:	2800      	cmp	r0, #0
 8009d32:	f43f ae89 	beq.w	8009a48 <_strtod_l+0x490>
 8009d36:	2f00      	cmp	r7, #0
 8009d38:	dd08      	ble.n	8009d4c <_strtod_l+0x794>
 8009d3a:	9905      	ldr	r1, [sp, #20]
 8009d3c:	463a      	mov	r2, r7
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f002 fa44 	bl	800c1cc <__lshift>
 8009d44:	9005      	str	r0, [sp, #20]
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f43f ae7e 	beq.w	8009a48 <_strtod_l+0x490>
 8009d4c:	f1b9 0f00 	cmp.w	r9, #0
 8009d50:	dd08      	ble.n	8009d64 <_strtod_l+0x7ac>
 8009d52:	4631      	mov	r1, r6
 8009d54:	464a      	mov	r2, r9
 8009d56:	4620      	mov	r0, r4
 8009d58:	f002 fa38 	bl	800c1cc <__lshift>
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f ae72 	beq.w	8009a48 <_strtod_l+0x490>
 8009d64:	9a05      	ldr	r2, [sp, #20]
 8009d66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f002 fabb 	bl	800c2e4 <__mdiff>
 8009d6e:	4605      	mov	r5, r0
 8009d70:	2800      	cmp	r0, #0
 8009d72:	f43f ae69 	beq.w	8009a48 <_strtod_l+0x490>
 8009d76:	68c3      	ldr	r3, [r0, #12]
 8009d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60c3      	str	r3, [r0, #12]
 8009d7e:	4631      	mov	r1, r6
 8009d80:	f002 fa94 	bl	800c2ac <__mcmp>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	da60      	bge.n	8009e4a <_strtod_l+0x892>
 8009d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d8e:	f040 8082 	bne.w	8009e96 <_strtod_l+0x8de>
 8009d92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d17d      	bne.n	8009e96 <_strtod_l+0x8de>
 8009d9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d9e:	0d1b      	lsrs	r3, r3, #20
 8009da0:	051b      	lsls	r3, r3, #20
 8009da2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009da6:	d976      	bls.n	8009e96 <_strtod_l+0x8de>
 8009da8:	696b      	ldr	r3, [r5, #20]
 8009daa:	b913      	cbnz	r3, 8009db2 <_strtod_l+0x7fa>
 8009dac:	692b      	ldr	r3, [r5, #16]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	dd71      	ble.n	8009e96 <_strtod_l+0x8de>
 8009db2:	4629      	mov	r1, r5
 8009db4:	2201      	movs	r2, #1
 8009db6:	4620      	mov	r0, r4
 8009db8:	f002 fa08 	bl	800c1cc <__lshift>
 8009dbc:	4631      	mov	r1, r6
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	f002 fa74 	bl	800c2ac <__mcmp>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	dd66      	ble.n	8009e96 <_strtod_l+0x8de>
 8009dc8:	9904      	ldr	r1, [sp, #16]
 8009dca:	4a53      	ldr	r2, [pc, #332]	; (8009f18 <_strtod_l+0x960>)
 8009dcc:	465b      	mov	r3, fp
 8009dce:	2900      	cmp	r1, #0
 8009dd0:	f000 8081 	beq.w	8009ed6 <_strtod_l+0x91e>
 8009dd4:	ea02 010b 	and.w	r1, r2, fp
 8009dd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ddc:	dc7b      	bgt.n	8009ed6 <_strtod_l+0x91e>
 8009dde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009de2:	f77f aea9 	ble.w	8009b38 <_strtod_l+0x580>
 8009de6:	4b4d      	ldr	r3, [pc, #308]	; (8009f1c <_strtod_l+0x964>)
 8009de8:	4650      	mov	r0, sl
 8009dea:	4659      	mov	r1, fp
 8009dec:	2200      	movs	r2, #0
 8009dee:	f7f6 fc13 	bl	8000618 <__aeabi_dmul>
 8009df2:	460b      	mov	r3, r1
 8009df4:	4303      	orrs	r3, r0
 8009df6:	bf08      	it	eq
 8009df8:	2322      	moveq	r3, #34	; 0x22
 8009dfa:	4682      	mov	sl, r0
 8009dfc:	468b      	mov	fp, r1
 8009dfe:	bf08      	it	eq
 8009e00:	6023      	streq	r3, [r4, #0]
 8009e02:	e62b      	b.n	8009a5c <_strtod_l+0x4a4>
 8009e04:	f04f 32ff 	mov.w	r2, #4294967295
 8009e08:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0c:	ea03 0a0a 	and.w	sl, r3, sl
 8009e10:	e6e3      	b.n	8009bda <_strtod_l+0x622>
 8009e12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009e16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009e1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009e1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009e22:	fa01 f308 	lsl.w	r3, r1, r8
 8009e26:	9308      	str	r3, [sp, #32]
 8009e28:	910d      	str	r1, [sp, #52]	; 0x34
 8009e2a:	e746      	b.n	8009cba <_strtod_l+0x702>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9308      	str	r3, [sp, #32]
 8009e30:	2301      	movs	r3, #1
 8009e32:	930d      	str	r3, [sp, #52]	; 0x34
 8009e34:	e741      	b.n	8009cba <_strtod_l+0x702>
 8009e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e38:	4642      	mov	r2, r8
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f002 f9c6 	bl	800c1cc <__lshift>
 8009e40:	9018      	str	r0, [sp, #96]	; 0x60
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f47f af6b 	bne.w	8009d1e <_strtod_l+0x766>
 8009e48:	e5fe      	b.n	8009a48 <_strtod_l+0x490>
 8009e4a:	465f      	mov	r7, fp
 8009e4c:	d16e      	bne.n	8009f2c <_strtod_l+0x974>
 8009e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e54:	b342      	cbz	r2, 8009ea8 <_strtod_l+0x8f0>
 8009e56:	4a32      	ldr	r2, [pc, #200]	; (8009f20 <_strtod_l+0x968>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d128      	bne.n	8009eae <_strtod_l+0x8f6>
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	4651      	mov	r1, sl
 8009e60:	b1eb      	cbz	r3, 8009e9e <_strtod_l+0x8e6>
 8009e62:	4b2d      	ldr	r3, [pc, #180]	; (8009f18 <_strtod_l+0x960>)
 8009e64:	403b      	ands	r3, r7
 8009e66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6e:	d819      	bhi.n	8009ea4 <_strtod_l+0x8ec>
 8009e70:	0d1b      	lsrs	r3, r3, #20
 8009e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e76:	fa02 f303 	lsl.w	r3, r2, r3
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	d117      	bne.n	8009eae <_strtod_l+0x8f6>
 8009e7e:	4b29      	ldr	r3, [pc, #164]	; (8009f24 <_strtod_l+0x96c>)
 8009e80:	429f      	cmp	r7, r3
 8009e82:	d102      	bne.n	8009e8a <_strtod_l+0x8d2>
 8009e84:	3101      	adds	r1, #1
 8009e86:	f43f addf 	beq.w	8009a48 <_strtod_l+0x490>
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <_strtod_l+0x960>)
 8009e8c:	403b      	ands	r3, r7
 8009e8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e92:	f04f 0a00 	mov.w	sl, #0
 8009e96:	9b04      	ldr	r3, [sp, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1a4      	bne.n	8009de6 <_strtod_l+0x82e>
 8009e9c:	e5de      	b.n	8009a5c <_strtod_l+0x4a4>
 8009e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea2:	e7ea      	b.n	8009e7a <_strtod_l+0x8c2>
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	e7e8      	b.n	8009e7a <_strtod_l+0x8c2>
 8009ea8:	ea53 030a 	orrs.w	r3, r3, sl
 8009eac:	d08c      	beq.n	8009dc8 <_strtod_l+0x810>
 8009eae:	9b08      	ldr	r3, [sp, #32]
 8009eb0:	b1db      	cbz	r3, 8009eea <_strtod_l+0x932>
 8009eb2:	423b      	tst	r3, r7
 8009eb4:	d0ef      	beq.n	8009e96 <_strtod_l+0x8de>
 8009eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb8:	9a04      	ldr	r2, [sp, #16]
 8009eba:	4650      	mov	r0, sl
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	b1c3      	cbz	r3, 8009ef2 <_strtod_l+0x93a>
 8009ec0:	f7ff fb5d 	bl	800957e <sulp>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	ec51 0b18 	vmov	r0, r1, d8
 8009ecc:	f7f6 f9ee 	bl	80002ac <__adddf3>
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	468b      	mov	fp, r1
 8009ed4:	e7df      	b.n	8009e96 <_strtod_l+0x8de>
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009edc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ee4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ee8:	e7d5      	b.n	8009e96 <_strtod_l+0x8de>
 8009eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eec:	ea13 0f0a 	tst.w	r3, sl
 8009ef0:	e7e0      	b.n	8009eb4 <_strtod_l+0x8fc>
 8009ef2:	f7ff fb44 	bl	800957e <sulp>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	ec51 0b18 	vmov	r0, r1, d8
 8009efe:	f7f6 f9d3 	bl	80002a8 <__aeabi_dsub>
 8009f02:	2200      	movs	r2, #0
 8009f04:	2300      	movs	r3, #0
 8009f06:	4682      	mov	sl, r0
 8009f08:	468b      	mov	fp, r1
 8009f0a:	f7f6 fded 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d0c1      	beq.n	8009e96 <_strtod_l+0x8de>
 8009f12:	e611      	b.n	8009b38 <_strtod_l+0x580>
 8009f14:	fffffc02 	.word	0xfffffc02
 8009f18:	7ff00000 	.word	0x7ff00000
 8009f1c:	39500000 	.word	0x39500000
 8009f20:	000fffff 	.word	0x000fffff
 8009f24:	7fefffff 	.word	0x7fefffff
 8009f28:	0800dad8 	.word	0x0800dad8
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f002 fb3a 	bl	800c5a8 <__ratio>
 8009f34:	ec59 8b10 	vmov	r8, r9, d0
 8009f38:	ee10 0a10 	vmov	r0, s0
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f42:	4649      	mov	r1, r9
 8009f44:	f7f6 fde4 	bl	8000b10 <__aeabi_dcmple>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d07a      	beq.n	800a042 <_strtod_l+0xa8a>
 8009f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d04a      	beq.n	8009fe8 <_strtod_l+0xa30>
 8009f52:	4b95      	ldr	r3, [pc, #596]	; (800a1a8 <_strtod_l+0xbf0>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a1a8 <_strtod_l+0xbf0>
 8009f5e:	f04f 0800 	mov.w	r8, #0
 8009f62:	4b92      	ldr	r3, [pc, #584]	; (800a1ac <_strtod_l+0xbf4>)
 8009f64:	403b      	ands	r3, r7
 8009f66:	930d      	str	r3, [sp, #52]	; 0x34
 8009f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f6a:	4b91      	ldr	r3, [pc, #580]	; (800a1b0 <_strtod_l+0xbf8>)
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	f040 80b0 	bne.w	800a0d2 <_strtod_l+0xb1a>
 8009f72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f7a:	ec4b ab10 	vmov	d0, sl, fp
 8009f7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f82:	f002 fa39 	bl	800c3f8 <__ulp>
 8009f86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f8a:	ec53 2b10 	vmov	r2, r3, d0
 8009f8e:	f7f6 fb43 	bl	8000618 <__aeabi_dmul>
 8009f92:	4652      	mov	r2, sl
 8009f94:	465b      	mov	r3, fp
 8009f96:	f7f6 f989 	bl	80002ac <__adddf3>
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4983      	ldr	r1, [pc, #524]	; (800a1ac <_strtod_l+0xbf4>)
 8009f9e:	4a85      	ldr	r2, [pc, #532]	; (800a1b4 <_strtod_l+0xbfc>)
 8009fa0:	4019      	ands	r1, r3
 8009fa2:	4291      	cmp	r1, r2
 8009fa4:	4682      	mov	sl, r0
 8009fa6:	d960      	bls.n	800a06a <_strtod_l+0xab2>
 8009fa8:	ee18 3a90 	vmov	r3, s17
 8009fac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d104      	bne.n	8009fbe <_strtod_l+0xa06>
 8009fb4:	ee18 3a10 	vmov	r3, s16
 8009fb8:	3301      	adds	r3, #1
 8009fba:	f43f ad45 	beq.w	8009a48 <_strtod_l+0x490>
 8009fbe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a1c0 <_strtod_l+0xc08>
 8009fc2:	f04f 3aff 	mov.w	sl, #4294967295
 8009fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f001 fee3 	bl	800bd94 <_Bfree>
 8009fce:	9905      	ldr	r1, [sp, #20]
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f001 fedf 	bl	800bd94 <_Bfree>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f001 fedb 	bl	800bd94 <_Bfree>
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f001 fed7 	bl	800bd94 <_Bfree>
 8009fe6:	e61a      	b.n	8009c1e <_strtod_l+0x666>
 8009fe8:	f1ba 0f00 	cmp.w	sl, #0
 8009fec:	d11b      	bne.n	800a026 <_strtod_l+0xa6e>
 8009fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ff2:	b9f3      	cbnz	r3, 800a032 <_strtod_l+0xa7a>
 8009ff4:	4b6c      	ldr	r3, [pc, #432]	; (800a1a8 <_strtod_l+0xbf0>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 fd7e 	bl	8000afc <__aeabi_dcmplt>
 800a000:	b9d0      	cbnz	r0, 800a038 <_strtod_l+0xa80>
 800a002:	4640      	mov	r0, r8
 800a004:	4649      	mov	r1, r9
 800a006:	4b6c      	ldr	r3, [pc, #432]	; (800a1b8 <_strtod_l+0xc00>)
 800a008:	2200      	movs	r2, #0
 800a00a:	f7f6 fb05 	bl	8000618 <__aeabi_dmul>
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a016:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a01a:	9315      	str	r3, [sp, #84]	; 0x54
 800a01c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a024:	e79d      	b.n	8009f62 <_strtod_l+0x9aa>
 800a026:	f1ba 0f01 	cmp.w	sl, #1
 800a02a:	d102      	bne.n	800a032 <_strtod_l+0xa7a>
 800a02c:	2f00      	cmp	r7, #0
 800a02e:	f43f ad83 	beq.w	8009b38 <_strtod_l+0x580>
 800a032:	4b62      	ldr	r3, [pc, #392]	; (800a1bc <_strtod_l+0xc04>)
 800a034:	2200      	movs	r2, #0
 800a036:	e78e      	b.n	8009f56 <_strtod_l+0x99e>
 800a038:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a1b8 <_strtod_l+0xc00>
 800a03c:	f04f 0800 	mov.w	r8, #0
 800a040:	e7e7      	b.n	800a012 <_strtod_l+0xa5a>
 800a042:	4b5d      	ldr	r3, [pc, #372]	; (800a1b8 <_strtod_l+0xc00>)
 800a044:	4640      	mov	r0, r8
 800a046:	4649      	mov	r1, r9
 800a048:	2200      	movs	r2, #0
 800a04a:	f7f6 fae5 	bl	8000618 <__aeabi_dmul>
 800a04e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a050:	4680      	mov	r8, r0
 800a052:	4689      	mov	r9, r1
 800a054:	b933      	cbnz	r3, 800a064 <_strtod_l+0xaac>
 800a056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a05a:	900e      	str	r0, [sp, #56]	; 0x38
 800a05c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a05e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a062:	e7dd      	b.n	800a020 <_strtod_l+0xa68>
 800a064:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a068:	e7f9      	b.n	800a05e <_strtod_l+0xaa6>
 800a06a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1a8      	bne.n	8009fc6 <_strtod_l+0xa0e>
 800a074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a07a:	0d1b      	lsrs	r3, r3, #20
 800a07c:	051b      	lsls	r3, r3, #20
 800a07e:	429a      	cmp	r2, r3
 800a080:	d1a1      	bne.n	8009fc6 <_strtod_l+0xa0e>
 800a082:	4640      	mov	r0, r8
 800a084:	4649      	mov	r1, r9
 800a086:	f7f6 fe27 	bl	8000cd8 <__aeabi_d2lz>
 800a08a:	f7f6 fa97 	bl	80005bc <__aeabi_l2d>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4640      	mov	r0, r8
 800a094:	4649      	mov	r1, r9
 800a096:	f7f6 f907 	bl	80002a8 <__aeabi_dsub>
 800a09a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a09c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0a0:	ea43 030a 	orr.w	r3, r3, sl
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	4689      	mov	r9, r1
 800a0aa:	d055      	beq.n	800a158 <_strtod_l+0xba0>
 800a0ac:	a336      	add	r3, pc, #216	; (adr r3, 800a188 <_strtod_l+0xbd0>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 fd23 	bl	8000afc <__aeabi_dcmplt>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f47f acd0 	bne.w	8009a5c <_strtod_l+0x4a4>
 800a0bc:	a334      	add	r3, pc, #208	; (adr r3, 800a190 <_strtod_l+0xbd8>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	f7f6 fd37 	bl	8000b38 <__aeabi_dcmpgt>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	f43f af7b 	beq.w	8009fc6 <_strtod_l+0xa0e>
 800a0d0:	e4c4      	b.n	8009a5c <_strtod_l+0x4a4>
 800a0d2:	9b04      	ldr	r3, [sp, #16]
 800a0d4:	b333      	cbz	r3, 800a124 <_strtod_l+0xb6c>
 800a0d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0dc:	d822      	bhi.n	800a124 <_strtod_l+0xb6c>
 800a0de:	a32e      	add	r3, pc, #184	; (adr r3, 800a198 <_strtod_l+0xbe0>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7f6 fd12 	bl	8000b10 <__aeabi_dcmple>
 800a0ec:	b1a0      	cbz	r0, 800a118 <_strtod_l+0xb60>
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	f7f6 fd69 	bl	8000bc8 <__aeabi_d2uiz>
 800a0f6:	2801      	cmp	r0, #1
 800a0f8:	bf38      	it	cc
 800a0fa:	2001      	movcc	r0, #1
 800a0fc:	f7f6 fa12 	bl	8000524 <__aeabi_ui2d>
 800a100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a102:	4680      	mov	r8, r0
 800a104:	4689      	mov	r9, r1
 800a106:	bb23      	cbnz	r3, 800a152 <_strtod_l+0xb9a>
 800a108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a10c:	9010      	str	r0, [sp, #64]	; 0x40
 800a10e:	9311      	str	r3, [sp, #68]	; 0x44
 800a110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a114:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a11c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a120:	1a9b      	subs	r3, r3, r2
 800a122:	9309      	str	r3, [sp, #36]	; 0x24
 800a124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a128:	eeb0 0a48 	vmov.f32	s0, s16
 800a12c:	eef0 0a68 	vmov.f32	s1, s17
 800a130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a134:	f002 f960 	bl	800c3f8 <__ulp>
 800a138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a13c:	ec53 2b10 	vmov	r2, r3, d0
 800a140:	f7f6 fa6a 	bl	8000618 <__aeabi_dmul>
 800a144:	ec53 2b18 	vmov	r2, r3, d8
 800a148:	f7f6 f8b0 	bl	80002ac <__adddf3>
 800a14c:	4682      	mov	sl, r0
 800a14e:	468b      	mov	fp, r1
 800a150:	e78d      	b.n	800a06e <_strtod_l+0xab6>
 800a152:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a156:	e7db      	b.n	800a110 <_strtod_l+0xb58>
 800a158:	a311      	add	r3, pc, #68	; (adr r3, 800a1a0 <_strtod_l+0xbe8>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f7f6 fccd 	bl	8000afc <__aeabi_dcmplt>
 800a162:	e7b2      	b.n	800a0ca <_strtod_l+0xb12>
 800a164:	2300      	movs	r3, #0
 800a166:	930a      	str	r3, [sp, #40]	; 0x28
 800a168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a16a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	f7ff ba6b 	b.w	8009648 <_strtod_l+0x90>
 800a172:	2a65      	cmp	r2, #101	; 0x65
 800a174:	f43f ab5f 	beq.w	8009836 <_strtod_l+0x27e>
 800a178:	2a45      	cmp	r2, #69	; 0x45
 800a17a:	f43f ab5c 	beq.w	8009836 <_strtod_l+0x27e>
 800a17e:	2301      	movs	r3, #1
 800a180:	f7ff bb94 	b.w	80098ac <_strtod_l+0x2f4>
 800a184:	f3af 8000 	nop.w
 800a188:	94a03595 	.word	0x94a03595
 800a18c:	3fdfffff 	.word	0x3fdfffff
 800a190:	35afe535 	.word	0x35afe535
 800a194:	3fe00000 	.word	0x3fe00000
 800a198:	ffc00000 	.word	0xffc00000
 800a19c:	41dfffff 	.word	0x41dfffff
 800a1a0:	94a03595 	.word	0x94a03595
 800a1a4:	3fcfffff 	.word	0x3fcfffff
 800a1a8:	3ff00000 	.word	0x3ff00000
 800a1ac:	7ff00000 	.word	0x7ff00000
 800a1b0:	7fe00000 	.word	0x7fe00000
 800a1b4:	7c9fffff 	.word	0x7c9fffff
 800a1b8:	3fe00000 	.word	0x3fe00000
 800a1bc:	bff00000 	.word	0xbff00000
 800a1c0:	7fefffff 	.word	0x7fefffff

0800a1c4 <_strtod_r>:
 800a1c4:	4b01      	ldr	r3, [pc, #4]	; (800a1cc <_strtod_r+0x8>)
 800a1c6:	f7ff b9f7 	b.w	80095b8 <_strtod_l>
 800a1ca:	bf00      	nop
 800a1cc:	20000074 	.word	0x20000074

0800a1d0 <_strtol_l.constprop.0>:
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d6:	d001      	beq.n	800a1dc <_strtol_l.constprop.0+0xc>
 800a1d8:	2b24      	cmp	r3, #36	; 0x24
 800a1da:	d906      	bls.n	800a1ea <_strtol_l.constprop.0+0x1a>
 800a1dc:	f7fe f9f0 	bl	80085c0 <__errno>
 800a1e0:	2316      	movs	r3, #22
 800a1e2:	6003      	str	r3, [r0, #0]
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a2d0 <_strtol_l.constprop.0+0x100>
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	462e      	mov	r6, r5
 800a1f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a1fa:	f017 0708 	ands.w	r7, r7, #8
 800a1fe:	d1f7      	bne.n	800a1f0 <_strtol_l.constprop.0+0x20>
 800a200:	2c2d      	cmp	r4, #45	; 0x2d
 800a202:	d132      	bne.n	800a26a <_strtol_l.constprop.0+0x9a>
 800a204:	782c      	ldrb	r4, [r5, #0]
 800a206:	2701      	movs	r7, #1
 800a208:	1cb5      	adds	r5, r6, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d05b      	beq.n	800a2c6 <_strtol_l.constprop.0+0xf6>
 800a20e:	2b10      	cmp	r3, #16
 800a210:	d109      	bne.n	800a226 <_strtol_l.constprop.0+0x56>
 800a212:	2c30      	cmp	r4, #48	; 0x30
 800a214:	d107      	bne.n	800a226 <_strtol_l.constprop.0+0x56>
 800a216:	782c      	ldrb	r4, [r5, #0]
 800a218:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a21c:	2c58      	cmp	r4, #88	; 0x58
 800a21e:	d14d      	bne.n	800a2bc <_strtol_l.constprop.0+0xec>
 800a220:	786c      	ldrb	r4, [r5, #1]
 800a222:	2310      	movs	r3, #16
 800a224:	3502      	adds	r5, #2
 800a226:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a22a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a22e:	f04f 0c00 	mov.w	ip, #0
 800a232:	fbb8 f9f3 	udiv	r9, r8, r3
 800a236:	4666      	mov	r6, ip
 800a238:	fb03 8a19 	mls	sl, r3, r9, r8
 800a23c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a240:	f1be 0f09 	cmp.w	lr, #9
 800a244:	d816      	bhi.n	800a274 <_strtol_l.constprop.0+0xa4>
 800a246:	4674      	mov	r4, lr
 800a248:	42a3      	cmp	r3, r4
 800a24a:	dd24      	ble.n	800a296 <_strtol_l.constprop.0+0xc6>
 800a24c:	f1bc 0f00 	cmp.w	ip, #0
 800a250:	db1e      	blt.n	800a290 <_strtol_l.constprop.0+0xc0>
 800a252:	45b1      	cmp	r9, r6
 800a254:	d31c      	bcc.n	800a290 <_strtol_l.constprop.0+0xc0>
 800a256:	d101      	bne.n	800a25c <_strtol_l.constprop.0+0x8c>
 800a258:	45a2      	cmp	sl, r4
 800a25a:	db19      	blt.n	800a290 <_strtol_l.constprop.0+0xc0>
 800a25c:	fb06 4603 	mla	r6, r6, r3, r4
 800a260:	f04f 0c01 	mov.w	ip, #1
 800a264:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a268:	e7e8      	b.n	800a23c <_strtol_l.constprop.0+0x6c>
 800a26a:	2c2b      	cmp	r4, #43	; 0x2b
 800a26c:	bf04      	itt	eq
 800a26e:	782c      	ldrbeq	r4, [r5, #0]
 800a270:	1cb5      	addeq	r5, r6, #2
 800a272:	e7ca      	b.n	800a20a <_strtol_l.constprop.0+0x3a>
 800a274:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a278:	f1be 0f19 	cmp.w	lr, #25
 800a27c:	d801      	bhi.n	800a282 <_strtol_l.constprop.0+0xb2>
 800a27e:	3c37      	subs	r4, #55	; 0x37
 800a280:	e7e2      	b.n	800a248 <_strtol_l.constprop.0+0x78>
 800a282:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a286:	f1be 0f19 	cmp.w	lr, #25
 800a28a:	d804      	bhi.n	800a296 <_strtol_l.constprop.0+0xc6>
 800a28c:	3c57      	subs	r4, #87	; 0x57
 800a28e:	e7db      	b.n	800a248 <_strtol_l.constprop.0+0x78>
 800a290:	f04f 3cff 	mov.w	ip, #4294967295
 800a294:	e7e6      	b.n	800a264 <_strtol_l.constprop.0+0x94>
 800a296:	f1bc 0f00 	cmp.w	ip, #0
 800a29a:	da05      	bge.n	800a2a8 <_strtol_l.constprop.0+0xd8>
 800a29c:	2322      	movs	r3, #34	; 0x22
 800a29e:	6003      	str	r3, [r0, #0]
 800a2a0:	4646      	mov	r6, r8
 800a2a2:	b942      	cbnz	r2, 800a2b6 <_strtol_l.constprop.0+0xe6>
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	e79e      	b.n	800a1e6 <_strtol_l.constprop.0+0x16>
 800a2a8:	b107      	cbz	r7, 800a2ac <_strtol_l.constprop.0+0xdc>
 800a2aa:	4276      	negs	r6, r6
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	d0f9      	beq.n	800a2a4 <_strtol_l.constprop.0+0xd4>
 800a2b0:	f1bc 0f00 	cmp.w	ip, #0
 800a2b4:	d000      	beq.n	800a2b8 <_strtol_l.constprop.0+0xe8>
 800a2b6:	1e69      	subs	r1, r5, #1
 800a2b8:	6011      	str	r1, [r2, #0]
 800a2ba:	e7f3      	b.n	800a2a4 <_strtol_l.constprop.0+0xd4>
 800a2bc:	2430      	movs	r4, #48	; 0x30
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1b1      	bne.n	800a226 <_strtol_l.constprop.0+0x56>
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	e7af      	b.n	800a226 <_strtol_l.constprop.0+0x56>
 800a2c6:	2c30      	cmp	r4, #48	; 0x30
 800a2c8:	d0a5      	beq.n	800a216 <_strtol_l.constprop.0+0x46>
 800a2ca:	230a      	movs	r3, #10
 800a2cc:	e7ab      	b.n	800a226 <_strtol_l.constprop.0+0x56>
 800a2ce:	bf00      	nop
 800a2d0:	0800db01 	.word	0x0800db01

0800a2d4 <_strtol_r>:
 800a2d4:	f7ff bf7c 	b.w	800a1d0 <_strtol_l.constprop.0>

0800a2d8 <__swbuf_r>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	460e      	mov	r6, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	4605      	mov	r5, r0
 800a2e0:	b118      	cbz	r0, 800a2ea <__swbuf_r+0x12>
 800a2e2:	6983      	ldr	r3, [r0, #24]
 800a2e4:	b90b      	cbnz	r3, 800a2ea <__swbuf_r+0x12>
 800a2e6:	f001 f86f 	bl	800b3c8 <__sinit>
 800a2ea:	4b21      	ldr	r3, [pc, #132]	; (800a370 <__swbuf_r+0x98>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	d12b      	bne.n	800a348 <__swbuf_r+0x70>
 800a2f0:	686c      	ldr	r4, [r5, #4]
 800a2f2:	69a3      	ldr	r3, [r4, #24]
 800a2f4:	60a3      	str	r3, [r4, #8]
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	071a      	lsls	r2, r3, #28
 800a2fa:	d52f      	bpl.n	800a35c <__swbuf_r+0x84>
 800a2fc:	6923      	ldr	r3, [r4, #16]
 800a2fe:	b36b      	cbz	r3, 800a35c <__swbuf_r+0x84>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6820      	ldr	r0, [r4, #0]
 800a304:	1ac0      	subs	r0, r0, r3
 800a306:	6963      	ldr	r3, [r4, #20]
 800a308:	b2f6      	uxtb	r6, r6
 800a30a:	4283      	cmp	r3, r0
 800a30c:	4637      	mov	r7, r6
 800a30e:	dc04      	bgt.n	800a31a <__swbuf_r+0x42>
 800a310:	4621      	mov	r1, r4
 800a312:	4628      	mov	r0, r5
 800a314:	f000 ffc4 	bl	800b2a0 <_fflush_r>
 800a318:	bb30      	cbnz	r0, 800a368 <__swbuf_r+0x90>
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	60a3      	str	r3, [r4, #8]
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	6022      	str	r2, [r4, #0]
 800a326:	701e      	strb	r6, [r3, #0]
 800a328:	6963      	ldr	r3, [r4, #20]
 800a32a:	3001      	adds	r0, #1
 800a32c:	4283      	cmp	r3, r0
 800a32e:	d004      	beq.n	800a33a <__swbuf_r+0x62>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	07db      	lsls	r3, r3, #31
 800a334:	d506      	bpl.n	800a344 <__swbuf_r+0x6c>
 800a336:	2e0a      	cmp	r6, #10
 800a338:	d104      	bne.n	800a344 <__swbuf_r+0x6c>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4628      	mov	r0, r5
 800a33e:	f000 ffaf 	bl	800b2a0 <_fflush_r>
 800a342:	b988      	cbnz	r0, 800a368 <__swbuf_r+0x90>
 800a344:	4638      	mov	r0, r7
 800a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <__swbuf_r+0x9c>)
 800a34a:	429c      	cmp	r4, r3
 800a34c:	d101      	bne.n	800a352 <__swbuf_r+0x7a>
 800a34e:	68ac      	ldr	r4, [r5, #8]
 800a350:	e7cf      	b.n	800a2f2 <__swbuf_r+0x1a>
 800a352:	4b09      	ldr	r3, [pc, #36]	; (800a378 <__swbuf_r+0xa0>)
 800a354:	429c      	cmp	r4, r3
 800a356:	bf08      	it	eq
 800a358:	68ec      	ldreq	r4, [r5, #12]
 800a35a:	e7ca      	b.n	800a2f2 <__swbuf_r+0x1a>
 800a35c:	4621      	mov	r1, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 f81e 	bl	800a3a0 <__swsetup_r>
 800a364:	2800      	cmp	r0, #0
 800a366:	d0cb      	beq.n	800a300 <__swbuf_r+0x28>
 800a368:	f04f 37ff 	mov.w	r7, #4294967295
 800a36c:	e7ea      	b.n	800a344 <__swbuf_r+0x6c>
 800a36e:	bf00      	nop
 800a370:	0800dcb4 	.word	0x0800dcb4
 800a374:	0800dcd4 	.word	0x0800dcd4
 800a378:	0800dc94 	.word	0x0800dc94

0800a37c <_write_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4d07      	ldr	r5, [pc, #28]	; (800a39c <_write_r+0x20>)
 800a380:	4604      	mov	r4, r0
 800a382:	4608      	mov	r0, r1
 800a384:	4611      	mov	r1, r2
 800a386:	2200      	movs	r2, #0
 800a388:	602a      	str	r2, [r5, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	f7f7 fb01 	bl	8001992 <_write>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_write_r+0x1e>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_write_r+0x1e>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	20000854 	.word	0x20000854

0800a3a0 <__swsetup_r>:
 800a3a0:	4b32      	ldr	r3, [pc, #200]	; (800a46c <__swsetup_r+0xcc>)
 800a3a2:	b570      	push	{r4, r5, r6, lr}
 800a3a4:	681d      	ldr	r5, [r3, #0]
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	b125      	cbz	r5, 800a3b6 <__swsetup_r+0x16>
 800a3ac:	69ab      	ldr	r3, [r5, #24]
 800a3ae:	b913      	cbnz	r3, 800a3b6 <__swsetup_r+0x16>
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f001 f809 	bl	800b3c8 <__sinit>
 800a3b6:	4b2e      	ldr	r3, [pc, #184]	; (800a470 <__swsetup_r+0xd0>)
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d10f      	bne.n	800a3dc <__swsetup_r+0x3c>
 800a3bc:	686c      	ldr	r4, [r5, #4]
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3c4:	0719      	lsls	r1, r3, #28
 800a3c6:	d42c      	bmi.n	800a422 <__swsetup_r+0x82>
 800a3c8:	06dd      	lsls	r5, r3, #27
 800a3ca:	d411      	bmi.n	800a3f0 <__swsetup_r+0x50>
 800a3cc:	2309      	movs	r3, #9
 800a3ce:	6033      	str	r3, [r6, #0]
 800a3d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	e03e      	b.n	800a45a <__swsetup_r+0xba>
 800a3dc:	4b25      	ldr	r3, [pc, #148]	; (800a474 <__swsetup_r+0xd4>)
 800a3de:	429c      	cmp	r4, r3
 800a3e0:	d101      	bne.n	800a3e6 <__swsetup_r+0x46>
 800a3e2:	68ac      	ldr	r4, [r5, #8]
 800a3e4:	e7eb      	b.n	800a3be <__swsetup_r+0x1e>
 800a3e6:	4b24      	ldr	r3, [pc, #144]	; (800a478 <__swsetup_r+0xd8>)
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	bf08      	it	eq
 800a3ec:	68ec      	ldreq	r4, [r5, #12]
 800a3ee:	e7e6      	b.n	800a3be <__swsetup_r+0x1e>
 800a3f0:	0758      	lsls	r0, r3, #29
 800a3f2:	d512      	bpl.n	800a41a <__swsetup_r+0x7a>
 800a3f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f6:	b141      	cbz	r1, 800a40a <__swsetup_r+0x6a>
 800a3f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3fc:	4299      	cmp	r1, r3
 800a3fe:	d002      	beq.n	800a406 <__swsetup_r+0x66>
 800a400:	4630      	mov	r0, r6
 800a402:	f002 f95f 	bl	800c6c4 <_free_r>
 800a406:	2300      	movs	r3, #0
 800a408:	6363      	str	r3, [r4, #52]	; 0x34
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	2300      	movs	r3, #0
 800a414:	6063      	str	r3, [r4, #4]
 800a416:	6923      	ldr	r3, [r4, #16]
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f043 0308 	orr.w	r3, r3, #8
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	6923      	ldr	r3, [r4, #16]
 800a424:	b94b      	cbnz	r3, 800a43a <__swsetup_r+0x9a>
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a42c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a430:	d003      	beq.n	800a43a <__swsetup_r+0x9a>
 800a432:	4621      	mov	r1, r4
 800a434:	4630      	mov	r0, r6
 800a436:	f001 fc13 	bl	800bc60 <__smakebuf_r>
 800a43a:	89a0      	ldrh	r0, [r4, #12]
 800a43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a440:	f010 0301 	ands.w	r3, r0, #1
 800a444:	d00a      	beq.n	800a45c <__swsetup_r+0xbc>
 800a446:	2300      	movs	r3, #0
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	6963      	ldr	r3, [r4, #20]
 800a44c:	425b      	negs	r3, r3
 800a44e:	61a3      	str	r3, [r4, #24]
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	b943      	cbnz	r3, 800a466 <__swsetup_r+0xc6>
 800a454:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a458:	d1ba      	bne.n	800a3d0 <__swsetup_r+0x30>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	0781      	lsls	r1, r0, #30
 800a45e:	bf58      	it	pl
 800a460:	6963      	ldrpl	r3, [r4, #20]
 800a462:	60a3      	str	r3, [r4, #8]
 800a464:	e7f4      	b.n	800a450 <__swsetup_r+0xb0>
 800a466:	2000      	movs	r0, #0
 800a468:	e7f7      	b.n	800a45a <__swsetup_r+0xba>
 800a46a:	bf00      	nop
 800a46c:	2000000c 	.word	0x2000000c
 800a470:	0800dcb4 	.word	0x0800dcb4
 800a474:	0800dcd4 	.word	0x0800dcd4
 800a478:	0800dc94 	.word	0x0800dc94

0800a47c <_close_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	; (800a498 <_close_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f7 fa9f 	bl	80019ca <_close>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_close_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_close_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20000854 	.word	0x20000854

0800a49c <quorem>:
 800a49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	6903      	ldr	r3, [r0, #16]
 800a4a2:	690c      	ldr	r4, [r1, #16]
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	f2c0 8081 	blt.w	800a5ae <quorem+0x112>
 800a4ac:	3c01      	subs	r4, #1
 800a4ae:	f101 0814 	add.w	r8, r1, #20
 800a4b2:	f100 0514 	add.w	r5, r0, #20
 800a4b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4d4:	d331      	bcc.n	800a53a <quorem+0x9e>
 800a4d6:	f04f 0e00 	mov.w	lr, #0
 800a4da:	4640      	mov	r0, r8
 800a4dc:	46ac      	mov	ip, r5
 800a4de:	46f2      	mov	sl, lr
 800a4e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4e4:	b293      	uxth	r3, r2
 800a4e6:	fb06 e303 	mla	r3, r6, r3, lr
 800a4ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4f4:	f8dc a000 	ldr.w	sl, [ip]
 800a4f8:	0c12      	lsrs	r2, r2, #16
 800a4fa:	fa13 f38a 	uxtah	r3, r3, sl
 800a4fe:	fb06 e202 	mla	r2, r6, r2, lr
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	9b00      	ldr	r3, [sp, #0]
 800a506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a50a:	b292      	uxth	r2, r2
 800a50c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a514:	f8bd 3000 	ldrh.w	r3, [sp]
 800a518:	4581      	cmp	r9, r0
 800a51a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a51e:	f84c 3b04 	str.w	r3, [ip], #4
 800a522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a526:	d2db      	bcs.n	800a4e0 <quorem+0x44>
 800a528:	f855 300b 	ldr.w	r3, [r5, fp]
 800a52c:	b92b      	cbnz	r3, 800a53a <quorem+0x9e>
 800a52e:	9b01      	ldr	r3, [sp, #4]
 800a530:	3b04      	subs	r3, #4
 800a532:	429d      	cmp	r5, r3
 800a534:	461a      	mov	r2, r3
 800a536:	d32e      	bcc.n	800a596 <quorem+0xfa>
 800a538:	613c      	str	r4, [r7, #16]
 800a53a:	4638      	mov	r0, r7
 800a53c:	f001 feb6 	bl	800c2ac <__mcmp>
 800a540:	2800      	cmp	r0, #0
 800a542:	db24      	blt.n	800a58e <quorem+0xf2>
 800a544:	3601      	adds	r6, #1
 800a546:	4628      	mov	r0, r5
 800a548:	f04f 0c00 	mov.w	ip, #0
 800a54c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a550:	f8d0 e000 	ldr.w	lr, [r0]
 800a554:	b293      	uxth	r3, r2
 800a556:	ebac 0303 	sub.w	r3, ip, r3
 800a55a:	0c12      	lsrs	r2, r2, #16
 800a55c:	fa13 f38e 	uxtah	r3, r3, lr
 800a560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a568:	b29b      	uxth	r3, r3
 800a56a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a56e:	45c1      	cmp	r9, r8
 800a570:	f840 3b04 	str.w	r3, [r0], #4
 800a574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a578:	d2e8      	bcs.n	800a54c <quorem+0xb0>
 800a57a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a57e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a582:	b922      	cbnz	r2, 800a58e <quorem+0xf2>
 800a584:	3b04      	subs	r3, #4
 800a586:	429d      	cmp	r5, r3
 800a588:	461a      	mov	r2, r3
 800a58a:	d30a      	bcc.n	800a5a2 <quorem+0x106>
 800a58c:	613c      	str	r4, [r7, #16]
 800a58e:	4630      	mov	r0, r6
 800a590:	b003      	add	sp, #12
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	3b04      	subs	r3, #4
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	d1cc      	bne.n	800a538 <quorem+0x9c>
 800a59e:	3c01      	subs	r4, #1
 800a5a0:	e7c7      	b.n	800a532 <quorem+0x96>
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	3b04      	subs	r3, #4
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d1f0      	bne.n	800a58c <quorem+0xf0>
 800a5aa:	3c01      	subs	r4, #1
 800a5ac:	e7eb      	b.n	800a586 <quorem+0xea>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e7ee      	b.n	800a590 <quorem+0xf4>
 800a5b2:	0000      	movs	r0, r0
 800a5b4:	0000      	movs	r0, r0
	...

0800a5b8 <_dtoa_r>:
 800a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	ed2d 8b04 	vpush	{d8-d9}
 800a5c0:	ec57 6b10 	vmov	r6, r7, d0
 800a5c4:	b093      	sub	sp, #76	; 0x4c
 800a5c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a5c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5cc:	9106      	str	r1, [sp, #24]
 800a5ce:	ee10 aa10 	vmov	sl, s0
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5d8:	46bb      	mov	fp, r7
 800a5da:	b975      	cbnz	r5, 800a5fa <_dtoa_r+0x42>
 800a5dc:	2010      	movs	r0, #16
 800a5de:	f001 fb7f 	bl	800bce0 <malloc>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5e6:	b920      	cbnz	r0, 800a5f2 <_dtoa_r+0x3a>
 800a5e8:	4ba7      	ldr	r3, [pc, #668]	; (800a888 <_dtoa_r+0x2d0>)
 800a5ea:	21ea      	movs	r1, #234	; 0xea
 800a5ec:	48a7      	ldr	r0, [pc, #668]	; (800a88c <_dtoa_r+0x2d4>)
 800a5ee:	f003 f857 	bl	800d6a0 <__assert_func>
 800a5f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5f6:	6005      	str	r5, [r0, #0]
 800a5f8:	60c5      	str	r5, [r0, #12]
 800a5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5fc:	6819      	ldr	r1, [r3, #0]
 800a5fe:	b151      	cbz	r1, 800a616 <_dtoa_r+0x5e>
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	604a      	str	r2, [r1, #4]
 800a604:	2301      	movs	r3, #1
 800a606:	4093      	lsls	r3, r2
 800a608:	608b      	str	r3, [r1, #8]
 800a60a:	4620      	mov	r0, r4
 800a60c:	f001 fbc2 	bl	800bd94 <_Bfree>
 800a610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]
 800a616:	1e3b      	subs	r3, r7, #0
 800a618:	bfaa      	itet	ge
 800a61a:	2300      	movge	r3, #0
 800a61c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a620:	f8c8 3000 	strge.w	r3, [r8]
 800a624:	4b9a      	ldr	r3, [pc, #616]	; (800a890 <_dtoa_r+0x2d8>)
 800a626:	bfbc      	itt	lt
 800a628:	2201      	movlt	r2, #1
 800a62a:	f8c8 2000 	strlt.w	r2, [r8]
 800a62e:	ea33 030b 	bics.w	r3, r3, fp
 800a632:	d11b      	bne.n	800a66c <_dtoa_r+0xb4>
 800a634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a636:	f242 730f 	movw	r3, #9999	; 0x270f
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a640:	4333      	orrs	r3, r6
 800a642:	f000 8592 	beq.w	800b16a <_dtoa_r+0xbb2>
 800a646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a648:	b963      	cbnz	r3, 800a664 <_dtoa_r+0xac>
 800a64a:	4b92      	ldr	r3, [pc, #584]	; (800a894 <_dtoa_r+0x2dc>)
 800a64c:	e022      	b.n	800a694 <_dtoa_r+0xdc>
 800a64e:	4b92      	ldr	r3, [pc, #584]	; (800a898 <_dtoa_r+0x2e0>)
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	3308      	adds	r3, #8
 800a654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	9801      	ldr	r0, [sp, #4]
 800a65a:	b013      	add	sp, #76	; 0x4c
 800a65c:	ecbd 8b04 	vpop	{d8-d9}
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a664:	4b8b      	ldr	r3, [pc, #556]	; (800a894 <_dtoa_r+0x2dc>)
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	3303      	adds	r3, #3
 800a66a:	e7f3      	b.n	800a654 <_dtoa_r+0x9c>
 800a66c:	2200      	movs	r2, #0
 800a66e:	2300      	movs	r3, #0
 800a670:	4650      	mov	r0, sl
 800a672:	4659      	mov	r1, fp
 800a674:	f7f6 fa38 	bl	8000ae8 <__aeabi_dcmpeq>
 800a678:	ec4b ab19 	vmov	d9, sl, fp
 800a67c:	4680      	mov	r8, r0
 800a67e:	b158      	cbz	r0, 800a698 <_dtoa_r+0xe0>
 800a680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a682:	2301      	movs	r3, #1
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 856b 	beq.w	800b164 <_dtoa_r+0xbac>
 800a68e:	4883      	ldr	r0, [pc, #524]	; (800a89c <_dtoa_r+0x2e4>)
 800a690:	6018      	str	r0, [r3, #0]
 800a692:	1e43      	subs	r3, r0, #1
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	e7df      	b.n	800a658 <_dtoa_r+0xa0>
 800a698:	ec4b ab10 	vmov	d0, sl, fp
 800a69c:	aa10      	add	r2, sp, #64	; 0x40
 800a69e:	a911      	add	r1, sp, #68	; 0x44
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f001 ff25 	bl	800c4f0 <__d2b>
 800a6a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a6aa:	ee08 0a10 	vmov	s16, r0
 800a6ae:	2d00      	cmp	r5, #0
 800a6b0:	f000 8084 	beq.w	800a7bc <_dtoa_r+0x204>
 800a6b4:	ee19 3a90 	vmov	r3, s19
 800a6b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a6c0:	4656      	mov	r6, sl
 800a6c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a6c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a6ce:	4b74      	ldr	r3, [pc, #464]	; (800a8a0 <_dtoa_r+0x2e8>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	f7f5 fde7 	bl	80002a8 <__aeabi_dsub>
 800a6da:	a365      	add	r3, pc, #404	; (adr r3, 800a870 <_dtoa_r+0x2b8>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 ff9a 	bl	8000618 <__aeabi_dmul>
 800a6e4:	a364      	add	r3, pc, #400	; (adr r3, 800a878 <_dtoa_r+0x2c0>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f7f5 fddf 	bl	80002ac <__adddf3>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	f7f5 ff26 	bl	8000544 <__aeabi_i2d>
 800a6f8:	a361      	add	r3, pc, #388	; (adr r3, 800a880 <_dtoa_r+0x2c8>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f7f5 ff8b 	bl	8000618 <__aeabi_dmul>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f5 fdcf 	bl	80002ac <__adddf3>
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	f7f6 fa31 	bl	8000b78 <__aeabi_d2iz>
 800a716:	2200      	movs	r2, #0
 800a718:	9000      	str	r0, [sp, #0]
 800a71a:	2300      	movs	r3, #0
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f6 f9ec 	bl	8000afc <__aeabi_dcmplt>
 800a724:	b150      	cbz	r0, 800a73c <_dtoa_r+0x184>
 800a726:	9800      	ldr	r0, [sp, #0]
 800a728:	f7f5 ff0c 	bl	8000544 <__aeabi_i2d>
 800a72c:	4632      	mov	r2, r6
 800a72e:	463b      	mov	r3, r7
 800a730:	f7f6 f9da 	bl	8000ae8 <__aeabi_dcmpeq>
 800a734:	b910      	cbnz	r0, 800a73c <_dtoa_r+0x184>
 800a736:	9b00      	ldr	r3, [sp, #0]
 800a738:	3b01      	subs	r3, #1
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	9b00      	ldr	r3, [sp, #0]
 800a73e:	2b16      	cmp	r3, #22
 800a740:	d85a      	bhi.n	800a7f8 <_dtoa_r+0x240>
 800a742:	9a00      	ldr	r2, [sp, #0]
 800a744:	4b57      	ldr	r3, [pc, #348]	; (800a8a4 <_dtoa_r+0x2ec>)
 800a746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	ec51 0b19 	vmov	r0, r1, d9
 800a752:	f7f6 f9d3 	bl	8000afc <__aeabi_dcmplt>
 800a756:	2800      	cmp	r0, #0
 800a758:	d050      	beq.n	800a7fc <_dtoa_r+0x244>
 800a75a:	9b00      	ldr	r3, [sp, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	2300      	movs	r3, #0
 800a762:	930b      	str	r3, [sp, #44]	; 0x2c
 800a764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a766:	1b5d      	subs	r5, r3, r5
 800a768:	1e6b      	subs	r3, r5, #1
 800a76a:	9305      	str	r3, [sp, #20]
 800a76c:	bf45      	ittet	mi
 800a76e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a772:	9304      	strmi	r3, [sp, #16]
 800a774:	2300      	movpl	r3, #0
 800a776:	2300      	movmi	r3, #0
 800a778:	bf4c      	ite	mi
 800a77a:	9305      	strmi	r3, [sp, #20]
 800a77c:	9304      	strpl	r3, [sp, #16]
 800a77e:	9b00      	ldr	r3, [sp, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	db3d      	blt.n	800a800 <_dtoa_r+0x248>
 800a784:	9b05      	ldr	r3, [sp, #20]
 800a786:	9a00      	ldr	r2, [sp, #0]
 800a788:	920a      	str	r2, [sp, #40]	; 0x28
 800a78a:	4413      	add	r3, r2
 800a78c:	9305      	str	r3, [sp, #20]
 800a78e:	2300      	movs	r3, #0
 800a790:	9307      	str	r3, [sp, #28]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	2b09      	cmp	r3, #9
 800a796:	f200 8089 	bhi.w	800a8ac <_dtoa_r+0x2f4>
 800a79a:	2b05      	cmp	r3, #5
 800a79c:	bfc4      	itt	gt
 800a79e:	3b04      	subgt	r3, #4
 800a7a0:	9306      	strgt	r3, [sp, #24]
 800a7a2:	9b06      	ldr	r3, [sp, #24]
 800a7a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a7a8:	bfcc      	ite	gt
 800a7aa:	2500      	movgt	r5, #0
 800a7ac:	2501      	movle	r5, #1
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	f200 8087 	bhi.w	800a8c2 <_dtoa_r+0x30a>
 800a7b4:	e8df f003 	tbb	[pc, r3]
 800a7b8:	59383a2d 	.word	0x59383a2d
 800a7bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7c0:	441d      	add	r5, r3
 800a7c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	bfc1      	itttt	gt
 800a7ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7da:	bfda      	itte	le
 800a7dc:	f1c3 0320 	rsble	r3, r3, #32
 800a7e0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7e4:	4318      	orrgt	r0, r3
 800a7e6:	f7f5 fe9d 	bl	8000524 <__aeabi_ui2d>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7f2:	3d01      	subs	r5, #1
 800a7f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7f6:	e76a      	b.n	800a6ce <_dtoa_r+0x116>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e7b2      	b.n	800a762 <_dtoa_r+0x1aa>
 800a7fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7fe:	e7b1      	b.n	800a764 <_dtoa_r+0x1ac>
 800a800:	9b04      	ldr	r3, [sp, #16]
 800a802:	9a00      	ldr	r2, [sp, #0]
 800a804:	1a9b      	subs	r3, r3, r2
 800a806:	9304      	str	r3, [sp, #16]
 800a808:	4253      	negs	r3, r2
 800a80a:	9307      	str	r3, [sp, #28]
 800a80c:	2300      	movs	r3, #0
 800a80e:	930a      	str	r3, [sp, #40]	; 0x28
 800a810:	e7bf      	b.n	800a792 <_dtoa_r+0x1da>
 800a812:	2300      	movs	r3, #0
 800a814:	9308      	str	r3, [sp, #32]
 800a816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dc55      	bgt.n	800a8c8 <_dtoa_r+0x310>
 800a81c:	2301      	movs	r3, #1
 800a81e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a822:	461a      	mov	r2, r3
 800a824:	9209      	str	r2, [sp, #36]	; 0x24
 800a826:	e00c      	b.n	800a842 <_dtoa_r+0x28a>
 800a828:	2301      	movs	r3, #1
 800a82a:	e7f3      	b.n	800a814 <_dtoa_r+0x25c>
 800a82c:	2300      	movs	r3, #0
 800a82e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a830:	9308      	str	r3, [sp, #32]
 800a832:	9b00      	ldr	r3, [sp, #0]
 800a834:	4413      	add	r3, r2
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	3301      	adds	r3, #1
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	bfb8      	it	lt
 800a840:	2301      	movlt	r3, #1
 800a842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a844:	2200      	movs	r2, #0
 800a846:	6042      	str	r2, [r0, #4]
 800a848:	2204      	movs	r2, #4
 800a84a:	f102 0614 	add.w	r6, r2, #20
 800a84e:	429e      	cmp	r6, r3
 800a850:	6841      	ldr	r1, [r0, #4]
 800a852:	d93d      	bls.n	800a8d0 <_dtoa_r+0x318>
 800a854:	4620      	mov	r0, r4
 800a856:	f001 fa5d 	bl	800bd14 <_Balloc>
 800a85a:	9001      	str	r0, [sp, #4]
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d13b      	bne.n	800a8d8 <_dtoa_r+0x320>
 800a860:	4b11      	ldr	r3, [pc, #68]	; (800a8a8 <_dtoa_r+0x2f0>)
 800a862:	4602      	mov	r2, r0
 800a864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a868:	e6c0      	b.n	800a5ec <_dtoa_r+0x34>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e7df      	b.n	800a82e <_dtoa_r+0x276>
 800a86e:	bf00      	nop
 800a870:	636f4361 	.word	0x636f4361
 800a874:	3fd287a7 	.word	0x3fd287a7
 800a878:	8b60c8b3 	.word	0x8b60c8b3
 800a87c:	3fc68a28 	.word	0x3fc68a28
 800a880:	509f79fb 	.word	0x509f79fb
 800a884:	3fd34413 	.word	0x3fd34413
 800a888:	0800dc0e 	.word	0x0800dc0e
 800a88c:	0800dc25 	.word	0x0800dc25
 800a890:	7ff00000 	.word	0x7ff00000
 800a894:	0800dc0a 	.word	0x0800dc0a
 800a898:	0800dc01 	.word	0x0800dc01
 800a89c:	0800dee2 	.word	0x0800dee2
 800a8a0:	3ff80000 	.word	0x3ff80000
 800a8a4:	0800ddf8 	.word	0x0800ddf8
 800a8a8:	0800dc80 	.word	0x0800dc80
 800a8ac:	2501      	movs	r5, #1
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9306      	str	r3, [sp, #24]
 800a8b2:	9508      	str	r5, [sp, #32]
 800a8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2312      	movs	r3, #18
 800a8c0:	e7b0      	b.n	800a824 <_dtoa_r+0x26c>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	9308      	str	r3, [sp, #32]
 800a8c6:	e7f5      	b.n	800a8b4 <_dtoa_r+0x2fc>
 800a8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8ce:	e7b8      	b.n	800a842 <_dtoa_r+0x28a>
 800a8d0:	3101      	adds	r1, #1
 800a8d2:	6041      	str	r1, [r0, #4]
 800a8d4:	0052      	lsls	r2, r2, #1
 800a8d6:	e7b8      	b.n	800a84a <_dtoa_r+0x292>
 800a8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8da:	9a01      	ldr	r2, [sp, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	9b03      	ldr	r3, [sp, #12]
 800a8e0:	2b0e      	cmp	r3, #14
 800a8e2:	f200 809d 	bhi.w	800aa20 <_dtoa_r+0x468>
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	f000 809a 	beq.w	800aa20 <_dtoa_r+0x468>
 800a8ec:	9b00      	ldr	r3, [sp, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dd32      	ble.n	800a958 <_dtoa_r+0x3a0>
 800a8f2:	4ab7      	ldr	r2, [pc, #732]	; (800abd0 <_dtoa_r+0x618>)
 800a8f4:	f003 030f 	and.w	r3, r3, #15
 800a8f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a900:	9b00      	ldr	r3, [sp, #0]
 800a902:	05d8      	lsls	r0, r3, #23
 800a904:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a908:	d516      	bpl.n	800a938 <_dtoa_r+0x380>
 800a90a:	4bb2      	ldr	r3, [pc, #712]	; (800abd4 <_dtoa_r+0x61c>)
 800a90c:	ec51 0b19 	vmov	r0, r1, d9
 800a910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a914:	f7f5 ffaa 	bl	800086c <__aeabi_ddiv>
 800a918:	f007 070f 	and.w	r7, r7, #15
 800a91c:	4682      	mov	sl, r0
 800a91e:	468b      	mov	fp, r1
 800a920:	2503      	movs	r5, #3
 800a922:	4eac      	ldr	r6, [pc, #688]	; (800abd4 <_dtoa_r+0x61c>)
 800a924:	b957      	cbnz	r7, 800a93c <_dtoa_r+0x384>
 800a926:	4642      	mov	r2, r8
 800a928:	464b      	mov	r3, r9
 800a92a:	4650      	mov	r0, sl
 800a92c:	4659      	mov	r1, fp
 800a92e:	f7f5 ff9d 	bl	800086c <__aeabi_ddiv>
 800a932:	4682      	mov	sl, r0
 800a934:	468b      	mov	fp, r1
 800a936:	e028      	b.n	800a98a <_dtoa_r+0x3d2>
 800a938:	2502      	movs	r5, #2
 800a93a:	e7f2      	b.n	800a922 <_dtoa_r+0x36a>
 800a93c:	07f9      	lsls	r1, r7, #31
 800a93e:	d508      	bpl.n	800a952 <_dtoa_r+0x39a>
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a948:	f7f5 fe66 	bl	8000618 <__aeabi_dmul>
 800a94c:	3501      	adds	r5, #1
 800a94e:	4680      	mov	r8, r0
 800a950:	4689      	mov	r9, r1
 800a952:	107f      	asrs	r7, r7, #1
 800a954:	3608      	adds	r6, #8
 800a956:	e7e5      	b.n	800a924 <_dtoa_r+0x36c>
 800a958:	f000 809b 	beq.w	800aa92 <_dtoa_r+0x4da>
 800a95c:	9b00      	ldr	r3, [sp, #0]
 800a95e:	4f9d      	ldr	r7, [pc, #628]	; (800abd4 <_dtoa_r+0x61c>)
 800a960:	425e      	negs	r6, r3
 800a962:	4b9b      	ldr	r3, [pc, #620]	; (800abd0 <_dtoa_r+0x618>)
 800a964:	f006 020f 	and.w	r2, r6, #15
 800a968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	ec51 0b19 	vmov	r0, r1, d9
 800a974:	f7f5 fe50 	bl	8000618 <__aeabi_dmul>
 800a978:	1136      	asrs	r6, r6, #4
 800a97a:	4682      	mov	sl, r0
 800a97c:	468b      	mov	fp, r1
 800a97e:	2300      	movs	r3, #0
 800a980:	2502      	movs	r5, #2
 800a982:	2e00      	cmp	r6, #0
 800a984:	d17a      	bne.n	800aa7c <_dtoa_r+0x4c4>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1d3      	bne.n	800a932 <_dtoa_r+0x37a>
 800a98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8082 	beq.w	800aa96 <_dtoa_r+0x4de>
 800a992:	4b91      	ldr	r3, [pc, #580]	; (800abd8 <_dtoa_r+0x620>)
 800a994:	2200      	movs	r2, #0
 800a996:	4650      	mov	r0, sl
 800a998:	4659      	mov	r1, fp
 800a99a:	f7f6 f8af 	bl	8000afc <__aeabi_dcmplt>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d079      	beq.n	800aa96 <_dtoa_r+0x4de>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d076      	beq.n	800aa96 <_dtoa_r+0x4de>
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dd36      	ble.n	800aa1c <_dtoa_r+0x464>
 800a9ae:	9b00      	ldr	r3, [sp, #0]
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	4659      	mov	r1, fp
 800a9b4:	1e5f      	subs	r7, r3, #1
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4b88      	ldr	r3, [pc, #544]	; (800abdc <_dtoa_r+0x624>)
 800a9ba:	f7f5 fe2d 	bl	8000618 <__aeabi_dmul>
 800a9be:	9e02      	ldr	r6, [sp, #8]
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	468b      	mov	fp, r1
 800a9c4:	3501      	adds	r5, #1
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f7f5 fdbc 	bl	8000544 <__aeabi_i2d>
 800a9cc:	4652      	mov	r2, sl
 800a9ce:	465b      	mov	r3, fp
 800a9d0:	f7f5 fe22 	bl	8000618 <__aeabi_dmul>
 800a9d4:	4b82      	ldr	r3, [pc, #520]	; (800abe0 <_dtoa_r+0x628>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f7f5 fc68 	bl	80002ac <__adddf3>
 800a9dc:	46d0      	mov	r8, sl
 800a9de:	46d9      	mov	r9, fp
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	d158      	bne.n	800aa9c <_dtoa_r+0x4e4>
 800a9ea:	4b7e      	ldr	r3, [pc, #504]	; (800abe4 <_dtoa_r+0x62c>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	f7f5 fc59 	bl	80002a8 <__aeabi_dsub>
 800a9f6:	4652      	mov	r2, sl
 800a9f8:	465b      	mov	r3, fp
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	4689      	mov	r9, r1
 800a9fe:	f7f6 f89b 	bl	8000b38 <__aeabi_dcmpgt>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	f040 8295 	bne.w	800af32 <_dtoa_r+0x97a>
 800aa08:	4652      	mov	r2, sl
 800aa0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f6 f873 	bl	8000afc <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	f040 8289 	bne.w	800af2e <_dtoa_r+0x976>
 800aa1c:	ec5b ab19 	vmov	sl, fp, d9
 800aa20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f2c0 8148 	blt.w	800acb8 <_dtoa_r+0x700>
 800aa28:	9a00      	ldr	r2, [sp, #0]
 800aa2a:	2a0e      	cmp	r2, #14
 800aa2c:	f300 8144 	bgt.w	800acb8 <_dtoa_r+0x700>
 800aa30:	4b67      	ldr	r3, [pc, #412]	; (800abd0 <_dtoa_r+0x618>)
 800aa32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa36:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f280 80d5 	bge.w	800abec <_dtoa_r+0x634>
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f300 80d1 	bgt.w	800abec <_dtoa_r+0x634>
 800aa4a:	f040 826f 	bne.w	800af2c <_dtoa_r+0x974>
 800aa4e:	4b65      	ldr	r3, [pc, #404]	; (800abe4 <_dtoa_r+0x62c>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	4640      	mov	r0, r8
 800aa54:	4649      	mov	r1, r9
 800aa56:	f7f5 fddf 	bl	8000618 <__aeabi_dmul>
 800aa5a:	4652      	mov	r2, sl
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	f7f6 f861 	bl	8000b24 <__aeabi_dcmpge>
 800aa62:	9e03      	ldr	r6, [sp, #12]
 800aa64:	4637      	mov	r7, r6
 800aa66:	2800      	cmp	r0, #0
 800aa68:	f040 8245 	bne.w	800aef6 <_dtoa_r+0x93e>
 800aa6c:	9d01      	ldr	r5, [sp, #4]
 800aa6e:	2331      	movs	r3, #49	; 0x31
 800aa70:	f805 3b01 	strb.w	r3, [r5], #1
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	e240      	b.n	800aefe <_dtoa_r+0x946>
 800aa7c:	07f2      	lsls	r2, r6, #31
 800aa7e:	d505      	bpl.n	800aa8c <_dtoa_r+0x4d4>
 800aa80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa84:	f7f5 fdc8 	bl	8000618 <__aeabi_dmul>
 800aa88:	3501      	adds	r5, #1
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	1076      	asrs	r6, r6, #1
 800aa8e:	3708      	adds	r7, #8
 800aa90:	e777      	b.n	800a982 <_dtoa_r+0x3ca>
 800aa92:	2502      	movs	r5, #2
 800aa94:	e779      	b.n	800a98a <_dtoa_r+0x3d2>
 800aa96:	9f00      	ldr	r7, [sp, #0]
 800aa98:	9e03      	ldr	r6, [sp, #12]
 800aa9a:	e794      	b.n	800a9c6 <_dtoa_r+0x40e>
 800aa9c:	9901      	ldr	r1, [sp, #4]
 800aa9e:	4b4c      	ldr	r3, [pc, #304]	; (800abd0 <_dtoa_r+0x618>)
 800aaa0:	4431      	add	r1, r6
 800aaa2:	910d      	str	r1, [sp, #52]	; 0x34
 800aaa4:	9908      	ldr	r1, [sp, #32]
 800aaa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aaaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d043      	beq.n	800ab3a <_dtoa_r+0x582>
 800aab2:	494d      	ldr	r1, [pc, #308]	; (800abe8 <_dtoa_r+0x630>)
 800aab4:	2000      	movs	r0, #0
 800aab6:	f7f5 fed9 	bl	800086c <__aeabi_ddiv>
 800aaba:	4652      	mov	r2, sl
 800aabc:	465b      	mov	r3, fp
 800aabe:	f7f5 fbf3 	bl	80002a8 <__aeabi_dsub>
 800aac2:	9d01      	ldr	r5, [sp, #4]
 800aac4:	4682      	mov	sl, r0
 800aac6:	468b      	mov	fp, r1
 800aac8:	4649      	mov	r1, r9
 800aaca:	4640      	mov	r0, r8
 800aacc:	f7f6 f854 	bl	8000b78 <__aeabi_d2iz>
 800aad0:	4606      	mov	r6, r0
 800aad2:	f7f5 fd37 	bl	8000544 <__aeabi_i2d>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4640      	mov	r0, r8
 800aadc:	4649      	mov	r1, r9
 800aade:	f7f5 fbe3 	bl	80002a8 <__aeabi_dsub>
 800aae2:	3630      	adds	r6, #48	; 0x30
 800aae4:	f805 6b01 	strb.w	r6, [r5], #1
 800aae8:	4652      	mov	r2, sl
 800aaea:	465b      	mov	r3, fp
 800aaec:	4680      	mov	r8, r0
 800aaee:	4689      	mov	r9, r1
 800aaf0:	f7f6 f804 	bl	8000afc <__aeabi_dcmplt>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d163      	bne.n	800abc0 <_dtoa_r+0x608>
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	4936      	ldr	r1, [pc, #216]	; (800abd8 <_dtoa_r+0x620>)
 800aafe:	2000      	movs	r0, #0
 800ab00:	f7f5 fbd2 	bl	80002a8 <__aeabi_dsub>
 800ab04:	4652      	mov	r2, sl
 800ab06:	465b      	mov	r3, fp
 800ab08:	f7f5 fff8 	bl	8000afc <__aeabi_dcmplt>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f040 80b5 	bne.w	800ac7c <_dtoa_r+0x6c4>
 800ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab14:	429d      	cmp	r5, r3
 800ab16:	d081      	beq.n	800aa1c <_dtoa_r+0x464>
 800ab18:	4b30      	ldr	r3, [pc, #192]	; (800abdc <_dtoa_r+0x624>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4650      	mov	r0, sl
 800ab1e:	4659      	mov	r1, fp
 800ab20:	f7f5 fd7a 	bl	8000618 <__aeabi_dmul>
 800ab24:	4b2d      	ldr	r3, [pc, #180]	; (800abdc <_dtoa_r+0x624>)
 800ab26:	4682      	mov	sl, r0
 800ab28:	468b      	mov	fp, r1
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f7f5 fd72 	bl	8000618 <__aeabi_dmul>
 800ab34:	4680      	mov	r8, r0
 800ab36:	4689      	mov	r9, r1
 800ab38:	e7c6      	b.n	800aac8 <_dtoa_r+0x510>
 800ab3a:	4650      	mov	r0, sl
 800ab3c:	4659      	mov	r1, fp
 800ab3e:	f7f5 fd6b 	bl	8000618 <__aeabi_dmul>
 800ab42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab44:	9d01      	ldr	r5, [sp, #4]
 800ab46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab48:	4682      	mov	sl, r0
 800ab4a:	468b      	mov	fp, r1
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	4640      	mov	r0, r8
 800ab50:	f7f6 f812 	bl	8000b78 <__aeabi_d2iz>
 800ab54:	4606      	mov	r6, r0
 800ab56:	f7f5 fcf5 	bl	8000544 <__aeabi_i2d>
 800ab5a:	3630      	adds	r6, #48	; 0x30
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	4640      	mov	r0, r8
 800ab62:	4649      	mov	r1, r9
 800ab64:	f7f5 fba0 	bl	80002a8 <__aeabi_dsub>
 800ab68:	f805 6b01 	strb.w	r6, [r5], #1
 800ab6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab6e:	429d      	cmp	r5, r3
 800ab70:	4680      	mov	r8, r0
 800ab72:	4689      	mov	r9, r1
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	d124      	bne.n	800abc4 <_dtoa_r+0x60c>
 800ab7a:	4b1b      	ldr	r3, [pc, #108]	; (800abe8 <_dtoa_r+0x630>)
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	4659      	mov	r1, fp
 800ab80:	f7f5 fb94 	bl	80002ac <__adddf3>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	f7f5 ffd4 	bl	8000b38 <__aeabi_dcmpgt>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d173      	bne.n	800ac7c <_dtoa_r+0x6c4>
 800ab94:	4652      	mov	r2, sl
 800ab96:	465b      	mov	r3, fp
 800ab98:	4913      	ldr	r1, [pc, #76]	; (800abe8 <_dtoa_r+0x630>)
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f7f5 fb84 	bl	80002a8 <__aeabi_dsub>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4640      	mov	r0, r8
 800aba6:	4649      	mov	r1, r9
 800aba8:	f7f5 ffa8 	bl	8000afc <__aeabi_dcmplt>
 800abac:	2800      	cmp	r0, #0
 800abae:	f43f af35 	beq.w	800aa1c <_dtoa_r+0x464>
 800abb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abb4:	1e6b      	subs	r3, r5, #1
 800abb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abbc:	2b30      	cmp	r3, #48	; 0x30
 800abbe:	d0f8      	beq.n	800abb2 <_dtoa_r+0x5fa>
 800abc0:	9700      	str	r7, [sp, #0]
 800abc2:	e049      	b.n	800ac58 <_dtoa_r+0x6a0>
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <_dtoa_r+0x624>)
 800abc6:	f7f5 fd27 	bl	8000618 <__aeabi_dmul>
 800abca:	4680      	mov	r8, r0
 800abcc:	4689      	mov	r9, r1
 800abce:	e7bd      	b.n	800ab4c <_dtoa_r+0x594>
 800abd0:	0800ddf8 	.word	0x0800ddf8
 800abd4:	0800ddd0 	.word	0x0800ddd0
 800abd8:	3ff00000 	.word	0x3ff00000
 800abdc:	40240000 	.word	0x40240000
 800abe0:	401c0000 	.word	0x401c0000
 800abe4:	40140000 	.word	0x40140000
 800abe8:	3fe00000 	.word	0x3fe00000
 800abec:	9d01      	ldr	r5, [sp, #4]
 800abee:	4656      	mov	r6, sl
 800abf0:	465f      	mov	r7, fp
 800abf2:	4642      	mov	r2, r8
 800abf4:	464b      	mov	r3, r9
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	f7f5 fe37 	bl	800086c <__aeabi_ddiv>
 800abfe:	f7f5 ffbb 	bl	8000b78 <__aeabi_d2iz>
 800ac02:	4682      	mov	sl, r0
 800ac04:	f7f5 fc9e 	bl	8000544 <__aeabi_i2d>
 800ac08:	4642      	mov	r2, r8
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	f7f5 fd04 	bl	8000618 <__aeabi_dmul>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac1c:	f7f5 fb44 	bl	80002a8 <__aeabi_dsub>
 800ac20:	f805 6b01 	strb.w	r6, [r5], #1
 800ac24:	9e01      	ldr	r6, [sp, #4]
 800ac26:	9f03      	ldr	r7, [sp, #12]
 800ac28:	1bae      	subs	r6, r5, r6
 800ac2a:	42b7      	cmp	r7, r6
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	d135      	bne.n	800ac9e <_dtoa_r+0x6e6>
 800ac32:	f7f5 fb3b 	bl	80002ac <__adddf3>
 800ac36:	4642      	mov	r2, r8
 800ac38:	464b      	mov	r3, r9
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	f7f5 ff7b 	bl	8000b38 <__aeabi_dcmpgt>
 800ac42:	b9d0      	cbnz	r0, 800ac7a <_dtoa_r+0x6c2>
 800ac44:	4642      	mov	r2, r8
 800ac46:	464b      	mov	r3, r9
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 ff4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac50:	b110      	cbz	r0, 800ac58 <_dtoa_r+0x6a0>
 800ac52:	f01a 0f01 	tst.w	sl, #1
 800ac56:	d110      	bne.n	800ac7a <_dtoa_r+0x6c2>
 800ac58:	4620      	mov	r0, r4
 800ac5a:	ee18 1a10 	vmov	r1, s16
 800ac5e:	f001 f899 	bl	800bd94 <_Bfree>
 800ac62:	2300      	movs	r3, #0
 800ac64:	9800      	ldr	r0, [sp, #0]
 800ac66:	702b      	strb	r3, [r5, #0]
 800ac68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac6a:	3001      	adds	r0, #1
 800ac6c:	6018      	str	r0, [r3, #0]
 800ac6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f43f acf1 	beq.w	800a658 <_dtoa_r+0xa0>
 800ac76:	601d      	str	r5, [r3, #0]
 800ac78:	e4ee      	b.n	800a658 <_dtoa_r+0xa0>
 800ac7a:	9f00      	ldr	r7, [sp, #0]
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	461d      	mov	r5, r3
 800ac80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac84:	2a39      	cmp	r2, #57	; 0x39
 800ac86:	d106      	bne.n	800ac96 <_dtoa_r+0x6de>
 800ac88:	9a01      	ldr	r2, [sp, #4]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d1f7      	bne.n	800ac7e <_dtoa_r+0x6c6>
 800ac8e:	9901      	ldr	r1, [sp, #4]
 800ac90:	2230      	movs	r2, #48	; 0x30
 800ac92:	3701      	adds	r7, #1
 800ac94:	700a      	strb	r2, [r1, #0]
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	3201      	adds	r2, #1
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	e790      	b.n	800abc0 <_dtoa_r+0x608>
 800ac9e:	4ba6      	ldr	r3, [pc, #664]	; (800af38 <_dtoa_r+0x980>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	f7f5 fcb9 	bl	8000618 <__aeabi_dmul>
 800aca6:	2200      	movs	r2, #0
 800aca8:	2300      	movs	r3, #0
 800acaa:	4606      	mov	r6, r0
 800acac:	460f      	mov	r7, r1
 800acae:	f7f5 ff1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d09d      	beq.n	800abf2 <_dtoa_r+0x63a>
 800acb6:	e7cf      	b.n	800ac58 <_dtoa_r+0x6a0>
 800acb8:	9a08      	ldr	r2, [sp, #32]
 800acba:	2a00      	cmp	r2, #0
 800acbc:	f000 80d7 	beq.w	800ae6e <_dtoa_r+0x8b6>
 800acc0:	9a06      	ldr	r2, [sp, #24]
 800acc2:	2a01      	cmp	r2, #1
 800acc4:	f300 80ba 	bgt.w	800ae3c <_dtoa_r+0x884>
 800acc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acca:	2a00      	cmp	r2, #0
 800accc:	f000 80b2 	beq.w	800ae34 <_dtoa_r+0x87c>
 800acd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acd4:	9e07      	ldr	r6, [sp, #28]
 800acd6:	9d04      	ldr	r5, [sp, #16]
 800acd8:	9a04      	ldr	r2, [sp, #16]
 800acda:	441a      	add	r2, r3
 800acdc:	9204      	str	r2, [sp, #16]
 800acde:	9a05      	ldr	r2, [sp, #20]
 800ace0:	2101      	movs	r1, #1
 800ace2:	441a      	add	r2, r3
 800ace4:	4620      	mov	r0, r4
 800ace6:	9205      	str	r2, [sp, #20]
 800ace8:	f001 f956 	bl	800bf98 <__i2b>
 800acec:	4607      	mov	r7, r0
 800acee:	2d00      	cmp	r5, #0
 800acf0:	dd0c      	ble.n	800ad0c <_dtoa_r+0x754>
 800acf2:	9b05      	ldr	r3, [sp, #20]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd09      	ble.n	800ad0c <_dtoa_r+0x754>
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	9a04      	ldr	r2, [sp, #16]
 800acfc:	bfa8      	it	ge
 800acfe:	462b      	movge	r3, r5
 800ad00:	1ad2      	subs	r2, r2, r3
 800ad02:	9204      	str	r2, [sp, #16]
 800ad04:	9a05      	ldr	r2, [sp, #20]
 800ad06:	1aed      	subs	r5, r5, r3
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	9305      	str	r3, [sp, #20]
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	b31b      	cbz	r3, 800ad58 <_dtoa_r+0x7a0>
 800ad10:	9b08      	ldr	r3, [sp, #32]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 80af 	beq.w	800ae76 <_dtoa_r+0x8be>
 800ad18:	2e00      	cmp	r6, #0
 800ad1a:	dd13      	ble.n	800ad44 <_dtoa_r+0x78c>
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4620      	mov	r0, r4
 800ad22:	f001 f9f9 	bl	800c118 <__pow5mult>
 800ad26:	ee18 2a10 	vmov	r2, s16
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f001 f948 	bl	800bfc4 <__multiply>
 800ad34:	ee18 1a10 	vmov	r1, s16
 800ad38:	4680      	mov	r8, r0
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f001 f82a 	bl	800bd94 <_Bfree>
 800ad40:	ee08 8a10 	vmov	s16, r8
 800ad44:	9b07      	ldr	r3, [sp, #28]
 800ad46:	1b9a      	subs	r2, r3, r6
 800ad48:	d006      	beq.n	800ad58 <_dtoa_r+0x7a0>
 800ad4a:	ee18 1a10 	vmov	r1, s16
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f001 f9e2 	bl	800c118 <__pow5mult>
 800ad54:	ee08 0a10 	vmov	s16, r0
 800ad58:	2101      	movs	r1, #1
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f001 f91c 	bl	800bf98 <__i2b>
 800ad60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	4606      	mov	r6, r0
 800ad66:	f340 8088 	ble.w	800ae7a <_dtoa_r+0x8c2>
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f001 f9d2 	bl	800c118 <__pow5mult>
 800ad74:	9b06      	ldr	r3, [sp, #24]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	4606      	mov	r6, r0
 800ad7a:	f340 8081 	ble.w	800ae80 <_dtoa_r+0x8c8>
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	6933      	ldr	r3, [r6, #16]
 800ad84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad88:	6918      	ldr	r0, [r3, #16]
 800ad8a:	f001 f8b5 	bl	800bef8 <__hi0bits>
 800ad8e:	f1c0 0020 	rsb	r0, r0, #32
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	4418      	add	r0, r3
 800ad96:	f010 001f 	ands.w	r0, r0, #31
 800ad9a:	f000 8092 	beq.w	800aec2 <_dtoa_r+0x90a>
 800ad9e:	f1c0 0320 	rsb	r3, r0, #32
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	f340 808a 	ble.w	800aebc <_dtoa_r+0x904>
 800ada8:	f1c0 001c 	rsb	r0, r0, #28
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	4403      	add	r3, r0
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	9b05      	ldr	r3, [sp, #20]
 800adb4:	4403      	add	r3, r0
 800adb6:	4405      	add	r5, r0
 800adb8:	9305      	str	r3, [sp, #20]
 800adba:	9b04      	ldr	r3, [sp, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd07      	ble.n	800add0 <_dtoa_r+0x818>
 800adc0:	ee18 1a10 	vmov	r1, s16
 800adc4:	461a      	mov	r2, r3
 800adc6:	4620      	mov	r0, r4
 800adc8:	f001 fa00 	bl	800c1cc <__lshift>
 800adcc:	ee08 0a10 	vmov	s16, r0
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	2b00      	cmp	r3, #0
 800add4:	dd05      	ble.n	800ade2 <_dtoa_r+0x82a>
 800add6:	4631      	mov	r1, r6
 800add8:	461a      	mov	r2, r3
 800adda:	4620      	mov	r0, r4
 800addc:	f001 f9f6 	bl	800c1cc <__lshift>
 800ade0:	4606      	mov	r6, r0
 800ade2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d06e      	beq.n	800aec6 <_dtoa_r+0x90e>
 800ade8:	ee18 0a10 	vmov	r0, s16
 800adec:	4631      	mov	r1, r6
 800adee:	f001 fa5d 	bl	800c2ac <__mcmp>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	da67      	bge.n	800aec6 <_dtoa_r+0x90e>
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	ee18 1a10 	vmov	r1, s16
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	220a      	movs	r2, #10
 800ae02:	2300      	movs	r3, #0
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 ffe7 	bl	800bdd8 <__multadd>
 800ae0a:	9b08      	ldr	r3, [sp, #32]
 800ae0c:	ee08 0a10 	vmov	s16, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 81b1 	beq.w	800b178 <_dtoa_r+0xbc0>
 800ae16:	2300      	movs	r3, #0
 800ae18:	4639      	mov	r1, r7
 800ae1a:	220a      	movs	r2, #10
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 ffdb 	bl	800bdd8 <__multadd>
 800ae22:	9b02      	ldr	r3, [sp, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	4607      	mov	r7, r0
 800ae28:	f300 808e 	bgt.w	800af48 <_dtoa_r+0x990>
 800ae2c:	9b06      	ldr	r3, [sp, #24]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	dc51      	bgt.n	800aed6 <_dtoa_r+0x91e>
 800ae32:	e089      	b.n	800af48 <_dtoa_r+0x990>
 800ae34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae3a:	e74b      	b.n	800acd4 <_dtoa_r+0x71c>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	1e5e      	subs	r6, r3, #1
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	42b3      	cmp	r3, r6
 800ae44:	bfbf      	itttt	lt
 800ae46:	9b07      	ldrlt	r3, [sp, #28]
 800ae48:	9607      	strlt	r6, [sp, #28]
 800ae4a:	1af2      	sublt	r2, r6, r3
 800ae4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae4e:	bfb6      	itet	lt
 800ae50:	189b      	addlt	r3, r3, r2
 800ae52:	1b9e      	subge	r6, r3, r6
 800ae54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	bfb8      	it	lt
 800ae5a:	2600      	movlt	r6, #0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	bfb7      	itett	lt
 800ae60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae68:	1a9d      	sublt	r5, r3, r2
 800ae6a:	2300      	movlt	r3, #0
 800ae6c:	e734      	b.n	800acd8 <_dtoa_r+0x720>
 800ae6e:	9e07      	ldr	r6, [sp, #28]
 800ae70:	9d04      	ldr	r5, [sp, #16]
 800ae72:	9f08      	ldr	r7, [sp, #32]
 800ae74:	e73b      	b.n	800acee <_dtoa_r+0x736>
 800ae76:	9a07      	ldr	r2, [sp, #28]
 800ae78:	e767      	b.n	800ad4a <_dtoa_r+0x792>
 800ae7a:	9b06      	ldr	r3, [sp, #24]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	dc18      	bgt.n	800aeb2 <_dtoa_r+0x8fa>
 800ae80:	f1ba 0f00 	cmp.w	sl, #0
 800ae84:	d115      	bne.n	800aeb2 <_dtoa_r+0x8fa>
 800ae86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae8a:	b993      	cbnz	r3, 800aeb2 <_dtoa_r+0x8fa>
 800ae8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae90:	0d1b      	lsrs	r3, r3, #20
 800ae92:	051b      	lsls	r3, r3, #20
 800ae94:	b183      	cbz	r3, 800aeb8 <_dtoa_r+0x900>
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	9b05      	ldr	r3, [sp, #20]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	9305      	str	r3, [sp, #20]
 800aea2:	f04f 0801 	mov.w	r8, #1
 800aea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f af6a 	bne.w	800ad82 <_dtoa_r+0x7ca>
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e76f      	b.n	800ad92 <_dtoa_r+0x7da>
 800aeb2:	f04f 0800 	mov.w	r8, #0
 800aeb6:	e7f6      	b.n	800aea6 <_dtoa_r+0x8ee>
 800aeb8:	4698      	mov	r8, r3
 800aeba:	e7f4      	b.n	800aea6 <_dtoa_r+0x8ee>
 800aebc:	f43f af7d 	beq.w	800adba <_dtoa_r+0x802>
 800aec0:	4618      	mov	r0, r3
 800aec2:	301c      	adds	r0, #28
 800aec4:	e772      	b.n	800adac <_dtoa_r+0x7f4>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dc37      	bgt.n	800af3c <_dtoa_r+0x984>
 800aecc:	9b06      	ldr	r3, [sp, #24]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	dd34      	ble.n	800af3c <_dtoa_r+0x984>
 800aed2:	9b03      	ldr	r3, [sp, #12]
 800aed4:	9302      	str	r3, [sp, #8]
 800aed6:	9b02      	ldr	r3, [sp, #8]
 800aed8:	b96b      	cbnz	r3, 800aef6 <_dtoa_r+0x93e>
 800aeda:	4631      	mov	r1, r6
 800aedc:	2205      	movs	r2, #5
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 ff7a 	bl	800bdd8 <__multadd>
 800aee4:	4601      	mov	r1, r0
 800aee6:	4606      	mov	r6, r0
 800aee8:	ee18 0a10 	vmov	r0, s16
 800aeec:	f001 f9de 	bl	800c2ac <__mcmp>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	f73f adbb 	bgt.w	800aa6c <_dtoa_r+0x4b4>
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	9d01      	ldr	r5, [sp, #4]
 800aefa:	43db      	mvns	r3, r3
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	f04f 0800 	mov.w	r8, #0
 800af02:	4631      	mov	r1, r6
 800af04:	4620      	mov	r0, r4
 800af06:	f000 ff45 	bl	800bd94 <_Bfree>
 800af0a:	2f00      	cmp	r7, #0
 800af0c:	f43f aea4 	beq.w	800ac58 <_dtoa_r+0x6a0>
 800af10:	f1b8 0f00 	cmp.w	r8, #0
 800af14:	d005      	beq.n	800af22 <_dtoa_r+0x96a>
 800af16:	45b8      	cmp	r8, r7
 800af18:	d003      	beq.n	800af22 <_dtoa_r+0x96a>
 800af1a:	4641      	mov	r1, r8
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 ff39 	bl	800bd94 <_Bfree>
 800af22:	4639      	mov	r1, r7
 800af24:	4620      	mov	r0, r4
 800af26:	f000 ff35 	bl	800bd94 <_Bfree>
 800af2a:	e695      	b.n	800ac58 <_dtoa_r+0x6a0>
 800af2c:	2600      	movs	r6, #0
 800af2e:	4637      	mov	r7, r6
 800af30:	e7e1      	b.n	800aef6 <_dtoa_r+0x93e>
 800af32:	9700      	str	r7, [sp, #0]
 800af34:	4637      	mov	r7, r6
 800af36:	e599      	b.n	800aa6c <_dtoa_r+0x4b4>
 800af38:	40240000 	.word	0x40240000
 800af3c:	9b08      	ldr	r3, [sp, #32]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 80ca 	beq.w	800b0d8 <_dtoa_r+0xb20>
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	9302      	str	r3, [sp, #8]
 800af48:	2d00      	cmp	r5, #0
 800af4a:	dd05      	ble.n	800af58 <_dtoa_r+0x9a0>
 800af4c:	4639      	mov	r1, r7
 800af4e:	462a      	mov	r2, r5
 800af50:	4620      	mov	r0, r4
 800af52:	f001 f93b 	bl	800c1cc <__lshift>
 800af56:	4607      	mov	r7, r0
 800af58:	f1b8 0f00 	cmp.w	r8, #0
 800af5c:	d05b      	beq.n	800b016 <_dtoa_r+0xa5e>
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fed7 	bl	800bd14 <_Balloc>
 800af66:	4605      	mov	r5, r0
 800af68:	b928      	cbnz	r0, 800af76 <_dtoa_r+0x9be>
 800af6a:	4b87      	ldr	r3, [pc, #540]	; (800b188 <_dtoa_r+0xbd0>)
 800af6c:	4602      	mov	r2, r0
 800af6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af72:	f7ff bb3b 	b.w	800a5ec <_dtoa_r+0x34>
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	3202      	adds	r2, #2
 800af7a:	0092      	lsls	r2, r2, #2
 800af7c:	f107 010c 	add.w	r1, r7, #12
 800af80:	300c      	adds	r0, #12
 800af82:	f7fd fb47 	bl	8008614 <memcpy>
 800af86:	2201      	movs	r2, #1
 800af88:	4629      	mov	r1, r5
 800af8a:	4620      	mov	r0, r4
 800af8c:	f001 f91e 	bl	800c1cc <__lshift>
 800af90:	9b01      	ldr	r3, [sp, #4]
 800af92:	f103 0901 	add.w	r9, r3, #1
 800af96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af9a:	4413      	add	r3, r2
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	f00a 0301 	and.w	r3, sl, #1
 800afa2:	46b8      	mov	r8, r7
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	4607      	mov	r7, r0
 800afa8:	4631      	mov	r1, r6
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f7ff fa75 	bl	800a49c <quorem>
 800afb2:	4641      	mov	r1, r8
 800afb4:	9002      	str	r0, [sp, #8]
 800afb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800afba:	ee18 0a10 	vmov	r0, s16
 800afbe:	f001 f975 	bl	800c2ac <__mcmp>
 800afc2:	463a      	mov	r2, r7
 800afc4:	9003      	str	r0, [sp, #12]
 800afc6:	4631      	mov	r1, r6
 800afc8:	4620      	mov	r0, r4
 800afca:	f001 f98b 	bl	800c2e4 <__mdiff>
 800afce:	68c2      	ldr	r2, [r0, #12]
 800afd0:	f109 3bff 	add.w	fp, r9, #4294967295
 800afd4:	4605      	mov	r5, r0
 800afd6:	bb02      	cbnz	r2, 800b01a <_dtoa_r+0xa62>
 800afd8:	4601      	mov	r1, r0
 800afda:	ee18 0a10 	vmov	r0, s16
 800afde:	f001 f965 	bl	800c2ac <__mcmp>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4629      	mov	r1, r5
 800afe6:	4620      	mov	r0, r4
 800afe8:	9207      	str	r2, [sp, #28]
 800afea:	f000 fed3 	bl	800bd94 <_Bfree>
 800afee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800aff2:	ea43 0102 	orr.w	r1, r3, r2
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	430b      	orrs	r3, r1
 800affa:	464d      	mov	r5, r9
 800affc:	d10f      	bne.n	800b01e <_dtoa_r+0xa66>
 800affe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b002:	d02a      	beq.n	800b05a <_dtoa_r+0xaa2>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	dd02      	ble.n	800b010 <_dtoa_r+0xa58>
 800b00a:	9b02      	ldr	r3, [sp, #8]
 800b00c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b010:	f88b a000 	strb.w	sl, [fp]
 800b014:	e775      	b.n	800af02 <_dtoa_r+0x94a>
 800b016:	4638      	mov	r0, r7
 800b018:	e7ba      	b.n	800af90 <_dtoa_r+0x9d8>
 800b01a:	2201      	movs	r2, #1
 800b01c:	e7e2      	b.n	800afe4 <_dtoa_r+0xa2c>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	db04      	blt.n	800b02e <_dtoa_r+0xa76>
 800b024:	9906      	ldr	r1, [sp, #24]
 800b026:	430b      	orrs	r3, r1
 800b028:	9904      	ldr	r1, [sp, #16]
 800b02a:	430b      	orrs	r3, r1
 800b02c:	d122      	bne.n	800b074 <_dtoa_r+0xabc>
 800b02e:	2a00      	cmp	r2, #0
 800b030:	ddee      	ble.n	800b010 <_dtoa_r+0xa58>
 800b032:	ee18 1a10 	vmov	r1, s16
 800b036:	2201      	movs	r2, #1
 800b038:	4620      	mov	r0, r4
 800b03a:	f001 f8c7 	bl	800c1cc <__lshift>
 800b03e:	4631      	mov	r1, r6
 800b040:	ee08 0a10 	vmov	s16, r0
 800b044:	f001 f932 	bl	800c2ac <__mcmp>
 800b048:	2800      	cmp	r0, #0
 800b04a:	dc03      	bgt.n	800b054 <_dtoa_r+0xa9c>
 800b04c:	d1e0      	bne.n	800b010 <_dtoa_r+0xa58>
 800b04e:	f01a 0f01 	tst.w	sl, #1
 800b052:	d0dd      	beq.n	800b010 <_dtoa_r+0xa58>
 800b054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b058:	d1d7      	bne.n	800b00a <_dtoa_r+0xa52>
 800b05a:	2339      	movs	r3, #57	; 0x39
 800b05c:	f88b 3000 	strb.w	r3, [fp]
 800b060:	462b      	mov	r3, r5
 800b062:	461d      	mov	r5, r3
 800b064:	3b01      	subs	r3, #1
 800b066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b06a:	2a39      	cmp	r2, #57	; 0x39
 800b06c:	d071      	beq.n	800b152 <_dtoa_r+0xb9a>
 800b06e:	3201      	adds	r2, #1
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	e746      	b.n	800af02 <_dtoa_r+0x94a>
 800b074:	2a00      	cmp	r2, #0
 800b076:	dd07      	ble.n	800b088 <_dtoa_r+0xad0>
 800b078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b07c:	d0ed      	beq.n	800b05a <_dtoa_r+0xaa2>
 800b07e:	f10a 0301 	add.w	r3, sl, #1
 800b082:	f88b 3000 	strb.w	r3, [fp]
 800b086:	e73c      	b.n	800af02 <_dtoa_r+0x94a>
 800b088:	9b05      	ldr	r3, [sp, #20]
 800b08a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b08e:	4599      	cmp	r9, r3
 800b090:	d047      	beq.n	800b122 <_dtoa_r+0xb6a>
 800b092:	ee18 1a10 	vmov	r1, s16
 800b096:	2300      	movs	r3, #0
 800b098:	220a      	movs	r2, #10
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 fe9c 	bl	800bdd8 <__multadd>
 800b0a0:	45b8      	cmp	r8, r7
 800b0a2:	ee08 0a10 	vmov	s16, r0
 800b0a6:	f04f 0300 	mov.w	r3, #0
 800b0aa:	f04f 020a 	mov.w	r2, #10
 800b0ae:	4641      	mov	r1, r8
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	d106      	bne.n	800b0c2 <_dtoa_r+0xb0a>
 800b0b4:	f000 fe90 	bl	800bdd8 <__multadd>
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	f109 0901 	add.w	r9, r9, #1
 800b0c0:	e772      	b.n	800afa8 <_dtoa_r+0x9f0>
 800b0c2:	f000 fe89 	bl	800bdd8 <__multadd>
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	4680      	mov	r8, r0
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	220a      	movs	r2, #10
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 fe82 	bl	800bdd8 <__multadd>
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	e7f1      	b.n	800b0bc <_dtoa_r+0xb04>
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	9302      	str	r3, [sp, #8]
 800b0dc:	9d01      	ldr	r5, [sp, #4]
 800b0de:	ee18 0a10 	vmov	r0, s16
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	f7ff f9da 	bl	800a49c <quorem>
 800b0e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0ec:	9b01      	ldr	r3, [sp, #4]
 800b0ee:	f805 ab01 	strb.w	sl, [r5], #1
 800b0f2:	1aea      	subs	r2, r5, r3
 800b0f4:	9b02      	ldr	r3, [sp, #8]
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	dd09      	ble.n	800b10e <_dtoa_r+0xb56>
 800b0fa:	ee18 1a10 	vmov	r1, s16
 800b0fe:	2300      	movs	r3, #0
 800b100:	220a      	movs	r2, #10
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fe68 	bl	800bdd8 <__multadd>
 800b108:	ee08 0a10 	vmov	s16, r0
 800b10c:	e7e7      	b.n	800b0de <_dtoa_r+0xb26>
 800b10e:	9b02      	ldr	r3, [sp, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	bfc8      	it	gt
 800b114:	461d      	movgt	r5, r3
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	bfd8      	it	le
 800b11a:	2501      	movle	r5, #1
 800b11c:	441d      	add	r5, r3
 800b11e:	f04f 0800 	mov.w	r8, #0
 800b122:	ee18 1a10 	vmov	r1, s16
 800b126:	2201      	movs	r2, #1
 800b128:	4620      	mov	r0, r4
 800b12a:	f001 f84f 	bl	800c1cc <__lshift>
 800b12e:	4631      	mov	r1, r6
 800b130:	ee08 0a10 	vmov	s16, r0
 800b134:	f001 f8ba 	bl	800c2ac <__mcmp>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dc91      	bgt.n	800b060 <_dtoa_r+0xaa8>
 800b13c:	d102      	bne.n	800b144 <_dtoa_r+0xb8c>
 800b13e:	f01a 0f01 	tst.w	sl, #1
 800b142:	d18d      	bne.n	800b060 <_dtoa_r+0xaa8>
 800b144:	462b      	mov	r3, r5
 800b146:	461d      	mov	r5, r3
 800b148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b14c:	2a30      	cmp	r2, #48	; 0x30
 800b14e:	d0fa      	beq.n	800b146 <_dtoa_r+0xb8e>
 800b150:	e6d7      	b.n	800af02 <_dtoa_r+0x94a>
 800b152:	9a01      	ldr	r2, [sp, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d184      	bne.n	800b062 <_dtoa_r+0xaaa>
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	3301      	adds	r3, #1
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	2331      	movs	r3, #49	; 0x31
 800b160:	7013      	strb	r3, [r2, #0]
 800b162:	e6ce      	b.n	800af02 <_dtoa_r+0x94a>
 800b164:	4b09      	ldr	r3, [pc, #36]	; (800b18c <_dtoa_r+0xbd4>)
 800b166:	f7ff ba95 	b.w	800a694 <_dtoa_r+0xdc>
 800b16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f47f aa6e 	bne.w	800a64e <_dtoa_r+0x96>
 800b172:	4b07      	ldr	r3, [pc, #28]	; (800b190 <_dtoa_r+0xbd8>)
 800b174:	f7ff ba8e 	b.w	800a694 <_dtoa_r+0xdc>
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dcae      	bgt.n	800b0dc <_dtoa_r+0xb24>
 800b17e:	9b06      	ldr	r3, [sp, #24]
 800b180:	2b02      	cmp	r3, #2
 800b182:	f73f aea8 	bgt.w	800aed6 <_dtoa_r+0x91e>
 800b186:	e7a9      	b.n	800b0dc <_dtoa_r+0xb24>
 800b188:	0800dc80 	.word	0x0800dc80
 800b18c:	0800dee1 	.word	0x0800dee1
 800b190:	0800dc01 	.word	0x0800dc01

0800b194 <__sflush_r>:
 800b194:	898a      	ldrh	r2, [r1, #12]
 800b196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b19a:	4605      	mov	r5, r0
 800b19c:	0710      	lsls	r0, r2, #28
 800b19e:	460c      	mov	r4, r1
 800b1a0:	d458      	bmi.n	800b254 <__sflush_r+0xc0>
 800b1a2:	684b      	ldr	r3, [r1, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dc05      	bgt.n	800b1b4 <__sflush_r+0x20>
 800b1a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	dc02      	bgt.n	800b1b4 <__sflush_r+0x20>
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1b6:	2e00      	cmp	r6, #0
 800b1b8:	d0f9      	beq.n	800b1ae <__sflush_r+0x1a>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1c0:	682f      	ldr	r7, [r5, #0]
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	d032      	beq.n	800b22c <__sflush_r+0x98>
 800b1c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	075a      	lsls	r2, r3, #29
 800b1cc:	d505      	bpl.n	800b1da <__sflush_r+0x46>
 800b1ce:	6863      	ldr	r3, [r4, #4]
 800b1d0:	1ac0      	subs	r0, r0, r3
 800b1d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1d4:	b10b      	cbz	r3, 800b1da <__sflush_r+0x46>
 800b1d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1d8:	1ac0      	subs	r0, r0, r3
 800b1da:	2300      	movs	r3, #0
 800b1dc:	4602      	mov	r2, r0
 800b1de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1e0:	6a21      	ldr	r1, [r4, #32]
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	47b0      	blx	r6
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	d106      	bne.n	800b1fa <__sflush_r+0x66>
 800b1ec:	6829      	ldr	r1, [r5, #0]
 800b1ee:	291d      	cmp	r1, #29
 800b1f0:	d82c      	bhi.n	800b24c <__sflush_r+0xb8>
 800b1f2:	4a2a      	ldr	r2, [pc, #168]	; (800b29c <__sflush_r+0x108>)
 800b1f4:	40ca      	lsrs	r2, r1
 800b1f6:	07d6      	lsls	r6, r2, #31
 800b1f8:	d528      	bpl.n	800b24c <__sflush_r+0xb8>
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	6062      	str	r2, [r4, #4]
 800b1fe:	04d9      	lsls	r1, r3, #19
 800b200:	6922      	ldr	r2, [r4, #16]
 800b202:	6022      	str	r2, [r4, #0]
 800b204:	d504      	bpl.n	800b210 <__sflush_r+0x7c>
 800b206:	1c42      	adds	r2, r0, #1
 800b208:	d101      	bne.n	800b20e <__sflush_r+0x7a>
 800b20a:	682b      	ldr	r3, [r5, #0]
 800b20c:	b903      	cbnz	r3, 800b210 <__sflush_r+0x7c>
 800b20e:	6560      	str	r0, [r4, #84]	; 0x54
 800b210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b212:	602f      	str	r7, [r5, #0]
 800b214:	2900      	cmp	r1, #0
 800b216:	d0ca      	beq.n	800b1ae <__sflush_r+0x1a>
 800b218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b21c:	4299      	cmp	r1, r3
 800b21e:	d002      	beq.n	800b226 <__sflush_r+0x92>
 800b220:	4628      	mov	r0, r5
 800b222:	f001 fa4f 	bl	800c6c4 <_free_r>
 800b226:	2000      	movs	r0, #0
 800b228:	6360      	str	r0, [r4, #52]	; 0x34
 800b22a:	e7c1      	b.n	800b1b0 <__sflush_r+0x1c>
 800b22c:	6a21      	ldr	r1, [r4, #32]
 800b22e:	2301      	movs	r3, #1
 800b230:	4628      	mov	r0, r5
 800b232:	47b0      	blx	r6
 800b234:	1c41      	adds	r1, r0, #1
 800b236:	d1c7      	bne.n	800b1c8 <__sflush_r+0x34>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0c4      	beq.n	800b1c8 <__sflush_r+0x34>
 800b23e:	2b1d      	cmp	r3, #29
 800b240:	d001      	beq.n	800b246 <__sflush_r+0xb2>
 800b242:	2b16      	cmp	r3, #22
 800b244:	d101      	bne.n	800b24a <__sflush_r+0xb6>
 800b246:	602f      	str	r7, [r5, #0]
 800b248:	e7b1      	b.n	800b1ae <__sflush_r+0x1a>
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b250:	81a3      	strh	r3, [r4, #12]
 800b252:	e7ad      	b.n	800b1b0 <__sflush_r+0x1c>
 800b254:	690f      	ldr	r7, [r1, #16]
 800b256:	2f00      	cmp	r7, #0
 800b258:	d0a9      	beq.n	800b1ae <__sflush_r+0x1a>
 800b25a:	0793      	lsls	r3, r2, #30
 800b25c:	680e      	ldr	r6, [r1, #0]
 800b25e:	bf08      	it	eq
 800b260:	694b      	ldreq	r3, [r1, #20]
 800b262:	600f      	str	r7, [r1, #0]
 800b264:	bf18      	it	ne
 800b266:	2300      	movne	r3, #0
 800b268:	eba6 0807 	sub.w	r8, r6, r7
 800b26c:	608b      	str	r3, [r1, #8]
 800b26e:	f1b8 0f00 	cmp.w	r8, #0
 800b272:	dd9c      	ble.n	800b1ae <__sflush_r+0x1a>
 800b274:	6a21      	ldr	r1, [r4, #32]
 800b276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b278:	4643      	mov	r3, r8
 800b27a:	463a      	mov	r2, r7
 800b27c:	4628      	mov	r0, r5
 800b27e:	47b0      	blx	r6
 800b280:	2800      	cmp	r0, #0
 800b282:	dc06      	bgt.n	800b292 <__sflush_r+0xfe>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	f04f 30ff 	mov.w	r0, #4294967295
 800b290:	e78e      	b.n	800b1b0 <__sflush_r+0x1c>
 800b292:	4407      	add	r7, r0
 800b294:	eba8 0800 	sub.w	r8, r8, r0
 800b298:	e7e9      	b.n	800b26e <__sflush_r+0xda>
 800b29a:	bf00      	nop
 800b29c:	20400001 	.word	0x20400001

0800b2a0 <_fflush_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	690b      	ldr	r3, [r1, #16]
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	b913      	cbnz	r3, 800b2b0 <_fflush_r+0x10>
 800b2aa:	2500      	movs	r5, #0
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	b118      	cbz	r0, 800b2ba <_fflush_r+0x1a>
 800b2b2:	6983      	ldr	r3, [r0, #24]
 800b2b4:	b90b      	cbnz	r3, 800b2ba <_fflush_r+0x1a>
 800b2b6:	f000 f887 	bl	800b3c8 <__sinit>
 800b2ba:	4b14      	ldr	r3, [pc, #80]	; (800b30c <_fflush_r+0x6c>)
 800b2bc:	429c      	cmp	r4, r3
 800b2be:	d11b      	bne.n	800b2f8 <_fflush_r+0x58>
 800b2c0:	686c      	ldr	r4, [r5, #4]
 800b2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0ef      	beq.n	800b2aa <_fflush_r+0xa>
 800b2ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2cc:	07d0      	lsls	r0, r2, #31
 800b2ce:	d404      	bmi.n	800b2da <_fflush_r+0x3a>
 800b2d0:	0599      	lsls	r1, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_fflush_r+0x3a>
 800b2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2d6:	f000 fc88 	bl	800bbea <__retarget_lock_acquire_recursive>
 800b2da:	4628      	mov	r0, r5
 800b2dc:	4621      	mov	r1, r4
 800b2de:	f7ff ff59 	bl	800b194 <__sflush_r>
 800b2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2e4:	07da      	lsls	r2, r3, #31
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	d4e0      	bmi.n	800b2ac <_fflush_r+0xc>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	059b      	lsls	r3, r3, #22
 800b2ee:	d4dd      	bmi.n	800b2ac <_fflush_r+0xc>
 800b2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2f2:	f000 fc7b 	bl	800bbec <__retarget_lock_release_recursive>
 800b2f6:	e7d9      	b.n	800b2ac <_fflush_r+0xc>
 800b2f8:	4b05      	ldr	r3, [pc, #20]	; (800b310 <_fflush_r+0x70>)
 800b2fa:	429c      	cmp	r4, r3
 800b2fc:	d101      	bne.n	800b302 <_fflush_r+0x62>
 800b2fe:	68ac      	ldr	r4, [r5, #8]
 800b300:	e7df      	b.n	800b2c2 <_fflush_r+0x22>
 800b302:	4b04      	ldr	r3, [pc, #16]	; (800b314 <_fflush_r+0x74>)
 800b304:	429c      	cmp	r4, r3
 800b306:	bf08      	it	eq
 800b308:	68ec      	ldreq	r4, [r5, #12]
 800b30a:	e7da      	b.n	800b2c2 <_fflush_r+0x22>
 800b30c:	0800dcb4 	.word	0x0800dcb4
 800b310:	0800dcd4 	.word	0x0800dcd4
 800b314:	0800dc94 	.word	0x0800dc94

0800b318 <std>:
 800b318:	2300      	movs	r3, #0
 800b31a:	b510      	push	{r4, lr}
 800b31c:	4604      	mov	r4, r0
 800b31e:	e9c0 3300 	strd	r3, r3, [r0]
 800b322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b326:	6083      	str	r3, [r0, #8]
 800b328:	8181      	strh	r1, [r0, #12]
 800b32a:	6643      	str	r3, [r0, #100]	; 0x64
 800b32c:	81c2      	strh	r2, [r0, #14]
 800b32e:	6183      	str	r3, [r0, #24]
 800b330:	4619      	mov	r1, r3
 800b332:	2208      	movs	r2, #8
 800b334:	305c      	adds	r0, #92	; 0x5c
 800b336:	f7fd f97b 	bl	8008630 <memset>
 800b33a:	4b05      	ldr	r3, [pc, #20]	; (800b350 <std+0x38>)
 800b33c:	6263      	str	r3, [r4, #36]	; 0x24
 800b33e:	4b05      	ldr	r3, [pc, #20]	; (800b354 <std+0x3c>)
 800b340:	62a3      	str	r3, [r4, #40]	; 0x28
 800b342:	4b05      	ldr	r3, [pc, #20]	; (800b358 <std+0x40>)
 800b344:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b346:	4b05      	ldr	r3, [pc, #20]	; (800b35c <std+0x44>)
 800b348:	6224      	str	r4, [r4, #32]
 800b34a:	6323      	str	r3, [r4, #48]	; 0x30
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	bf00      	nop
 800b350:	080094f5 	.word	0x080094f5
 800b354:	0800951b 	.word	0x0800951b
 800b358:	08009553 	.word	0x08009553
 800b35c:	08009577 	.word	0x08009577

0800b360 <_cleanup_r>:
 800b360:	4901      	ldr	r1, [pc, #4]	; (800b368 <_cleanup_r+0x8>)
 800b362:	f000 b8af 	b.w	800b4c4 <_fwalk_reent>
 800b366:	bf00      	nop
 800b368:	0800b2a1 	.word	0x0800b2a1

0800b36c <__sfmoreglue>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	2268      	movs	r2, #104	; 0x68
 800b370:	1e4d      	subs	r5, r1, #1
 800b372:	4355      	muls	r5, r2
 800b374:	460e      	mov	r6, r1
 800b376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b37a:	f001 fa0f 	bl	800c79c <_malloc_r>
 800b37e:	4604      	mov	r4, r0
 800b380:	b140      	cbz	r0, 800b394 <__sfmoreglue+0x28>
 800b382:	2100      	movs	r1, #0
 800b384:	e9c0 1600 	strd	r1, r6, [r0]
 800b388:	300c      	adds	r0, #12
 800b38a:	60a0      	str	r0, [r4, #8]
 800b38c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b390:	f7fd f94e 	bl	8008630 <memset>
 800b394:	4620      	mov	r0, r4
 800b396:	bd70      	pop	{r4, r5, r6, pc}

0800b398 <__sfp_lock_acquire>:
 800b398:	4801      	ldr	r0, [pc, #4]	; (800b3a0 <__sfp_lock_acquire+0x8>)
 800b39a:	f000 bc26 	b.w	800bbea <__retarget_lock_acquire_recursive>
 800b39e:	bf00      	nop
 800b3a0:	20000849 	.word	0x20000849

0800b3a4 <__sfp_lock_release>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	; (800b3ac <__sfp_lock_release+0x8>)
 800b3a6:	f000 bc21 	b.w	800bbec <__retarget_lock_release_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	20000849 	.word	0x20000849

0800b3b0 <__sinit_lock_acquire>:
 800b3b0:	4801      	ldr	r0, [pc, #4]	; (800b3b8 <__sinit_lock_acquire+0x8>)
 800b3b2:	f000 bc1a 	b.w	800bbea <__retarget_lock_acquire_recursive>
 800b3b6:	bf00      	nop
 800b3b8:	2000084a 	.word	0x2000084a

0800b3bc <__sinit_lock_release>:
 800b3bc:	4801      	ldr	r0, [pc, #4]	; (800b3c4 <__sinit_lock_release+0x8>)
 800b3be:	f000 bc15 	b.w	800bbec <__retarget_lock_release_recursive>
 800b3c2:	bf00      	nop
 800b3c4:	2000084a 	.word	0x2000084a

0800b3c8 <__sinit>:
 800b3c8:	b510      	push	{r4, lr}
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	f7ff fff0 	bl	800b3b0 <__sinit_lock_acquire>
 800b3d0:	69a3      	ldr	r3, [r4, #24]
 800b3d2:	b11b      	cbz	r3, 800b3dc <__sinit+0x14>
 800b3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d8:	f7ff bff0 	b.w	800b3bc <__sinit_lock_release>
 800b3dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b3e2:	4b13      	ldr	r3, [pc, #76]	; (800b430 <__sinit+0x68>)
 800b3e4:	4a13      	ldr	r2, [pc, #76]	; (800b434 <__sinit+0x6c>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3ea:	42a3      	cmp	r3, r4
 800b3ec:	bf04      	itt	eq
 800b3ee:	2301      	moveq	r3, #1
 800b3f0:	61a3      	streq	r3, [r4, #24]
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 f820 	bl	800b438 <__sfp>
 800b3f8:	6060      	str	r0, [r4, #4]
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 f81c 	bl	800b438 <__sfp>
 800b400:	60a0      	str	r0, [r4, #8]
 800b402:	4620      	mov	r0, r4
 800b404:	f000 f818 	bl	800b438 <__sfp>
 800b408:	2200      	movs	r2, #0
 800b40a:	60e0      	str	r0, [r4, #12]
 800b40c:	2104      	movs	r1, #4
 800b40e:	6860      	ldr	r0, [r4, #4]
 800b410:	f7ff ff82 	bl	800b318 <std>
 800b414:	68a0      	ldr	r0, [r4, #8]
 800b416:	2201      	movs	r2, #1
 800b418:	2109      	movs	r1, #9
 800b41a:	f7ff ff7d 	bl	800b318 <std>
 800b41e:	68e0      	ldr	r0, [r4, #12]
 800b420:	2202      	movs	r2, #2
 800b422:	2112      	movs	r1, #18
 800b424:	f7ff ff78 	bl	800b318 <std>
 800b428:	2301      	movs	r3, #1
 800b42a:	61a3      	str	r3, [r4, #24]
 800b42c:	e7d2      	b.n	800b3d4 <__sinit+0xc>
 800b42e:	bf00      	nop
 800b430:	0800da74 	.word	0x0800da74
 800b434:	0800b361 	.word	0x0800b361

0800b438 <__sfp>:
 800b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b43a:	4607      	mov	r7, r0
 800b43c:	f7ff ffac 	bl	800b398 <__sfp_lock_acquire>
 800b440:	4b1e      	ldr	r3, [pc, #120]	; (800b4bc <__sfp+0x84>)
 800b442:	681e      	ldr	r6, [r3, #0]
 800b444:	69b3      	ldr	r3, [r6, #24]
 800b446:	b913      	cbnz	r3, 800b44e <__sfp+0x16>
 800b448:	4630      	mov	r0, r6
 800b44a:	f7ff ffbd 	bl	800b3c8 <__sinit>
 800b44e:	3648      	adds	r6, #72	; 0x48
 800b450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b454:	3b01      	subs	r3, #1
 800b456:	d503      	bpl.n	800b460 <__sfp+0x28>
 800b458:	6833      	ldr	r3, [r6, #0]
 800b45a:	b30b      	cbz	r3, 800b4a0 <__sfp+0x68>
 800b45c:	6836      	ldr	r6, [r6, #0]
 800b45e:	e7f7      	b.n	800b450 <__sfp+0x18>
 800b460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b464:	b9d5      	cbnz	r5, 800b49c <__sfp+0x64>
 800b466:	4b16      	ldr	r3, [pc, #88]	; (800b4c0 <__sfp+0x88>)
 800b468:	60e3      	str	r3, [r4, #12]
 800b46a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b46e:	6665      	str	r5, [r4, #100]	; 0x64
 800b470:	f000 fbba 	bl	800bbe8 <__retarget_lock_init_recursive>
 800b474:	f7ff ff96 	bl	800b3a4 <__sfp_lock_release>
 800b478:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b47c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b480:	6025      	str	r5, [r4, #0]
 800b482:	61a5      	str	r5, [r4, #24]
 800b484:	2208      	movs	r2, #8
 800b486:	4629      	mov	r1, r5
 800b488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b48c:	f7fd f8d0 	bl	8008630 <memset>
 800b490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b498:	4620      	mov	r0, r4
 800b49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b49c:	3468      	adds	r4, #104	; 0x68
 800b49e:	e7d9      	b.n	800b454 <__sfp+0x1c>
 800b4a0:	2104      	movs	r1, #4
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	f7ff ff62 	bl	800b36c <__sfmoreglue>
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	6030      	str	r0, [r6, #0]
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d1d5      	bne.n	800b45c <__sfp+0x24>
 800b4b0:	f7ff ff78 	bl	800b3a4 <__sfp_lock_release>
 800b4b4:	230c      	movs	r3, #12
 800b4b6:	603b      	str	r3, [r7, #0]
 800b4b8:	e7ee      	b.n	800b498 <__sfp+0x60>
 800b4ba:	bf00      	nop
 800b4bc:	0800da74 	.word	0x0800da74
 800b4c0:	ffff0001 	.word	0xffff0001

0800b4c4 <_fwalk_reent>:
 800b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	4688      	mov	r8, r1
 800b4cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4d0:	2700      	movs	r7, #0
 800b4d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b4da:	d505      	bpl.n	800b4e8 <_fwalk_reent+0x24>
 800b4dc:	6824      	ldr	r4, [r4, #0]
 800b4de:	2c00      	cmp	r4, #0
 800b4e0:	d1f7      	bne.n	800b4d2 <_fwalk_reent+0xe>
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e8:	89ab      	ldrh	r3, [r5, #12]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d907      	bls.n	800b4fe <_fwalk_reent+0x3a>
 800b4ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	d003      	beq.n	800b4fe <_fwalk_reent+0x3a>
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	47c0      	blx	r8
 800b4fc:	4307      	orrs	r7, r0
 800b4fe:	3568      	adds	r5, #104	; 0x68
 800b500:	e7e9      	b.n	800b4d6 <_fwalk_reent+0x12>

0800b502 <rshift>:
 800b502:	6903      	ldr	r3, [r0, #16]
 800b504:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b50c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b510:	f100 0414 	add.w	r4, r0, #20
 800b514:	dd45      	ble.n	800b5a2 <rshift+0xa0>
 800b516:	f011 011f 	ands.w	r1, r1, #31
 800b51a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b51e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b522:	d10c      	bne.n	800b53e <rshift+0x3c>
 800b524:	f100 0710 	add.w	r7, r0, #16
 800b528:	4629      	mov	r1, r5
 800b52a:	42b1      	cmp	r1, r6
 800b52c:	d334      	bcc.n	800b598 <rshift+0x96>
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	1eea      	subs	r2, r5, #3
 800b534:	4296      	cmp	r6, r2
 800b536:	bf38      	it	cc
 800b538:	2300      	movcc	r3, #0
 800b53a:	4423      	add	r3, r4
 800b53c:	e015      	b.n	800b56a <rshift+0x68>
 800b53e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b542:	f1c1 0820 	rsb	r8, r1, #32
 800b546:	40cf      	lsrs	r7, r1
 800b548:	f105 0e04 	add.w	lr, r5, #4
 800b54c:	46a1      	mov	r9, r4
 800b54e:	4576      	cmp	r6, lr
 800b550:	46f4      	mov	ip, lr
 800b552:	d815      	bhi.n	800b580 <rshift+0x7e>
 800b554:	1a9a      	subs	r2, r3, r2
 800b556:	0092      	lsls	r2, r2, #2
 800b558:	3a04      	subs	r2, #4
 800b55a:	3501      	adds	r5, #1
 800b55c:	42ae      	cmp	r6, r5
 800b55e:	bf38      	it	cc
 800b560:	2200      	movcc	r2, #0
 800b562:	18a3      	adds	r3, r4, r2
 800b564:	50a7      	str	r7, [r4, r2]
 800b566:	b107      	cbz	r7, 800b56a <rshift+0x68>
 800b568:	3304      	adds	r3, #4
 800b56a:	1b1a      	subs	r2, r3, r4
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b572:	bf08      	it	eq
 800b574:	2300      	moveq	r3, #0
 800b576:	6102      	str	r2, [r0, #16]
 800b578:	bf08      	it	eq
 800b57a:	6143      	streq	r3, [r0, #20]
 800b57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b580:	f8dc c000 	ldr.w	ip, [ip]
 800b584:	fa0c fc08 	lsl.w	ip, ip, r8
 800b588:	ea4c 0707 	orr.w	r7, ip, r7
 800b58c:	f849 7b04 	str.w	r7, [r9], #4
 800b590:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b594:	40cf      	lsrs	r7, r1
 800b596:	e7da      	b.n	800b54e <rshift+0x4c>
 800b598:	f851 cb04 	ldr.w	ip, [r1], #4
 800b59c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b5a0:	e7c3      	b.n	800b52a <rshift+0x28>
 800b5a2:	4623      	mov	r3, r4
 800b5a4:	e7e1      	b.n	800b56a <rshift+0x68>

0800b5a6 <__hexdig_fun>:
 800b5a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b5aa:	2b09      	cmp	r3, #9
 800b5ac:	d802      	bhi.n	800b5b4 <__hexdig_fun+0xe>
 800b5ae:	3820      	subs	r0, #32
 800b5b0:	b2c0      	uxtb	r0, r0
 800b5b2:	4770      	bx	lr
 800b5b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b5b8:	2b05      	cmp	r3, #5
 800b5ba:	d801      	bhi.n	800b5c0 <__hexdig_fun+0x1a>
 800b5bc:	3847      	subs	r0, #71	; 0x47
 800b5be:	e7f7      	b.n	800b5b0 <__hexdig_fun+0xa>
 800b5c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5c4:	2b05      	cmp	r3, #5
 800b5c6:	d801      	bhi.n	800b5cc <__hexdig_fun+0x26>
 800b5c8:	3827      	subs	r0, #39	; 0x27
 800b5ca:	e7f1      	b.n	800b5b0 <__hexdig_fun+0xa>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	4770      	bx	lr

0800b5d0 <__gethex>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	ed2d 8b02 	vpush	{d8}
 800b5d8:	b089      	sub	sp, #36	; 0x24
 800b5da:	ee08 0a10 	vmov	s16, r0
 800b5de:	9304      	str	r3, [sp, #16]
 800b5e0:	4bb4      	ldr	r3, [pc, #720]	; (800b8b4 <__gethex+0x2e4>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	468b      	mov	fp, r1
 800b5ea:	4690      	mov	r8, r2
 800b5ec:	f7f4 fdfa 	bl	80001e4 <strlen>
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	f8db 2000 	ldr.w	r2, [fp]
 800b5f6:	4403      	add	r3, r0
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b5fe:	9305      	str	r3, [sp, #20]
 800b600:	1c93      	adds	r3, r2, #2
 800b602:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b606:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b60a:	32fe      	adds	r2, #254	; 0xfe
 800b60c:	18d1      	adds	r1, r2, r3
 800b60e:	461f      	mov	r7, r3
 800b610:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b614:	9100      	str	r1, [sp, #0]
 800b616:	2830      	cmp	r0, #48	; 0x30
 800b618:	d0f8      	beq.n	800b60c <__gethex+0x3c>
 800b61a:	f7ff ffc4 	bl	800b5a6 <__hexdig_fun>
 800b61e:	4604      	mov	r4, r0
 800b620:	2800      	cmp	r0, #0
 800b622:	d13a      	bne.n	800b69a <__gethex+0xca>
 800b624:	9901      	ldr	r1, [sp, #4]
 800b626:	4652      	mov	r2, sl
 800b628:	4638      	mov	r0, r7
 800b62a:	f001 ff69 	bl	800d500 <strncmp>
 800b62e:	4605      	mov	r5, r0
 800b630:	2800      	cmp	r0, #0
 800b632:	d168      	bne.n	800b706 <__gethex+0x136>
 800b634:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b638:	eb07 060a 	add.w	r6, r7, sl
 800b63c:	f7ff ffb3 	bl	800b5a6 <__hexdig_fun>
 800b640:	2800      	cmp	r0, #0
 800b642:	d062      	beq.n	800b70a <__gethex+0x13a>
 800b644:	4633      	mov	r3, r6
 800b646:	7818      	ldrb	r0, [r3, #0]
 800b648:	2830      	cmp	r0, #48	; 0x30
 800b64a:	461f      	mov	r7, r3
 800b64c:	f103 0301 	add.w	r3, r3, #1
 800b650:	d0f9      	beq.n	800b646 <__gethex+0x76>
 800b652:	f7ff ffa8 	bl	800b5a6 <__hexdig_fun>
 800b656:	2301      	movs	r3, #1
 800b658:	fab0 f480 	clz	r4, r0
 800b65c:	0964      	lsrs	r4, r4, #5
 800b65e:	4635      	mov	r5, r6
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	463a      	mov	r2, r7
 800b664:	4616      	mov	r6, r2
 800b666:	3201      	adds	r2, #1
 800b668:	7830      	ldrb	r0, [r6, #0]
 800b66a:	f7ff ff9c 	bl	800b5a6 <__hexdig_fun>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d1f8      	bne.n	800b664 <__gethex+0x94>
 800b672:	9901      	ldr	r1, [sp, #4]
 800b674:	4652      	mov	r2, sl
 800b676:	4630      	mov	r0, r6
 800b678:	f001 ff42 	bl	800d500 <strncmp>
 800b67c:	b980      	cbnz	r0, 800b6a0 <__gethex+0xd0>
 800b67e:	b94d      	cbnz	r5, 800b694 <__gethex+0xc4>
 800b680:	eb06 050a 	add.w	r5, r6, sl
 800b684:	462a      	mov	r2, r5
 800b686:	4616      	mov	r6, r2
 800b688:	3201      	adds	r2, #1
 800b68a:	7830      	ldrb	r0, [r6, #0]
 800b68c:	f7ff ff8b 	bl	800b5a6 <__hexdig_fun>
 800b690:	2800      	cmp	r0, #0
 800b692:	d1f8      	bne.n	800b686 <__gethex+0xb6>
 800b694:	1bad      	subs	r5, r5, r6
 800b696:	00ad      	lsls	r5, r5, #2
 800b698:	e004      	b.n	800b6a4 <__gethex+0xd4>
 800b69a:	2400      	movs	r4, #0
 800b69c:	4625      	mov	r5, r4
 800b69e:	e7e0      	b.n	800b662 <__gethex+0x92>
 800b6a0:	2d00      	cmp	r5, #0
 800b6a2:	d1f7      	bne.n	800b694 <__gethex+0xc4>
 800b6a4:	7833      	ldrb	r3, [r6, #0]
 800b6a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6aa:	2b50      	cmp	r3, #80	; 0x50
 800b6ac:	d13b      	bne.n	800b726 <__gethex+0x156>
 800b6ae:	7873      	ldrb	r3, [r6, #1]
 800b6b0:	2b2b      	cmp	r3, #43	; 0x2b
 800b6b2:	d02c      	beq.n	800b70e <__gethex+0x13e>
 800b6b4:	2b2d      	cmp	r3, #45	; 0x2d
 800b6b6:	d02e      	beq.n	800b716 <__gethex+0x146>
 800b6b8:	1c71      	adds	r1, r6, #1
 800b6ba:	f04f 0900 	mov.w	r9, #0
 800b6be:	7808      	ldrb	r0, [r1, #0]
 800b6c0:	f7ff ff71 	bl	800b5a6 <__hexdig_fun>
 800b6c4:	1e43      	subs	r3, r0, #1
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b18      	cmp	r3, #24
 800b6ca:	d82c      	bhi.n	800b726 <__gethex+0x156>
 800b6cc:	f1a0 0210 	sub.w	r2, r0, #16
 800b6d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6d4:	f7ff ff67 	bl	800b5a6 <__hexdig_fun>
 800b6d8:	1e43      	subs	r3, r0, #1
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b18      	cmp	r3, #24
 800b6de:	d91d      	bls.n	800b71c <__gethex+0x14c>
 800b6e0:	f1b9 0f00 	cmp.w	r9, #0
 800b6e4:	d000      	beq.n	800b6e8 <__gethex+0x118>
 800b6e6:	4252      	negs	r2, r2
 800b6e8:	4415      	add	r5, r2
 800b6ea:	f8cb 1000 	str.w	r1, [fp]
 800b6ee:	b1e4      	cbz	r4, 800b72a <__gethex+0x15a>
 800b6f0:	9b00      	ldr	r3, [sp, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	bf14      	ite	ne
 800b6f6:	2700      	movne	r7, #0
 800b6f8:	2706      	moveq	r7, #6
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	b009      	add	sp, #36	; 0x24
 800b6fe:	ecbd 8b02 	vpop	{d8}
 800b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b706:	463e      	mov	r6, r7
 800b708:	4625      	mov	r5, r4
 800b70a:	2401      	movs	r4, #1
 800b70c:	e7ca      	b.n	800b6a4 <__gethex+0xd4>
 800b70e:	f04f 0900 	mov.w	r9, #0
 800b712:	1cb1      	adds	r1, r6, #2
 800b714:	e7d3      	b.n	800b6be <__gethex+0xee>
 800b716:	f04f 0901 	mov.w	r9, #1
 800b71a:	e7fa      	b.n	800b712 <__gethex+0x142>
 800b71c:	230a      	movs	r3, #10
 800b71e:	fb03 0202 	mla	r2, r3, r2, r0
 800b722:	3a10      	subs	r2, #16
 800b724:	e7d4      	b.n	800b6d0 <__gethex+0x100>
 800b726:	4631      	mov	r1, r6
 800b728:	e7df      	b.n	800b6ea <__gethex+0x11a>
 800b72a:	1bf3      	subs	r3, r6, r7
 800b72c:	3b01      	subs	r3, #1
 800b72e:	4621      	mov	r1, r4
 800b730:	2b07      	cmp	r3, #7
 800b732:	dc0b      	bgt.n	800b74c <__gethex+0x17c>
 800b734:	ee18 0a10 	vmov	r0, s16
 800b738:	f000 faec 	bl	800bd14 <_Balloc>
 800b73c:	4604      	mov	r4, r0
 800b73e:	b940      	cbnz	r0, 800b752 <__gethex+0x182>
 800b740:	4b5d      	ldr	r3, [pc, #372]	; (800b8b8 <__gethex+0x2e8>)
 800b742:	4602      	mov	r2, r0
 800b744:	21de      	movs	r1, #222	; 0xde
 800b746:	485d      	ldr	r0, [pc, #372]	; (800b8bc <__gethex+0x2ec>)
 800b748:	f001 ffaa 	bl	800d6a0 <__assert_func>
 800b74c:	3101      	adds	r1, #1
 800b74e:	105b      	asrs	r3, r3, #1
 800b750:	e7ee      	b.n	800b730 <__gethex+0x160>
 800b752:	f100 0914 	add.w	r9, r0, #20
 800b756:	f04f 0b00 	mov.w	fp, #0
 800b75a:	f1ca 0301 	rsb	r3, sl, #1
 800b75e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b762:	f8cd b000 	str.w	fp, [sp]
 800b766:	9306      	str	r3, [sp, #24]
 800b768:	42b7      	cmp	r7, r6
 800b76a:	d340      	bcc.n	800b7ee <__gethex+0x21e>
 800b76c:	9802      	ldr	r0, [sp, #8]
 800b76e:	9b00      	ldr	r3, [sp, #0]
 800b770:	f840 3b04 	str.w	r3, [r0], #4
 800b774:	eba0 0009 	sub.w	r0, r0, r9
 800b778:	1080      	asrs	r0, r0, #2
 800b77a:	0146      	lsls	r6, r0, #5
 800b77c:	6120      	str	r0, [r4, #16]
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 fbba 	bl	800bef8 <__hi0bits>
 800b784:	1a30      	subs	r0, r6, r0
 800b786:	f8d8 6000 	ldr.w	r6, [r8]
 800b78a:	42b0      	cmp	r0, r6
 800b78c:	dd63      	ble.n	800b856 <__gethex+0x286>
 800b78e:	1b87      	subs	r7, r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	4620      	mov	r0, r4
 800b794:	f000 ff5e 	bl	800c654 <__any_on>
 800b798:	4682      	mov	sl, r0
 800b79a:	b1a8      	cbz	r0, 800b7c8 <__gethex+0x1f8>
 800b79c:	1e7b      	subs	r3, r7, #1
 800b79e:	1159      	asrs	r1, r3, #5
 800b7a0:	f003 021f 	and.w	r2, r3, #31
 800b7a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b7a8:	f04f 0a01 	mov.w	sl, #1
 800b7ac:	fa0a f202 	lsl.w	r2, sl, r2
 800b7b0:	420a      	tst	r2, r1
 800b7b2:	d009      	beq.n	800b7c8 <__gethex+0x1f8>
 800b7b4:	4553      	cmp	r3, sl
 800b7b6:	dd05      	ble.n	800b7c4 <__gethex+0x1f4>
 800b7b8:	1eb9      	subs	r1, r7, #2
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 ff4a 	bl	800c654 <__any_on>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d145      	bne.n	800b850 <__gethex+0x280>
 800b7c4:	f04f 0a02 	mov.w	sl, #2
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7ff fe99 	bl	800b502 <rshift>
 800b7d0:	443d      	add	r5, r7
 800b7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7d6:	42ab      	cmp	r3, r5
 800b7d8:	da4c      	bge.n	800b874 <__gethex+0x2a4>
 800b7da:	ee18 0a10 	vmov	r0, s16
 800b7de:	4621      	mov	r1, r4
 800b7e0:	f000 fad8 	bl	800bd94 <_Bfree>
 800b7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	27a3      	movs	r7, #163	; 0xa3
 800b7ec:	e785      	b.n	800b6fa <__gethex+0x12a>
 800b7ee:	1e73      	subs	r3, r6, #1
 800b7f0:	9a05      	ldr	r2, [sp, #20]
 800b7f2:	9303      	str	r3, [sp, #12]
 800b7f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d019      	beq.n	800b830 <__gethex+0x260>
 800b7fc:	f1bb 0f20 	cmp.w	fp, #32
 800b800:	d107      	bne.n	800b812 <__gethex+0x242>
 800b802:	9b02      	ldr	r3, [sp, #8]
 800b804:	9a00      	ldr	r2, [sp, #0]
 800b806:	f843 2b04 	str.w	r2, [r3], #4
 800b80a:	9302      	str	r3, [sp, #8]
 800b80c:	2300      	movs	r3, #0
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	469b      	mov	fp, r3
 800b812:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b816:	f7ff fec6 	bl	800b5a6 <__hexdig_fun>
 800b81a:	9b00      	ldr	r3, [sp, #0]
 800b81c:	f000 000f 	and.w	r0, r0, #15
 800b820:	fa00 f00b 	lsl.w	r0, r0, fp
 800b824:	4303      	orrs	r3, r0
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	f10b 0b04 	add.w	fp, fp, #4
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	e00d      	b.n	800b84c <__gethex+0x27c>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	9a06      	ldr	r2, [sp, #24]
 800b834:	4413      	add	r3, r2
 800b836:	42bb      	cmp	r3, r7
 800b838:	d3e0      	bcc.n	800b7fc <__gethex+0x22c>
 800b83a:	4618      	mov	r0, r3
 800b83c:	9901      	ldr	r1, [sp, #4]
 800b83e:	9307      	str	r3, [sp, #28]
 800b840:	4652      	mov	r2, sl
 800b842:	f001 fe5d 	bl	800d500 <strncmp>
 800b846:	9b07      	ldr	r3, [sp, #28]
 800b848:	2800      	cmp	r0, #0
 800b84a:	d1d7      	bne.n	800b7fc <__gethex+0x22c>
 800b84c:	461e      	mov	r6, r3
 800b84e:	e78b      	b.n	800b768 <__gethex+0x198>
 800b850:	f04f 0a03 	mov.w	sl, #3
 800b854:	e7b8      	b.n	800b7c8 <__gethex+0x1f8>
 800b856:	da0a      	bge.n	800b86e <__gethex+0x29e>
 800b858:	1a37      	subs	r7, r6, r0
 800b85a:	4621      	mov	r1, r4
 800b85c:	ee18 0a10 	vmov	r0, s16
 800b860:	463a      	mov	r2, r7
 800b862:	f000 fcb3 	bl	800c1cc <__lshift>
 800b866:	1bed      	subs	r5, r5, r7
 800b868:	4604      	mov	r4, r0
 800b86a:	f100 0914 	add.w	r9, r0, #20
 800b86e:	f04f 0a00 	mov.w	sl, #0
 800b872:	e7ae      	b.n	800b7d2 <__gethex+0x202>
 800b874:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b878:	42a8      	cmp	r0, r5
 800b87a:	dd72      	ble.n	800b962 <__gethex+0x392>
 800b87c:	1b45      	subs	r5, r0, r5
 800b87e:	42ae      	cmp	r6, r5
 800b880:	dc36      	bgt.n	800b8f0 <__gethex+0x320>
 800b882:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d02a      	beq.n	800b8e0 <__gethex+0x310>
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d02c      	beq.n	800b8e8 <__gethex+0x318>
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d11c      	bne.n	800b8cc <__gethex+0x2fc>
 800b892:	42ae      	cmp	r6, r5
 800b894:	d11a      	bne.n	800b8cc <__gethex+0x2fc>
 800b896:	2e01      	cmp	r6, #1
 800b898:	d112      	bne.n	800b8c0 <__gethex+0x2f0>
 800b89a:	9a04      	ldr	r2, [sp, #16]
 800b89c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	6123      	str	r3, [r4, #16]
 800b8a6:	f8c9 3000 	str.w	r3, [r9]
 800b8aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8ac:	2762      	movs	r7, #98	; 0x62
 800b8ae:	601c      	str	r4, [r3, #0]
 800b8b0:	e723      	b.n	800b6fa <__gethex+0x12a>
 800b8b2:	bf00      	nop
 800b8b4:	0800dd5c 	.word	0x0800dd5c
 800b8b8:	0800dc80 	.word	0x0800dc80
 800b8bc:	0800dcf4 	.word	0x0800dcf4
 800b8c0:	1e71      	subs	r1, r6, #1
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 fec6 	bl	800c654 <__any_on>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1e6      	bne.n	800b89a <__gethex+0x2ca>
 800b8cc:	ee18 0a10 	vmov	r0, s16
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	f000 fa5f 	bl	800bd94 <_Bfree>
 800b8d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8d8:	2300      	movs	r3, #0
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	2750      	movs	r7, #80	; 0x50
 800b8de:	e70c      	b.n	800b6fa <__gethex+0x12a>
 800b8e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1f2      	bne.n	800b8cc <__gethex+0x2fc>
 800b8e6:	e7d8      	b.n	800b89a <__gethex+0x2ca>
 800b8e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1d5      	bne.n	800b89a <__gethex+0x2ca>
 800b8ee:	e7ed      	b.n	800b8cc <__gethex+0x2fc>
 800b8f0:	1e6f      	subs	r7, r5, #1
 800b8f2:	f1ba 0f00 	cmp.w	sl, #0
 800b8f6:	d131      	bne.n	800b95c <__gethex+0x38c>
 800b8f8:	b127      	cbz	r7, 800b904 <__gethex+0x334>
 800b8fa:	4639      	mov	r1, r7
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f000 fea9 	bl	800c654 <__any_on>
 800b902:	4682      	mov	sl, r0
 800b904:	117b      	asrs	r3, r7, #5
 800b906:	2101      	movs	r1, #1
 800b908:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b90c:	f007 071f 	and.w	r7, r7, #31
 800b910:	fa01 f707 	lsl.w	r7, r1, r7
 800b914:	421f      	tst	r7, r3
 800b916:	4629      	mov	r1, r5
 800b918:	4620      	mov	r0, r4
 800b91a:	bf18      	it	ne
 800b91c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b920:	1b76      	subs	r6, r6, r5
 800b922:	f7ff fdee 	bl	800b502 <rshift>
 800b926:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b92a:	2702      	movs	r7, #2
 800b92c:	f1ba 0f00 	cmp.w	sl, #0
 800b930:	d048      	beq.n	800b9c4 <__gethex+0x3f4>
 800b932:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b936:	2b02      	cmp	r3, #2
 800b938:	d015      	beq.n	800b966 <__gethex+0x396>
 800b93a:	2b03      	cmp	r3, #3
 800b93c:	d017      	beq.n	800b96e <__gethex+0x39e>
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d109      	bne.n	800b956 <__gethex+0x386>
 800b942:	f01a 0f02 	tst.w	sl, #2
 800b946:	d006      	beq.n	800b956 <__gethex+0x386>
 800b948:	f8d9 0000 	ldr.w	r0, [r9]
 800b94c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b950:	f01a 0f01 	tst.w	sl, #1
 800b954:	d10e      	bne.n	800b974 <__gethex+0x3a4>
 800b956:	f047 0710 	orr.w	r7, r7, #16
 800b95a:	e033      	b.n	800b9c4 <__gethex+0x3f4>
 800b95c:	f04f 0a01 	mov.w	sl, #1
 800b960:	e7d0      	b.n	800b904 <__gethex+0x334>
 800b962:	2701      	movs	r7, #1
 800b964:	e7e2      	b.n	800b92c <__gethex+0x35c>
 800b966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b968:	f1c3 0301 	rsb	r3, r3, #1
 800b96c:	9315      	str	r3, [sp, #84]	; 0x54
 800b96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0f0      	beq.n	800b956 <__gethex+0x386>
 800b974:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b978:	f104 0314 	add.w	r3, r4, #20
 800b97c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b980:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b984:	f04f 0c00 	mov.w	ip, #0
 800b988:	4618      	mov	r0, r3
 800b98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b992:	d01c      	beq.n	800b9ce <__gethex+0x3fe>
 800b994:	3201      	adds	r2, #1
 800b996:	6002      	str	r2, [r0, #0]
 800b998:	2f02      	cmp	r7, #2
 800b99a:	f104 0314 	add.w	r3, r4, #20
 800b99e:	d13f      	bne.n	800ba20 <__gethex+0x450>
 800b9a0:	f8d8 2000 	ldr.w	r2, [r8]
 800b9a4:	3a01      	subs	r2, #1
 800b9a6:	42b2      	cmp	r2, r6
 800b9a8:	d10a      	bne.n	800b9c0 <__gethex+0x3f0>
 800b9aa:	1171      	asrs	r1, r6, #5
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9b2:	f006 061f 	and.w	r6, r6, #31
 800b9b6:	fa02 f606 	lsl.w	r6, r2, r6
 800b9ba:	421e      	tst	r6, r3
 800b9bc:	bf18      	it	ne
 800b9be:	4617      	movne	r7, r2
 800b9c0:	f047 0720 	orr.w	r7, r7, #32
 800b9c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9c6:	601c      	str	r4, [r3, #0]
 800b9c8:	9b04      	ldr	r3, [sp, #16]
 800b9ca:	601d      	str	r5, [r3, #0]
 800b9cc:	e695      	b.n	800b6fa <__gethex+0x12a>
 800b9ce:	4299      	cmp	r1, r3
 800b9d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b9d4:	d8d8      	bhi.n	800b988 <__gethex+0x3b8>
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	459b      	cmp	fp, r3
 800b9da:	db19      	blt.n	800ba10 <__gethex+0x440>
 800b9dc:	6861      	ldr	r1, [r4, #4]
 800b9de:	ee18 0a10 	vmov	r0, s16
 800b9e2:	3101      	adds	r1, #1
 800b9e4:	f000 f996 	bl	800bd14 <_Balloc>
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	b918      	cbnz	r0, 800b9f4 <__gethex+0x424>
 800b9ec:	4b1a      	ldr	r3, [pc, #104]	; (800ba58 <__gethex+0x488>)
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	2184      	movs	r1, #132	; 0x84
 800b9f2:	e6a8      	b.n	800b746 <__gethex+0x176>
 800b9f4:	6922      	ldr	r2, [r4, #16]
 800b9f6:	3202      	adds	r2, #2
 800b9f8:	f104 010c 	add.w	r1, r4, #12
 800b9fc:	0092      	lsls	r2, r2, #2
 800b9fe:	300c      	adds	r0, #12
 800ba00:	f7fc fe08 	bl	8008614 <memcpy>
 800ba04:	4621      	mov	r1, r4
 800ba06:	ee18 0a10 	vmov	r0, s16
 800ba0a:	f000 f9c3 	bl	800bd94 <_Bfree>
 800ba0e:	464c      	mov	r4, r9
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba18:	6122      	str	r2, [r4, #16]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	615a      	str	r2, [r3, #20]
 800ba1e:	e7bb      	b.n	800b998 <__gethex+0x3c8>
 800ba20:	6922      	ldr	r2, [r4, #16]
 800ba22:	455a      	cmp	r2, fp
 800ba24:	dd0b      	ble.n	800ba3e <__gethex+0x46e>
 800ba26:	2101      	movs	r1, #1
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f7ff fd6a 	bl	800b502 <rshift>
 800ba2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba32:	3501      	adds	r5, #1
 800ba34:	42ab      	cmp	r3, r5
 800ba36:	f6ff aed0 	blt.w	800b7da <__gethex+0x20a>
 800ba3a:	2701      	movs	r7, #1
 800ba3c:	e7c0      	b.n	800b9c0 <__gethex+0x3f0>
 800ba3e:	f016 061f 	ands.w	r6, r6, #31
 800ba42:	d0fa      	beq.n	800ba3a <__gethex+0x46a>
 800ba44:	4453      	add	r3, sl
 800ba46:	f1c6 0620 	rsb	r6, r6, #32
 800ba4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ba4e:	f000 fa53 	bl	800bef8 <__hi0bits>
 800ba52:	42b0      	cmp	r0, r6
 800ba54:	dbe7      	blt.n	800ba26 <__gethex+0x456>
 800ba56:	e7f0      	b.n	800ba3a <__gethex+0x46a>
 800ba58:	0800dc80 	.word	0x0800dc80

0800ba5c <L_shift>:
 800ba5c:	f1c2 0208 	rsb	r2, r2, #8
 800ba60:	0092      	lsls	r2, r2, #2
 800ba62:	b570      	push	{r4, r5, r6, lr}
 800ba64:	f1c2 0620 	rsb	r6, r2, #32
 800ba68:	6843      	ldr	r3, [r0, #4]
 800ba6a:	6804      	ldr	r4, [r0, #0]
 800ba6c:	fa03 f506 	lsl.w	r5, r3, r6
 800ba70:	432c      	orrs	r4, r5
 800ba72:	40d3      	lsrs	r3, r2
 800ba74:	6004      	str	r4, [r0, #0]
 800ba76:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba7a:	4288      	cmp	r0, r1
 800ba7c:	d3f4      	bcc.n	800ba68 <L_shift+0xc>
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}

0800ba80 <__match>:
 800ba80:	b530      	push	{r4, r5, lr}
 800ba82:	6803      	ldr	r3, [r0, #0]
 800ba84:	3301      	adds	r3, #1
 800ba86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba8a:	b914      	cbnz	r4, 800ba92 <__match+0x12>
 800ba8c:	6003      	str	r3, [r0, #0]
 800ba8e:	2001      	movs	r0, #1
 800ba90:	bd30      	pop	{r4, r5, pc}
 800ba92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba9a:	2d19      	cmp	r5, #25
 800ba9c:	bf98      	it	ls
 800ba9e:	3220      	addls	r2, #32
 800baa0:	42a2      	cmp	r2, r4
 800baa2:	d0f0      	beq.n	800ba86 <__match+0x6>
 800baa4:	2000      	movs	r0, #0
 800baa6:	e7f3      	b.n	800ba90 <__match+0x10>

0800baa8 <__hexnan>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	680b      	ldr	r3, [r1, #0]
 800baae:	115e      	asrs	r6, r3, #5
 800bab0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bab4:	f013 031f 	ands.w	r3, r3, #31
 800bab8:	b087      	sub	sp, #28
 800baba:	bf18      	it	ne
 800babc:	3604      	addne	r6, #4
 800babe:	2500      	movs	r5, #0
 800bac0:	1f37      	subs	r7, r6, #4
 800bac2:	4690      	mov	r8, r2
 800bac4:	6802      	ldr	r2, [r0, #0]
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	4682      	mov	sl, r0
 800baca:	f846 5c04 	str.w	r5, [r6, #-4]
 800bace:	46b9      	mov	r9, r7
 800bad0:	463c      	mov	r4, r7
 800bad2:	9502      	str	r5, [sp, #8]
 800bad4:	46ab      	mov	fp, r5
 800bad6:	7851      	ldrb	r1, [r2, #1]
 800bad8:	1c53      	adds	r3, r2, #1
 800bada:	9303      	str	r3, [sp, #12]
 800badc:	b341      	cbz	r1, 800bb30 <__hexnan+0x88>
 800bade:	4608      	mov	r0, r1
 800bae0:	9205      	str	r2, [sp, #20]
 800bae2:	9104      	str	r1, [sp, #16]
 800bae4:	f7ff fd5f 	bl	800b5a6 <__hexdig_fun>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d14f      	bne.n	800bb8c <__hexnan+0xe4>
 800baec:	9904      	ldr	r1, [sp, #16]
 800baee:	9a05      	ldr	r2, [sp, #20]
 800baf0:	2920      	cmp	r1, #32
 800baf2:	d818      	bhi.n	800bb26 <__hexnan+0x7e>
 800baf4:	9b02      	ldr	r3, [sp, #8]
 800baf6:	459b      	cmp	fp, r3
 800baf8:	dd13      	ble.n	800bb22 <__hexnan+0x7a>
 800bafa:	454c      	cmp	r4, r9
 800bafc:	d206      	bcs.n	800bb0c <__hexnan+0x64>
 800bafe:	2d07      	cmp	r5, #7
 800bb00:	dc04      	bgt.n	800bb0c <__hexnan+0x64>
 800bb02:	462a      	mov	r2, r5
 800bb04:	4649      	mov	r1, r9
 800bb06:	4620      	mov	r0, r4
 800bb08:	f7ff ffa8 	bl	800ba5c <L_shift>
 800bb0c:	4544      	cmp	r4, r8
 800bb0e:	d950      	bls.n	800bbb2 <__hexnan+0x10a>
 800bb10:	2300      	movs	r3, #0
 800bb12:	f1a4 0904 	sub.w	r9, r4, #4
 800bb16:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb1a:	f8cd b008 	str.w	fp, [sp, #8]
 800bb1e:	464c      	mov	r4, r9
 800bb20:	461d      	mov	r5, r3
 800bb22:	9a03      	ldr	r2, [sp, #12]
 800bb24:	e7d7      	b.n	800bad6 <__hexnan+0x2e>
 800bb26:	2929      	cmp	r1, #41	; 0x29
 800bb28:	d156      	bne.n	800bbd8 <__hexnan+0x130>
 800bb2a:	3202      	adds	r2, #2
 800bb2c:	f8ca 2000 	str.w	r2, [sl]
 800bb30:	f1bb 0f00 	cmp.w	fp, #0
 800bb34:	d050      	beq.n	800bbd8 <__hexnan+0x130>
 800bb36:	454c      	cmp	r4, r9
 800bb38:	d206      	bcs.n	800bb48 <__hexnan+0xa0>
 800bb3a:	2d07      	cmp	r5, #7
 800bb3c:	dc04      	bgt.n	800bb48 <__hexnan+0xa0>
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4649      	mov	r1, r9
 800bb42:	4620      	mov	r0, r4
 800bb44:	f7ff ff8a 	bl	800ba5c <L_shift>
 800bb48:	4544      	cmp	r4, r8
 800bb4a:	d934      	bls.n	800bbb6 <__hexnan+0x10e>
 800bb4c:	f1a8 0204 	sub.w	r2, r8, #4
 800bb50:	4623      	mov	r3, r4
 800bb52:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb56:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb5a:	429f      	cmp	r7, r3
 800bb5c:	d2f9      	bcs.n	800bb52 <__hexnan+0xaa>
 800bb5e:	1b3b      	subs	r3, r7, r4
 800bb60:	f023 0303 	bic.w	r3, r3, #3
 800bb64:	3304      	adds	r3, #4
 800bb66:	3401      	adds	r4, #1
 800bb68:	3e03      	subs	r6, #3
 800bb6a:	42b4      	cmp	r4, r6
 800bb6c:	bf88      	it	hi
 800bb6e:	2304      	movhi	r3, #4
 800bb70:	4443      	add	r3, r8
 800bb72:	2200      	movs	r2, #0
 800bb74:	f843 2b04 	str.w	r2, [r3], #4
 800bb78:	429f      	cmp	r7, r3
 800bb7a:	d2fb      	bcs.n	800bb74 <__hexnan+0xcc>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	b91b      	cbnz	r3, 800bb88 <__hexnan+0xe0>
 800bb80:	4547      	cmp	r7, r8
 800bb82:	d127      	bne.n	800bbd4 <__hexnan+0x12c>
 800bb84:	2301      	movs	r3, #1
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	2005      	movs	r0, #5
 800bb8a:	e026      	b.n	800bbda <__hexnan+0x132>
 800bb8c:	3501      	adds	r5, #1
 800bb8e:	2d08      	cmp	r5, #8
 800bb90:	f10b 0b01 	add.w	fp, fp, #1
 800bb94:	dd06      	ble.n	800bba4 <__hexnan+0xfc>
 800bb96:	4544      	cmp	r4, r8
 800bb98:	d9c3      	bls.n	800bb22 <__hexnan+0x7a>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bba0:	2501      	movs	r5, #1
 800bba2:	3c04      	subs	r4, #4
 800bba4:	6822      	ldr	r2, [r4, #0]
 800bba6:	f000 000f 	and.w	r0, r0, #15
 800bbaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bbae:	6022      	str	r2, [r4, #0]
 800bbb0:	e7b7      	b.n	800bb22 <__hexnan+0x7a>
 800bbb2:	2508      	movs	r5, #8
 800bbb4:	e7b5      	b.n	800bb22 <__hexnan+0x7a>
 800bbb6:	9b01      	ldr	r3, [sp, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d0df      	beq.n	800bb7c <__hexnan+0xd4>
 800bbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc0:	f1c3 0320 	rsb	r3, r3, #32
 800bbc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bbcc:	401a      	ands	r2, r3
 800bbce:	f846 2c04 	str.w	r2, [r6, #-4]
 800bbd2:	e7d3      	b.n	800bb7c <__hexnan+0xd4>
 800bbd4:	3f04      	subs	r7, #4
 800bbd6:	e7d1      	b.n	800bb7c <__hexnan+0xd4>
 800bbd8:	2004      	movs	r0, #4
 800bbda:	b007      	add	sp, #28
 800bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbe0 <_localeconv_r>:
 800bbe0:	4800      	ldr	r0, [pc, #0]	; (800bbe4 <_localeconv_r+0x4>)
 800bbe2:	4770      	bx	lr
 800bbe4:	20000164 	.word	0x20000164

0800bbe8 <__retarget_lock_init_recursive>:
 800bbe8:	4770      	bx	lr

0800bbea <__retarget_lock_acquire_recursive>:
 800bbea:	4770      	bx	lr

0800bbec <__retarget_lock_release_recursive>:
 800bbec:	4770      	bx	lr
	...

0800bbf0 <_lseek_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4d07      	ldr	r5, [pc, #28]	; (800bc10 <_lseek_r+0x20>)
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	4608      	mov	r0, r1
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	602a      	str	r2, [r5, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f7f5 ff0a 	bl	8001a18 <_lseek>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_lseek_r+0x1e>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_lseek_r+0x1e>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	20000854 	.word	0x20000854

0800bc14 <__swhatbuf_r>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	460e      	mov	r6, r1
 800bc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	b096      	sub	sp, #88	; 0x58
 800bc20:	4614      	mov	r4, r2
 800bc22:	461d      	mov	r5, r3
 800bc24:	da08      	bge.n	800bc38 <__swhatbuf_r+0x24>
 800bc26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	602a      	str	r2, [r5, #0]
 800bc2e:	061a      	lsls	r2, r3, #24
 800bc30:	d410      	bmi.n	800bc54 <__swhatbuf_r+0x40>
 800bc32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc36:	e00e      	b.n	800bc56 <__swhatbuf_r+0x42>
 800bc38:	466a      	mov	r2, sp
 800bc3a:	f001 fd61 	bl	800d700 <_fstat_r>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	dbf1      	blt.n	800bc26 <__swhatbuf_r+0x12>
 800bc42:	9a01      	ldr	r2, [sp, #4]
 800bc44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc4c:	425a      	negs	r2, r3
 800bc4e:	415a      	adcs	r2, r3
 800bc50:	602a      	str	r2, [r5, #0]
 800bc52:	e7ee      	b.n	800bc32 <__swhatbuf_r+0x1e>
 800bc54:	2340      	movs	r3, #64	; 0x40
 800bc56:	2000      	movs	r0, #0
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	b016      	add	sp, #88	; 0x58
 800bc5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc60 <__smakebuf_r>:
 800bc60:	898b      	ldrh	r3, [r1, #12]
 800bc62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc64:	079d      	lsls	r5, r3, #30
 800bc66:	4606      	mov	r6, r0
 800bc68:	460c      	mov	r4, r1
 800bc6a:	d507      	bpl.n	800bc7c <__smakebuf_r+0x1c>
 800bc6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	6123      	str	r3, [r4, #16]
 800bc74:	2301      	movs	r3, #1
 800bc76:	6163      	str	r3, [r4, #20]
 800bc78:	b002      	add	sp, #8
 800bc7a:	bd70      	pop	{r4, r5, r6, pc}
 800bc7c:	ab01      	add	r3, sp, #4
 800bc7e:	466a      	mov	r2, sp
 800bc80:	f7ff ffc8 	bl	800bc14 <__swhatbuf_r>
 800bc84:	9900      	ldr	r1, [sp, #0]
 800bc86:	4605      	mov	r5, r0
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f000 fd87 	bl	800c79c <_malloc_r>
 800bc8e:	b948      	cbnz	r0, 800bca4 <__smakebuf_r+0x44>
 800bc90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc94:	059a      	lsls	r2, r3, #22
 800bc96:	d4ef      	bmi.n	800bc78 <__smakebuf_r+0x18>
 800bc98:	f023 0303 	bic.w	r3, r3, #3
 800bc9c:	f043 0302 	orr.w	r3, r3, #2
 800bca0:	81a3      	strh	r3, [r4, #12]
 800bca2:	e7e3      	b.n	800bc6c <__smakebuf_r+0xc>
 800bca4:	4b0d      	ldr	r3, [pc, #52]	; (800bcdc <__smakebuf_r+0x7c>)
 800bca6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	6020      	str	r0, [r4, #0]
 800bcac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb0:	81a3      	strh	r3, [r4, #12]
 800bcb2:	9b00      	ldr	r3, [sp, #0]
 800bcb4:	6163      	str	r3, [r4, #20]
 800bcb6:	9b01      	ldr	r3, [sp, #4]
 800bcb8:	6120      	str	r0, [r4, #16]
 800bcba:	b15b      	cbz	r3, 800bcd4 <__smakebuf_r+0x74>
 800bcbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f001 fd2f 	bl	800d724 <_isatty_r>
 800bcc6:	b128      	cbz	r0, 800bcd4 <__smakebuf_r+0x74>
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	f023 0303 	bic.w	r3, r3, #3
 800bcce:	f043 0301 	orr.w	r3, r3, #1
 800bcd2:	81a3      	strh	r3, [r4, #12]
 800bcd4:	89a0      	ldrh	r0, [r4, #12]
 800bcd6:	4305      	orrs	r5, r0
 800bcd8:	81a5      	strh	r5, [r4, #12]
 800bcda:	e7cd      	b.n	800bc78 <__smakebuf_r+0x18>
 800bcdc:	0800b361 	.word	0x0800b361

0800bce0 <malloc>:
 800bce0:	4b02      	ldr	r3, [pc, #8]	; (800bcec <malloc+0xc>)
 800bce2:	4601      	mov	r1, r0
 800bce4:	6818      	ldr	r0, [r3, #0]
 800bce6:	f000 bd59 	b.w	800c79c <_malloc_r>
 800bcea:	bf00      	nop
 800bcec:	2000000c 	.word	0x2000000c

0800bcf0 <__ascii_mbtowc>:
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	b901      	cbnz	r1, 800bcf6 <__ascii_mbtowc+0x6>
 800bcf4:	a901      	add	r1, sp, #4
 800bcf6:	b142      	cbz	r2, 800bd0a <__ascii_mbtowc+0x1a>
 800bcf8:	b14b      	cbz	r3, 800bd0e <__ascii_mbtowc+0x1e>
 800bcfa:	7813      	ldrb	r3, [r2, #0]
 800bcfc:	600b      	str	r3, [r1, #0]
 800bcfe:	7812      	ldrb	r2, [r2, #0]
 800bd00:	1e10      	subs	r0, r2, #0
 800bd02:	bf18      	it	ne
 800bd04:	2001      	movne	r0, #1
 800bd06:	b002      	add	sp, #8
 800bd08:	4770      	bx	lr
 800bd0a:	4610      	mov	r0, r2
 800bd0c:	e7fb      	b.n	800bd06 <__ascii_mbtowc+0x16>
 800bd0e:	f06f 0001 	mvn.w	r0, #1
 800bd12:	e7f8      	b.n	800bd06 <__ascii_mbtowc+0x16>

0800bd14 <_Balloc>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd18:	4604      	mov	r4, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	b976      	cbnz	r6, 800bd3c <_Balloc+0x28>
 800bd1e:	2010      	movs	r0, #16
 800bd20:	f7ff ffde 	bl	800bce0 <malloc>
 800bd24:	4602      	mov	r2, r0
 800bd26:	6260      	str	r0, [r4, #36]	; 0x24
 800bd28:	b920      	cbnz	r0, 800bd34 <_Balloc+0x20>
 800bd2a:	4b18      	ldr	r3, [pc, #96]	; (800bd8c <_Balloc+0x78>)
 800bd2c:	4818      	ldr	r0, [pc, #96]	; (800bd90 <_Balloc+0x7c>)
 800bd2e:	2166      	movs	r1, #102	; 0x66
 800bd30:	f001 fcb6 	bl	800d6a0 <__assert_func>
 800bd34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd38:	6006      	str	r6, [r0, #0]
 800bd3a:	60c6      	str	r6, [r0, #12]
 800bd3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd3e:	68f3      	ldr	r3, [r6, #12]
 800bd40:	b183      	cbz	r3, 800bd64 <_Balloc+0x50>
 800bd42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd4a:	b9b8      	cbnz	r0, 800bd7c <_Balloc+0x68>
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	fa01 f605 	lsl.w	r6, r1, r5
 800bd52:	1d72      	adds	r2, r6, #5
 800bd54:	0092      	lsls	r2, r2, #2
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 fc9d 	bl	800c696 <_calloc_r>
 800bd5c:	b160      	cbz	r0, 800bd78 <_Balloc+0x64>
 800bd5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd62:	e00e      	b.n	800bd82 <_Balloc+0x6e>
 800bd64:	2221      	movs	r2, #33	; 0x21
 800bd66:	2104      	movs	r1, #4
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f000 fc94 	bl	800c696 <_calloc_r>
 800bd6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd70:	60f0      	str	r0, [r6, #12]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1e4      	bne.n	800bd42 <_Balloc+0x2e>
 800bd78:	2000      	movs	r0, #0
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	6802      	ldr	r2, [r0, #0]
 800bd7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd82:	2300      	movs	r3, #0
 800bd84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd88:	e7f7      	b.n	800bd7a <_Balloc+0x66>
 800bd8a:	bf00      	nop
 800bd8c:	0800dc0e 	.word	0x0800dc0e
 800bd90:	0800dd70 	.word	0x0800dd70

0800bd94 <_Bfree>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd98:	4605      	mov	r5, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	b976      	cbnz	r6, 800bdbc <_Bfree+0x28>
 800bd9e:	2010      	movs	r0, #16
 800bda0:	f7ff ff9e 	bl	800bce0 <malloc>
 800bda4:	4602      	mov	r2, r0
 800bda6:	6268      	str	r0, [r5, #36]	; 0x24
 800bda8:	b920      	cbnz	r0, 800bdb4 <_Bfree+0x20>
 800bdaa:	4b09      	ldr	r3, [pc, #36]	; (800bdd0 <_Bfree+0x3c>)
 800bdac:	4809      	ldr	r0, [pc, #36]	; (800bdd4 <_Bfree+0x40>)
 800bdae:	218a      	movs	r1, #138	; 0x8a
 800bdb0:	f001 fc76 	bl	800d6a0 <__assert_func>
 800bdb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdb8:	6006      	str	r6, [r0, #0]
 800bdba:	60c6      	str	r6, [r0, #12]
 800bdbc:	b13c      	cbz	r4, 800bdce <_Bfree+0x3a>
 800bdbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdc0:	6862      	ldr	r2, [r4, #4]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdc8:	6021      	str	r1, [r4, #0]
 800bdca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdce:	bd70      	pop	{r4, r5, r6, pc}
 800bdd0:	0800dc0e 	.word	0x0800dc0e
 800bdd4:	0800dd70 	.word	0x0800dd70

0800bdd8 <__multadd>:
 800bdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bddc:	690d      	ldr	r5, [r1, #16]
 800bdde:	4607      	mov	r7, r0
 800bde0:	460c      	mov	r4, r1
 800bde2:	461e      	mov	r6, r3
 800bde4:	f101 0c14 	add.w	ip, r1, #20
 800bde8:	2000      	movs	r0, #0
 800bdea:	f8dc 3000 	ldr.w	r3, [ip]
 800bdee:	b299      	uxth	r1, r3
 800bdf0:	fb02 6101 	mla	r1, r2, r1, r6
 800bdf4:	0c1e      	lsrs	r6, r3, #16
 800bdf6:	0c0b      	lsrs	r3, r1, #16
 800bdf8:	fb02 3306 	mla	r3, r2, r6, r3
 800bdfc:	b289      	uxth	r1, r1
 800bdfe:	3001      	adds	r0, #1
 800be00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be04:	4285      	cmp	r5, r0
 800be06:	f84c 1b04 	str.w	r1, [ip], #4
 800be0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be0e:	dcec      	bgt.n	800bdea <__multadd+0x12>
 800be10:	b30e      	cbz	r6, 800be56 <__multadd+0x7e>
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	42ab      	cmp	r3, r5
 800be16:	dc19      	bgt.n	800be4c <__multadd+0x74>
 800be18:	6861      	ldr	r1, [r4, #4]
 800be1a:	4638      	mov	r0, r7
 800be1c:	3101      	adds	r1, #1
 800be1e:	f7ff ff79 	bl	800bd14 <_Balloc>
 800be22:	4680      	mov	r8, r0
 800be24:	b928      	cbnz	r0, 800be32 <__multadd+0x5a>
 800be26:	4602      	mov	r2, r0
 800be28:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <__multadd+0x84>)
 800be2a:	480d      	ldr	r0, [pc, #52]	; (800be60 <__multadd+0x88>)
 800be2c:	21b5      	movs	r1, #181	; 0xb5
 800be2e:	f001 fc37 	bl	800d6a0 <__assert_func>
 800be32:	6922      	ldr	r2, [r4, #16]
 800be34:	3202      	adds	r2, #2
 800be36:	f104 010c 	add.w	r1, r4, #12
 800be3a:	0092      	lsls	r2, r2, #2
 800be3c:	300c      	adds	r0, #12
 800be3e:	f7fc fbe9 	bl	8008614 <memcpy>
 800be42:	4621      	mov	r1, r4
 800be44:	4638      	mov	r0, r7
 800be46:	f7ff ffa5 	bl	800bd94 <_Bfree>
 800be4a:	4644      	mov	r4, r8
 800be4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be50:	3501      	adds	r5, #1
 800be52:	615e      	str	r6, [r3, #20]
 800be54:	6125      	str	r5, [r4, #16]
 800be56:	4620      	mov	r0, r4
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	0800dc80 	.word	0x0800dc80
 800be60:	0800dd70 	.word	0x0800dd70

0800be64 <__s2b>:
 800be64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	4615      	mov	r5, r2
 800be6c:	461f      	mov	r7, r3
 800be6e:	2209      	movs	r2, #9
 800be70:	3308      	adds	r3, #8
 800be72:	4606      	mov	r6, r0
 800be74:	fb93 f3f2 	sdiv	r3, r3, r2
 800be78:	2100      	movs	r1, #0
 800be7a:	2201      	movs	r2, #1
 800be7c:	429a      	cmp	r2, r3
 800be7e:	db09      	blt.n	800be94 <__s2b+0x30>
 800be80:	4630      	mov	r0, r6
 800be82:	f7ff ff47 	bl	800bd14 <_Balloc>
 800be86:	b940      	cbnz	r0, 800be9a <__s2b+0x36>
 800be88:	4602      	mov	r2, r0
 800be8a:	4b19      	ldr	r3, [pc, #100]	; (800bef0 <__s2b+0x8c>)
 800be8c:	4819      	ldr	r0, [pc, #100]	; (800bef4 <__s2b+0x90>)
 800be8e:	21ce      	movs	r1, #206	; 0xce
 800be90:	f001 fc06 	bl	800d6a0 <__assert_func>
 800be94:	0052      	lsls	r2, r2, #1
 800be96:	3101      	adds	r1, #1
 800be98:	e7f0      	b.n	800be7c <__s2b+0x18>
 800be9a:	9b08      	ldr	r3, [sp, #32]
 800be9c:	6143      	str	r3, [r0, #20]
 800be9e:	2d09      	cmp	r5, #9
 800bea0:	f04f 0301 	mov.w	r3, #1
 800bea4:	6103      	str	r3, [r0, #16]
 800bea6:	dd16      	ble.n	800bed6 <__s2b+0x72>
 800bea8:	f104 0909 	add.w	r9, r4, #9
 800beac:	46c8      	mov	r8, r9
 800beae:	442c      	add	r4, r5
 800beb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800beb4:	4601      	mov	r1, r0
 800beb6:	3b30      	subs	r3, #48	; 0x30
 800beb8:	220a      	movs	r2, #10
 800beba:	4630      	mov	r0, r6
 800bebc:	f7ff ff8c 	bl	800bdd8 <__multadd>
 800bec0:	45a0      	cmp	r8, r4
 800bec2:	d1f5      	bne.n	800beb0 <__s2b+0x4c>
 800bec4:	f1a5 0408 	sub.w	r4, r5, #8
 800bec8:	444c      	add	r4, r9
 800beca:	1b2d      	subs	r5, r5, r4
 800becc:	1963      	adds	r3, r4, r5
 800bece:	42bb      	cmp	r3, r7
 800bed0:	db04      	blt.n	800bedc <__s2b+0x78>
 800bed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed6:	340a      	adds	r4, #10
 800bed8:	2509      	movs	r5, #9
 800beda:	e7f6      	b.n	800beca <__s2b+0x66>
 800bedc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bee0:	4601      	mov	r1, r0
 800bee2:	3b30      	subs	r3, #48	; 0x30
 800bee4:	220a      	movs	r2, #10
 800bee6:	4630      	mov	r0, r6
 800bee8:	f7ff ff76 	bl	800bdd8 <__multadd>
 800beec:	e7ee      	b.n	800becc <__s2b+0x68>
 800beee:	bf00      	nop
 800bef0:	0800dc80 	.word	0x0800dc80
 800bef4:	0800dd70 	.word	0x0800dd70

0800bef8 <__hi0bits>:
 800bef8:	0c03      	lsrs	r3, r0, #16
 800befa:	041b      	lsls	r3, r3, #16
 800befc:	b9d3      	cbnz	r3, 800bf34 <__hi0bits+0x3c>
 800befe:	0400      	lsls	r0, r0, #16
 800bf00:	2310      	movs	r3, #16
 800bf02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf06:	bf04      	itt	eq
 800bf08:	0200      	lsleq	r0, r0, #8
 800bf0a:	3308      	addeq	r3, #8
 800bf0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf10:	bf04      	itt	eq
 800bf12:	0100      	lsleq	r0, r0, #4
 800bf14:	3304      	addeq	r3, #4
 800bf16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf1a:	bf04      	itt	eq
 800bf1c:	0080      	lsleq	r0, r0, #2
 800bf1e:	3302      	addeq	r3, #2
 800bf20:	2800      	cmp	r0, #0
 800bf22:	db05      	blt.n	800bf30 <__hi0bits+0x38>
 800bf24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf28:	f103 0301 	add.w	r3, r3, #1
 800bf2c:	bf08      	it	eq
 800bf2e:	2320      	moveq	r3, #32
 800bf30:	4618      	mov	r0, r3
 800bf32:	4770      	bx	lr
 800bf34:	2300      	movs	r3, #0
 800bf36:	e7e4      	b.n	800bf02 <__hi0bits+0xa>

0800bf38 <__lo0bits>:
 800bf38:	6803      	ldr	r3, [r0, #0]
 800bf3a:	f013 0207 	ands.w	r2, r3, #7
 800bf3e:	4601      	mov	r1, r0
 800bf40:	d00b      	beq.n	800bf5a <__lo0bits+0x22>
 800bf42:	07da      	lsls	r2, r3, #31
 800bf44:	d423      	bmi.n	800bf8e <__lo0bits+0x56>
 800bf46:	0798      	lsls	r0, r3, #30
 800bf48:	bf49      	itett	mi
 800bf4a:	085b      	lsrmi	r3, r3, #1
 800bf4c:	089b      	lsrpl	r3, r3, #2
 800bf4e:	2001      	movmi	r0, #1
 800bf50:	600b      	strmi	r3, [r1, #0]
 800bf52:	bf5c      	itt	pl
 800bf54:	600b      	strpl	r3, [r1, #0]
 800bf56:	2002      	movpl	r0, #2
 800bf58:	4770      	bx	lr
 800bf5a:	b298      	uxth	r0, r3
 800bf5c:	b9a8      	cbnz	r0, 800bf8a <__lo0bits+0x52>
 800bf5e:	0c1b      	lsrs	r3, r3, #16
 800bf60:	2010      	movs	r0, #16
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	b90a      	cbnz	r2, 800bf6a <__lo0bits+0x32>
 800bf66:	3008      	adds	r0, #8
 800bf68:	0a1b      	lsrs	r3, r3, #8
 800bf6a:	071a      	lsls	r2, r3, #28
 800bf6c:	bf04      	itt	eq
 800bf6e:	091b      	lsreq	r3, r3, #4
 800bf70:	3004      	addeq	r0, #4
 800bf72:	079a      	lsls	r2, r3, #30
 800bf74:	bf04      	itt	eq
 800bf76:	089b      	lsreq	r3, r3, #2
 800bf78:	3002      	addeq	r0, #2
 800bf7a:	07da      	lsls	r2, r3, #31
 800bf7c:	d403      	bmi.n	800bf86 <__lo0bits+0x4e>
 800bf7e:	085b      	lsrs	r3, r3, #1
 800bf80:	f100 0001 	add.w	r0, r0, #1
 800bf84:	d005      	beq.n	800bf92 <__lo0bits+0x5a>
 800bf86:	600b      	str	r3, [r1, #0]
 800bf88:	4770      	bx	lr
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	e7e9      	b.n	800bf62 <__lo0bits+0x2a>
 800bf8e:	2000      	movs	r0, #0
 800bf90:	4770      	bx	lr
 800bf92:	2020      	movs	r0, #32
 800bf94:	4770      	bx	lr
	...

0800bf98 <__i2b>:
 800bf98:	b510      	push	{r4, lr}
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	f7ff feb9 	bl	800bd14 <_Balloc>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	b928      	cbnz	r0, 800bfb2 <__i2b+0x1a>
 800bfa6:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <__i2b+0x24>)
 800bfa8:	4805      	ldr	r0, [pc, #20]	; (800bfc0 <__i2b+0x28>)
 800bfaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bfae:	f001 fb77 	bl	800d6a0 <__assert_func>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	6144      	str	r4, [r0, #20]
 800bfb6:	6103      	str	r3, [r0, #16]
 800bfb8:	bd10      	pop	{r4, pc}
 800bfba:	bf00      	nop
 800bfbc:	0800dc80 	.word	0x0800dc80
 800bfc0:	0800dd70 	.word	0x0800dd70

0800bfc4 <__multiply>:
 800bfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	4691      	mov	r9, r2
 800bfca:	690a      	ldr	r2, [r1, #16]
 800bfcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	bfb8      	it	lt
 800bfd4:	460b      	movlt	r3, r1
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	bfbc      	itt	lt
 800bfda:	464c      	movlt	r4, r9
 800bfdc:	4699      	movlt	r9, r3
 800bfde:	6927      	ldr	r7, [r4, #16]
 800bfe0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	6861      	ldr	r1, [r4, #4]
 800bfe8:	eb07 060a 	add.w	r6, r7, sl
 800bfec:	42b3      	cmp	r3, r6
 800bfee:	b085      	sub	sp, #20
 800bff0:	bfb8      	it	lt
 800bff2:	3101      	addlt	r1, #1
 800bff4:	f7ff fe8e 	bl	800bd14 <_Balloc>
 800bff8:	b930      	cbnz	r0, 800c008 <__multiply+0x44>
 800bffa:	4602      	mov	r2, r0
 800bffc:	4b44      	ldr	r3, [pc, #272]	; (800c110 <__multiply+0x14c>)
 800bffe:	4845      	ldr	r0, [pc, #276]	; (800c114 <__multiply+0x150>)
 800c000:	f240 115d 	movw	r1, #349	; 0x15d
 800c004:	f001 fb4c 	bl	800d6a0 <__assert_func>
 800c008:	f100 0514 	add.w	r5, r0, #20
 800c00c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c010:	462b      	mov	r3, r5
 800c012:	2200      	movs	r2, #0
 800c014:	4543      	cmp	r3, r8
 800c016:	d321      	bcc.n	800c05c <__multiply+0x98>
 800c018:	f104 0314 	add.w	r3, r4, #20
 800c01c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c020:	f109 0314 	add.w	r3, r9, #20
 800c024:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c028:	9202      	str	r2, [sp, #8]
 800c02a:	1b3a      	subs	r2, r7, r4
 800c02c:	3a15      	subs	r2, #21
 800c02e:	f022 0203 	bic.w	r2, r2, #3
 800c032:	3204      	adds	r2, #4
 800c034:	f104 0115 	add.w	r1, r4, #21
 800c038:	428f      	cmp	r7, r1
 800c03a:	bf38      	it	cc
 800c03c:	2204      	movcc	r2, #4
 800c03e:	9201      	str	r2, [sp, #4]
 800c040:	9a02      	ldr	r2, [sp, #8]
 800c042:	9303      	str	r3, [sp, #12]
 800c044:	429a      	cmp	r2, r3
 800c046:	d80c      	bhi.n	800c062 <__multiply+0x9e>
 800c048:	2e00      	cmp	r6, #0
 800c04a:	dd03      	ble.n	800c054 <__multiply+0x90>
 800c04c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c050:	2b00      	cmp	r3, #0
 800c052:	d05a      	beq.n	800c10a <__multiply+0x146>
 800c054:	6106      	str	r6, [r0, #16]
 800c056:	b005      	add	sp, #20
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05c:	f843 2b04 	str.w	r2, [r3], #4
 800c060:	e7d8      	b.n	800c014 <__multiply+0x50>
 800c062:	f8b3 a000 	ldrh.w	sl, [r3]
 800c066:	f1ba 0f00 	cmp.w	sl, #0
 800c06a:	d024      	beq.n	800c0b6 <__multiply+0xf2>
 800c06c:	f104 0e14 	add.w	lr, r4, #20
 800c070:	46a9      	mov	r9, r5
 800c072:	f04f 0c00 	mov.w	ip, #0
 800c076:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c07a:	f8d9 1000 	ldr.w	r1, [r9]
 800c07e:	fa1f fb82 	uxth.w	fp, r2
 800c082:	b289      	uxth	r1, r1
 800c084:	fb0a 110b 	mla	r1, sl, fp, r1
 800c088:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c08c:	f8d9 2000 	ldr.w	r2, [r9]
 800c090:	4461      	add	r1, ip
 800c092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c096:	fb0a c20b 	mla	r2, sl, fp, ip
 800c09a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c09e:	b289      	uxth	r1, r1
 800c0a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0a4:	4577      	cmp	r7, lr
 800c0a6:	f849 1b04 	str.w	r1, [r9], #4
 800c0aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0ae:	d8e2      	bhi.n	800c076 <__multiply+0xb2>
 800c0b0:	9a01      	ldr	r2, [sp, #4]
 800c0b2:	f845 c002 	str.w	ip, [r5, r2]
 800c0b6:	9a03      	ldr	r2, [sp, #12]
 800c0b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	f1b9 0f00 	cmp.w	r9, #0
 800c0c2:	d020      	beq.n	800c106 <__multiply+0x142>
 800c0c4:	6829      	ldr	r1, [r5, #0]
 800c0c6:	f104 0c14 	add.w	ip, r4, #20
 800c0ca:	46ae      	mov	lr, r5
 800c0cc:	f04f 0a00 	mov.w	sl, #0
 800c0d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c0d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0d8:	fb09 220b 	mla	r2, r9, fp, r2
 800c0dc:	4492      	add	sl, r2
 800c0de:	b289      	uxth	r1, r1
 800c0e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c0e4:	f84e 1b04 	str.w	r1, [lr], #4
 800c0e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c0ec:	f8be 1000 	ldrh.w	r1, [lr]
 800c0f0:	0c12      	lsrs	r2, r2, #16
 800c0f2:	fb09 1102 	mla	r1, r9, r2, r1
 800c0f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c0fa:	4567      	cmp	r7, ip
 800c0fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c100:	d8e6      	bhi.n	800c0d0 <__multiply+0x10c>
 800c102:	9a01      	ldr	r2, [sp, #4]
 800c104:	50a9      	str	r1, [r5, r2]
 800c106:	3504      	adds	r5, #4
 800c108:	e79a      	b.n	800c040 <__multiply+0x7c>
 800c10a:	3e01      	subs	r6, #1
 800c10c:	e79c      	b.n	800c048 <__multiply+0x84>
 800c10e:	bf00      	nop
 800c110:	0800dc80 	.word	0x0800dc80
 800c114:	0800dd70 	.word	0x0800dd70

0800c118 <__pow5mult>:
 800c118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c11c:	4615      	mov	r5, r2
 800c11e:	f012 0203 	ands.w	r2, r2, #3
 800c122:	4606      	mov	r6, r0
 800c124:	460f      	mov	r7, r1
 800c126:	d007      	beq.n	800c138 <__pow5mult+0x20>
 800c128:	4c25      	ldr	r4, [pc, #148]	; (800c1c0 <__pow5mult+0xa8>)
 800c12a:	3a01      	subs	r2, #1
 800c12c:	2300      	movs	r3, #0
 800c12e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c132:	f7ff fe51 	bl	800bdd8 <__multadd>
 800c136:	4607      	mov	r7, r0
 800c138:	10ad      	asrs	r5, r5, #2
 800c13a:	d03d      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c13c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c13e:	b97c      	cbnz	r4, 800c160 <__pow5mult+0x48>
 800c140:	2010      	movs	r0, #16
 800c142:	f7ff fdcd 	bl	800bce0 <malloc>
 800c146:	4602      	mov	r2, r0
 800c148:	6270      	str	r0, [r6, #36]	; 0x24
 800c14a:	b928      	cbnz	r0, 800c158 <__pow5mult+0x40>
 800c14c:	4b1d      	ldr	r3, [pc, #116]	; (800c1c4 <__pow5mult+0xac>)
 800c14e:	481e      	ldr	r0, [pc, #120]	; (800c1c8 <__pow5mult+0xb0>)
 800c150:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c154:	f001 faa4 	bl	800d6a0 <__assert_func>
 800c158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c15c:	6004      	str	r4, [r0, #0]
 800c15e:	60c4      	str	r4, [r0, #12]
 800c160:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c168:	b94c      	cbnz	r4, 800c17e <__pow5mult+0x66>
 800c16a:	f240 2171 	movw	r1, #625	; 0x271
 800c16e:	4630      	mov	r0, r6
 800c170:	f7ff ff12 	bl	800bf98 <__i2b>
 800c174:	2300      	movs	r3, #0
 800c176:	f8c8 0008 	str.w	r0, [r8, #8]
 800c17a:	4604      	mov	r4, r0
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	f04f 0900 	mov.w	r9, #0
 800c182:	07eb      	lsls	r3, r5, #31
 800c184:	d50a      	bpl.n	800c19c <__pow5mult+0x84>
 800c186:	4639      	mov	r1, r7
 800c188:	4622      	mov	r2, r4
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7ff ff1a 	bl	800bfc4 <__multiply>
 800c190:	4639      	mov	r1, r7
 800c192:	4680      	mov	r8, r0
 800c194:	4630      	mov	r0, r6
 800c196:	f7ff fdfd 	bl	800bd94 <_Bfree>
 800c19a:	4647      	mov	r7, r8
 800c19c:	106d      	asrs	r5, r5, #1
 800c19e:	d00b      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c1a0:	6820      	ldr	r0, [r4, #0]
 800c1a2:	b938      	cbnz	r0, 800c1b4 <__pow5mult+0x9c>
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff ff0b 	bl	800bfc4 <__multiply>
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	f8c0 9000 	str.w	r9, [r0]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	e7e4      	b.n	800c182 <__pow5mult+0x6a>
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1be:	bf00      	nop
 800c1c0:	0800dec0 	.word	0x0800dec0
 800c1c4:	0800dc0e 	.word	0x0800dc0e
 800c1c8:	0800dd70 	.word	0x0800dd70

0800c1cc <__lshift>:
 800c1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	6849      	ldr	r1, [r1, #4]
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	4607      	mov	r7, r0
 800c1de:	4691      	mov	r9, r2
 800c1e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1e4:	f108 0601 	add.w	r6, r8, #1
 800c1e8:	42b3      	cmp	r3, r6
 800c1ea:	db0b      	blt.n	800c204 <__lshift+0x38>
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	f7ff fd91 	bl	800bd14 <_Balloc>
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	b948      	cbnz	r0, 800c20a <__lshift+0x3e>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	4b2a      	ldr	r3, [pc, #168]	; (800c2a4 <__lshift+0xd8>)
 800c1fa:	482b      	ldr	r0, [pc, #172]	; (800c2a8 <__lshift+0xdc>)
 800c1fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c200:	f001 fa4e 	bl	800d6a0 <__assert_func>
 800c204:	3101      	adds	r1, #1
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	e7ee      	b.n	800c1e8 <__lshift+0x1c>
 800c20a:	2300      	movs	r3, #0
 800c20c:	f100 0114 	add.w	r1, r0, #20
 800c210:	f100 0210 	add.w	r2, r0, #16
 800c214:	4618      	mov	r0, r3
 800c216:	4553      	cmp	r3, sl
 800c218:	db37      	blt.n	800c28a <__lshift+0xbe>
 800c21a:	6920      	ldr	r0, [r4, #16]
 800c21c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c220:	f104 0314 	add.w	r3, r4, #20
 800c224:	f019 091f 	ands.w	r9, r9, #31
 800c228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c22c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c230:	d02f      	beq.n	800c292 <__lshift+0xc6>
 800c232:	f1c9 0e20 	rsb	lr, r9, #32
 800c236:	468a      	mov	sl, r1
 800c238:	f04f 0c00 	mov.w	ip, #0
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	fa02 f209 	lsl.w	r2, r2, r9
 800c242:	ea42 020c 	orr.w	r2, r2, ip
 800c246:	f84a 2b04 	str.w	r2, [sl], #4
 800c24a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c24e:	4298      	cmp	r0, r3
 800c250:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c254:	d8f2      	bhi.n	800c23c <__lshift+0x70>
 800c256:	1b03      	subs	r3, r0, r4
 800c258:	3b15      	subs	r3, #21
 800c25a:	f023 0303 	bic.w	r3, r3, #3
 800c25e:	3304      	adds	r3, #4
 800c260:	f104 0215 	add.w	r2, r4, #21
 800c264:	4290      	cmp	r0, r2
 800c266:	bf38      	it	cc
 800c268:	2304      	movcc	r3, #4
 800c26a:	f841 c003 	str.w	ip, [r1, r3]
 800c26e:	f1bc 0f00 	cmp.w	ip, #0
 800c272:	d001      	beq.n	800c278 <__lshift+0xac>
 800c274:	f108 0602 	add.w	r6, r8, #2
 800c278:	3e01      	subs	r6, #1
 800c27a:	4638      	mov	r0, r7
 800c27c:	612e      	str	r6, [r5, #16]
 800c27e:	4621      	mov	r1, r4
 800c280:	f7ff fd88 	bl	800bd94 <_Bfree>
 800c284:	4628      	mov	r0, r5
 800c286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c28e:	3301      	adds	r3, #1
 800c290:	e7c1      	b.n	800c216 <__lshift+0x4a>
 800c292:	3904      	subs	r1, #4
 800c294:	f853 2b04 	ldr.w	r2, [r3], #4
 800c298:	f841 2f04 	str.w	r2, [r1, #4]!
 800c29c:	4298      	cmp	r0, r3
 800c29e:	d8f9      	bhi.n	800c294 <__lshift+0xc8>
 800c2a0:	e7ea      	b.n	800c278 <__lshift+0xac>
 800c2a2:	bf00      	nop
 800c2a4:	0800dc80 	.word	0x0800dc80
 800c2a8:	0800dd70 	.word	0x0800dd70

0800c2ac <__mcmp>:
 800c2ac:	b530      	push	{r4, r5, lr}
 800c2ae:	6902      	ldr	r2, [r0, #16]
 800c2b0:	690c      	ldr	r4, [r1, #16]
 800c2b2:	1b12      	subs	r2, r2, r4
 800c2b4:	d10e      	bne.n	800c2d4 <__mcmp+0x28>
 800c2b6:	f100 0314 	add.w	r3, r0, #20
 800c2ba:	3114      	adds	r1, #20
 800c2bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c2c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c2c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c2c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c2cc:	42a5      	cmp	r5, r4
 800c2ce:	d003      	beq.n	800c2d8 <__mcmp+0x2c>
 800c2d0:	d305      	bcc.n	800c2de <__mcmp+0x32>
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	bd30      	pop	{r4, r5, pc}
 800c2d8:	4283      	cmp	r3, r0
 800c2da:	d3f3      	bcc.n	800c2c4 <__mcmp+0x18>
 800c2dc:	e7fa      	b.n	800c2d4 <__mcmp+0x28>
 800c2de:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e2:	e7f7      	b.n	800c2d4 <__mcmp+0x28>

0800c2e4 <__mdiff>:
 800c2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4690      	mov	r8, r2
 800c2f2:	f7ff ffdb 	bl	800c2ac <__mcmp>
 800c2f6:	1e05      	subs	r5, r0, #0
 800c2f8:	d110      	bne.n	800c31c <__mdiff+0x38>
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7ff fd09 	bl	800bd14 <_Balloc>
 800c302:	b930      	cbnz	r0, 800c312 <__mdiff+0x2e>
 800c304:	4b3a      	ldr	r3, [pc, #232]	; (800c3f0 <__mdiff+0x10c>)
 800c306:	4602      	mov	r2, r0
 800c308:	f240 2132 	movw	r1, #562	; 0x232
 800c30c:	4839      	ldr	r0, [pc, #228]	; (800c3f4 <__mdiff+0x110>)
 800c30e:	f001 f9c7 	bl	800d6a0 <__assert_func>
 800c312:	2301      	movs	r3, #1
 800c314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31c:	bfa4      	itt	ge
 800c31e:	4643      	movge	r3, r8
 800c320:	46a0      	movge	r8, r4
 800c322:	4630      	mov	r0, r6
 800c324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c328:	bfa6      	itte	ge
 800c32a:	461c      	movge	r4, r3
 800c32c:	2500      	movge	r5, #0
 800c32e:	2501      	movlt	r5, #1
 800c330:	f7ff fcf0 	bl	800bd14 <_Balloc>
 800c334:	b920      	cbnz	r0, 800c340 <__mdiff+0x5c>
 800c336:	4b2e      	ldr	r3, [pc, #184]	; (800c3f0 <__mdiff+0x10c>)
 800c338:	4602      	mov	r2, r0
 800c33a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c33e:	e7e5      	b.n	800c30c <__mdiff+0x28>
 800c340:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c344:	6926      	ldr	r6, [r4, #16]
 800c346:	60c5      	str	r5, [r0, #12]
 800c348:	f104 0914 	add.w	r9, r4, #20
 800c34c:	f108 0514 	add.w	r5, r8, #20
 800c350:	f100 0e14 	add.w	lr, r0, #20
 800c354:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c358:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c35c:	f108 0210 	add.w	r2, r8, #16
 800c360:	46f2      	mov	sl, lr
 800c362:	2100      	movs	r1, #0
 800c364:	f859 3b04 	ldr.w	r3, [r9], #4
 800c368:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c36c:	fa1f f883 	uxth.w	r8, r3
 800c370:	fa11 f18b 	uxtah	r1, r1, fp
 800c374:	0c1b      	lsrs	r3, r3, #16
 800c376:	eba1 0808 	sub.w	r8, r1, r8
 800c37a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c37e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c382:	fa1f f888 	uxth.w	r8, r8
 800c386:	1419      	asrs	r1, r3, #16
 800c388:	454e      	cmp	r6, r9
 800c38a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c38e:	f84a 3b04 	str.w	r3, [sl], #4
 800c392:	d8e7      	bhi.n	800c364 <__mdiff+0x80>
 800c394:	1b33      	subs	r3, r6, r4
 800c396:	3b15      	subs	r3, #21
 800c398:	f023 0303 	bic.w	r3, r3, #3
 800c39c:	3304      	adds	r3, #4
 800c39e:	3415      	adds	r4, #21
 800c3a0:	42a6      	cmp	r6, r4
 800c3a2:	bf38      	it	cc
 800c3a4:	2304      	movcc	r3, #4
 800c3a6:	441d      	add	r5, r3
 800c3a8:	4473      	add	r3, lr
 800c3aa:	469e      	mov	lr, r3
 800c3ac:	462e      	mov	r6, r5
 800c3ae:	4566      	cmp	r6, ip
 800c3b0:	d30e      	bcc.n	800c3d0 <__mdiff+0xec>
 800c3b2:	f10c 0203 	add.w	r2, ip, #3
 800c3b6:	1b52      	subs	r2, r2, r5
 800c3b8:	f022 0203 	bic.w	r2, r2, #3
 800c3bc:	3d03      	subs	r5, #3
 800c3be:	45ac      	cmp	ip, r5
 800c3c0:	bf38      	it	cc
 800c3c2:	2200      	movcc	r2, #0
 800c3c4:	441a      	add	r2, r3
 800c3c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c3ca:	b17b      	cbz	r3, 800c3ec <__mdiff+0x108>
 800c3cc:	6107      	str	r7, [r0, #16]
 800c3ce:	e7a3      	b.n	800c318 <__mdiff+0x34>
 800c3d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c3d4:	fa11 f288 	uxtah	r2, r1, r8
 800c3d8:	1414      	asrs	r4, r2, #16
 800c3da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3de:	b292      	uxth	r2, r2
 800c3e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c3e4:	f84e 2b04 	str.w	r2, [lr], #4
 800c3e8:	1421      	asrs	r1, r4, #16
 800c3ea:	e7e0      	b.n	800c3ae <__mdiff+0xca>
 800c3ec:	3f01      	subs	r7, #1
 800c3ee:	e7ea      	b.n	800c3c6 <__mdiff+0xe2>
 800c3f0:	0800dc80 	.word	0x0800dc80
 800c3f4:	0800dd70 	.word	0x0800dd70

0800c3f8 <__ulp>:
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	ed8d 0b00 	vstr	d0, [sp]
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	4912      	ldr	r1, [pc, #72]	; (800c44c <__ulp+0x54>)
 800c402:	4019      	ands	r1, r3
 800c404:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c408:	2900      	cmp	r1, #0
 800c40a:	dd05      	ble.n	800c418 <__ulp+0x20>
 800c40c:	2200      	movs	r2, #0
 800c40e:	460b      	mov	r3, r1
 800c410:	ec43 2b10 	vmov	d0, r2, r3
 800c414:	b002      	add	sp, #8
 800c416:	4770      	bx	lr
 800c418:	4249      	negs	r1, r1
 800c41a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c41e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	f04f 0300 	mov.w	r3, #0
 800c42a:	da04      	bge.n	800c436 <__ulp+0x3e>
 800c42c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c430:	fa41 f300 	asr.w	r3, r1, r0
 800c434:	e7ec      	b.n	800c410 <__ulp+0x18>
 800c436:	f1a0 0114 	sub.w	r1, r0, #20
 800c43a:	291e      	cmp	r1, #30
 800c43c:	bfda      	itte	le
 800c43e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c442:	fa20 f101 	lsrle.w	r1, r0, r1
 800c446:	2101      	movgt	r1, #1
 800c448:	460a      	mov	r2, r1
 800c44a:	e7e1      	b.n	800c410 <__ulp+0x18>
 800c44c:	7ff00000 	.word	0x7ff00000

0800c450 <__b2d>:
 800c450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c452:	6905      	ldr	r5, [r0, #16]
 800c454:	f100 0714 	add.w	r7, r0, #20
 800c458:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c45c:	1f2e      	subs	r6, r5, #4
 800c45e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c462:	4620      	mov	r0, r4
 800c464:	f7ff fd48 	bl	800bef8 <__hi0bits>
 800c468:	f1c0 0320 	rsb	r3, r0, #32
 800c46c:	280a      	cmp	r0, #10
 800c46e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c4ec <__b2d+0x9c>
 800c472:	600b      	str	r3, [r1, #0]
 800c474:	dc14      	bgt.n	800c4a0 <__b2d+0x50>
 800c476:	f1c0 0e0b 	rsb	lr, r0, #11
 800c47a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c47e:	42b7      	cmp	r7, r6
 800c480:	ea41 030c 	orr.w	r3, r1, ip
 800c484:	bf34      	ite	cc
 800c486:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c48a:	2100      	movcs	r1, #0
 800c48c:	3015      	adds	r0, #21
 800c48e:	fa04 f000 	lsl.w	r0, r4, r0
 800c492:	fa21 f10e 	lsr.w	r1, r1, lr
 800c496:	ea40 0201 	orr.w	r2, r0, r1
 800c49a:	ec43 2b10 	vmov	d0, r2, r3
 800c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a0:	42b7      	cmp	r7, r6
 800c4a2:	bf3a      	itte	cc
 800c4a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c4a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800c4ac:	2100      	movcs	r1, #0
 800c4ae:	380b      	subs	r0, #11
 800c4b0:	d017      	beq.n	800c4e2 <__b2d+0x92>
 800c4b2:	f1c0 0c20 	rsb	ip, r0, #32
 800c4b6:	fa04 f500 	lsl.w	r5, r4, r0
 800c4ba:	42be      	cmp	r6, r7
 800c4bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800c4c0:	ea45 0504 	orr.w	r5, r5, r4
 800c4c4:	bf8c      	ite	hi
 800c4c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c4ca:	2400      	movls	r4, #0
 800c4cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c4d0:	fa01 f000 	lsl.w	r0, r1, r0
 800c4d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800c4d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4dc:	ea40 0204 	orr.w	r2, r0, r4
 800c4e0:	e7db      	b.n	800c49a <__b2d+0x4a>
 800c4e2:	ea44 030c 	orr.w	r3, r4, ip
 800c4e6:	460a      	mov	r2, r1
 800c4e8:	e7d7      	b.n	800c49a <__b2d+0x4a>
 800c4ea:	bf00      	nop
 800c4ec:	3ff00000 	.word	0x3ff00000

0800c4f0 <__d2b>:
 800c4f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	4689      	mov	r9, r1
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	ec57 6b10 	vmov	r6, r7, d0
 800c4fc:	4690      	mov	r8, r2
 800c4fe:	f7ff fc09 	bl	800bd14 <_Balloc>
 800c502:	4604      	mov	r4, r0
 800c504:	b930      	cbnz	r0, 800c514 <__d2b+0x24>
 800c506:	4602      	mov	r2, r0
 800c508:	4b25      	ldr	r3, [pc, #148]	; (800c5a0 <__d2b+0xb0>)
 800c50a:	4826      	ldr	r0, [pc, #152]	; (800c5a4 <__d2b+0xb4>)
 800c50c:	f240 310a 	movw	r1, #778	; 0x30a
 800c510:	f001 f8c6 	bl	800d6a0 <__assert_func>
 800c514:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c51c:	bb35      	cbnz	r5, 800c56c <__d2b+0x7c>
 800c51e:	2e00      	cmp	r6, #0
 800c520:	9301      	str	r3, [sp, #4]
 800c522:	d028      	beq.n	800c576 <__d2b+0x86>
 800c524:	4668      	mov	r0, sp
 800c526:	9600      	str	r6, [sp, #0]
 800c528:	f7ff fd06 	bl	800bf38 <__lo0bits>
 800c52c:	9900      	ldr	r1, [sp, #0]
 800c52e:	b300      	cbz	r0, 800c572 <__d2b+0x82>
 800c530:	9a01      	ldr	r2, [sp, #4]
 800c532:	f1c0 0320 	rsb	r3, r0, #32
 800c536:	fa02 f303 	lsl.w	r3, r2, r3
 800c53a:	430b      	orrs	r3, r1
 800c53c:	40c2      	lsrs	r2, r0
 800c53e:	6163      	str	r3, [r4, #20]
 800c540:	9201      	str	r2, [sp, #4]
 800c542:	9b01      	ldr	r3, [sp, #4]
 800c544:	61a3      	str	r3, [r4, #24]
 800c546:	2b00      	cmp	r3, #0
 800c548:	bf14      	ite	ne
 800c54a:	2202      	movne	r2, #2
 800c54c:	2201      	moveq	r2, #1
 800c54e:	6122      	str	r2, [r4, #16]
 800c550:	b1d5      	cbz	r5, 800c588 <__d2b+0x98>
 800c552:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c556:	4405      	add	r5, r0
 800c558:	f8c9 5000 	str.w	r5, [r9]
 800c55c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c560:	f8c8 0000 	str.w	r0, [r8]
 800c564:	4620      	mov	r0, r4
 800c566:	b003      	add	sp, #12
 800c568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c56c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c570:	e7d5      	b.n	800c51e <__d2b+0x2e>
 800c572:	6161      	str	r1, [r4, #20]
 800c574:	e7e5      	b.n	800c542 <__d2b+0x52>
 800c576:	a801      	add	r0, sp, #4
 800c578:	f7ff fcde 	bl	800bf38 <__lo0bits>
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	6163      	str	r3, [r4, #20]
 800c580:	2201      	movs	r2, #1
 800c582:	6122      	str	r2, [r4, #16]
 800c584:	3020      	adds	r0, #32
 800c586:	e7e3      	b.n	800c550 <__d2b+0x60>
 800c588:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c58c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c590:	f8c9 0000 	str.w	r0, [r9]
 800c594:	6918      	ldr	r0, [r3, #16]
 800c596:	f7ff fcaf 	bl	800bef8 <__hi0bits>
 800c59a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c59e:	e7df      	b.n	800c560 <__d2b+0x70>
 800c5a0:	0800dc80 	.word	0x0800dc80
 800c5a4:	0800dd70 	.word	0x0800dd70

0800c5a8 <__ratio>:
 800c5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	4688      	mov	r8, r1
 800c5ae:	4669      	mov	r1, sp
 800c5b0:	4681      	mov	r9, r0
 800c5b2:	f7ff ff4d 	bl	800c450 <__b2d>
 800c5b6:	a901      	add	r1, sp, #4
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	ec55 4b10 	vmov	r4, r5, d0
 800c5be:	f7ff ff47 	bl	800c450 <__b2d>
 800c5c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5ca:	eba3 0c02 	sub.w	ip, r3, r2
 800c5ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5d2:	1a9b      	subs	r3, r3, r2
 800c5d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c5d8:	ec51 0b10 	vmov	r0, r1, d0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	bfd6      	itet	le
 800c5e0:	460a      	movle	r2, r1
 800c5e2:	462a      	movgt	r2, r5
 800c5e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5e8:	468b      	mov	fp, r1
 800c5ea:	462f      	mov	r7, r5
 800c5ec:	bfd4      	ite	le
 800c5ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	ee10 2a10 	vmov	r2, s0
 800c5fc:	465b      	mov	r3, fp
 800c5fe:	4639      	mov	r1, r7
 800c600:	f7f4 f934 	bl	800086c <__aeabi_ddiv>
 800c604:	ec41 0b10 	vmov	d0, r0, r1
 800c608:	b003      	add	sp, #12
 800c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c60e <__copybits>:
 800c60e:	3901      	subs	r1, #1
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	1149      	asrs	r1, r1, #5
 800c614:	6914      	ldr	r4, [r2, #16]
 800c616:	3101      	adds	r1, #1
 800c618:	f102 0314 	add.w	r3, r2, #20
 800c61c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c620:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c624:	1f05      	subs	r5, r0, #4
 800c626:	42a3      	cmp	r3, r4
 800c628:	d30c      	bcc.n	800c644 <__copybits+0x36>
 800c62a:	1aa3      	subs	r3, r4, r2
 800c62c:	3b11      	subs	r3, #17
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	3211      	adds	r2, #17
 800c634:	42a2      	cmp	r2, r4
 800c636:	bf88      	it	hi
 800c638:	2300      	movhi	r3, #0
 800c63a:	4418      	add	r0, r3
 800c63c:	2300      	movs	r3, #0
 800c63e:	4288      	cmp	r0, r1
 800c640:	d305      	bcc.n	800c64e <__copybits+0x40>
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	f853 6b04 	ldr.w	r6, [r3], #4
 800c648:	f845 6f04 	str.w	r6, [r5, #4]!
 800c64c:	e7eb      	b.n	800c626 <__copybits+0x18>
 800c64e:	f840 3b04 	str.w	r3, [r0], #4
 800c652:	e7f4      	b.n	800c63e <__copybits+0x30>

0800c654 <__any_on>:
 800c654:	f100 0214 	add.w	r2, r0, #20
 800c658:	6900      	ldr	r0, [r0, #16]
 800c65a:	114b      	asrs	r3, r1, #5
 800c65c:	4298      	cmp	r0, r3
 800c65e:	b510      	push	{r4, lr}
 800c660:	db11      	blt.n	800c686 <__any_on+0x32>
 800c662:	dd0a      	ble.n	800c67a <__any_on+0x26>
 800c664:	f011 011f 	ands.w	r1, r1, #31
 800c668:	d007      	beq.n	800c67a <__any_on+0x26>
 800c66a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c66e:	fa24 f001 	lsr.w	r0, r4, r1
 800c672:	fa00 f101 	lsl.w	r1, r0, r1
 800c676:	428c      	cmp	r4, r1
 800c678:	d10b      	bne.n	800c692 <__any_on+0x3e>
 800c67a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c67e:	4293      	cmp	r3, r2
 800c680:	d803      	bhi.n	800c68a <__any_on+0x36>
 800c682:	2000      	movs	r0, #0
 800c684:	bd10      	pop	{r4, pc}
 800c686:	4603      	mov	r3, r0
 800c688:	e7f7      	b.n	800c67a <__any_on+0x26>
 800c68a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c68e:	2900      	cmp	r1, #0
 800c690:	d0f5      	beq.n	800c67e <__any_on+0x2a>
 800c692:	2001      	movs	r0, #1
 800c694:	e7f6      	b.n	800c684 <__any_on+0x30>

0800c696 <_calloc_r>:
 800c696:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c698:	fba1 2402 	umull	r2, r4, r1, r2
 800c69c:	b94c      	cbnz	r4, 800c6b2 <_calloc_r+0x1c>
 800c69e:	4611      	mov	r1, r2
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	f000 f87b 	bl	800c79c <_malloc_r>
 800c6a6:	9a01      	ldr	r2, [sp, #4]
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	b930      	cbnz	r0, 800c6ba <_calloc_r+0x24>
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	b003      	add	sp, #12
 800c6b0:	bd30      	pop	{r4, r5, pc}
 800c6b2:	220c      	movs	r2, #12
 800c6b4:	6002      	str	r2, [r0, #0]
 800c6b6:	2500      	movs	r5, #0
 800c6b8:	e7f8      	b.n	800c6ac <_calloc_r+0x16>
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	f7fb ffb8 	bl	8008630 <memset>
 800c6c0:	e7f4      	b.n	800c6ac <_calloc_r+0x16>
	...

0800c6c4 <_free_r>:
 800c6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6c6:	2900      	cmp	r1, #0
 800c6c8:	d044      	beq.n	800c754 <_free_r+0x90>
 800c6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ce:	9001      	str	r0, [sp, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c6d6:	bfb8      	it	lt
 800c6d8:	18e4      	addlt	r4, r4, r3
 800c6da:	f001 f84d 	bl	800d778 <__malloc_lock>
 800c6de:	4a1e      	ldr	r2, [pc, #120]	; (800c758 <_free_r+0x94>)
 800c6e0:	9801      	ldr	r0, [sp, #4]
 800c6e2:	6813      	ldr	r3, [r2, #0]
 800c6e4:	b933      	cbnz	r3, 800c6f4 <_free_r+0x30>
 800c6e6:	6063      	str	r3, [r4, #4]
 800c6e8:	6014      	str	r4, [r2, #0]
 800c6ea:	b003      	add	sp, #12
 800c6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6f0:	f001 b848 	b.w	800d784 <__malloc_unlock>
 800c6f4:	42a3      	cmp	r3, r4
 800c6f6:	d908      	bls.n	800c70a <_free_r+0x46>
 800c6f8:	6825      	ldr	r5, [r4, #0]
 800c6fa:	1961      	adds	r1, r4, r5
 800c6fc:	428b      	cmp	r3, r1
 800c6fe:	bf01      	itttt	eq
 800c700:	6819      	ldreq	r1, [r3, #0]
 800c702:	685b      	ldreq	r3, [r3, #4]
 800c704:	1949      	addeq	r1, r1, r5
 800c706:	6021      	streq	r1, [r4, #0]
 800c708:	e7ed      	b.n	800c6e6 <_free_r+0x22>
 800c70a:	461a      	mov	r2, r3
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	b10b      	cbz	r3, 800c714 <_free_r+0x50>
 800c710:	42a3      	cmp	r3, r4
 800c712:	d9fa      	bls.n	800c70a <_free_r+0x46>
 800c714:	6811      	ldr	r1, [r2, #0]
 800c716:	1855      	adds	r5, r2, r1
 800c718:	42a5      	cmp	r5, r4
 800c71a:	d10b      	bne.n	800c734 <_free_r+0x70>
 800c71c:	6824      	ldr	r4, [r4, #0]
 800c71e:	4421      	add	r1, r4
 800c720:	1854      	adds	r4, r2, r1
 800c722:	42a3      	cmp	r3, r4
 800c724:	6011      	str	r1, [r2, #0]
 800c726:	d1e0      	bne.n	800c6ea <_free_r+0x26>
 800c728:	681c      	ldr	r4, [r3, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	6053      	str	r3, [r2, #4]
 800c72e:	4421      	add	r1, r4
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	e7da      	b.n	800c6ea <_free_r+0x26>
 800c734:	d902      	bls.n	800c73c <_free_r+0x78>
 800c736:	230c      	movs	r3, #12
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	e7d6      	b.n	800c6ea <_free_r+0x26>
 800c73c:	6825      	ldr	r5, [r4, #0]
 800c73e:	1961      	adds	r1, r4, r5
 800c740:	428b      	cmp	r3, r1
 800c742:	bf04      	itt	eq
 800c744:	6819      	ldreq	r1, [r3, #0]
 800c746:	685b      	ldreq	r3, [r3, #4]
 800c748:	6063      	str	r3, [r4, #4]
 800c74a:	bf04      	itt	eq
 800c74c:	1949      	addeq	r1, r1, r5
 800c74e:	6021      	streq	r1, [r4, #0]
 800c750:	6054      	str	r4, [r2, #4]
 800c752:	e7ca      	b.n	800c6ea <_free_r+0x26>
 800c754:	b003      	add	sp, #12
 800c756:	bd30      	pop	{r4, r5, pc}
 800c758:	2000084c 	.word	0x2000084c

0800c75c <sbrk_aligned>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	4e0e      	ldr	r6, [pc, #56]	; (800c798 <sbrk_aligned+0x3c>)
 800c760:	460c      	mov	r4, r1
 800c762:	6831      	ldr	r1, [r6, #0]
 800c764:	4605      	mov	r5, r0
 800c766:	b911      	cbnz	r1, 800c76e <sbrk_aligned+0x12>
 800c768:	f000 fe82 	bl	800d470 <_sbrk_r>
 800c76c:	6030      	str	r0, [r6, #0]
 800c76e:	4621      	mov	r1, r4
 800c770:	4628      	mov	r0, r5
 800c772:	f000 fe7d 	bl	800d470 <_sbrk_r>
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	d00a      	beq.n	800c790 <sbrk_aligned+0x34>
 800c77a:	1cc4      	adds	r4, r0, #3
 800c77c:	f024 0403 	bic.w	r4, r4, #3
 800c780:	42a0      	cmp	r0, r4
 800c782:	d007      	beq.n	800c794 <sbrk_aligned+0x38>
 800c784:	1a21      	subs	r1, r4, r0
 800c786:	4628      	mov	r0, r5
 800c788:	f000 fe72 	bl	800d470 <_sbrk_r>
 800c78c:	3001      	adds	r0, #1
 800c78e:	d101      	bne.n	800c794 <sbrk_aligned+0x38>
 800c790:	f04f 34ff 	mov.w	r4, #4294967295
 800c794:	4620      	mov	r0, r4
 800c796:	bd70      	pop	{r4, r5, r6, pc}
 800c798:	20000850 	.word	0x20000850

0800c79c <_malloc_r>:
 800c79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a0:	1ccd      	adds	r5, r1, #3
 800c7a2:	f025 0503 	bic.w	r5, r5, #3
 800c7a6:	3508      	adds	r5, #8
 800c7a8:	2d0c      	cmp	r5, #12
 800c7aa:	bf38      	it	cc
 800c7ac:	250c      	movcc	r5, #12
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	db01      	blt.n	800c7b8 <_malloc_r+0x1c>
 800c7b4:	42a9      	cmp	r1, r5
 800c7b6:	d905      	bls.n	800c7c4 <_malloc_r+0x28>
 800c7b8:	230c      	movs	r3, #12
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	2600      	movs	r6, #0
 800c7be:	4630      	mov	r0, r6
 800c7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c4:	4e2e      	ldr	r6, [pc, #184]	; (800c880 <_malloc_r+0xe4>)
 800c7c6:	f000 ffd7 	bl	800d778 <__malloc_lock>
 800c7ca:	6833      	ldr	r3, [r6, #0]
 800c7cc:	461c      	mov	r4, r3
 800c7ce:	bb34      	cbnz	r4, 800c81e <_malloc_r+0x82>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	f7ff ffc2 	bl	800c75c <sbrk_aligned>
 800c7d8:	1c43      	adds	r3, r0, #1
 800c7da:	4604      	mov	r4, r0
 800c7dc:	d14d      	bne.n	800c87a <_malloc_r+0xde>
 800c7de:	6834      	ldr	r4, [r6, #0]
 800c7e0:	4626      	mov	r6, r4
 800c7e2:	2e00      	cmp	r6, #0
 800c7e4:	d140      	bne.n	800c868 <_malloc_r+0xcc>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	eb04 0803 	add.w	r8, r4, r3
 800c7f0:	f000 fe3e 	bl	800d470 <_sbrk_r>
 800c7f4:	4580      	cmp	r8, r0
 800c7f6:	d13a      	bne.n	800c86e <_malloc_r+0xd2>
 800c7f8:	6821      	ldr	r1, [r4, #0]
 800c7fa:	3503      	adds	r5, #3
 800c7fc:	1a6d      	subs	r5, r5, r1
 800c7fe:	f025 0503 	bic.w	r5, r5, #3
 800c802:	3508      	adds	r5, #8
 800c804:	2d0c      	cmp	r5, #12
 800c806:	bf38      	it	cc
 800c808:	250c      	movcc	r5, #12
 800c80a:	4629      	mov	r1, r5
 800c80c:	4638      	mov	r0, r7
 800c80e:	f7ff ffa5 	bl	800c75c <sbrk_aligned>
 800c812:	3001      	adds	r0, #1
 800c814:	d02b      	beq.n	800c86e <_malloc_r+0xd2>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	442b      	add	r3, r5
 800c81a:	6023      	str	r3, [r4, #0]
 800c81c:	e00e      	b.n	800c83c <_malloc_r+0xa0>
 800c81e:	6822      	ldr	r2, [r4, #0]
 800c820:	1b52      	subs	r2, r2, r5
 800c822:	d41e      	bmi.n	800c862 <_malloc_r+0xc6>
 800c824:	2a0b      	cmp	r2, #11
 800c826:	d916      	bls.n	800c856 <_malloc_r+0xba>
 800c828:	1961      	adds	r1, r4, r5
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	6025      	str	r5, [r4, #0]
 800c82e:	bf18      	it	ne
 800c830:	6059      	strne	r1, [r3, #4]
 800c832:	6863      	ldr	r3, [r4, #4]
 800c834:	bf08      	it	eq
 800c836:	6031      	streq	r1, [r6, #0]
 800c838:	5162      	str	r2, [r4, r5]
 800c83a:	604b      	str	r3, [r1, #4]
 800c83c:	4638      	mov	r0, r7
 800c83e:	f104 060b 	add.w	r6, r4, #11
 800c842:	f000 ff9f 	bl	800d784 <__malloc_unlock>
 800c846:	f026 0607 	bic.w	r6, r6, #7
 800c84a:	1d23      	adds	r3, r4, #4
 800c84c:	1af2      	subs	r2, r6, r3
 800c84e:	d0b6      	beq.n	800c7be <_malloc_r+0x22>
 800c850:	1b9b      	subs	r3, r3, r6
 800c852:	50a3      	str	r3, [r4, r2]
 800c854:	e7b3      	b.n	800c7be <_malloc_r+0x22>
 800c856:	6862      	ldr	r2, [r4, #4]
 800c858:	42a3      	cmp	r3, r4
 800c85a:	bf0c      	ite	eq
 800c85c:	6032      	streq	r2, [r6, #0]
 800c85e:	605a      	strne	r2, [r3, #4]
 800c860:	e7ec      	b.n	800c83c <_malloc_r+0xa0>
 800c862:	4623      	mov	r3, r4
 800c864:	6864      	ldr	r4, [r4, #4]
 800c866:	e7b2      	b.n	800c7ce <_malloc_r+0x32>
 800c868:	4634      	mov	r4, r6
 800c86a:	6876      	ldr	r6, [r6, #4]
 800c86c:	e7b9      	b.n	800c7e2 <_malloc_r+0x46>
 800c86e:	230c      	movs	r3, #12
 800c870:	603b      	str	r3, [r7, #0]
 800c872:	4638      	mov	r0, r7
 800c874:	f000 ff86 	bl	800d784 <__malloc_unlock>
 800c878:	e7a1      	b.n	800c7be <_malloc_r+0x22>
 800c87a:	6025      	str	r5, [r4, #0]
 800c87c:	e7de      	b.n	800c83c <_malloc_r+0xa0>
 800c87e:	bf00      	nop
 800c880:	2000084c 	.word	0x2000084c

0800c884 <__ssputs_r>:
 800c884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c888:	688e      	ldr	r6, [r1, #8]
 800c88a:	429e      	cmp	r6, r3
 800c88c:	4682      	mov	sl, r0
 800c88e:	460c      	mov	r4, r1
 800c890:	4690      	mov	r8, r2
 800c892:	461f      	mov	r7, r3
 800c894:	d838      	bhi.n	800c908 <__ssputs_r+0x84>
 800c896:	898a      	ldrh	r2, [r1, #12]
 800c898:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c89c:	d032      	beq.n	800c904 <__ssputs_r+0x80>
 800c89e:	6825      	ldr	r5, [r4, #0]
 800c8a0:	6909      	ldr	r1, [r1, #16]
 800c8a2:	eba5 0901 	sub.w	r9, r5, r1
 800c8a6:	6965      	ldr	r5, [r4, #20]
 800c8a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	444b      	add	r3, r9
 800c8b4:	106d      	asrs	r5, r5, #1
 800c8b6:	429d      	cmp	r5, r3
 800c8b8:	bf38      	it	cc
 800c8ba:	461d      	movcc	r5, r3
 800c8bc:	0553      	lsls	r3, r2, #21
 800c8be:	d531      	bpl.n	800c924 <__ssputs_r+0xa0>
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f7ff ff6b 	bl	800c79c <_malloc_r>
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	b950      	cbnz	r0, 800c8e0 <__ssputs_r+0x5c>
 800c8ca:	230c      	movs	r3, #12
 800c8cc:	f8ca 3000 	str.w	r3, [sl]
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d6:	81a3      	strh	r3, [r4, #12]
 800c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e0:	6921      	ldr	r1, [r4, #16]
 800c8e2:	464a      	mov	r2, r9
 800c8e4:	f7fb fe96 	bl	8008614 <memcpy>
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8f2:	81a3      	strh	r3, [r4, #12]
 800c8f4:	6126      	str	r6, [r4, #16]
 800c8f6:	6165      	str	r5, [r4, #20]
 800c8f8:	444e      	add	r6, r9
 800c8fa:	eba5 0509 	sub.w	r5, r5, r9
 800c8fe:	6026      	str	r6, [r4, #0]
 800c900:	60a5      	str	r5, [r4, #8]
 800c902:	463e      	mov	r6, r7
 800c904:	42be      	cmp	r6, r7
 800c906:	d900      	bls.n	800c90a <__ssputs_r+0x86>
 800c908:	463e      	mov	r6, r7
 800c90a:	6820      	ldr	r0, [r4, #0]
 800c90c:	4632      	mov	r2, r6
 800c90e:	4641      	mov	r1, r8
 800c910:	f000 ff18 	bl	800d744 <memmove>
 800c914:	68a3      	ldr	r3, [r4, #8]
 800c916:	1b9b      	subs	r3, r3, r6
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	4433      	add	r3, r6
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	2000      	movs	r0, #0
 800c922:	e7db      	b.n	800c8dc <__ssputs_r+0x58>
 800c924:	462a      	mov	r2, r5
 800c926:	f000 ff33 	bl	800d790 <_realloc_r>
 800c92a:	4606      	mov	r6, r0
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d1e1      	bne.n	800c8f4 <__ssputs_r+0x70>
 800c930:	6921      	ldr	r1, [r4, #16]
 800c932:	4650      	mov	r0, sl
 800c934:	f7ff fec6 	bl	800c6c4 <_free_r>
 800c938:	e7c7      	b.n	800c8ca <__ssputs_r+0x46>
	...

0800c93c <_svfiprintf_r>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	4698      	mov	r8, r3
 800c942:	898b      	ldrh	r3, [r1, #12]
 800c944:	061b      	lsls	r3, r3, #24
 800c946:	b09d      	sub	sp, #116	; 0x74
 800c948:	4607      	mov	r7, r0
 800c94a:	460d      	mov	r5, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	d50e      	bpl.n	800c96e <_svfiprintf_r+0x32>
 800c950:	690b      	ldr	r3, [r1, #16]
 800c952:	b963      	cbnz	r3, 800c96e <_svfiprintf_r+0x32>
 800c954:	2140      	movs	r1, #64	; 0x40
 800c956:	f7ff ff21 	bl	800c79c <_malloc_r>
 800c95a:	6028      	str	r0, [r5, #0]
 800c95c:	6128      	str	r0, [r5, #16]
 800c95e:	b920      	cbnz	r0, 800c96a <_svfiprintf_r+0x2e>
 800c960:	230c      	movs	r3, #12
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	e0d1      	b.n	800cb0e <_svfiprintf_r+0x1d2>
 800c96a:	2340      	movs	r3, #64	; 0x40
 800c96c:	616b      	str	r3, [r5, #20]
 800c96e:	2300      	movs	r3, #0
 800c970:	9309      	str	r3, [sp, #36]	; 0x24
 800c972:	2320      	movs	r3, #32
 800c974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c978:	f8cd 800c 	str.w	r8, [sp, #12]
 800c97c:	2330      	movs	r3, #48	; 0x30
 800c97e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb28 <_svfiprintf_r+0x1ec>
 800c982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c986:	f04f 0901 	mov.w	r9, #1
 800c98a:	4623      	mov	r3, r4
 800c98c:	469a      	mov	sl, r3
 800c98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c992:	b10a      	cbz	r2, 800c998 <_svfiprintf_r+0x5c>
 800c994:	2a25      	cmp	r2, #37	; 0x25
 800c996:	d1f9      	bne.n	800c98c <_svfiprintf_r+0x50>
 800c998:	ebba 0b04 	subs.w	fp, sl, r4
 800c99c:	d00b      	beq.n	800c9b6 <_svfiprintf_r+0x7a>
 800c99e:	465b      	mov	r3, fp
 800c9a0:	4622      	mov	r2, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7ff ff6d 	bl	800c884 <__ssputs_r>
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	f000 80aa 	beq.w	800cb04 <_svfiprintf_r+0x1c8>
 800c9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9b2:	445a      	add	r2, fp
 800c9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 80a2 	beq.w	800cb04 <_svfiprintf_r+0x1c8>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ca:	f10a 0a01 	add.w	sl, sl, #1
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	9307      	str	r3, [sp, #28]
 800c9d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c9d8:	4654      	mov	r4, sl
 800c9da:	2205      	movs	r2, #5
 800c9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e0:	4851      	ldr	r0, [pc, #324]	; (800cb28 <_svfiprintf_r+0x1ec>)
 800c9e2:	f7f3 fc0d 	bl	8000200 <memchr>
 800c9e6:	9a04      	ldr	r2, [sp, #16]
 800c9e8:	b9d8      	cbnz	r0, 800ca22 <_svfiprintf_r+0xe6>
 800c9ea:	06d0      	lsls	r0, r2, #27
 800c9ec:	bf44      	itt	mi
 800c9ee:	2320      	movmi	r3, #32
 800c9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f4:	0711      	lsls	r1, r2, #28
 800c9f6:	bf44      	itt	mi
 800c9f8:	232b      	movmi	r3, #43	; 0x2b
 800c9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800ca02:	2b2a      	cmp	r3, #42	; 0x2a
 800ca04:	d015      	beq.n	800ca32 <_svfiprintf_r+0xf6>
 800ca06:	9a07      	ldr	r2, [sp, #28]
 800ca08:	4654      	mov	r4, sl
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	f04f 0c0a 	mov.w	ip, #10
 800ca10:	4621      	mov	r1, r4
 800ca12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca16:	3b30      	subs	r3, #48	; 0x30
 800ca18:	2b09      	cmp	r3, #9
 800ca1a:	d94e      	bls.n	800caba <_svfiprintf_r+0x17e>
 800ca1c:	b1b0      	cbz	r0, 800ca4c <_svfiprintf_r+0x110>
 800ca1e:	9207      	str	r2, [sp, #28]
 800ca20:	e014      	b.n	800ca4c <_svfiprintf_r+0x110>
 800ca22:	eba0 0308 	sub.w	r3, r0, r8
 800ca26:	fa09 f303 	lsl.w	r3, r9, r3
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	9304      	str	r3, [sp, #16]
 800ca2e:	46a2      	mov	sl, r4
 800ca30:	e7d2      	b.n	800c9d8 <_svfiprintf_r+0x9c>
 800ca32:	9b03      	ldr	r3, [sp, #12]
 800ca34:	1d19      	adds	r1, r3, #4
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	9103      	str	r1, [sp, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	bfbb      	ittet	lt
 800ca3e:	425b      	neglt	r3, r3
 800ca40:	f042 0202 	orrlt.w	r2, r2, #2
 800ca44:	9307      	strge	r3, [sp, #28]
 800ca46:	9307      	strlt	r3, [sp, #28]
 800ca48:	bfb8      	it	lt
 800ca4a:	9204      	strlt	r2, [sp, #16]
 800ca4c:	7823      	ldrb	r3, [r4, #0]
 800ca4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ca50:	d10c      	bne.n	800ca6c <_svfiprintf_r+0x130>
 800ca52:	7863      	ldrb	r3, [r4, #1]
 800ca54:	2b2a      	cmp	r3, #42	; 0x2a
 800ca56:	d135      	bne.n	800cac4 <_svfiprintf_r+0x188>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	1d1a      	adds	r2, r3, #4
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	9203      	str	r2, [sp, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	bfb8      	it	lt
 800ca64:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca68:	3402      	adds	r4, #2
 800ca6a:	9305      	str	r3, [sp, #20]
 800ca6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb38 <_svfiprintf_r+0x1fc>
 800ca70:	7821      	ldrb	r1, [r4, #0]
 800ca72:	2203      	movs	r2, #3
 800ca74:	4650      	mov	r0, sl
 800ca76:	f7f3 fbc3 	bl	8000200 <memchr>
 800ca7a:	b140      	cbz	r0, 800ca8e <_svfiprintf_r+0x152>
 800ca7c:	2340      	movs	r3, #64	; 0x40
 800ca7e:	eba0 000a 	sub.w	r0, r0, sl
 800ca82:	fa03 f000 	lsl.w	r0, r3, r0
 800ca86:	9b04      	ldr	r3, [sp, #16]
 800ca88:	4303      	orrs	r3, r0
 800ca8a:	3401      	adds	r4, #1
 800ca8c:	9304      	str	r3, [sp, #16]
 800ca8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca92:	4826      	ldr	r0, [pc, #152]	; (800cb2c <_svfiprintf_r+0x1f0>)
 800ca94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca98:	2206      	movs	r2, #6
 800ca9a:	f7f3 fbb1 	bl	8000200 <memchr>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d038      	beq.n	800cb14 <_svfiprintf_r+0x1d8>
 800caa2:	4b23      	ldr	r3, [pc, #140]	; (800cb30 <_svfiprintf_r+0x1f4>)
 800caa4:	bb1b      	cbnz	r3, 800caee <_svfiprintf_r+0x1b2>
 800caa6:	9b03      	ldr	r3, [sp, #12]
 800caa8:	3307      	adds	r3, #7
 800caaa:	f023 0307 	bic.w	r3, r3, #7
 800caae:	3308      	adds	r3, #8
 800cab0:	9303      	str	r3, [sp, #12]
 800cab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab4:	4433      	add	r3, r6
 800cab6:	9309      	str	r3, [sp, #36]	; 0x24
 800cab8:	e767      	b.n	800c98a <_svfiprintf_r+0x4e>
 800caba:	fb0c 3202 	mla	r2, ip, r2, r3
 800cabe:	460c      	mov	r4, r1
 800cac0:	2001      	movs	r0, #1
 800cac2:	e7a5      	b.n	800ca10 <_svfiprintf_r+0xd4>
 800cac4:	2300      	movs	r3, #0
 800cac6:	3401      	adds	r4, #1
 800cac8:	9305      	str	r3, [sp, #20]
 800caca:	4619      	mov	r1, r3
 800cacc:	f04f 0c0a 	mov.w	ip, #10
 800cad0:	4620      	mov	r0, r4
 800cad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cad6:	3a30      	subs	r2, #48	; 0x30
 800cad8:	2a09      	cmp	r2, #9
 800cada:	d903      	bls.n	800cae4 <_svfiprintf_r+0x1a8>
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d0c5      	beq.n	800ca6c <_svfiprintf_r+0x130>
 800cae0:	9105      	str	r1, [sp, #20]
 800cae2:	e7c3      	b.n	800ca6c <_svfiprintf_r+0x130>
 800cae4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cae8:	4604      	mov	r4, r0
 800caea:	2301      	movs	r3, #1
 800caec:	e7f0      	b.n	800cad0 <_svfiprintf_r+0x194>
 800caee:	ab03      	add	r3, sp, #12
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	462a      	mov	r2, r5
 800caf4:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <_svfiprintf_r+0x1f8>)
 800caf6:	a904      	add	r1, sp, #16
 800caf8:	4638      	mov	r0, r7
 800cafa:	f7fb fe41 	bl	8008780 <_printf_float>
 800cafe:	1c42      	adds	r2, r0, #1
 800cb00:	4606      	mov	r6, r0
 800cb02:	d1d6      	bne.n	800cab2 <_svfiprintf_r+0x176>
 800cb04:	89ab      	ldrh	r3, [r5, #12]
 800cb06:	065b      	lsls	r3, r3, #25
 800cb08:	f53f af2c 	bmi.w	800c964 <_svfiprintf_r+0x28>
 800cb0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb0e:	b01d      	add	sp, #116	; 0x74
 800cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb14:	ab03      	add	r3, sp, #12
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	462a      	mov	r2, r5
 800cb1a:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <_svfiprintf_r+0x1f8>)
 800cb1c:	a904      	add	r1, sp, #16
 800cb1e:	4638      	mov	r0, r7
 800cb20:	f7fc f8d2 	bl	8008cc8 <_printf_i>
 800cb24:	e7eb      	b.n	800cafe <_svfiprintf_r+0x1c2>
 800cb26:	bf00      	nop
 800cb28:	0800decc 	.word	0x0800decc
 800cb2c:	0800ded6 	.word	0x0800ded6
 800cb30:	08008781 	.word	0x08008781
 800cb34:	0800c885 	.word	0x0800c885
 800cb38:	0800ded2 	.word	0x0800ded2

0800cb3c <_sungetc_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	1c4b      	adds	r3, r1, #1
 800cb40:	4614      	mov	r4, r2
 800cb42:	d103      	bne.n	800cb4c <_sungetc_r+0x10>
 800cb44:	f04f 35ff 	mov.w	r5, #4294967295
 800cb48:	4628      	mov	r0, r5
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	8993      	ldrh	r3, [r2, #12]
 800cb4e:	f023 0320 	bic.w	r3, r3, #32
 800cb52:	8193      	strh	r3, [r2, #12]
 800cb54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb56:	6852      	ldr	r2, [r2, #4]
 800cb58:	b2cd      	uxtb	r5, r1
 800cb5a:	b18b      	cbz	r3, 800cb80 <_sungetc_r+0x44>
 800cb5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	dd08      	ble.n	800cb74 <_sungetc_r+0x38>
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	1e5a      	subs	r2, r3, #1
 800cb66:	6022      	str	r2, [r4, #0]
 800cb68:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cb6c:	6863      	ldr	r3, [r4, #4]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	6063      	str	r3, [r4, #4]
 800cb72:	e7e9      	b.n	800cb48 <_sungetc_r+0xc>
 800cb74:	4621      	mov	r1, r4
 800cb76:	f000 fd4b 	bl	800d610 <__submore>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d0f1      	beq.n	800cb62 <_sungetc_r+0x26>
 800cb7e:	e7e1      	b.n	800cb44 <_sungetc_r+0x8>
 800cb80:	6921      	ldr	r1, [r4, #16]
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	b151      	cbz	r1, 800cb9c <_sungetc_r+0x60>
 800cb86:	4299      	cmp	r1, r3
 800cb88:	d208      	bcs.n	800cb9c <_sungetc_r+0x60>
 800cb8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cb8e:	42a9      	cmp	r1, r5
 800cb90:	d104      	bne.n	800cb9c <_sungetc_r+0x60>
 800cb92:	3b01      	subs	r3, #1
 800cb94:	3201      	adds	r2, #1
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	6062      	str	r2, [r4, #4]
 800cb9a:	e7d5      	b.n	800cb48 <_sungetc_r+0xc>
 800cb9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cba4:	6363      	str	r3, [r4, #52]	; 0x34
 800cba6:	2303      	movs	r3, #3
 800cba8:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbaa:	4623      	mov	r3, r4
 800cbac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e7dc      	b.n	800cb70 <_sungetc_r+0x34>

0800cbb6 <__ssrefill_r>:
 800cbb6:	b510      	push	{r4, lr}
 800cbb8:	460c      	mov	r4, r1
 800cbba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cbbc:	b169      	cbz	r1, 800cbda <__ssrefill_r+0x24>
 800cbbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc2:	4299      	cmp	r1, r3
 800cbc4:	d001      	beq.n	800cbca <__ssrefill_r+0x14>
 800cbc6:	f7ff fd7d 	bl	800c6c4 <_free_r>
 800cbca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbcc:	6063      	str	r3, [r4, #4]
 800cbce:	2000      	movs	r0, #0
 800cbd0:	6360      	str	r0, [r4, #52]	; 0x34
 800cbd2:	b113      	cbz	r3, 800cbda <__ssrefill_r+0x24>
 800cbd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	6923      	ldr	r3, [r4, #16]
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6063      	str	r3, [r4, #4]
 800cbe2:	89a3      	ldrh	r3, [r4, #12]
 800cbe4:	f043 0320 	orr.w	r3, r3, #32
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295
 800cbee:	e7f3      	b.n	800cbd8 <__ssrefill_r+0x22>

0800cbf0 <__ssvfiscanf_r>:
 800cbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cc00:	49a6      	ldr	r1, [pc, #664]	; (800ce9c <__ssvfiscanf_r+0x2ac>)
 800cc02:	91a0      	str	r1, [sp, #640]	; 0x280
 800cc04:	f10d 0804 	add.w	r8, sp, #4
 800cc08:	49a5      	ldr	r1, [pc, #660]	; (800cea0 <__ssvfiscanf_r+0x2b0>)
 800cc0a:	4fa6      	ldr	r7, [pc, #664]	; (800cea4 <__ssvfiscanf_r+0x2b4>)
 800cc0c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cea8 <__ssvfiscanf_r+0x2b8>
 800cc10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cc14:	4606      	mov	r6, r0
 800cc16:	91a1      	str	r1, [sp, #644]	; 0x284
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	7813      	ldrb	r3, [r2, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 815a 	beq.w	800ced6 <__ssvfiscanf_r+0x2e6>
 800cc22:	5dd9      	ldrb	r1, [r3, r7]
 800cc24:	f011 0108 	ands.w	r1, r1, #8
 800cc28:	f102 0501 	add.w	r5, r2, #1
 800cc2c:	d019      	beq.n	800cc62 <__ssvfiscanf_r+0x72>
 800cc2e:	6863      	ldr	r3, [r4, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	dd0f      	ble.n	800cc54 <__ssvfiscanf_r+0x64>
 800cc34:	6823      	ldr	r3, [r4, #0]
 800cc36:	781a      	ldrb	r2, [r3, #0]
 800cc38:	5cba      	ldrb	r2, [r7, r2]
 800cc3a:	0712      	lsls	r2, r2, #28
 800cc3c:	d401      	bmi.n	800cc42 <__ssvfiscanf_r+0x52>
 800cc3e:	462a      	mov	r2, r5
 800cc40:	e7eb      	b.n	800cc1a <__ssvfiscanf_r+0x2a>
 800cc42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cc44:	3201      	adds	r2, #1
 800cc46:	9245      	str	r2, [sp, #276]	; 0x114
 800cc48:	6862      	ldr	r2, [r4, #4]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	3a01      	subs	r2, #1
 800cc4e:	6062      	str	r2, [r4, #4]
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	e7ec      	b.n	800cc2e <__ssvfiscanf_r+0x3e>
 800cc54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc56:	4621      	mov	r1, r4
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4798      	blx	r3
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d0e9      	beq.n	800cc34 <__ssvfiscanf_r+0x44>
 800cc60:	e7ed      	b.n	800cc3e <__ssvfiscanf_r+0x4e>
 800cc62:	2b25      	cmp	r3, #37	; 0x25
 800cc64:	d012      	beq.n	800cc8c <__ssvfiscanf_r+0x9c>
 800cc66:	469a      	mov	sl, r3
 800cc68:	6863      	ldr	r3, [r4, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f340 8091 	ble.w	800cd92 <__ssvfiscanf_r+0x1a2>
 800cc70:	6822      	ldr	r2, [r4, #0]
 800cc72:	7813      	ldrb	r3, [r2, #0]
 800cc74:	4553      	cmp	r3, sl
 800cc76:	f040 812e 	bne.w	800ced6 <__ssvfiscanf_r+0x2e6>
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	6063      	str	r3, [r4, #4]
 800cc80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cc82:	3201      	adds	r2, #1
 800cc84:	3301      	adds	r3, #1
 800cc86:	6022      	str	r2, [r4, #0]
 800cc88:	9345      	str	r3, [sp, #276]	; 0x114
 800cc8a:	e7d8      	b.n	800cc3e <__ssvfiscanf_r+0x4e>
 800cc8c:	9141      	str	r1, [sp, #260]	; 0x104
 800cc8e:	9143      	str	r1, [sp, #268]	; 0x10c
 800cc90:	7853      	ldrb	r3, [r2, #1]
 800cc92:	2b2a      	cmp	r3, #42	; 0x2a
 800cc94:	bf02      	ittt	eq
 800cc96:	2310      	moveq	r3, #16
 800cc98:	1c95      	addeq	r5, r2, #2
 800cc9a:	9341      	streq	r3, [sp, #260]	; 0x104
 800cc9c:	220a      	movs	r2, #10
 800cc9e:	46aa      	mov	sl, r5
 800cca0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cca4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cca8:	2b09      	cmp	r3, #9
 800ccaa:	d91d      	bls.n	800cce8 <__ssvfiscanf_r+0xf8>
 800ccac:	487e      	ldr	r0, [pc, #504]	; (800cea8 <__ssvfiscanf_r+0x2b8>)
 800ccae:	2203      	movs	r2, #3
 800ccb0:	f7f3 faa6 	bl	8000200 <memchr>
 800ccb4:	b140      	cbz	r0, 800ccc8 <__ssvfiscanf_r+0xd8>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	eba0 0009 	sub.w	r0, r0, r9
 800ccbc:	fa03 f000 	lsl.w	r0, r3, r0
 800ccc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccc2:	4318      	orrs	r0, r3
 800ccc4:	9041      	str	r0, [sp, #260]	; 0x104
 800ccc6:	4655      	mov	r5, sl
 800ccc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cccc:	2b78      	cmp	r3, #120	; 0x78
 800ccce:	d806      	bhi.n	800ccde <__ssvfiscanf_r+0xee>
 800ccd0:	2b57      	cmp	r3, #87	; 0x57
 800ccd2:	d810      	bhi.n	800ccf6 <__ssvfiscanf_r+0x106>
 800ccd4:	2b25      	cmp	r3, #37	; 0x25
 800ccd6:	d0c6      	beq.n	800cc66 <__ssvfiscanf_r+0x76>
 800ccd8:	d856      	bhi.n	800cd88 <__ssvfiscanf_r+0x198>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d064      	beq.n	800cda8 <__ssvfiscanf_r+0x1b8>
 800ccde:	2303      	movs	r3, #3
 800cce0:	9347      	str	r3, [sp, #284]	; 0x11c
 800cce2:	230a      	movs	r3, #10
 800cce4:	9342      	str	r3, [sp, #264]	; 0x108
 800cce6:	e071      	b.n	800cdcc <__ssvfiscanf_r+0x1dc>
 800cce8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ccea:	fb02 1103 	mla	r1, r2, r3, r1
 800ccee:	3930      	subs	r1, #48	; 0x30
 800ccf0:	9143      	str	r1, [sp, #268]	; 0x10c
 800ccf2:	4655      	mov	r5, sl
 800ccf4:	e7d3      	b.n	800cc9e <__ssvfiscanf_r+0xae>
 800ccf6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ccfa:	2a20      	cmp	r2, #32
 800ccfc:	d8ef      	bhi.n	800ccde <__ssvfiscanf_r+0xee>
 800ccfe:	a101      	add	r1, pc, #4	; (adr r1, 800cd04 <__ssvfiscanf_r+0x114>)
 800cd00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd04:	0800cdb7 	.word	0x0800cdb7
 800cd08:	0800ccdf 	.word	0x0800ccdf
 800cd0c:	0800ccdf 	.word	0x0800ccdf
 800cd10:	0800ce15 	.word	0x0800ce15
 800cd14:	0800ccdf 	.word	0x0800ccdf
 800cd18:	0800ccdf 	.word	0x0800ccdf
 800cd1c:	0800ccdf 	.word	0x0800ccdf
 800cd20:	0800ccdf 	.word	0x0800ccdf
 800cd24:	0800ccdf 	.word	0x0800ccdf
 800cd28:	0800ccdf 	.word	0x0800ccdf
 800cd2c:	0800ccdf 	.word	0x0800ccdf
 800cd30:	0800ce2b 	.word	0x0800ce2b
 800cd34:	0800ce01 	.word	0x0800ce01
 800cd38:	0800cd8f 	.word	0x0800cd8f
 800cd3c:	0800cd8f 	.word	0x0800cd8f
 800cd40:	0800cd8f 	.word	0x0800cd8f
 800cd44:	0800ccdf 	.word	0x0800ccdf
 800cd48:	0800ce05 	.word	0x0800ce05
 800cd4c:	0800ccdf 	.word	0x0800ccdf
 800cd50:	0800ccdf 	.word	0x0800ccdf
 800cd54:	0800ccdf 	.word	0x0800ccdf
 800cd58:	0800ccdf 	.word	0x0800ccdf
 800cd5c:	0800ce3b 	.word	0x0800ce3b
 800cd60:	0800ce0d 	.word	0x0800ce0d
 800cd64:	0800cdaf 	.word	0x0800cdaf
 800cd68:	0800ccdf 	.word	0x0800ccdf
 800cd6c:	0800ccdf 	.word	0x0800ccdf
 800cd70:	0800ce37 	.word	0x0800ce37
 800cd74:	0800ccdf 	.word	0x0800ccdf
 800cd78:	0800ce01 	.word	0x0800ce01
 800cd7c:	0800ccdf 	.word	0x0800ccdf
 800cd80:	0800ccdf 	.word	0x0800ccdf
 800cd84:	0800cdb7 	.word	0x0800cdb7
 800cd88:	3b45      	subs	r3, #69	; 0x45
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d8a7      	bhi.n	800ccde <__ssvfiscanf_r+0xee>
 800cd8e:	2305      	movs	r3, #5
 800cd90:	e01b      	b.n	800cdca <__ssvfiscanf_r+0x1da>
 800cd92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd94:	4621      	mov	r1, r4
 800cd96:	4630      	mov	r0, r6
 800cd98:	4798      	blx	r3
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	f43f af68 	beq.w	800cc70 <__ssvfiscanf_r+0x80>
 800cda0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cda2:	2800      	cmp	r0, #0
 800cda4:	f040 808d 	bne.w	800cec2 <__ssvfiscanf_r+0x2d2>
 800cda8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdac:	e08f      	b.n	800cece <__ssvfiscanf_r+0x2de>
 800cdae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cdb0:	f042 0220 	orr.w	r2, r2, #32
 800cdb4:	9241      	str	r2, [sp, #260]	; 0x104
 800cdb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cdb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdbc:	9241      	str	r2, [sp, #260]	; 0x104
 800cdbe:	2210      	movs	r2, #16
 800cdc0:	2b6f      	cmp	r3, #111	; 0x6f
 800cdc2:	9242      	str	r2, [sp, #264]	; 0x108
 800cdc4:	bf34      	ite	cc
 800cdc6:	2303      	movcc	r3, #3
 800cdc8:	2304      	movcs	r3, #4
 800cdca:	9347      	str	r3, [sp, #284]	; 0x11c
 800cdcc:	6863      	ldr	r3, [r4, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	dd42      	ble.n	800ce58 <__ssvfiscanf_r+0x268>
 800cdd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cdd4:	0659      	lsls	r1, r3, #25
 800cdd6:	d404      	bmi.n	800cde2 <__ssvfiscanf_r+0x1f2>
 800cdd8:	6823      	ldr	r3, [r4, #0]
 800cdda:	781a      	ldrb	r2, [r3, #0]
 800cddc:	5cba      	ldrb	r2, [r7, r2]
 800cdde:	0712      	lsls	r2, r2, #28
 800cde0:	d441      	bmi.n	800ce66 <__ssvfiscanf_r+0x276>
 800cde2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	dc50      	bgt.n	800ce8a <__ssvfiscanf_r+0x29a>
 800cde8:	466b      	mov	r3, sp
 800cdea:	4622      	mov	r2, r4
 800cdec:	a941      	add	r1, sp, #260	; 0x104
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f000 f9d0 	bl	800d194 <_scanf_chars>
 800cdf4:	2801      	cmp	r0, #1
 800cdf6:	d06e      	beq.n	800ced6 <__ssvfiscanf_r+0x2e6>
 800cdf8:	2802      	cmp	r0, #2
 800cdfa:	f47f af20 	bne.w	800cc3e <__ssvfiscanf_r+0x4e>
 800cdfe:	e7cf      	b.n	800cda0 <__ssvfiscanf_r+0x1b0>
 800ce00:	220a      	movs	r2, #10
 800ce02:	e7dd      	b.n	800cdc0 <__ssvfiscanf_r+0x1d0>
 800ce04:	2300      	movs	r3, #0
 800ce06:	9342      	str	r3, [sp, #264]	; 0x108
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e7de      	b.n	800cdca <__ssvfiscanf_r+0x1da>
 800ce0c:	2308      	movs	r3, #8
 800ce0e:	9342      	str	r3, [sp, #264]	; 0x108
 800ce10:	2304      	movs	r3, #4
 800ce12:	e7da      	b.n	800cdca <__ssvfiscanf_r+0x1da>
 800ce14:	4629      	mov	r1, r5
 800ce16:	4640      	mov	r0, r8
 800ce18:	f000 fb3a 	bl	800d490 <__sccl>
 800ce1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce22:	9341      	str	r3, [sp, #260]	; 0x104
 800ce24:	4605      	mov	r5, r0
 800ce26:	2301      	movs	r3, #1
 800ce28:	e7cf      	b.n	800cdca <__ssvfiscanf_r+0x1da>
 800ce2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce30:	9341      	str	r3, [sp, #260]	; 0x104
 800ce32:	2300      	movs	r3, #0
 800ce34:	e7c9      	b.n	800cdca <__ssvfiscanf_r+0x1da>
 800ce36:	2302      	movs	r3, #2
 800ce38:	e7c7      	b.n	800cdca <__ssvfiscanf_r+0x1da>
 800ce3a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ce3c:	06c3      	lsls	r3, r0, #27
 800ce3e:	f53f aefe 	bmi.w	800cc3e <__ssvfiscanf_r+0x4e>
 800ce42:	9b00      	ldr	r3, [sp, #0]
 800ce44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce46:	1d19      	adds	r1, r3, #4
 800ce48:	9100      	str	r1, [sp, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f010 0f01 	tst.w	r0, #1
 800ce50:	bf14      	ite	ne
 800ce52:	801a      	strhne	r2, [r3, #0]
 800ce54:	601a      	streq	r2, [r3, #0]
 800ce56:	e6f2      	b.n	800cc3e <__ssvfiscanf_r+0x4e>
 800ce58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	4798      	blx	r3
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d0b6      	beq.n	800cdd2 <__ssvfiscanf_r+0x1e2>
 800ce64:	e79c      	b.n	800cda0 <__ssvfiscanf_r+0x1b0>
 800ce66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce68:	3201      	adds	r2, #1
 800ce6a:	9245      	str	r2, [sp, #276]	; 0x114
 800ce6c:	6862      	ldr	r2, [r4, #4]
 800ce6e:	3a01      	subs	r2, #1
 800ce70:	2a00      	cmp	r2, #0
 800ce72:	6062      	str	r2, [r4, #4]
 800ce74:	dd02      	ble.n	800ce7c <__ssvfiscanf_r+0x28c>
 800ce76:	3301      	adds	r3, #1
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	e7ad      	b.n	800cdd8 <__ssvfiscanf_r+0x1e8>
 800ce7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4630      	mov	r0, r6
 800ce82:	4798      	blx	r3
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d0a7      	beq.n	800cdd8 <__ssvfiscanf_r+0x1e8>
 800ce88:	e78a      	b.n	800cda0 <__ssvfiscanf_r+0x1b0>
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	dc0e      	bgt.n	800ceac <__ssvfiscanf_r+0x2bc>
 800ce8e:	466b      	mov	r3, sp
 800ce90:	4622      	mov	r2, r4
 800ce92:	a941      	add	r1, sp, #260	; 0x104
 800ce94:	4630      	mov	r0, r6
 800ce96:	f000 f9d7 	bl	800d248 <_scanf_i>
 800ce9a:	e7ab      	b.n	800cdf4 <__ssvfiscanf_r+0x204>
 800ce9c:	0800cb3d 	.word	0x0800cb3d
 800cea0:	0800cbb7 	.word	0x0800cbb7
 800cea4:	0800db01 	.word	0x0800db01
 800cea8:	0800ded2 	.word	0x0800ded2
 800ceac:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <__ssvfiscanf_r+0x2ec>)
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f43f aec5 	beq.w	800cc3e <__ssvfiscanf_r+0x4e>
 800ceb4:	466b      	mov	r3, sp
 800ceb6:	4622      	mov	r2, r4
 800ceb8:	a941      	add	r1, sp, #260	; 0x104
 800ceba:	4630      	mov	r0, r6
 800cebc:	f7fc f82a 	bl	8008f14 <_scanf_float>
 800cec0:	e798      	b.n	800cdf4 <__ssvfiscanf_r+0x204>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cec8:	bf18      	it	ne
 800ceca:	f04f 30ff 	movne.w	r0, #4294967295
 800cece:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ced2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ced8:	e7f9      	b.n	800cece <__ssvfiscanf_r+0x2de>
 800ceda:	bf00      	nop
 800cedc:	08008f15 	.word	0x08008f15

0800cee0 <__sfputc_r>:
 800cee0:	6893      	ldr	r3, [r2, #8]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	b410      	push	{r4}
 800cee8:	6093      	str	r3, [r2, #8]
 800ceea:	da08      	bge.n	800cefe <__sfputc_r+0x1e>
 800ceec:	6994      	ldr	r4, [r2, #24]
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	db01      	blt.n	800cef6 <__sfputc_r+0x16>
 800cef2:	290a      	cmp	r1, #10
 800cef4:	d103      	bne.n	800cefe <__sfputc_r+0x1e>
 800cef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cefa:	f7fd b9ed 	b.w	800a2d8 <__swbuf_r>
 800cefe:	6813      	ldr	r3, [r2, #0]
 800cf00:	1c58      	adds	r0, r3, #1
 800cf02:	6010      	str	r0, [r2, #0]
 800cf04:	7019      	strb	r1, [r3, #0]
 800cf06:	4608      	mov	r0, r1
 800cf08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <__sfputs_r>:
 800cf0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf10:	4606      	mov	r6, r0
 800cf12:	460f      	mov	r7, r1
 800cf14:	4614      	mov	r4, r2
 800cf16:	18d5      	adds	r5, r2, r3
 800cf18:	42ac      	cmp	r4, r5
 800cf1a:	d101      	bne.n	800cf20 <__sfputs_r+0x12>
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	e007      	b.n	800cf30 <__sfputs_r+0x22>
 800cf20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf24:	463a      	mov	r2, r7
 800cf26:	4630      	mov	r0, r6
 800cf28:	f7ff ffda 	bl	800cee0 <__sfputc_r>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d1f3      	bne.n	800cf18 <__sfputs_r+0xa>
 800cf30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf34 <_vfiprintf_r>:
 800cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	460d      	mov	r5, r1
 800cf3a:	b09d      	sub	sp, #116	; 0x74
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	4698      	mov	r8, r3
 800cf40:	4606      	mov	r6, r0
 800cf42:	b118      	cbz	r0, 800cf4c <_vfiprintf_r+0x18>
 800cf44:	6983      	ldr	r3, [r0, #24]
 800cf46:	b90b      	cbnz	r3, 800cf4c <_vfiprintf_r+0x18>
 800cf48:	f7fe fa3e 	bl	800b3c8 <__sinit>
 800cf4c:	4b89      	ldr	r3, [pc, #548]	; (800d174 <_vfiprintf_r+0x240>)
 800cf4e:	429d      	cmp	r5, r3
 800cf50:	d11b      	bne.n	800cf8a <_vfiprintf_r+0x56>
 800cf52:	6875      	ldr	r5, [r6, #4]
 800cf54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf56:	07d9      	lsls	r1, r3, #31
 800cf58:	d405      	bmi.n	800cf66 <_vfiprintf_r+0x32>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	059a      	lsls	r2, r3, #22
 800cf5e:	d402      	bmi.n	800cf66 <_vfiprintf_r+0x32>
 800cf60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf62:	f7fe fe42 	bl	800bbea <__retarget_lock_acquire_recursive>
 800cf66:	89ab      	ldrh	r3, [r5, #12]
 800cf68:	071b      	lsls	r3, r3, #28
 800cf6a:	d501      	bpl.n	800cf70 <_vfiprintf_r+0x3c>
 800cf6c:	692b      	ldr	r3, [r5, #16]
 800cf6e:	b9eb      	cbnz	r3, 800cfac <_vfiprintf_r+0x78>
 800cf70:	4629      	mov	r1, r5
 800cf72:	4630      	mov	r0, r6
 800cf74:	f7fd fa14 	bl	800a3a0 <__swsetup_r>
 800cf78:	b1c0      	cbz	r0, 800cfac <_vfiprintf_r+0x78>
 800cf7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf7c:	07dc      	lsls	r4, r3, #31
 800cf7e:	d50e      	bpl.n	800cf9e <_vfiprintf_r+0x6a>
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	b01d      	add	sp, #116	; 0x74
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8a:	4b7b      	ldr	r3, [pc, #492]	; (800d178 <_vfiprintf_r+0x244>)
 800cf8c:	429d      	cmp	r5, r3
 800cf8e:	d101      	bne.n	800cf94 <_vfiprintf_r+0x60>
 800cf90:	68b5      	ldr	r5, [r6, #8]
 800cf92:	e7df      	b.n	800cf54 <_vfiprintf_r+0x20>
 800cf94:	4b79      	ldr	r3, [pc, #484]	; (800d17c <_vfiprintf_r+0x248>)
 800cf96:	429d      	cmp	r5, r3
 800cf98:	bf08      	it	eq
 800cf9a:	68f5      	ldreq	r5, [r6, #12]
 800cf9c:	e7da      	b.n	800cf54 <_vfiprintf_r+0x20>
 800cf9e:	89ab      	ldrh	r3, [r5, #12]
 800cfa0:	0598      	lsls	r0, r3, #22
 800cfa2:	d4ed      	bmi.n	800cf80 <_vfiprintf_r+0x4c>
 800cfa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfa6:	f7fe fe21 	bl	800bbec <__retarget_lock_release_recursive>
 800cfaa:	e7e9      	b.n	800cf80 <_vfiprintf_r+0x4c>
 800cfac:	2300      	movs	r3, #0
 800cfae:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb0:	2320      	movs	r3, #32
 800cfb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfba:	2330      	movs	r3, #48	; 0x30
 800cfbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d180 <_vfiprintf_r+0x24c>
 800cfc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfc4:	f04f 0901 	mov.w	r9, #1
 800cfc8:	4623      	mov	r3, r4
 800cfca:	469a      	mov	sl, r3
 800cfcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfd0:	b10a      	cbz	r2, 800cfd6 <_vfiprintf_r+0xa2>
 800cfd2:	2a25      	cmp	r2, #37	; 0x25
 800cfd4:	d1f9      	bne.n	800cfca <_vfiprintf_r+0x96>
 800cfd6:	ebba 0b04 	subs.w	fp, sl, r4
 800cfda:	d00b      	beq.n	800cff4 <_vfiprintf_r+0xc0>
 800cfdc:	465b      	mov	r3, fp
 800cfde:	4622      	mov	r2, r4
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f7ff ff93 	bl	800cf0e <__sfputs_r>
 800cfe8:	3001      	adds	r0, #1
 800cfea:	f000 80aa 	beq.w	800d142 <_vfiprintf_r+0x20e>
 800cfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cff0:	445a      	add	r2, fp
 800cff2:	9209      	str	r2, [sp, #36]	; 0x24
 800cff4:	f89a 3000 	ldrb.w	r3, [sl]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f000 80a2 	beq.w	800d142 <_vfiprintf_r+0x20e>
 800cffe:	2300      	movs	r3, #0
 800d000:	f04f 32ff 	mov.w	r2, #4294967295
 800d004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d008:	f10a 0a01 	add.w	sl, sl, #1
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	9307      	str	r3, [sp, #28]
 800d010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d014:	931a      	str	r3, [sp, #104]	; 0x68
 800d016:	4654      	mov	r4, sl
 800d018:	2205      	movs	r2, #5
 800d01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d01e:	4858      	ldr	r0, [pc, #352]	; (800d180 <_vfiprintf_r+0x24c>)
 800d020:	f7f3 f8ee 	bl	8000200 <memchr>
 800d024:	9a04      	ldr	r2, [sp, #16]
 800d026:	b9d8      	cbnz	r0, 800d060 <_vfiprintf_r+0x12c>
 800d028:	06d1      	lsls	r1, r2, #27
 800d02a:	bf44      	itt	mi
 800d02c:	2320      	movmi	r3, #32
 800d02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d032:	0713      	lsls	r3, r2, #28
 800d034:	bf44      	itt	mi
 800d036:	232b      	movmi	r3, #43	; 0x2b
 800d038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d03c:	f89a 3000 	ldrb.w	r3, [sl]
 800d040:	2b2a      	cmp	r3, #42	; 0x2a
 800d042:	d015      	beq.n	800d070 <_vfiprintf_r+0x13c>
 800d044:	9a07      	ldr	r2, [sp, #28]
 800d046:	4654      	mov	r4, sl
 800d048:	2000      	movs	r0, #0
 800d04a:	f04f 0c0a 	mov.w	ip, #10
 800d04e:	4621      	mov	r1, r4
 800d050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d054:	3b30      	subs	r3, #48	; 0x30
 800d056:	2b09      	cmp	r3, #9
 800d058:	d94e      	bls.n	800d0f8 <_vfiprintf_r+0x1c4>
 800d05a:	b1b0      	cbz	r0, 800d08a <_vfiprintf_r+0x156>
 800d05c:	9207      	str	r2, [sp, #28]
 800d05e:	e014      	b.n	800d08a <_vfiprintf_r+0x156>
 800d060:	eba0 0308 	sub.w	r3, r0, r8
 800d064:	fa09 f303 	lsl.w	r3, r9, r3
 800d068:	4313      	orrs	r3, r2
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	46a2      	mov	sl, r4
 800d06e:	e7d2      	b.n	800d016 <_vfiprintf_r+0xe2>
 800d070:	9b03      	ldr	r3, [sp, #12]
 800d072:	1d19      	adds	r1, r3, #4
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	9103      	str	r1, [sp, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	bfbb      	ittet	lt
 800d07c:	425b      	neglt	r3, r3
 800d07e:	f042 0202 	orrlt.w	r2, r2, #2
 800d082:	9307      	strge	r3, [sp, #28]
 800d084:	9307      	strlt	r3, [sp, #28]
 800d086:	bfb8      	it	lt
 800d088:	9204      	strlt	r2, [sp, #16]
 800d08a:	7823      	ldrb	r3, [r4, #0]
 800d08c:	2b2e      	cmp	r3, #46	; 0x2e
 800d08e:	d10c      	bne.n	800d0aa <_vfiprintf_r+0x176>
 800d090:	7863      	ldrb	r3, [r4, #1]
 800d092:	2b2a      	cmp	r3, #42	; 0x2a
 800d094:	d135      	bne.n	800d102 <_vfiprintf_r+0x1ce>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	1d1a      	adds	r2, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9203      	str	r2, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfb8      	it	lt
 800d0a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0a6:	3402      	adds	r4, #2
 800d0a8:	9305      	str	r3, [sp, #20]
 800d0aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d190 <_vfiprintf_r+0x25c>
 800d0ae:	7821      	ldrb	r1, [r4, #0]
 800d0b0:	2203      	movs	r2, #3
 800d0b2:	4650      	mov	r0, sl
 800d0b4:	f7f3 f8a4 	bl	8000200 <memchr>
 800d0b8:	b140      	cbz	r0, 800d0cc <_vfiprintf_r+0x198>
 800d0ba:	2340      	movs	r3, #64	; 0x40
 800d0bc:	eba0 000a 	sub.w	r0, r0, sl
 800d0c0:	fa03 f000 	lsl.w	r0, r3, r0
 800d0c4:	9b04      	ldr	r3, [sp, #16]
 800d0c6:	4303      	orrs	r3, r0
 800d0c8:	3401      	adds	r4, #1
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d0:	482c      	ldr	r0, [pc, #176]	; (800d184 <_vfiprintf_r+0x250>)
 800d0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0d6:	2206      	movs	r2, #6
 800d0d8:	f7f3 f892 	bl	8000200 <memchr>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d03f      	beq.n	800d160 <_vfiprintf_r+0x22c>
 800d0e0:	4b29      	ldr	r3, [pc, #164]	; (800d188 <_vfiprintf_r+0x254>)
 800d0e2:	bb1b      	cbnz	r3, 800d12c <_vfiprintf_r+0x1f8>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	3307      	adds	r3, #7
 800d0e8:	f023 0307 	bic.w	r3, r3, #7
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	9303      	str	r3, [sp, #12]
 800d0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f2:	443b      	add	r3, r7
 800d0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f6:	e767      	b.n	800cfc8 <_vfiprintf_r+0x94>
 800d0f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	2001      	movs	r0, #1
 800d100:	e7a5      	b.n	800d04e <_vfiprintf_r+0x11a>
 800d102:	2300      	movs	r3, #0
 800d104:	3401      	adds	r4, #1
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	4619      	mov	r1, r3
 800d10a:	f04f 0c0a 	mov.w	ip, #10
 800d10e:	4620      	mov	r0, r4
 800d110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d114:	3a30      	subs	r2, #48	; 0x30
 800d116:	2a09      	cmp	r2, #9
 800d118:	d903      	bls.n	800d122 <_vfiprintf_r+0x1ee>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0c5      	beq.n	800d0aa <_vfiprintf_r+0x176>
 800d11e:	9105      	str	r1, [sp, #20]
 800d120:	e7c3      	b.n	800d0aa <_vfiprintf_r+0x176>
 800d122:	fb0c 2101 	mla	r1, ip, r1, r2
 800d126:	4604      	mov	r4, r0
 800d128:	2301      	movs	r3, #1
 800d12a:	e7f0      	b.n	800d10e <_vfiprintf_r+0x1da>
 800d12c:	ab03      	add	r3, sp, #12
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	462a      	mov	r2, r5
 800d132:	4b16      	ldr	r3, [pc, #88]	; (800d18c <_vfiprintf_r+0x258>)
 800d134:	a904      	add	r1, sp, #16
 800d136:	4630      	mov	r0, r6
 800d138:	f7fb fb22 	bl	8008780 <_printf_float>
 800d13c:	4607      	mov	r7, r0
 800d13e:	1c78      	adds	r0, r7, #1
 800d140:	d1d6      	bne.n	800d0f0 <_vfiprintf_r+0x1bc>
 800d142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d144:	07d9      	lsls	r1, r3, #31
 800d146:	d405      	bmi.n	800d154 <_vfiprintf_r+0x220>
 800d148:	89ab      	ldrh	r3, [r5, #12]
 800d14a:	059a      	lsls	r2, r3, #22
 800d14c:	d402      	bmi.n	800d154 <_vfiprintf_r+0x220>
 800d14e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d150:	f7fe fd4c 	bl	800bbec <__retarget_lock_release_recursive>
 800d154:	89ab      	ldrh	r3, [r5, #12]
 800d156:	065b      	lsls	r3, r3, #25
 800d158:	f53f af12 	bmi.w	800cf80 <_vfiprintf_r+0x4c>
 800d15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d15e:	e711      	b.n	800cf84 <_vfiprintf_r+0x50>
 800d160:	ab03      	add	r3, sp, #12
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	462a      	mov	r2, r5
 800d166:	4b09      	ldr	r3, [pc, #36]	; (800d18c <_vfiprintf_r+0x258>)
 800d168:	a904      	add	r1, sp, #16
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7fb fdac 	bl	8008cc8 <_printf_i>
 800d170:	e7e4      	b.n	800d13c <_vfiprintf_r+0x208>
 800d172:	bf00      	nop
 800d174:	0800dcb4 	.word	0x0800dcb4
 800d178:	0800dcd4 	.word	0x0800dcd4
 800d17c:	0800dc94 	.word	0x0800dc94
 800d180:	0800decc 	.word	0x0800decc
 800d184:	0800ded6 	.word	0x0800ded6
 800d188:	08008781 	.word	0x08008781
 800d18c:	0800cf0f 	.word	0x0800cf0f
 800d190:	0800ded2 	.word	0x0800ded2

0800d194 <_scanf_chars>:
 800d194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d198:	4615      	mov	r5, r2
 800d19a:	688a      	ldr	r2, [r1, #8]
 800d19c:	4680      	mov	r8, r0
 800d19e:	460c      	mov	r4, r1
 800d1a0:	b932      	cbnz	r2, 800d1b0 <_scanf_chars+0x1c>
 800d1a2:	698a      	ldr	r2, [r1, #24]
 800d1a4:	2a00      	cmp	r2, #0
 800d1a6:	bf0c      	ite	eq
 800d1a8:	2201      	moveq	r2, #1
 800d1aa:	f04f 32ff 	movne.w	r2, #4294967295
 800d1ae:	608a      	str	r2, [r1, #8]
 800d1b0:	6822      	ldr	r2, [r4, #0]
 800d1b2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d244 <_scanf_chars+0xb0>
 800d1b6:	06d1      	lsls	r1, r2, #27
 800d1b8:	bf5f      	itttt	pl
 800d1ba:	681a      	ldrpl	r2, [r3, #0]
 800d1bc:	1d11      	addpl	r1, r2, #4
 800d1be:	6019      	strpl	r1, [r3, #0]
 800d1c0:	6816      	ldrpl	r6, [r2, #0]
 800d1c2:	2700      	movs	r7, #0
 800d1c4:	69a0      	ldr	r0, [r4, #24]
 800d1c6:	b188      	cbz	r0, 800d1ec <_scanf_chars+0x58>
 800d1c8:	2801      	cmp	r0, #1
 800d1ca:	d107      	bne.n	800d1dc <_scanf_chars+0x48>
 800d1cc:	682a      	ldr	r2, [r5, #0]
 800d1ce:	7811      	ldrb	r1, [r2, #0]
 800d1d0:	6962      	ldr	r2, [r4, #20]
 800d1d2:	5c52      	ldrb	r2, [r2, r1]
 800d1d4:	b952      	cbnz	r2, 800d1ec <_scanf_chars+0x58>
 800d1d6:	2f00      	cmp	r7, #0
 800d1d8:	d031      	beq.n	800d23e <_scanf_chars+0xaa>
 800d1da:	e022      	b.n	800d222 <_scanf_chars+0x8e>
 800d1dc:	2802      	cmp	r0, #2
 800d1de:	d120      	bne.n	800d222 <_scanf_chars+0x8e>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d1e8:	071b      	lsls	r3, r3, #28
 800d1ea:	d41a      	bmi.n	800d222 <_scanf_chars+0x8e>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	06da      	lsls	r2, r3, #27
 800d1f0:	bf5e      	ittt	pl
 800d1f2:	682b      	ldrpl	r3, [r5, #0]
 800d1f4:	781b      	ldrbpl	r3, [r3, #0]
 800d1f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d1fa:	682a      	ldr	r2, [r5, #0]
 800d1fc:	686b      	ldr	r3, [r5, #4]
 800d1fe:	3201      	adds	r2, #1
 800d200:	602a      	str	r2, [r5, #0]
 800d202:	68a2      	ldr	r2, [r4, #8]
 800d204:	3b01      	subs	r3, #1
 800d206:	3a01      	subs	r2, #1
 800d208:	606b      	str	r3, [r5, #4]
 800d20a:	3701      	adds	r7, #1
 800d20c:	60a2      	str	r2, [r4, #8]
 800d20e:	b142      	cbz	r2, 800d222 <_scanf_chars+0x8e>
 800d210:	2b00      	cmp	r3, #0
 800d212:	dcd7      	bgt.n	800d1c4 <_scanf_chars+0x30>
 800d214:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d218:	4629      	mov	r1, r5
 800d21a:	4640      	mov	r0, r8
 800d21c:	4798      	blx	r3
 800d21e:	2800      	cmp	r0, #0
 800d220:	d0d0      	beq.n	800d1c4 <_scanf_chars+0x30>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	f013 0310 	ands.w	r3, r3, #16
 800d228:	d105      	bne.n	800d236 <_scanf_chars+0xa2>
 800d22a:	68e2      	ldr	r2, [r4, #12]
 800d22c:	3201      	adds	r2, #1
 800d22e:	60e2      	str	r2, [r4, #12]
 800d230:	69a2      	ldr	r2, [r4, #24]
 800d232:	b102      	cbz	r2, 800d236 <_scanf_chars+0xa2>
 800d234:	7033      	strb	r3, [r6, #0]
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	443b      	add	r3, r7
 800d23a:	6123      	str	r3, [r4, #16]
 800d23c:	2000      	movs	r0, #0
 800d23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d242:	bf00      	nop
 800d244:	0800db01 	.word	0x0800db01

0800d248 <_scanf_i>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	4698      	mov	r8, r3
 800d24e:	4b76      	ldr	r3, [pc, #472]	; (800d428 <_scanf_i+0x1e0>)
 800d250:	460c      	mov	r4, r1
 800d252:	4682      	mov	sl, r0
 800d254:	4616      	mov	r6, r2
 800d256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d25a:	b087      	sub	sp, #28
 800d25c:	ab03      	add	r3, sp, #12
 800d25e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d262:	4b72      	ldr	r3, [pc, #456]	; (800d42c <_scanf_i+0x1e4>)
 800d264:	69a1      	ldr	r1, [r4, #24]
 800d266:	4a72      	ldr	r2, [pc, #456]	; (800d430 <_scanf_i+0x1e8>)
 800d268:	2903      	cmp	r1, #3
 800d26a:	bf18      	it	ne
 800d26c:	461a      	movne	r2, r3
 800d26e:	68a3      	ldr	r3, [r4, #8]
 800d270:	9201      	str	r2, [sp, #4]
 800d272:	1e5a      	subs	r2, r3, #1
 800d274:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d278:	bf88      	it	hi
 800d27a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d27e:	4627      	mov	r7, r4
 800d280:	bf82      	ittt	hi
 800d282:	eb03 0905 	addhi.w	r9, r3, r5
 800d286:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d28a:	60a3      	strhi	r3, [r4, #8]
 800d28c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d290:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d294:	bf98      	it	ls
 800d296:	f04f 0900 	movls.w	r9, #0
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	463d      	mov	r5, r7
 800d29e:	f04f 0b00 	mov.w	fp, #0
 800d2a2:	6831      	ldr	r1, [r6, #0]
 800d2a4:	ab03      	add	r3, sp, #12
 800d2a6:	7809      	ldrb	r1, [r1, #0]
 800d2a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	f7f2 ffa7 	bl	8000200 <memchr>
 800d2b2:	b328      	cbz	r0, 800d300 <_scanf_i+0xb8>
 800d2b4:	f1bb 0f01 	cmp.w	fp, #1
 800d2b8:	d159      	bne.n	800d36e <_scanf_i+0x126>
 800d2ba:	6862      	ldr	r2, [r4, #4]
 800d2bc:	b92a      	cbnz	r2, 800d2ca <_scanf_i+0x82>
 800d2be:	6822      	ldr	r2, [r4, #0]
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2c6:	6063      	str	r3, [r4, #4]
 800d2c8:	6022      	str	r2, [r4, #0]
 800d2ca:	6822      	ldr	r2, [r4, #0]
 800d2cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d2d0:	6022      	str	r2, [r4, #0]
 800d2d2:	68a2      	ldr	r2, [r4, #8]
 800d2d4:	1e51      	subs	r1, r2, #1
 800d2d6:	60a1      	str	r1, [r4, #8]
 800d2d8:	b192      	cbz	r2, 800d300 <_scanf_i+0xb8>
 800d2da:	6832      	ldr	r2, [r6, #0]
 800d2dc:	1c51      	adds	r1, r2, #1
 800d2de:	6031      	str	r1, [r6, #0]
 800d2e0:	7812      	ldrb	r2, [r2, #0]
 800d2e2:	f805 2b01 	strb.w	r2, [r5], #1
 800d2e6:	6872      	ldr	r2, [r6, #4]
 800d2e8:	3a01      	subs	r2, #1
 800d2ea:	2a00      	cmp	r2, #0
 800d2ec:	6072      	str	r2, [r6, #4]
 800d2ee:	dc07      	bgt.n	800d300 <_scanf_i+0xb8>
 800d2f0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	4650      	mov	r0, sl
 800d2f8:	4790      	blx	r2
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	f040 8085 	bne.w	800d40a <_scanf_i+0x1c2>
 800d300:	f10b 0b01 	add.w	fp, fp, #1
 800d304:	f1bb 0f03 	cmp.w	fp, #3
 800d308:	d1cb      	bne.n	800d2a2 <_scanf_i+0x5a>
 800d30a:	6863      	ldr	r3, [r4, #4]
 800d30c:	b90b      	cbnz	r3, 800d312 <_scanf_i+0xca>
 800d30e:	230a      	movs	r3, #10
 800d310:	6063      	str	r3, [r4, #4]
 800d312:	6863      	ldr	r3, [r4, #4]
 800d314:	4947      	ldr	r1, [pc, #284]	; (800d434 <_scanf_i+0x1ec>)
 800d316:	6960      	ldr	r0, [r4, #20]
 800d318:	1ac9      	subs	r1, r1, r3
 800d31a:	f000 f8b9 	bl	800d490 <__sccl>
 800d31e:	f04f 0b00 	mov.w	fp, #0
 800d322:	68a3      	ldr	r3, [r4, #8]
 800d324:	6822      	ldr	r2, [r4, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d03d      	beq.n	800d3a6 <_scanf_i+0x15e>
 800d32a:	6831      	ldr	r1, [r6, #0]
 800d32c:	6960      	ldr	r0, [r4, #20]
 800d32e:	f891 c000 	ldrb.w	ip, [r1]
 800d332:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d336:	2800      	cmp	r0, #0
 800d338:	d035      	beq.n	800d3a6 <_scanf_i+0x15e>
 800d33a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d33e:	d124      	bne.n	800d38a <_scanf_i+0x142>
 800d340:	0510      	lsls	r0, r2, #20
 800d342:	d522      	bpl.n	800d38a <_scanf_i+0x142>
 800d344:	f10b 0b01 	add.w	fp, fp, #1
 800d348:	f1b9 0f00 	cmp.w	r9, #0
 800d34c:	d003      	beq.n	800d356 <_scanf_i+0x10e>
 800d34e:	3301      	adds	r3, #1
 800d350:	f109 39ff 	add.w	r9, r9, #4294967295
 800d354:	60a3      	str	r3, [r4, #8]
 800d356:	6873      	ldr	r3, [r6, #4]
 800d358:	3b01      	subs	r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	6073      	str	r3, [r6, #4]
 800d35e:	dd1b      	ble.n	800d398 <_scanf_i+0x150>
 800d360:	6833      	ldr	r3, [r6, #0]
 800d362:	3301      	adds	r3, #1
 800d364:	6033      	str	r3, [r6, #0]
 800d366:	68a3      	ldr	r3, [r4, #8]
 800d368:	3b01      	subs	r3, #1
 800d36a:	60a3      	str	r3, [r4, #8]
 800d36c:	e7d9      	b.n	800d322 <_scanf_i+0xda>
 800d36e:	f1bb 0f02 	cmp.w	fp, #2
 800d372:	d1ae      	bne.n	800d2d2 <_scanf_i+0x8a>
 800d374:	6822      	ldr	r2, [r4, #0]
 800d376:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d37a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d37e:	d1bf      	bne.n	800d300 <_scanf_i+0xb8>
 800d380:	2310      	movs	r3, #16
 800d382:	6063      	str	r3, [r4, #4]
 800d384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d388:	e7a2      	b.n	800d2d0 <_scanf_i+0x88>
 800d38a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d38e:	6022      	str	r2, [r4, #0]
 800d390:	780b      	ldrb	r3, [r1, #0]
 800d392:	f805 3b01 	strb.w	r3, [r5], #1
 800d396:	e7de      	b.n	800d356 <_scanf_i+0x10e>
 800d398:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d39c:	4631      	mov	r1, r6
 800d39e:	4650      	mov	r0, sl
 800d3a0:	4798      	blx	r3
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d0df      	beq.n	800d366 <_scanf_i+0x11e>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	05db      	lsls	r3, r3, #23
 800d3aa:	d50d      	bpl.n	800d3c8 <_scanf_i+0x180>
 800d3ac:	42bd      	cmp	r5, r7
 800d3ae:	d909      	bls.n	800d3c4 <_scanf_i+0x17c>
 800d3b0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d3b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	4650      	mov	r0, sl
 800d3bc:	4798      	blx	r3
 800d3be:	f105 39ff 	add.w	r9, r5, #4294967295
 800d3c2:	464d      	mov	r5, r9
 800d3c4:	42bd      	cmp	r5, r7
 800d3c6:	d02d      	beq.n	800d424 <_scanf_i+0x1dc>
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	f012 0210 	ands.w	r2, r2, #16
 800d3ce:	d113      	bne.n	800d3f8 <_scanf_i+0x1b0>
 800d3d0:	702a      	strb	r2, [r5, #0]
 800d3d2:	6863      	ldr	r3, [r4, #4]
 800d3d4:	9e01      	ldr	r6, [sp, #4]
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	4650      	mov	r0, sl
 800d3da:	47b0      	blx	r6
 800d3dc:	6821      	ldr	r1, [r4, #0]
 800d3de:	f8d8 3000 	ldr.w	r3, [r8]
 800d3e2:	f011 0f20 	tst.w	r1, #32
 800d3e6:	d013      	beq.n	800d410 <_scanf_i+0x1c8>
 800d3e8:	1d1a      	adds	r2, r3, #4
 800d3ea:	f8c8 2000 	str.w	r2, [r8]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6018      	str	r0, [r3, #0]
 800d3f2:	68e3      	ldr	r3, [r4, #12]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	60e3      	str	r3, [r4, #12]
 800d3f8:	1bed      	subs	r5, r5, r7
 800d3fa:	44ab      	add	fp, r5
 800d3fc:	6925      	ldr	r5, [r4, #16]
 800d3fe:	445d      	add	r5, fp
 800d400:	6125      	str	r5, [r4, #16]
 800d402:	2000      	movs	r0, #0
 800d404:	b007      	add	sp, #28
 800d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40a:	f04f 0b00 	mov.w	fp, #0
 800d40e:	e7ca      	b.n	800d3a6 <_scanf_i+0x15e>
 800d410:	1d1a      	adds	r2, r3, #4
 800d412:	f8c8 2000 	str.w	r2, [r8]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f011 0f01 	tst.w	r1, #1
 800d41c:	bf14      	ite	ne
 800d41e:	8018      	strhne	r0, [r3, #0]
 800d420:	6018      	streq	r0, [r3, #0]
 800d422:	e7e6      	b.n	800d3f2 <_scanf_i+0x1aa>
 800d424:	2001      	movs	r0, #1
 800d426:	e7ed      	b.n	800d404 <_scanf_i+0x1bc>
 800d428:	0800da20 	.word	0x0800da20
 800d42c:	0800d60d 	.word	0x0800d60d
 800d430:	0800a2d5 	.word	0x0800a2d5
 800d434:	0800def6 	.word	0x0800def6

0800d438 <_read_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	4d07      	ldr	r5, [pc, #28]	; (800d458 <_read_r+0x20>)
 800d43c:	4604      	mov	r4, r0
 800d43e:	4608      	mov	r0, r1
 800d440:	4611      	mov	r1, r2
 800d442:	2200      	movs	r2, #0
 800d444:	602a      	str	r2, [r5, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	f7f4 fa86 	bl	8001958 <_read>
 800d44c:	1c43      	adds	r3, r0, #1
 800d44e:	d102      	bne.n	800d456 <_read_r+0x1e>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	b103      	cbz	r3, 800d456 <_read_r+0x1e>
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	20000854 	.word	0x20000854
 800d45c:	00000000 	.word	0x00000000

0800d460 <nan>:
 800d460:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d468 <nan+0x8>
 800d464:	4770      	bx	lr
 800d466:	bf00      	nop
 800d468:	00000000 	.word	0x00000000
 800d46c:	7ff80000 	.word	0x7ff80000

0800d470 <_sbrk_r>:
 800d470:	b538      	push	{r3, r4, r5, lr}
 800d472:	4d06      	ldr	r5, [pc, #24]	; (800d48c <_sbrk_r+0x1c>)
 800d474:	2300      	movs	r3, #0
 800d476:	4604      	mov	r4, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	602b      	str	r3, [r5, #0]
 800d47c:	f7f4 fada 	bl	8001a34 <_sbrk>
 800d480:	1c43      	adds	r3, r0, #1
 800d482:	d102      	bne.n	800d48a <_sbrk_r+0x1a>
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	b103      	cbz	r3, 800d48a <_sbrk_r+0x1a>
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
 800d48c:	20000854 	.word	0x20000854

0800d490 <__sccl>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	780b      	ldrb	r3, [r1, #0]
 800d494:	4604      	mov	r4, r0
 800d496:	2b5e      	cmp	r3, #94	; 0x5e
 800d498:	bf0b      	itete	eq
 800d49a:	784b      	ldrbeq	r3, [r1, #1]
 800d49c:	1c48      	addne	r0, r1, #1
 800d49e:	1c88      	addeq	r0, r1, #2
 800d4a0:	2200      	movne	r2, #0
 800d4a2:	bf08      	it	eq
 800d4a4:	2201      	moveq	r2, #1
 800d4a6:	1e61      	subs	r1, r4, #1
 800d4a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d4ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d4b0:	42a9      	cmp	r1, r5
 800d4b2:	d1fb      	bne.n	800d4ac <__sccl+0x1c>
 800d4b4:	b90b      	cbnz	r3, 800d4ba <__sccl+0x2a>
 800d4b6:	3801      	subs	r0, #1
 800d4b8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ba:	f082 0201 	eor.w	r2, r2, #1
 800d4be:	54e2      	strb	r2, [r4, r3]
 800d4c0:	4605      	mov	r5, r0
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d4c8:	292d      	cmp	r1, #45	; 0x2d
 800d4ca:	d006      	beq.n	800d4da <__sccl+0x4a>
 800d4cc:	295d      	cmp	r1, #93	; 0x5d
 800d4ce:	d0f3      	beq.n	800d4b8 <__sccl+0x28>
 800d4d0:	b909      	cbnz	r1, 800d4d6 <__sccl+0x46>
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	e7f0      	b.n	800d4b8 <__sccl+0x28>
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	e7f1      	b.n	800d4be <__sccl+0x2e>
 800d4da:	786e      	ldrb	r6, [r5, #1]
 800d4dc:	2e5d      	cmp	r6, #93	; 0x5d
 800d4de:	d0fa      	beq.n	800d4d6 <__sccl+0x46>
 800d4e0:	42b3      	cmp	r3, r6
 800d4e2:	dcf8      	bgt.n	800d4d6 <__sccl+0x46>
 800d4e4:	3502      	adds	r5, #2
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	3101      	adds	r1, #1
 800d4ea:	428e      	cmp	r6, r1
 800d4ec:	5462      	strb	r2, [r4, r1]
 800d4ee:	dcfb      	bgt.n	800d4e8 <__sccl+0x58>
 800d4f0:	1af1      	subs	r1, r6, r3
 800d4f2:	3901      	subs	r1, #1
 800d4f4:	1c58      	adds	r0, r3, #1
 800d4f6:	42b3      	cmp	r3, r6
 800d4f8:	bfa8      	it	ge
 800d4fa:	2100      	movge	r1, #0
 800d4fc:	1843      	adds	r3, r0, r1
 800d4fe:	e7e0      	b.n	800d4c2 <__sccl+0x32>

0800d500 <strncmp>:
 800d500:	b510      	push	{r4, lr}
 800d502:	b17a      	cbz	r2, 800d524 <strncmp+0x24>
 800d504:	4603      	mov	r3, r0
 800d506:	3901      	subs	r1, #1
 800d508:	1884      	adds	r4, r0, r2
 800d50a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d50e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d512:	4290      	cmp	r0, r2
 800d514:	d101      	bne.n	800d51a <strncmp+0x1a>
 800d516:	42a3      	cmp	r3, r4
 800d518:	d101      	bne.n	800d51e <strncmp+0x1e>
 800d51a:	1a80      	subs	r0, r0, r2
 800d51c:	bd10      	pop	{r4, pc}
 800d51e:	2800      	cmp	r0, #0
 800d520:	d1f3      	bne.n	800d50a <strncmp+0xa>
 800d522:	e7fa      	b.n	800d51a <strncmp+0x1a>
 800d524:	4610      	mov	r0, r2
 800d526:	e7f9      	b.n	800d51c <strncmp+0x1c>

0800d528 <_strtoul_l.constprop.0>:
 800d528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d52c:	4f36      	ldr	r7, [pc, #216]	; (800d608 <_strtoul_l.constprop.0+0xe0>)
 800d52e:	4686      	mov	lr, r0
 800d530:	460d      	mov	r5, r1
 800d532:	4628      	mov	r0, r5
 800d534:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d538:	5de6      	ldrb	r6, [r4, r7]
 800d53a:	f016 0608 	ands.w	r6, r6, #8
 800d53e:	d1f8      	bne.n	800d532 <_strtoul_l.constprop.0+0xa>
 800d540:	2c2d      	cmp	r4, #45	; 0x2d
 800d542:	d12f      	bne.n	800d5a4 <_strtoul_l.constprop.0+0x7c>
 800d544:	782c      	ldrb	r4, [r5, #0]
 800d546:	2601      	movs	r6, #1
 800d548:	1c85      	adds	r5, r0, #2
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d057      	beq.n	800d5fe <_strtoul_l.constprop.0+0xd6>
 800d54e:	2b10      	cmp	r3, #16
 800d550:	d109      	bne.n	800d566 <_strtoul_l.constprop.0+0x3e>
 800d552:	2c30      	cmp	r4, #48	; 0x30
 800d554:	d107      	bne.n	800d566 <_strtoul_l.constprop.0+0x3e>
 800d556:	7828      	ldrb	r0, [r5, #0]
 800d558:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d55c:	2858      	cmp	r0, #88	; 0x58
 800d55e:	d149      	bne.n	800d5f4 <_strtoul_l.constprop.0+0xcc>
 800d560:	786c      	ldrb	r4, [r5, #1]
 800d562:	2310      	movs	r3, #16
 800d564:	3502      	adds	r5, #2
 800d566:	f04f 38ff 	mov.w	r8, #4294967295
 800d56a:	2700      	movs	r7, #0
 800d56c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d570:	fb03 f908 	mul.w	r9, r3, r8
 800d574:	ea6f 0909 	mvn.w	r9, r9
 800d578:	4638      	mov	r0, r7
 800d57a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d57e:	f1bc 0f09 	cmp.w	ip, #9
 800d582:	d814      	bhi.n	800d5ae <_strtoul_l.constprop.0+0x86>
 800d584:	4664      	mov	r4, ip
 800d586:	42a3      	cmp	r3, r4
 800d588:	dd22      	ble.n	800d5d0 <_strtoul_l.constprop.0+0xa8>
 800d58a:	2f00      	cmp	r7, #0
 800d58c:	db1d      	blt.n	800d5ca <_strtoul_l.constprop.0+0xa2>
 800d58e:	4580      	cmp	r8, r0
 800d590:	d31b      	bcc.n	800d5ca <_strtoul_l.constprop.0+0xa2>
 800d592:	d101      	bne.n	800d598 <_strtoul_l.constprop.0+0x70>
 800d594:	45a1      	cmp	r9, r4
 800d596:	db18      	blt.n	800d5ca <_strtoul_l.constprop.0+0xa2>
 800d598:	fb00 4003 	mla	r0, r0, r3, r4
 800d59c:	2701      	movs	r7, #1
 800d59e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5a2:	e7ea      	b.n	800d57a <_strtoul_l.constprop.0+0x52>
 800d5a4:	2c2b      	cmp	r4, #43	; 0x2b
 800d5a6:	bf04      	itt	eq
 800d5a8:	782c      	ldrbeq	r4, [r5, #0]
 800d5aa:	1c85      	addeq	r5, r0, #2
 800d5ac:	e7cd      	b.n	800d54a <_strtoul_l.constprop.0+0x22>
 800d5ae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d5b2:	f1bc 0f19 	cmp.w	ip, #25
 800d5b6:	d801      	bhi.n	800d5bc <_strtoul_l.constprop.0+0x94>
 800d5b8:	3c37      	subs	r4, #55	; 0x37
 800d5ba:	e7e4      	b.n	800d586 <_strtoul_l.constprop.0+0x5e>
 800d5bc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d5c0:	f1bc 0f19 	cmp.w	ip, #25
 800d5c4:	d804      	bhi.n	800d5d0 <_strtoul_l.constprop.0+0xa8>
 800d5c6:	3c57      	subs	r4, #87	; 0x57
 800d5c8:	e7dd      	b.n	800d586 <_strtoul_l.constprop.0+0x5e>
 800d5ca:	f04f 37ff 	mov.w	r7, #4294967295
 800d5ce:	e7e6      	b.n	800d59e <_strtoul_l.constprop.0+0x76>
 800d5d0:	2f00      	cmp	r7, #0
 800d5d2:	da07      	bge.n	800d5e4 <_strtoul_l.constprop.0+0xbc>
 800d5d4:	2322      	movs	r3, #34	; 0x22
 800d5d6:	f8ce 3000 	str.w	r3, [lr]
 800d5da:	f04f 30ff 	mov.w	r0, #4294967295
 800d5de:	b932      	cbnz	r2, 800d5ee <_strtoul_l.constprop.0+0xc6>
 800d5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5e4:	b106      	cbz	r6, 800d5e8 <_strtoul_l.constprop.0+0xc0>
 800d5e6:	4240      	negs	r0, r0
 800d5e8:	2a00      	cmp	r2, #0
 800d5ea:	d0f9      	beq.n	800d5e0 <_strtoul_l.constprop.0+0xb8>
 800d5ec:	b107      	cbz	r7, 800d5f0 <_strtoul_l.constprop.0+0xc8>
 800d5ee:	1e69      	subs	r1, r5, #1
 800d5f0:	6011      	str	r1, [r2, #0]
 800d5f2:	e7f5      	b.n	800d5e0 <_strtoul_l.constprop.0+0xb8>
 800d5f4:	2430      	movs	r4, #48	; 0x30
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1b5      	bne.n	800d566 <_strtoul_l.constprop.0+0x3e>
 800d5fa:	2308      	movs	r3, #8
 800d5fc:	e7b3      	b.n	800d566 <_strtoul_l.constprop.0+0x3e>
 800d5fe:	2c30      	cmp	r4, #48	; 0x30
 800d600:	d0a9      	beq.n	800d556 <_strtoul_l.constprop.0+0x2e>
 800d602:	230a      	movs	r3, #10
 800d604:	e7af      	b.n	800d566 <_strtoul_l.constprop.0+0x3e>
 800d606:	bf00      	nop
 800d608:	0800db01 	.word	0x0800db01

0800d60c <_strtoul_r>:
 800d60c:	f7ff bf8c 	b.w	800d528 <_strtoul_l.constprop.0>

0800d610 <__submore>:
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	460c      	mov	r4, r1
 800d616:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d61c:	4299      	cmp	r1, r3
 800d61e:	d11d      	bne.n	800d65c <__submore+0x4c>
 800d620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d624:	f7ff f8ba 	bl	800c79c <_malloc_r>
 800d628:	b918      	cbnz	r0, 800d632 <__submore+0x22>
 800d62a:	f04f 30ff 	mov.w	r0, #4294967295
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d636:	63a3      	str	r3, [r4, #56]	; 0x38
 800d638:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d63c:	6360      	str	r0, [r4, #52]	; 0x34
 800d63e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d642:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d646:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d64a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d64e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d652:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d656:	6020      	str	r0, [r4, #0]
 800d658:	2000      	movs	r0, #0
 800d65a:	e7e8      	b.n	800d62e <__submore+0x1e>
 800d65c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d65e:	0077      	lsls	r7, r6, #1
 800d660:	463a      	mov	r2, r7
 800d662:	f000 f895 	bl	800d790 <_realloc_r>
 800d666:	4605      	mov	r5, r0
 800d668:	2800      	cmp	r0, #0
 800d66a:	d0de      	beq.n	800d62a <__submore+0x1a>
 800d66c:	eb00 0806 	add.w	r8, r0, r6
 800d670:	4601      	mov	r1, r0
 800d672:	4632      	mov	r2, r6
 800d674:	4640      	mov	r0, r8
 800d676:	f7fa ffcd 	bl	8008614 <memcpy>
 800d67a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d67e:	f8c4 8000 	str.w	r8, [r4]
 800d682:	e7e9      	b.n	800d658 <__submore+0x48>

0800d684 <__ascii_wctomb>:
 800d684:	b149      	cbz	r1, 800d69a <__ascii_wctomb+0x16>
 800d686:	2aff      	cmp	r2, #255	; 0xff
 800d688:	bf85      	ittet	hi
 800d68a:	238a      	movhi	r3, #138	; 0x8a
 800d68c:	6003      	strhi	r3, [r0, #0]
 800d68e:	700a      	strbls	r2, [r1, #0]
 800d690:	f04f 30ff 	movhi.w	r0, #4294967295
 800d694:	bf98      	it	ls
 800d696:	2001      	movls	r0, #1
 800d698:	4770      	bx	lr
 800d69a:	4608      	mov	r0, r1
 800d69c:	4770      	bx	lr
	...

0800d6a0 <__assert_func>:
 800d6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6a2:	4614      	mov	r4, r2
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <__assert_func+0x2c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	68d8      	ldr	r0, [r3, #12]
 800d6ae:	b14c      	cbz	r4, 800d6c4 <__assert_func+0x24>
 800d6b0:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <__assert_func+0x30>)
 800d6b2:	9100      	str	r1, [sp, #0]
 800d6b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6b8:	4906      	ldr	r1, [pc, #24]	; (800d6d4 <__assert_func+0x34>)
 800d6ba:	462b      	mov	r3, r5
 800d6bc:	f000 f80e 	bl	800d6dc <fiprintf>
 800d6c0:	f000 f895 	bl	800d7ee <abort>
 800d6c4:	4b04      	ldr	r3, [pc, #16]	; (800d6d8 <__assert_func+0x38>)
 800d6c6:	461c      	mov	r4, r3
 800d6c8:	e7f3      	b.n	800d6b2 <__assert_func+0x12>
 800d6ca:	bf00      	nop
 800d6cc:	2000000c 	.word	0x2000000c
 800d6d0:	0800def8 	.word	0x0800def8
 800d6d4:	0800df05 	.word	0x0800df05
 800d6d8:	0800df33 	.word	0x0800df33

0800d6dc <fiprintf>:
 800d6dc:	b40e      	push	{r1, r2, r3}
 800d6de:	b503      	push	{r0, r1, lr}
 800d6e0:	4601      	mov	r1, r0
 800d6e2:	ab03      	add	r3, sp, #12
 800d6e4:	4805      	ldr	r0, [pc, #20]	; (800d6fc <fiprintf+0x20>)
 800d6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6ea:	6800      	ldr	r0, [r0, #0]
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	f7ff fc21 	bl	800cf34 <_vfiprintf_r>
 800d6f2:	b002      	add	sp, #8
 800d6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6f8:	b003      	add	sp, #12
 800d6fa:	4770      	bx	lr
 800d6fc:	2000000c 	.word	0x2000000c

0800d700 <_fstat_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d07      	ldr	r5, [pc, #28]	; (800d720 <_fstat_r+0x20>)
 800d704:	2300      	movs	r3, #0
 800d706:	4604      	mov	r4, r0
 800d708:	4608      	mov	r0, r1
 800d70a:	4611      	mov	r1, r2
 800d70c:	602b      	str	r3, [r5, #0]
 800d70e:	f7f4 f968 	bl	80019e2 <_fstat>
 800d712:	1c43      	adds	r3, r0, #1
 800d714:	d102      	bne.n	800d71c <_fstat_r+0x1c>
 800d716:	682b      	ldr	r3, [r5, #0]
 800d718:	b103      	cbz	r3, 800d71c <_fstat_r+0x1c>
 800d71a:	6023      	str	r3, [r4, #0]
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	bf00      	nop
 800d720:	20000854 	.word	0x20000854

0800d724 <_isatty_r>:
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	4d06      	ldr	r5, [pc, #24]	; (800d740 <_isatty_r+0x1c>)
 800d728:	2300      	movs	r3, #0
 800d72a:	4604      	mov	r4, r0
 800d72c:	4608      	mov	r0, r1
 800d72e:	602b      	str	r3, [r5, #0]
 800d730:	f7f4 f967 	bl	8001a02 <_isatty>
 800d734:	1c43      	adds	r3, r0, #1
 800d736:	d102      	bne.n	800d73e <_isatty_r+0x1a>
 800d738:	682b      	ldr	r3, [r5, #0]
 800d73a:	b103      	cbz	r3, 800d73e <_isatty_r+0x1a>
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	bd38      	pop	{r3, r4, r5, pc}
 800d740:	20000854 	.word	0x20000854

0800d744 <memmove>:
 800d744:	4288      	cmp	r0, r1
 800d746:	b510      	push	{r4, lr}
 800d748:	eb01 0402 	add.w	r4, r1, r2
 800d74c:	d902      	bls.n	800d754 <memmove+0x10>
 800d74e:	4284      	cmp	r4, r0
 800d750:	4623      	mov	r3, r4
 800d752:	d807      	bhi.n	800d764 <memmove+0x20>
 800d754:	1e43      	subs	r3, r0, #1
 800d756:	42a1      	cmp	r1, r4
 800d758:	d008      	beq.n	800d76c <memmove+0x28>
 800d75a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d75e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d762:	e7f8      	b.n	800d756 <memmove+0x12>
 800d764:	4402      	add	r2, r0
 800d766:	4601      	mov	r1, r0
 800d768:	428a      	cmp	r2, r1
 800d76a:	d100      	bne.n	800d76e <memmove+0x2a>
 800d76c:	bd10      	pop	{r4, pc}
 800d76e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d776:	e7f7      	b.n	800d768 <memmove+0x24>

0800d778 <__malloc_lock>:
 800d778:	4801      	ldr	r0, [pc, #4]	; (800d780 <__malloc_lock+0x8>)
 800d77a:	f7fe ba36 	b.w	800bbea <__retarget_lock_acquire_recursive>
 800d77e:	bf00      	nop
 800d780:	20000848 	.word	0x20000848

0800d784 <__malloc_unlock>:
 800d784:	4801      	ldr	r0, [pc, #4]	; (800d78c <__malloc_unlock+0x8>)
 800d786:	f7fe ba31 	b.w	800bbec <__retarget_lock_release_recursive>
 800d78a:	bf00      	nop
 800d78c:	20000848 	.word	0x20000848

0800d790 <_realloc_r>:
 800d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d794:	4680      	mov	r8, r0
 800d796:	4614      	mov	r4, r2
 800d798:	460e      	mov	r6, r1
 800d79a:	b921      	cbnz	r1, 800d7a6 <_realloc_r+0x16>
 800d79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a0:	4611      	mov	r1, r2
 800d7a2:	f7fe bffb 	b.w	800c79c <_malloc_r>
 800d7a6:	b92a      	cbnz	r2, 800d7b4 <_realloc_r+0x24>
 800d7a8:	f7fe ff8c 	bl	800c6c4 <_free_r>
 800d7ac:	4625      	mov	r5, r4
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b4:	f000 f822 	bl	800d7fc <_malloc_usable_size_r>
 800d7b8:	4284      	cmp	r4, r0
 800d7ba:	4607      	mov	r7, r0
 800d7bc:	d802      	bhi.n	800d7c4 <_realloc_r+0x34>
 800d7be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7c2:	d812      	bhi.n	800d7ea <_realloc_r+0x5a>
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	4640      	mov	r0, r8
 800d7c8:	f7fe ffe8 	bl	800c79c <_malloc_r>
 800d7cc:	4605      	mov	r5, r0
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d0ed      	beq.n	800d7ae <_realloc_r+0x1e>
 800d7d2:	42bc      	cmp	r4, r7
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	bf28      	it	cs
 800d7da:	463a      	movcs	r2, r7
 800d7dc:	f7fa ff1a 	bl	8008614 <memcpy>
 800d7e0:	4631      	mov	r1, r6
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	f7fe ff6e 	bl	800c6c4 <_free_r>
 800d7e8:	e7e1      	b.n	800d7ae <_realloc_r+0x1e>
 800d7ea:	4635      	mov	r5, r6
 800d7ec:	e7df      	b.n	800d7ae <_realloc_r+0x1e>

0800d7ee <abort>:
 800d7ee:	b508      	push	{r3, lr}
 800d7f0:	2006      	movs	r0, #6
 800d7f2:	f000 f833 	bl	800d85c <raise>
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	f7f4 f8a4 	bl	8001944 <_exit>

0800d7fc <_malloc_usable_size_r>:
 800d7fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d800:	1f18      	subs	r0, r3, #4
 800d802:	2b00      	cmp	r3, #0
 800d804:	bfbc      	itt	lt
 800d806:	580b      	ldrlt	r3, [r1, r0]
 800d808:	18c0      	addlt	r0, r0, r3
 800d80a:	4770      	bx	lr

0800d80c <_raise_r>:
 800d80c:	291f      	cmp	r1, #31
 800d80e:	b538      	push	{r3, r4, r5, lr}
 800d810:	4604      	mov	r4, r0
 800d812:	460d      	mov	r5, r1
 800d814:	d904      	bls.n	800d820 <_raise_r+0x14>
 800d816:	2316      	movs	r3, #22
 800d818:	6003      	str	r3, [r0, #0]
 800d81a:	f04f 30ff 	mov.w	r0, #4294967295
 800d81e:	bd38      	pop	{r3, r4, r5, pc}
 800d820:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d822:	b112      	cbz	r2, 800d82a <_raise_r+0x1e>
 800d824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d828:	b94b      	cbnz	r3, 800d83e <_raise_r+0x32>
 800d82a:	4620      	mov	r0, r4
 800d82c:	f000 f830 	bl	800d890 <_getpid_r>
 800d830:	462a      	mov	r2, r5
 800d832:	4601      	mov	r1, r0
 800d834:	4620      	mov	r0, r4
 800d836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d83a:	f000 b817 	b.w	800d86c <_kill_r>
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d00a      	beq.n	800d858 <_raise_r+0x4c>
 800d842:	1c59      	adds	r1, r3, #1
 800d844:	d103      	bne.n	800d84e <_raise_r+0x42>
 800d846:	2316      	movs	r3, #22
 800d848:	6003      	str	r3, [r0, #0]
 800d84a:	2001      	movs	r0, #1
 800d84c:	e7e7      	b.n	800d81e <_raise_r+0x12>
 800d84e:	2400      	movs	r4, #0
 800d850:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d854:	4628      	mov	r0, r5
 800d856:	4798      	blx	r3
 800d858:	2000      	movs	r0, #0
 800d85a:	e7e0      	b.n	800d81e <_raise_r+0x12>

0800d85c <raise>:
 800d85c:	4b02      	ldr	r3, [pc, #8]	; (800d868 <raise+0xc>)
 800d85e:	4601      	mov	r1, r0
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	f7ff bfd3 	b.w	800d80c <_raise_r>
 800d866:	bf00      	nop
 800d868:	2000000c 	.word	0x2000000c

0800d86c <_kill_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4d07      	ldr	r5, [pc, #28]	; (800d88c <_kill_r+0x20>)
 800d870:	2300      	movs	r3, #0
 800d872:	4604      	mov	r4, r0
 800d874:	4608      	mov	r0, r1
 800d876:	4611      	mov	r1, r2
 800d878:	602b      	str	r3, [r5, #0]
 800d87a:	f7f4 f853 	bl	8001924 <_kill>
 800d87e:	1c43      	adds	r3, r0, #1
 800d880:	d102      	bne.n	800d888 <_kill_r+0x1c>
 800d882:	682b      	ldr	r3, [r5, #0]
 800d884:	b103      	cbz	r3, 800d888 <_kill_r+0x1c>
 800d886:	6023      	str	r3, [r4, #0]
 800d888:	bd38      	pop	{r3, r4, r5, pc}
 800d88a:	bf00      	nop
 800d88c:	20000854 	.word	0x20000854

0800d890 <_getpid_r>:
 800d890:	f7f4 b840 	b.w	8001914 <_getpid>

0800d894 <_init>:
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d896:	bf00      	nop
 800d898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d89a:	bc08      	pop	{r3}
 800d89c:	469e      	mov	lr, r3
 800d89e:	4770      	bx	lr

0800d8a0 <_fini>:
 800d8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a2:	bf00      	nop
 800d8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a6:	bc08      	pop	{r3}
 800d8a8:	469e      	mov	lr, r3
 800d8aa:	4770      	bx	lr
